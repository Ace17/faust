# Makefile to produce supercollider plugins with Faust
# 	'foo.dsp' -> 'foo.so' and 'foo.sc'

system		:= $(shell uname -s)
dspsrc  	:= $(wildcard *.dsp)
scfiles		:= $(addprefix $(DEST), $(dspsrc:.dsp=.sc))
sofiles		:= $(addprefix $(DEST), $(dspsrc:.dsp=.so))

# Directory containing SuperCollider header files (Darwin case, no pkg-config assumed):
dir1 := /usr/local/include/SuperCollider
dir2 := /opt/local/include/SuperCollider
dir3 := $(SUPERCOLLIDER_HEADERS)

# There is a bug in GNU Make on Mac OS X (Xcode 4.0, Build 4A304a) which
# results in $(wildcard <specific_file>) being nil when <specific_file>
# exists.  As a result, we obtain and truth-test a list of files instead of one:
SCINC := $(if $(wildcard $(dir1)),$(dir1),)
SCINC := $(if $(wildcard $(dir2)),$(dir2),$(SCINC))
SCINC := $(if $(wildcard $(dir3)),$(dir3),$(SCINC))

###--------------------------------------------
### check what type of modules to build (MacOSX Darwin or Linux)
###
ifeq ($(system),Darwin)
MYCFLAGS 	:= $(CXXFLAGS) -I/usr/local/include -I/opt/local/include -I/usr/include -I/usr/include/machine -I$(SCINC)/common -I$(SCINC)/server -I$(SCINC)/plugin_interface
OBJT 		:= -bundle -undefined suppress -flat_namespace -funroll-loops -fomit-frame-pointer
SEDFLAG1	:=
SEDFLAG2	:=d
else
MYCFLAGS 	:= `pkg-config --cflags libscsynth` $(CXXFLAGS)
OBJT 		:= -shared
SEDFLAG1	:=s
SEDFLAG2	:=/i
endif

###--------------------------------------------
### Will use faust2sc to create the class file
### only if it is installed

helper:=$(shell whereis faust2sc)

ifeq ($(helper),faust2sc:)
	todo:=$(sofiles)
else
	todo:=$(sofiles) $(scfiles)
endif


###--------------------------------------------


all : $(todo)

# TEMPORARY WORKAROUND: We strip out the <name> metadata here because it
# is used for the SuperCollider class name and shared-object load module
# and fails to work when the name contains spaces:

$(DEST)%.cpp: %.dsp.noname
	faust -a $(ARCH) $< -o $@

$(DEST)%.so: $(DEST)%.cpp
	$(CXX) -I. $(MYCFLAGS) $(OPTFLAGS) $(OBJT) $< -o $@

$(DEST)%.sc : %.dsp.noname.xml
	faust2sc --prefix=Faust $< --output=$@

%.dsp.noname.xml: %.dsp.noname
	faust --xml -o /dev/null $<

%.dsp.noname: %.dsp
	sed -e '$(SEDFLAG1)/[ ^I]*declare[ ^I]*name[ ^I].*/$(SEDFLAG2)' $< >$@

# Make one case and leave intermediate make-products lying around:
test:
	sed -e '$(SEDFLAG1)/[ ^I]*declare[ ^I]*name[ ^I].*/$(SEDFLAG2)' harpsi.dsp > harpsi.dsp.noname
	faust --xml -o /dev/null harpsi.dsp.noname
	faust -a $(ARCH) harpsi.dsp.noname -o harpsi.cpp
	$(CXX) -I. $(MYCFLAGS) $(OPTFLAGS) $(OBJT) harpsi.cpp -o harpsi.so
	faust2sc --prefix=Faust harpsi.dsp.noname.xml --output=harpsi.sc
