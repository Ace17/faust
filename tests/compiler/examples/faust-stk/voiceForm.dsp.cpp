//-----------------------------------------------------
// name: "Voice Formant"
// author: "Romain Michon (rmichon@ccrma.stanford.edu)"
// copyright: "Romain Michon"
// version: "1.0"
//
// Code generated with Faust 0.9.70 (http://faust.grame.fr)
//-----------------------------------------------------
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif  

typedef long double quad;
/* link with : "" */
#include <math.h>
#include <phonemes.h>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline float faustpower(float x)          { return powf(x,N); } 
template <int N> inline double faustpower(double x)        { return pow(x,N); }
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <>   inline int faustpower<0>(int x)            { return 1; }
template <>   inline int faustpower<1>(int x)            { return x; }
#endif

#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	class SIG0 {
	  private:
		int 	fSamplingFreq;
		int 	iRec11[2];
	  public:
		int getNumInputs() 	{ return 0; }
		int getNumOutputs() 	{ return 1; }
		void init(int samplingFreq) {
			fSamplingFreq = samplingFreq;
			for (int i=0; i<2; i++) iRec11[i] = 0;
		}
		void fill (int count, float output[]) {
			for (int i=0; i<count; i++) {
				iRec11[0] = (1 + iRec11[1]);
				output[i] = sinf((9.587379924285257e-05f * float((iRec11[0] - 1))));
				// post processing
				iRec11[1] = iRec11[0];
			}
		}
	};


	FAUSTFLOAT 	fslider0;
	int 	iVec0[2];
	float 	fRec1[2];
	FAUSTFLOAT 	fbutton0;
	int 	iRec2[2];
	FAUSTFLOAT 	fslider1;
	int 	iConst0;
	FAUSTFLOAT 	fslider2;
	float 	fRec3[2];
	int 	iRec4[2];
	FAUSTFLOAT 	fentry0;
	int 	iRec6[2];
	FAUSTFLOAT 	fslider3;
	FAUSTFLOAT 	fslider4;
	float 	fRec7[2];
	float 	fRec8[2];
	float 	fConst1;
	float 	fConst2;
	float 	fConst3;
	float 	fConst4;
	float 	fConst5;
	float 	fConst6;
	float 	fConst7;
	static float 	ftbl0[65536];
	FAUSTFLOAT 	fslider5;
	float 	fConst8;
	float 	fConst9;
	float 	fRec12[2];
	int 	iRec13[2];
	int 	iRec14[2];
	FAUSTFLOAT 	fslider6;
	FAUSTFLOAT 	fslider7;
	FAUSTFLOAT 	fslider8;
	float 	fRec15[2];
	FAUSTFLOAT 	fslider9;
	FAUSTFLOAT 	fentry1;
	float 	fRec16[2];
	float 	fVec1[2];
	float 	fVec2[2];
	float 	fConst10;
	float 	fRec10[3];
	float 	fConst11;
	float 	fConst12;
	float 	fConst13;
	float 	fVec3[2];
	float 	fConst14;
	float 	fConst15;
	float 	fConst16;
	float 	fRec9[2];
	float 	fVec4[2];
	float 	fRec5[2];
	float 	fRec17[2];
	float 	fRec18[2];
	float 	fConst17;
	float 	fRec0[3];
	float 	fRec20[2];
	float 	fRec21[2];
	float 	fRec19[3];
	float 	fRec23[2];
	float 	fRec24[2];
	float 	fRec22[3];
	float 	fRec26[2];
	float 	fRec27[2];
	float 	fRec25[3];
	int 	IOTA;
	float 	fVec5[4096];
	FAUSTFLOAT 	fslider10;
	float 	fRec28[2];
	FAUSTFLOAT 	fslider11;
	float 	fConst18;
	float 	fConst19;
	float 	fConst20;
	float 	fConst21;
	float 	fRec40[2];
	FAUSTFLOAT 	fslider12;
	float 	fConst22;
	float 	fConst23;
	float 	fConst24;
	float 	fConst25;
	float 	fConst26;
	float 	fRec39[2];
	float 	fVec6[8192];
	float 	fConst27;
	int 	iConst28;
	float 	fVec7[4096];
	int 	iConst29;
	float 	fVec8[2048];
	int 	iConst30;
	float 	fRec37[2];
	float 	fRec44[2];
	float 	fConst31;
	float 	fConst32;
	float 	fConst33;
	float 	fConst34;
	float 	fRec43[2];
	float 	fVec9[8192];
	float 	fConst35;
	int 	iConst36;
	float 	fVec10[1024];
	int 	iConst37;
	float 	fRec41[2];
	float 	fRec48[2];
	float 	fConst38;
	float 	fConst39;
	float 	fConst40;
	float 	fConst41;
	float 	fRec47[2];
	float 	fVec11[8192];
	float 	fConst42;
	int 	iConst43;
	float 	fVec12[2048];
	int 	iConst44;
	float 	fRec45[2];
	float 	fRec52[2];
	float 	fConst45;
	float 	fConst46;
	float 	fConst47;
	float 	fConst48;
	float 	fRec51[2];
	float 	fVec13[8192];
	float 	fConst49;
	int 	iConst50;
	float 	fVec14[1024];
	int 	iConst51;
	float 	fRec49[2];
	float 	fRec56[2];
	float 	fConst52;
	float 	fConst53;
	float 	fConst54;
	float 	fConst55;
	float 	fRec55[2];
	float 	fVec15[16384];
	float 	fConst56;
	int 	iConst57;
	FAUSTFLOAT 	fslider13;
	float 	fConst58;
	float 	fVec16[4096];
	float 	fVec17[2048];
	int 	iConst59;
	float 	fRec53[2];
	float 	fRec60[2];
	float 	fConst60;
	float 	fConst61;
	float 	fConst62;
	float 	fConst63;
	float 	fRec59[2];
	float 	fVec18[8192];
	float 	fConst64;
	int 	iConst65;
	float 	fVec19[2048];
	int 	iConst66;
	float 	fRec57[2];
	float 	fRec64[2];
	float 	fConst67;
	float 	fConst68;
	float 	fConst69;
	float 	fConst70;
	float 	fRec63[2];
	float 	fVec20[16384];
	float 	fConst71;
	int 	iConst72;
	float 	fVec21[2048];
	int 	iConst73;
	float 	fRec61[2];
	float 	fRec68[2];
	float 	fConst74;
	float 	fConst75;
	float 	fConst76;
	float 	fConst77;
	float 	fRec67[2];
	float 	fVec22[16384];
	float 	fConst78;
	int 	iConst79;
	float 	fVec23[1024];
	int 	iConst80;
	float 	fRec65[2];
	float 	fRec29[3];
	float 	fRec30[3];
	float 	fRec31[3];
	float 	fRec32[3];
	float 	fRec33[3];
	float 	fRec34[3];
	float 	fRec35[3];
	float 	fRec36[3];
  public:
	static void metadata(Meta* m) 	{ 
		m->declare("name", "Voice Formant");
		m->declare("description", "Voice Formant Instrument");
		m->declare("author", "Romain Michon (rmichon@ccrma.stanford.edu)");
		m->declare("copyright", "Romain Michon");
		m->declare("version", "1.0");
		m->declare("licence", "STK-4.3");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/version", "1.0");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/version", "1.0");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("oscillator.lib/name", "Faust Oscillator Library");
		m->declare("oscillator.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("oscillator.lib/copyright", "Julius O. Smith III");
		m->declare("oscillator.lib/version", "1.11");
		m->declare("oscillator.lib/license", "STK-4.3");
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/version", "1.29");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("instrument.lib/name", "Faust-STK Tools Library");
		m->declare("instrument.lib/author", "Romain Michon (rmichon@ccrma.stanford.edu)");
		m->declare("instrument.lib/copyright", "Romain Michon");
		m->declare("instrument.lib/version", "1.0");
		m->declare("instrument.lib/licence", "STK-4.3");
		m->declare("effect.lib/name", "Faust Audio Effect Library");
		m->declare("effect.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/copyright", "Julius O. Smith III");
		m->declare("effect.lib/version", "1.33");
		m->declare("effect.lib/license", "STK-4.3");
		m->declare("effect.lib/exciter_name", "Harmonic Exciter");
		m->declare("effect.lib/exciter_author", "Priyanka Shekar (pshekar@ccrma.stanford.edu)");
		m->declare("effect.lib/exciter_copyright", "Copyright (c) 2013 Priyanka Shekar");
		m->declare("effect.lib/exciter_version", "1.0");
		m->declare("effect.lib/exciter_license", "MIT License (MIT)");
	}

	virtual int getNumInputs() 	{ return 0; }
	virtual int getNumOutputs() 	{ return 2; }
	static void classInit(int samplingFreq) {
		SIG0 sig0;
		sig0.init(samplingFreq);
		sig0.fill(65536,ftbl0);
	}
	virtual void instanceInit(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fslider0 = 4.0f;
		for (int i=0; i<2; i++) iVec0[i] = 0;
		for (int i=0; i<2; i++) fRec1[i] = 0;
		fbutton0 = 0.0;
		for (int i=0; i<2; i++) iRec2[i] = 0;
		fslider1 = 0.001f;
		iConst0 = min(192000, max(1, fSamplingFreq));
		fslider2 = 0.001f;
		for (int i=0; i<2; i++) fRec3[i] = 0;
		for (int i=0; i<2; i++) iRec4[i] = 0;
		fentry0 = 1.0f;
		for (int i=0; i<2; i++) iRec6[i] = 0;
		fslider3 = 0.01f;
		fslider4 = 0.01f;
		for (int i=0; i<2; i++) fRec7[i] = 0;
		for (int i=0; i<2; i++) fRec8[i] = 0;
		fConst1 = tanf((10367.255756846318f / float(iConst0)));
		fConst2 = faustpower<2>(fConst1);
		fConst3 = (2 * (1.412270893774204f - (1.0f / fConst2)));
		fConst4 = (1.0f / fConst1);
		fConst5 = (1.412270893774204f + ((fConst4 - 0.80263676416103f) / fConst1));
		fConst6 = (1.412270893774204f + ((0.80263676416103f + fConst4) / fConst1));
		fConst7 = (1.0f / fConst6);
		fslider5 = 6.0f;
		fConst8 = float(iConst0);
		fConst9 = (1.0f / fConst8);
		for (int i=0; i<2; i++) fRec12[i] = 0;
		for (int i=0; i<2; i++) iRec13[i] = 0;
		for (int i=0; i<2; i++) iRec14[i] = 0;
		fslider6 = 0.1f;
		fslider7 = 0.05f;
		fslider8 = 0.5f;
		for (int i=0; i<2; i++) fRec15[i] = 0;
		fslider9 = 0.05f;
		fentry1 = 4.4e+02f;
		for (int i=0; i<2; i++) fRec16[i] = 0;
		for (int i=0; i<2; i++) fVec1[i] = 0;
		for (int i=0; i<2; i++) fVec2[i] = 0;
		fConst10 = (0.5f * fConst8);
		for (int i=0; i<3; i++) fRec10[i] = 0;
		fConst11 = (0.019809144837789f / fConst2);
		fConst12 = (1.161516418982696f + fConst11);
		fConst13 = (2 * (1.161516418982696f - fConst11));
		for (int i=0; i<2; i++) fVec3[i] = 0;
		fConst14 = (0.822445908998816f + fConst4);
		fConst15 = (1.0f / (fConst14 * fConst6));
		fConst16 = (0 - ((0.822445908998816f - fConst4) / fConst14));
		for (int i=0; i<2; i++) fRec9[i] = 0;
		for (int i=0; i<2; i++) fVec4[i] = 0;
		for (int i=0; i<2; i++) fRec5[i] = 0;
		for (int i=0; i<2; i++) fRec17[i] = 0;
		for (int i=0; i<2; i++) fRec18[i] = 0;
		fConst17 = (6.283185307179586f / float(iConst0));
		for (int i=0; i<3; i++) fRec0[i] = 0;
		for (int i=0; i<2; i++) fRec20[i] = 0;
		for (int i=0; i<2; i++) fRec21[i] = 0;
		for (int i=0; i<3; i++) fRec19[i] = 0;
		for (int i=0; i<2; i++) fRec23[i] = 0;
		for (int i=0; i<2; i++) fRec24[i] = 0;
		for (int i=0; i<3; i++) fRec22[i] = 0;
		for (int i=0; i<2; i++) fRec26[i] = 0;
		for (int i=0; i<2; i++) fRec27[i] = 0;
		for (int i=0; i<3; i++) fRec25[i] = 0;
		IOTA = 0;
		for (int i=0; i<4096; i++) fVec5[i] = 0;
		fslider10 = 0.137f;
		for (int i=0; i<2; i++) fRec28[i] = 0;
		fslider11 = 0.6f;
		fConst18 = (1.0f / tanf((628.3185307179587f / float(iConst0))));
		fConst19 = (1 + fConst18);
		fConst20 = (1.0f / fConst19);
		fConst21 = (0 - ((1 - fConst18) / fConst19));
		for (int i=0; i<2; i++) fRec40[i] = 0;
		fslider12 = 0.72f;
		fConst22 = floorf((0.5f + (0.174713f * iConst0)));
		fConst23 = ((0 - (6.907755278982138f * fConst22)) / float(iConst0));
		fConst24 = (0.5f * fConst23);
		fConst25 = (0.3333333333333333f * fConst23);
		fConst26 = cosf((37699.11184307752f / fConst8));
		for (int i=0; i<2; i++) fRec39[i] = 0;
		for (int i=0; i<8192; i++) fVec6[i] = 0;
		fConst27 = floorf((0.5f + (0.022904f * iConst0)));
		iConst28 = int((int((fConst22 - fConst27)) & 8191));
		for (int i=0; i<4096; i++) fVec7[i] = 0;
		iConst29 = int((int((0.02f * iConst0)) & 8191));
		for (int i=0; i<2048; i++) fVec8[i] = 0;
		iConst30 = int((int((fConst27 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec37[i] = 0;
		for (int i=0; i<2; i++) fRec44[i] = 0;
		fConst31 = floorf((0.5f + (0.153129f * iConst0)));
		fConst32 = ((0 - (6.907755278982138f * fConst31)) / float(iConst0));
		fConst33 = (0.5f * fConst32);
		fConst34 = (0.3333333333333333f * fConst32);
		for (int i=0; i<2; i++) fRec43[i] = 0;
		for (int i=0; i<8192; i++) fVec9[i] = 0;
		fConst35 = floorf((0.5f + (0.020346f * iConst0)));
		iConst36 = int((int((fConst31 - fConst35)) & 8191));
		for (int i=0; i<1024; i++) fVec10[i] = 0;
		iConst37 = int((int((fConst35 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec41[i] = 0;
		for (int i=0; i<2; i++) fRec48[i] = 0;
		fConst38 = floorf((0.5f + (0.127837f * iConst0)));
		fConst39 = ((0 - (6.907755278982138f * fConst38)) / float(iConst0));
		fConst40 = (0.5f * fConst39);
		fConst41 = (0.3333333333333333f * fConst39);
		for (int i=0; i<2; i++) fRec47[i] = 0;
		for (int i=0; i<8192; i++) fVec11[i] = 0;
		fConst42 = floorf((0.5f + (0.031604f * iConst0)));
		iConst43 = int((int((fConst38 - fConst42)) & 8191));
		for (int i=0; i<2048; i++) fVec12[i] = 0;
		iConst44 = int((int((fConst42 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec45[i] = 0;
		for (int i=0; i<2; i++) fRec52[i] = 0;
		fConst45 = floorf((0.5f + (0.125f * iConst0)));
		fConst46 = ((0 - (6.907755278982138f * fConst45)) / float(iConst0));
		fConst47 = (0.5f * fConst46);
		fConst48 = (0.3333333333333333f * fConst46);
		for (int i=0; i<2; i++) fRec51[i] = 0;
		for (int i=0; i<8192; i++) fVec13[i] = 0;
		fConst49 = floorf((0.5f + (0.013458f * iConst0)));
		iConst50 = int((int((fConst45 - fConst49)) & 8191));
		for (int i=0; i<1024; i++) fVec14[i] = 0;
		iConst51 = int((int((fConst49 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec49[i] = 0;
		for (int i=0; i<2; i++) fRec56[i] = 0;
		fConst52 = floorf((0.5f + (0.210389f * iConst0)));
		fConst53 = ((0 - (6.907755278982138f * fConst52)) / float(iConst0));
		fConst54 = (0.5f * fConst53);
		fConst55 = (0.3333333333333333f * fConst53);
		for (int i=0; i<2; i++) fRec55[i] = 0;
		for (int i=0; i<16384; i++) fVec15[i] = 0;
		fConst56 = floorf((0.5f + (0.024421f * iConst0)));
		iConst57 = int((int((fConst52 - fConst56)) & 16383));
		fslider13 = 0.5f;
		fConst58 = (0.5f * iConst0);
		for (int i=0; i<4096; i++) fVec16[i] = 0;
		for (int i=0; i<2048; i++) fVec17[i] = 0;
		iConst59 = int((int((fConst56 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec53[i] = 0;
		for (int i=0; i<2; i++) fRec60[i] = 0;
		fConst60 = floorf((0.5f + (0.192303f * iConst0)));
		fConst61 = ((0 - (6.907755278982138f * fConst60)) / float(iConst0));
		fConst62 = (0.5f * fConst61);
		fConst63 = (0.3333333333333333f * fConst61);
		for (int i=0; i<2; i++) fRec59[i] = 0;
		for (int i=0; i<8192; i++) fVec18[i] = 0;
		fConst64 = floorf((0.5f + (0.029291f * iConst0)));
		iConst65 = int((int((fConst60 - fConst64)) & 8191));
		for (int i=0; i<2048; i++) fVec19[i] = 0;
		iConst66 = int((int((fConst64 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec57[i] = 0;
		for (int i=0; i<2; i++) fRec64[i] = 0;
		fConst67 = floorf((0.5f + (0.256891f * iConst0)));
		fConst68 = ((0 - (6.907755278982138f * fConst67)) / float(iConst0));
		fConst69 = (0.5f * fConst68);
		fConst70 = (0.3333333333333333f * fConst68);
		for (int i=0; i<2; i++) fRec63[i] = 0;
		for (int i=0; i<16384; i++) fVec20[i] = 0;
		fConst71 = floorf((0.5f + (0.027333f * iConst0)));
		iConst72 = int((int((fConst67 - fConst71)) & 16383));
		for (int i=0; i<2048; i++) fVec21[i] = 0;
		iConst73 = int((int((fConst71 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec61[i] = 0;
		for (int i=0; i<2; i++) fRec68[i] = 0;
		fConst74 = floorf((0.5f + (0.219991f * iConst0)));
		fConst75 = ((0 - (6.907755278982138f * fConst74)) / float(iConst0));
		fConst76 = (0.5f * fConst75);
		fConst77 = (0.3333333333333333f * fConst75);
		for (int i=0; i<2; i++) fRec67[i] = 0;
		for (int i=0; i<16384; i++) fVec22[i] = 0;
		fConst78 = floorf((0.5f + (0.019123f * iConst0)));
		iConst79 = int((int((fConst74 - fConst78)) & 16383));
		for (int i=0; i<1024; i++) fVec23[i] = 0;
		iConst80 = int((int((fConst78 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec65[i] = 0;
		for (int i=0; i<3; i++) fRec29[i] = 0;
		for (int i=0; i<3; i++) fRec30[i] = 0;
		for (int i=0; i<3; i++) fRec31[i] = 0;
		for (int i=0; i<3; i++) fRec32[i] = 0;
		for (int i=0; i<3; i++) fRec33[i] = 0;
		for (int i=0; i<3; i++) fRec34[i] = 0;
		for (int i=0; i<3; i++) fRec35[i] = 0;
		for (int i=0; i<3; i++) fRec36[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void buildUserInterface(UI* interface) {
		interface->openVerticalBox("0x00");
		interface->openHorizontalBox("Basic_Parameters");
		interface->declare(&fentry1, "1", "");
		interface->declare(&fentry1, "tooltip", "Tone frequency");
		interface->declare(&fentry1, "unit", "Hz");
		interface->addNumEntry("freq", &fentry1, 4.4e+02f, 2e+01f, 2e+04f, 1.0f);
		interface->declare(&fentry0, "1", "");
		interface->declare(&fentry0, "tooltip", "Gain (value between 0 and 1)");
		interface->addNumEntry("gain", &fentry0, 1.0f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fbutton0, "1", "");
		interface->declare(&fbutton0, "tooltip", "noteOn = 1, noteOff = 0");
		interface->addButton("gate", &fbutton0);
		interface->closeBox();
		interface->openHorizontalBox("Envelopes_and_Vibrato");
		interface->openVerticalBox("Envelope_Parameters");
		interface->declare(&fslider2, "4", "");
		interface->declare(&fslider2, "tooltip", "Noised sounds attack duration");
		interface->declare(&fslider2, "unit", "s");
		interface->addHorizontalSlider("Noised_Attack", &fslider2, 0.001f, 0.0f, 2.0f, 0.001f);
		interface->declare(&fslider1, "4", "");
		interface->declare(&fslider1, "tooltip", "Noised sounds release duration");
		interface->declare(&fslider1, "unit", "s");
		interface->addHorizontalSlider("Noised_Release", &fslider1, 0.001f, 0.0f, 2.0f, 0.001f);
		interface->declare(&fslider4, "4", "");
		interface->declare(&fslider4, "tooltip", "Voiced sounds attack duration");
		interface->declare(&fslider4, "unit", "s");
		interface->addHorizontalSlider("Voiced_Attack", &fslider4, 0.01f, 0.0f, 2.0f, 0.01f);
		interface->declare(&fslider3, "4", "");
		interface->declare(&fslider3, "tooltip", "Voiced sounds release duration");
		interface->declare(&fslider3, "unit", "s");
		interface->addHorizontalSlider("Voiced_Release", &fslider3, 0.01f, 0.0f, 2.0f, 0.01f);
		interface->closeBox();
		interface->openVerticalBox("Vibrato_Parameters");
		interface->declare(&fslider8, "3", "");
		interface->declare(&fslider8, "tooltip", "Vibrato attack duration");
		interface->declare(&fslider8, "unit", "s");
		interface->addHorizontalSlider("Vibrato_Attack", &fslider8, 0.5f, 0.0f, 2.0f, 0.01f);
		interface->declare(&fslider7, "3", "");
		interface->declare(&fslider7, "tooltip", "Vibrato silence duration before attack");
		interface->declare(&fslider7, "unit", "s");
		interface->addHorizontalSlider("Vibrato_Begin", &fslider7, 0.05f, 0.0f, 2.0f, 0.01f);
		interface->declare(&fslider5, "3", "");
		interface->declare(&fslider5, "unit", "Hz");
		interface->addHorizontalSlider("Vibrato_Freq", &fslider5, 6.0f, 1.0f, 15.0f, 0.1f);
		interface->declare(&fslider9, "3", "");
		interface->declare(&fslider9, "tooltip", "A value between 0 and 1");
		interface->addHorizontalSlider("Vibrato_Gain", &fslider9, 0.05f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fslider6, "3", "");
		interface->declare(&fslider6, "tooltip", "Vibrato release duration");
		interface->declare(&fslider6, "unit", "s");
		interface->addHorizontalSlider("Vibrato_Release", &fslider6, 0.1f, 0.0f, 2.0f, 0.01f);
		interface->closeBox();
		interface->closeBox();
		interface->openVerticalBox("Physical_Parameters");
		interface->declare(&fslider0, "2", "");
		interface->declare(&fslider0, "tooltip", "0->eee, 1->ihh, 2->ehh, 3->aaa, 4->ahh, 5->aww, 6->ohh, 7->uhh, 8->uuu, 9->ooo, 10->rrr, 11->lll, 12->mmm, 13->nnn, 14->nng, 15->ngg, 16->fff, 17->sss, 18->thh, 19->shh, 20->xxx, 21->hee, 22->hoo, 23->hah, 24->bbb, 25->ddd, 26->jjj, 27->ggg, 28->vvv, 29->zzz, 30->thz, 31->zhh");
		interface->addHorizontalSlider("Phoneme", &fslider0, 4.0f, 0.0f, 31.0f, 1.0f);
		interface->closeBox();
		interface->openVerticalBox("Reverb");
		interface->addHorizontalSlider("reverbGain", &fslider10, 0.137f, 0.0f, 1.0f, 0.01f);
		interface->addHorizontalSlider("roomSize", &fslider12, 0.72f, 0.01f, 2.0f, 0.01f);
		interface->closeBox();
		interface->openVerticalBox("Spat");
		interface->addHorizontalSlider("pan angle", &fslider11, 0.6f, 0.0f, 1.0f, 0.01f);
		interface->addHorizontalSlider("spatial width", &fslider13, 0.5f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0 = float(fslider0);
		float 	fSlow1 = (0.0010000000000000009f * loadPhonemeGains(fSlow0, 1));
		float 	fSlow2 = float(fbutton0);
		int 	iSlow3 = (fSlow2 > 0);
		int 	iSlow4 = (fSlow2 <= 0);
		float 	fSlow5 = float(fslider1);
		float 	fSlow6 = (1 - (1.0f / powf(1e+05f,(1.0f / ((fSlow5 == 0.0f) + (iConst0 * fSlow5))))));
		float 	fSlow7 = float(fslider2);
		float 	fSlow8 = (1.0f / ((fSlow7 == 0.0f) + (iConst0 * fSlow7)));
		float 	fSlow9 = (0.2f * float(fentry0));
		float 	fSlow10 = (fSlow9 - 0.97f);
		float 	fSlow11 = float(fslider3);
		float 	fSlow12 = (1 - (1.0f / powf(1e+05f,(1.0f / ((fSlow11 == 0.0f) + (iConst0 * fSlow11))))));
		float 	fSlow13 = float(fslider4);
		float 	fSlow14 = (1.0f / ((fSlow13 == 0.0f) + (iConst0 * fSlow13)));
		float 	fSlow15 = (0.0010000000000000009f * loadPhonemeGains(fSlow0, 0));
		float 	fSlow16 = (fConst9 * float(fslider5));
		float 	fSlow17 = float(fslider6);
		float 	fSlow18 = (1 - (1.0f / powf(1e+05f,(1.0f / ((fSlow17 == 0.0f) + (iConst0 * fSlow17))))));
		float 	fSlow19 = float(fslider7);
		float 	fSlow20 = (iConst0 * fSlow19);
		float 	fSlow21 = ((fSlow19 == 0.0f) + fSlow20);
		float 	fSlow22 = float(fslider8);
		float 	fSlow23 = (1.0f / ((fSlow22 == 0.0f) + (iConst0 * fSlow22)));
		float 	fSlow24 = (100 * float(fslider9));
		float 	fSlow25 = float(fentry1);
		float 	fSlow26 = (fSlow9 + 0.030000000000000027f);
		float 	fSlow27 = (0.0010000000000000009f * powf(10,(0.05f * loadPhonemeParameters(fSlow0, 1, 2))));
		float 	fSlow28 = loadPhonemeParameters(fSlow0, 1, 1);
		float 	fSlow29 = faustpower<2>(fSlow28);
		float 	fSlow30 = (0.0010000000000000009f * loadPhonemeParameters(fSlow0, 1, 0));
		float 	fSlow31 = (0 - (2 * fSlow28));
		float 	fSlow32 = (0.5f * fSlow29);
		float 	fSlow33 = (fSlow32 - 0.5f);
		float 	fSlow34 = (0.0010000000000000009f * powf(10,(0.05f * loadPhonemeParameters(fSlow0, 2, 2))));
		float 	fSlow35 = loadPhonemeParameters(fSlow0, 2, 1);
		float 	fSlow36 = faustpower<2>(fSlow35);
		float 	fSlow37 = (0.0010000000000000009f * loadPhonemeParameters(fSlow0, 2, 0));
		float 	fSlow38 = (0 - (2 * fSlow35));
		float 	fSlow39 = (0.5f * fSlow36);
		float 	fSlow40 = (0.5f - fSlow39);
		float 	fSlow41 = (0.0010000000000000009f * powf(10,(0.05f * loadPhonemeParameters(fSlow0, 0, 2))));
		float 	fSlow42 = loadPhonemeParameters(fSlow0, 0, 1);
		float 	fSlow43 = faustpower<2>(fSlow42);
		float 	fSlow44 = (0.0010000000000000009f * loadPhonemeParameters(fSlow0, 0, 0));
		float 	fSlow45 = (0 - (2 * fSlow42));
		float 	fSlow46 = (0.5f * fSlow43);
		float 	fSlow47 = (fSlow46 - 0.5f);
		float 	fSlow48 = (0.5f - fSlow46);
		float 	fSlow49 = (fSlow39 - 0.5f);
		float 	fSlow50 = (0.5f - fSlow32);
		float 	fSlow51 = (0.0010000000000000009f * powf(10,(0.05f * loadPhonemeParameters(fSlow0, 3, 2))));
		float 	fSlow52 = loadPhonemeParameters(fSlow0, 3, 1);
		float 	fSlow53 = faustpower<2>(fSlow52);
		float 	fSlow54 = (0.0010000000000000009f * loadPhonemeParameters(fSlow0, 3, 0));
		float 	fSlow55 = (0 - (2 * fSlow52));
		float 	fSlow56 = (0.5f * fSlow53);
		float 	fSlow57 = (0.5f - fSlow56);
		float 	fSlow58 = (fSlow56 - 0.5f);
		float 	fSlow59 = (0.0010000000000000009f * float(fslider10));
		float 	fSlow60 = float(fslider11);
		float 	fSlow61 = (1.0f - fSlow60);
		float 	fSlow62 = float(fslider12);
		float 	fSlow63 = expf((fConst24 / fSlow62));
		float 	fSlow64 = ((expf((fConst25 / fSlow62)) / fSlow63) - 1);
		float 	fSlow65 = faustpower<2>(fSlow63);
		float 	fSlow66 = (1.0f - fSlow65);
		float 	fSlow67 = (1.0f - (fConst26 * fSlow65));
		float 	fSlow68 = (fSlow67 / fSlow66);
		float 	fSlow69 = sqrtf(max((float)0, ((faustpower<2>(fSlow67) / faustpower<2>(fSlow66)) - 1.0f)));
		float 	fSlow70 = (fSlow63 * ((1.0f + fSlow69) - fSlow68));
		float 	fSlow71 = (fSlow68 - fSlow69);
		float 	fSlow72 = expf((fConst33 / fSlow62));
		float 	fSlow73 = ((expf((fConst34 / fSlow62)) / fSlow72) - 1);
		float 	fSlow74 = faustpower<2>(fSlow72);
		float 	fSlow75 = (1.0f - fSlow74);
		float 	fSlow76 = (1.0f - (fConst26 * fSlow74));
		float 	fSlow77 = (fSlow76 / fSlow75);
		float 	fSlow78 = sqrtf(max((float)0, ((faustpower<2>(fSlow76) / faustpower<2>(fSlow75)) - 1.0f)));
		float 	fSlow79 = (fSlow72 * ((1.0f + fSlow78) - fSlow77));
		float 	fSlow80 = (fSlow77 - fSlow78);
		float 	fSlow81 = expf((fConst40 / fSlow62));
		float 	fSlow82 = ((expf((fConst41 / fSlow62)) / fSlow81) - 1);
		float 	fSlow83 = faustpower<2>(fSlow81);
		float 	fSlow84 = (1.0f - fSlow83);
		float 	fSlow85 = (1.0f - (fConst26 * fSlow83));
		float 	fSlow86 = (fSlow85 / fSlow84);
		float 	fSlow87 = sqrtf(max((float)0, ((faustpower<2>(fSlow85) / faustpower<2>(fSlow84)) - 1.0f)));
		float 	fSlow88 = (fSlow81 * ((1.0f + fSlow87) - fSlow86));
		float 	fSlow89 = (fSlow86 - fSlow87);
		float 	fSlow90 = expf((fConst47 / fSlow62));
		float 	fSlow91 = ((expf((fConst48 / fSlow62)) / fSlow90) - 1);
		float 	fSlow92 = faustpower<2>(fSlow90);
		float 	fSlow93 = (1.0f - fSlow92);
		float 	fSlow94 = (1.0f - (fConst26 * fSlow92));
		float 	fSlow95 = (fSlow94 / fSlow93);
		float 	fSlow96 = sqrtf(max((float)0, ((faustpower<2>(fSlow94) / faustpower<2>(fSlow93)) - 1.0f)));
		float 	fSlow97 = (fSlow90 * ((1.0f + fSlow96) - fSlow95));
		float 	fSlow98 = (fSlow95 - fSlow96);
		float 	fSlow99 = expf((fConst54 / fSlow62));
		float 	fSlow100 = ((expf((fConst55 / fSlow62)) / fSlow99) - 1);
		float 	fSlow101 = faustpower<2>(fSlow99);
		float 	fSlow102 = (1.0f - fSlow101);
		float 	fSlow103 = (1.0f - (fConst26 * fSlow101));
		float 	fSlow104 = (fSlow103 / fSlow102);
		float 	fSlow105 = sqrtf(max((float)0, ((faustpower<2>(fSlow103) / faustpower<2>(fSlow102)) - 1.0f)));
		float 	fSlow106 = (fSlow99 * ((1.0f + fSlow105) - fSlow104));
		float 	fSlow107 = (fSlow104 - fSlow105);
		int 	iSlow108 = int((int((fConst58 * (float(fslider13) / fSlow25))) & 4095));
		float 	fSlow109 = expf((fConst62 / fSlow62));
		float 	fSlow110 = ((expf((fConst63 / fSlow62)) / fSlow109) - 1);
		float 	fSlow111 = faustpower<2>(fSlow109);
		float 	fSlow112 = (1.0f - fSlow111);
		float 	fSlow113 = (1.0f - (fConst26 * fSlow111));
		float 	fSlow114 = (fSlow113 / fSlow112);
		float 	fSlow115 = sqrtf(max((float)0, ((faustpower<2>(fSlow113) / faustpower<2>(fSlow112)) - 1.0f)));
		float 	fSlow116 = (fSlow109 * ((1.0f + fSlow115) - fSlow114));
		float 	fSlow117 = (fSlow114 - fSlow115);
		float 	fSlow118 = expf((fConst69 / fSlow62));
		float 	fSlow119 = ((expf((fConst70 / fSlow62)) / fSlow118) - 1);
		float 	fSlow120 = faustpower<2>(fSlow118);
		float 	fSlow121 = (1.0f - fSlow120);
		float 	fSlow122 = (1.0f - (fConst26 * fSlow120));
		float 	fSlow123 = (fSlow122 / fSlow121);
		float 	fSlow124 = sqrtf(max((float)0, ((faustpower<2>(fSlow122) / faustpower<2>(fSlow121)) - 1.0f)));
		float 	fSlow125 = (fSlow118 * ((1.0f + fSlow124) - fSlow123));
		float 	fSlow126 = (fSlow123 - fSlow124);
		float 	fSlow127 = expf((fConst76 / fSlow62));
		float 	fSlow128 = ((expf((fConst77 / fSlow62)) / fSlow127) - 1);
		float 	fSlow129 = faustpower<2>(fSlow127);
		float 	fSlow130 = (1.0f - fSlow129);
		float 	fSlow131 = (1.0f - (fConst26 * fSlow129));
		float 	fSlow132 = (fSlow131 / fSlow130);
		float 	fSlow133 = sqrtf(max((float)0, ((faustpower<2>(fSlow131) / faustpower<2>(fSlow130)) - 1.0f)));
		float 	fSlow134 = (fSlow127 * ((1.0f + fSlow133) - fSlow132));
		float 	fSlow135 = (fSlow132 - fSlow133);
		FAUSTFLOAT* output0 = output[0];
		FAUSTFLOAT* output1 = output[1];
		for (int i=0; i<count; i++) {
			iVec0[0] = 1;
			fRec1[0] = ((0.999f * fRec1[1]) + fSlow1);
			iRec2[0] = (iSlow3 & (iRec2[1] | (fRec3[1] >= 1)));
			int iTemp0 = (iSlow4 & (fRec3[1] > 0));
			fRec3[0] = (((fSlow8 * (((iRec2[1] == 0) & iSlow3) & (fRec3[1] < 1))) + (fRec3[1] * (1 - (fSlow6 * iTemp0)))) * ((iTemp0 == 0) | (fRec3[1] >= 1e-06f)));
			iRec4[0] = (12345 + (1103515245 * iRec4[1]));
			iRec6[0] = (iSlow3 & (iRec6[1] | (fRec7[1] >= 1)));
			int iTemp1 = (iSlow4 & (fRec7[1] > 0));
			fRec7[0] = (((fSlow14 * (((iRec6[1] == 0) & iSlow3) & (fRec7[1] < 1))) + (fRec7[1] * (1 - (fSlow12 * iTemp1)))) * ((iTemp1 == 0) | (fRec7[1] >= 1e-06f)));
			fRec8[0] = ((0.999f * fRec8[1]) + fSlow15);
			float fTemp2 = (fSlow16 + fRec12[1]);
			fRec12[0] = (fTemp2 - floorf(fTemp2));
			iRec13[0] = (iSlow3 & (iRec13[1] | (fRec15[1] >= 1)));
			iRec14[0] = (iSlow3 * (1 + iRec14[1]));
			int iTemp3 = (iSlow4 & (fRec15[1] > 0));
			fRec15[0] = (((fSlow23 * (((((iRec13[1] == 0) & iSlow3) & (fRec15[1] < 1)) & (iRec14[1] > fSlow20)) * (1 - (iRec14[1] < fSlow21)))) + (fRec15[1] * (1 - (fSlow18 * iTemp3)))) * ((iTemp3 == 0) | (fRec15[1] >= 1e-06f)));
			float fTemp4 = float((fSlow25 + (fSlow24 * (fRec15[0] * ftbl0[int((65536.0f * fRec12[0]))]))));
			fRec16[0] = fmodf((fRec16[1] + (fConst9 * fTemp4)),1);
			float fTemp5 = faustpower<2>(((2 * fRec16[0]) - 1));
			fVec1[0] = fTemp5;
			float fTemp6 = ((iVec0[1] * (fVec1[0] - fVec1[1])) / fTemp4);
			fVec2[0] = fTemp6;
			fRec10[0] = ((1 + (fConst10 * ((0.25f * fVec2[1]) - (0.25f * fVec2[0])))) - (iVec0[1] + (fConst7 * ((fConst5 * fRec10[2]) + (fConst3 * fRec10[1])))));
			float fTemp7 = (((fConst12 * fRec10[0]) + (fConst13 * fRec10[1])) + (fConst12 * fRec10[2]));
			fVec3[0] = fTemp7;
			fRec9[0] = ((fConst16 * fRec9[1]) + (fConst15 * (fVec3[0] + fVec3[1])));
			float fTemp8 = ((fRec9[0] * fRec8[0]) * fRec7[0]);
			fVec4[0] = fTemp8;
			fRec5[0] = ((fSlow26 * ((0.47368421052631576f * fVec4[1]) + (0.5263157894736842f * fVec4[0]))) - (fSlow10 * fRec5[1]));
			float fTemp9 = (fRec5[0] + (4.656612875245797e-10f * ((iRec4[0] * fRec3[0]) * fRec1[0])));
			fRec17[0] = ((0.999f * fRec17[1]) + fSlow27);
			fRec18[0] = (fSlow30 + (0.999f * fRec18[1]));
			fRec0[0] = (0 - (((fSlow31 * (cosf((fConst17 * fRec18[0])) * fRec0[1])) + (fSlow29 * fRec0[2])) - (fRec17[0] * fTemp9)));
			fRec20[0] = ((0.999f * fRec20[1]) + fSlow34);
			fRec21[0] = (fSlow37 + (0.999f * fRec21[1]));
			fRec19[0] = (0 - (((fSlow38 * (cosf((fConst17 * fRec21[0])) * fRec19[1])) + (fSlow36 * fRec19[2])) - (fRec20[0] * fTemp9)));
			fRec23[0] = ((0.999f * fRec23[1]) + fSlow41);
			fRec24[0] = (fSlow44 + (0.999f * fRec24[1]));
			fRec22[0] = (0 - (((fSlow45 * (cosf((fConst17 * fRec24[0])) * fRec22[1])) + (fSlow43 * fRec22[2])) - (fRec23[0] * fTemp9)));
			fRec26[0] = ((0.999f * fRec26[1]) + fSlow51);
			fRec27[0] = (fSlow54 + (0.999f * fRec27[1]));
			fRec25[0] = (0 - (((fSlow55 * (cosf((fConst17 * fRec27[0])) * fRec25[1])) + (fSlow53 * fRec25[2])) - (fRec26[0] * fTemp9)));
			float fTemp10 = ((fSlow58 * fRec25[2]) + ((fSlow57 * fRec25[0]) + ((fSlow50 * fRec0[0]) + (((fSlow49 * fRec19[2]) + (((fSlow48 * fRec22[0]) + (fSlow47 * fRec22[2])) + (fSlow40 * fRec19[0]))) + (fSlow33 * fRec0[2])))));
			fVec5[IOTA&4095] = fTemp10;
			fRec28[0] = ((0.999f * fRec28[1]) + fSlow59);
			float fTemp11 = (1 - fRec28[0]);
			fRec40[0] = ((fConst21 * fRec40[1]) + (fConst20 * (fRec33[1] + fRec33[2])));
			fRec39[0] = ((fSlow71 * fRec39[1]) + (fSlow70 * (fRec33[1] + (fSlow64 * fRec40[0]))));
			fVec6[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec39[0]));
			fVec7[IOTA&4095] = (fSlow61 * (fRec28[0] * fVec5[IOTA&4095]));
			float fTemp12 = (0.3f * fVec7[(IOTA-iConst29)&4095]);
			float fTemp13 = ((fTemp12 + fVec6[(IOTA-iConst28)&8191]) - (0.6f * fRec37[1]));
			fVec8[IOTA&2047] = fTemp13;
			fRec37[0] = fVec8[(IOTA-iConst30)&2047];
			float 	fRec38 = (0.6f * fVec8[IOTA&2047]);
			fRec44[0] = ((fConst21 * fRec44[1]) + (fConst20 * (fRec29[1] + fRec29[2])));
			fRec43[0] = ((fSlow80 * fRec43[1]) + (fSlow79 * (fRec29[1] + (fSlow73 * fRec44[0]))));
			fVec9[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec43[0]));
			float fTemp14 = ((fVec9[(IOTA-iConst36)&8191] + fTemp12) - (0.6f * fRec41[1]));
			fVec10[IOTA&1023] = fTemp14;
			fRec41[0] = fVec10[(IOTA-iConst37)&1023];
			float 	fRec42 = (0.6f * fVec10[IOTA&1023]);
			float fTemp15 = (fRec42 + fRec38);
			fRec48[0] = ((fConst21 * fRec48[1]) + (fConst20 * (fRec31[1] + fRec31[2])));
			fRec47[0] = ((fSlow89 * fRec47[1]) + (fSlow88 * (fRec31[1] + (fSlow82 * fRec48[0]))));
			fVec11[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec47[0]));
			float fTemp16 = (fVec11[(IOTA-iConst43)&8191] - (fTemp12 + (0.6f * fRec45[1])));
			fVec12[IOTA&2047] = fTemp16;
			fRec45[0] = fVec12[(IOTA-iConst44)&2047];
			float 	fRec46 = (0.6f * fVec12[IOTA&2047]);
			fRec52[0] = ((fConst21 * fRec52[1]) + (fConst20 * (fRec35[1] + fRec35[2])));
			fRec51[0] = ((fSlow98 * fRec51[1]) + (fSlow97 * (fRec35[1] + (fSlow91 * fRec52[0]))));
			fVec13[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec51[0]));
			float fTemp17 = (fVec13[(IOTA-iConst50)&8191] - (fTemp12 + (0.6f * fRec49[1])));
			fVec14[IOTA&1023] = fTemp17;
			fRec49[0] = fVec14[(IOTA-iConst51)&1023];
			float 	fRec50 = (0.6f * fVec14[IOTA&1023]);
			float fTemp18 = (fRec50 + (fRec46 + fTemp15));
			fRec56[0] = ((fConst21 * fRec56[1]) + (fConst20 * (fRec30[1] + fRec30[2])));
			fRec55[0] = ((fSlow107 * fRec55[1]) + (fSlow106 * (fRec30[1] + (fSlow100 * fRec56[0]))));
			fVec15[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec55[0]));
			float fTemp19 = fVec5[(IOTA-iSlow108)&4095];
			fVec16[IOTA&4095] = (fSlow60 * (fRec28[0] * fTemp19));
			float fTemp20 = (0.3f * fVec16[(IOTA-iConst29)&4095]);
			float fTemp21 = (fTemp20 + ((0.6f * fRec53[1]) + fVec15[(IOTA-iConst57)&16383]));
			fVec17[IOTA&2047] = fTemp21;
			fRec53[0] = fVec17[(IOTA-iConst59)&2047];
			float 	fRec54 = (0 - (0.6f * fVec17[IOTA&2047]));
			fRec60[0] = ((fConst21 * fRec60[1]) + (fConst20 * (fRec34[1] + fRec34[2])));
			fRec59[0] = ((fSlow117 * fRec59[1]) + (fSlow116 * (fRec34[1] + (fSlow110 * fRec60[0]))));
			fVec18[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec59[0]));
			float fTemp22 = (fVec18[(IOTA-iConst65)&8191] + (fTemp20 + (0.6f * fRec57[1])));
			fVec19[IOTA&2047] = fTemp22;
			fRec57[0] = fVec19[(IOTA-iConst66)&2047];
			float 	fRec58 = (0 - (0.6f * fVec19[IOTA&2047]));
			fRec64[0] = ((fConst21 * fRec64[1]) + (fConst20 * (fRec32[1] + fRec32[2])));
			fRec63[0] = ((fSlow126 * fRec63[1]) + (fSlow125 * (fRec32[1] + (fSlow119 * fRec64[0]))));
			fVec20[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec63[0]));
			float fTemp23 = (((0.6f * fRec61[1]) + fVec20[(IOTA-iConst72)&16383]) - fTemp20);
			fVec21[IOTA&2047] = fTemp23;
			fRec61[0] = fVec21[(IOTA-iConst73)&2047];
			float 	fRec62 = (0 - (0.6f * fVec21[IOTA&2047]));
			fRec68[0] = ((fConst21 * fRec68[1]) + (fConst20 * (fRec36[1] + fRec36[2])));
			fRec67[0] = ((fSlow135 * fRec67[1]) + (fSlow134 * (fRec36[1] + (fSlow128 * fRec68[0]))));
			fVec22[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec67[0]));
			float fTemp24 = (((0.6f * fRec65[1]) + fVec22[(IOTA-iConst79)&16383]) - fTemp20);
			fVec23[IOTA&1023] = fTemp24;
			fRec65[0] = fVec23[(IOTA-iConst80)&1023];
			float 	fRec66 = (0 - (0.6f * fVec23[IOTA&1023]));
			fRec29[0] = (fRec65[1] + (fRec61[1] + (fRec57[1] + (fRec53[1] + (fRec49[1] + (fRec45[1] + (fRec37[1] + (fRec41[1] + (fRec66 + (fRec62 + (fRec58 + (fRec54 + fTemp18))))))))))));
			fRec30[0] = (0 - ((fRec65[1] + (fRec61[1] + (fRec57[1] + (fRec53[1] + (fRec66 + (fRec62 + (fRec54 + fRec58))))))) - (fRec49[1] + (fRec45[1] + (fRec37[1] + (fRec41[1] + fTemp18))))));
			float fTemp25 = (fRec46 + fRec50);
			fRec31[0] = (0 - ((fRec65[1] + (fRec61[1] + (fRec49[1] + (fRec45[1] + (fRec66 + (fRec62 + fTemp25)))))) - (fRec57[1] + (fRec53[1] + (fRec37[1] + (fRec41[1] + (fRec58 + (fRec54 + fTemp15))))))));
			fRec32[0] = (0 - ((fRec57[1] + (fRec53[1] + (fRec49[1] + (fRec45[1] + (fRec58 + (fRec54 + fTemp25)))))) - (fRec65[1] + (fRec61[1] + (fRec37[1] + (fRec41[1] + (fRec66 + (fRec62 + fTemp15))))))));
			float fTemp26 = (fRec42 + fRec46);
			float fTemp27 = (fRec38 + fRec50);
			fRec33[0] = (0 - ((fRec65[1] + (fRec57[1] + (fRec49[1] + (fRec37[1] + (fRec66 + (fRec58 + fTemp27)))))) - (fRec61[1] + (fRec53[1] + (fRec45[1] + (fRec41[1] + (fRec62 + (fRec54 + fTemp26))))))));
			fRec34[0] = (0 - ((fRec61[1] + (fRec53[1] + (fRec49[1] + (fRec37[1] + (fRec62 + (fRec54 + fTemp27)))))) - (fRec65[1] + (fRec57[1] + (fRec45[1] + (fRec41[1] + (fRec66 + (fRec58 + fTemp26))))))));
			float fTemp28 = (fRec42 + fRec50);
			float fTemp29 = (fRec38 + fRec46);
			fRec35[0] = (0 - ((fRec61[1] + (fRec57[1] + (fRec45[1] + (fRec37[1] + (fRec62 + (fRec58 + fTemp29)))))) - (fRec65[1] + (fRec53[1] + (fRec49[1] + (fRec41[1] + (fRec66 + (fRec54 + fTemp28))))))));
			fRec36[0] = (0 - ((fRec65[1] + (fRec53[1] + (fRec45[1] + (fRec37[1] + (fRec66 + (fRec54 + fTemp29)))))) - (fRec61[1] + (fRec57[1] + (fRec49[1] + (fRec41[1] + (fRec62 + (fRec58 + fTemp28))))))));
			output0[i] = (FAUSTFLOAT)((0.37f * (fRec30[0] + fRec31[0])) + (fSlow61 * (fTemp11 * fVec5[IOTA&4095])));
			output1[i] = (FAUSTFLOAT)((0.37f * (fRec30[0] - fRec31[0])) + (fSlow60 * (fTemp11 * fTemp19)));
			// post processing
			fRec36[2] = fRec36[1]; fRec36[1] = fRec36[0];
			fRec35[2] = fRec35[1]; fRec35[1] = fRec35[0];
			fRec34[2] = fRec34[1]; fRec34[1] = fRec34[0];
			fRec33[2] = fRec33[1]; fRec33[1] = fRec33[0];
			fRec32[2] = fRec32[1]; fRec32[1] = fRec32[0];
			fRec31[2] = fRec31[1]; fRec31[1] = fRec31[0];
			fRec30[2] = fRec30[1]; fRec30[1] = fRec30[0];
			fRec29[2] = fRec29[1]; fRec29[1] = fRec29[0];
			fRec65[1] = fRec65[0];
			fRec67[1] = fRec67[0];
			fRec68[1] = fRec68[0];
			fRec61[1] = fRec61[0];
			fRec63[1] = fRec63[0];
			fRec64[1] = fRec64[0];
			fRec57[1] = fRec57[0];
			fRec59[1] = fRec59[0];
			fRec60[1] = fRec60[0];
			fRec53[1] = fRec53[0];
			fRec55[1] = fRec55[0];
			fRec56[1] = fRec56[0];
			fRec49[1] = fRec49[0];
			fRec51[1] = fRec51[0];
			fRec52[1] = fRec52[0];
			fRec45[1] = fRec45[0];
			fRec47[1] = fRec47[0];
			fRec48[1] = fRec48[0];
			fRec41[1] = fRec41[0];
			fRec43[1] = fRec43[0];
			fRec44[1] = fRec44[0];
			fRec37[1] = fRec37[0];
			fRec39[1] = fRec39[0];
			fRec40[1] = fRec40[0];
			fRec28[1] = fRec28[0];
			IOTA = IOTA+1;
			fRec25[2] = fRec25[1]; fRec25[1] = fRec25[0];
			fRec27[1] = fRec27[0];
			fRec26[1] = fRec26[0];
			fRec22[2] = fRec22[1]; fRec22[1] = fRec22[0];
			fRec24[1] = fRec24[0];
			fRec23[1] = fRec23[0];
			fRec19[2] = fRec19[1]; fRec19[1] = fRec19[0];
			fRec21[1] = fRec21[0];
			fRec20[1] = fRec20[0];
			fRec0[2] = fRec0[1]; fRec0[1] = fRec0[0];
			fRec18[1] = fRec18[0];
			fRec17[1] = fRec17[0];
			fRec5[1] = fRec5[0];
			fVec4[1] = fVec4[0];
			fRec9[1] = fRec9[0];
			fVec3[1] = fVec3[0];
			fRec10[2] = fRec10[1]; fRec10[1] = fRec10[0];
			fVec2[1] = fVec2[0];
			fVec1[1] = fVec1[0];
			fRec16[1] = fRec16[0];
			fRec15[1] = fRec15[0];
			iRec14[1] = iRec14[0];
			iRec13[1] = iRec13[0];
			fRec12[1] = fRec12[0];
			fRec8[1] = fRec8[0];
			fRec7[1] = fRec7[0];
			iRec6[1] = iRec6[0];
			iRec4[1] = iRec4[0];
			fRec3[1] = fRec3[0];
			iRec2[1] = iRec2[0];
			fRec1[1] = fRec1[0];
			iVec0[1] = iVec0[0];
		}
	}
};


float 	mydsp::ftbl0[65536];
