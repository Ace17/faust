//-----------------------------------------------------
// name: "Tuned Bar"
// author: "Romain Michon"
// copyright: "Romain Michon (rmichon@ccrma.stanford.edu)"
// version: "1.0"
//
// Code generated with Faust 0.9.70 (http://faust.grame.fr)
//-----------------------------------------------------
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif  

typedef long double quad;
/* link with  */
#include <math.h>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline float faustpower(float x)          { return powf(x,N); } 
template <int N> inline double faustpower(double x)        { return pow(x,N); }
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <>   inline int faustpower<0>(int x)            { return 1; }
template <>   inline int faustpower<1>(int x)            { return x; }
#endif

#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	class SIG0 {
	  private:
		int 	fSamplingFreq;
		int 	iRec21[2];
	  public:
		int getNumInputs() 	{ return 0; }
		int getNumOutputs() 	{ return 1; }
		void init(int samplingFreq) {
			fSamplingFreq = samplingFreq;
			for (int i=0; i<2; i++) iRec21[i] = 0;
		}
		void fill (int count, float output[]) {
			for (int i=0; i<count; i++) {
				iRec21[0] = (1 + iRec21[1]);
				output[i] = sinf((9.587379924285257e-05f * float((iRec21[0] - 1))));
				// post processing
				iRec21[1] = iRec21[0];
			}
		}
	};


	FAUSTFLOAT 	fbutton0;
	int 	iRec6[2];
	int 	iConst0;
	float 	fConst1;
	float 	fConst2;
	float 	fConst3;
	float 	fRec7[2];
	FAUSTFLOAT 	fentry0;
	FAUSTFLOAT 	fslider0;
	FAUSTFLOAT 	fslider1;
	FAUSTFLOAT 	fslider2;
	FAUSTFLOAT 	fentry1;
	int 	IOTA;
	float 	fVec0[4096];
	FAUSTFLOAT 	fentry2;
	float 	fConst4;
	float 	fConst5;
	float 	fConst6;
	float 	fConst7;
	float 	fRec5[3];
	float 	fConst8;
	float 	fConst9;
	float 	fConst10;
	float 	fRec4[2];
	float 	fRec0[2];
	float 	fVec1[4096];
	float 	fConst11;
	float 	fConst12;
	float 	fRec9[3];
	float 	fRec8[2];
	float 	fRec1[2];
	float 	fVec2[1024];
	float 	fConst13;
	float 	fConst14;
	float 	fRec11[3];
	float 	fRec10[2];
	float 	fRec2[2];
	float 	fVec3[1024];
	float 	fConst15;
	float 	fConst16;
	float 	fRec13[3];
	float 	fRec12[2];
	float 	fRec3[2];
	float 	fVec4[2];
	FAUSTFLOAT 	fslider3;
	float 	fRec14[2];
	FAUSTFLOAT 	fentry3;
	float 	fRec20[2];
	float 	fRec19[2];
	float 	fRec18[2];
	float 	fRec17[2];
	float 	fRec16[2];
	float 	fRec15[2];
	static float 	ftbl0[65536];
	FAUSTFLOAT 	fslider4;
	float 	fRec23[2];
	float 	fConst17;
	float 	fConst18;
	float 	fRec22[2];
	float 	fRec29[2];
	float 	fRec28[2];
	float 	fRec27[2];
	float 	fRec26[2];
	float 	fRec25[2];
	float 	fRec24[2];
	float 	fVec5[4096];
	FAUSTFLOAT 	fslider5;
	float 	fRec30[2];
	FAUSTFLOAT 	fslider6;
	float 	fConst19;
	float 	fConst20;
	float 	fConst21;
	float 	fConst22;
	float 	fRec42[2];
	FAUSTFLOAT 	fslider7;
	float 	fConst23;
	float 	fConst24;
	float 	fConst25;
	float 	fConst26;
	float 	fConst27;
	float 	fRec41[2];
	float 	fVec6[8192];
	float 	fConst28;
	int 	iConst29;
	float 	fVec7[4096];
	int 	iConst30;
	float 	fVec8[2048];
	int 	iConst31;
	float 	fRec39[2];
	float 	fRec46[2];
	float 	fConst32;
	float 	fConst33;
	float 	fConst34;
	float 	fConst35;
	float 	fRec45[2];
	float 	fVec9[8192];
	float 	fConst36;
	int 	iConst37;
	float 	fVec10[1024];
	int 	iConst38;
	float 	fRec43[2];
	float 	fRec50[2];
	float 	fConst39;
	float 	fConst40;
	float 	fConst41;
	float 	fConst42;
	float 	fRec49[2];
	float 	fVec11[8192];
	float 	fConst43;
	int 	iConst44;
	float 	fVec12[2048];
	int 	iConst45;
	float 	fRec47[2];
	float 	fRec54[2];
	float 	fConst46;
	float 	fConst47;
	float 	fConst48;
	float 	fConst49;
	float 	fRec53[2];
	float 	fVec13[8192];
	float 	fConst50;
	int 	iConst51;
	float 	fVec14[1024];
	int 	iConst52;
	float 	fRec51[2];
	float 	fRec58[2];
	float 	fConst53;
	float 	fConst54;
	float 	fConst55;
	float 	fConst56;
	float 	fRec57[2];
	float 	fVec15[16384];
	float 	fConst57;
	int 	iConst58;
	FAUSTFLOAT 	fslider8;
	float 	fConst59;
	float 	fVec16[4096];
	float 	fVec17[2048];
	int 	iConst60;
	float 	fRec55[2];
	float 	fRec62[2];
	float 	fConst61;
	float 	fConst62;
	float 	fConst63;
	float 	fConst64;
	float 	fRec61[2];
	float 	fVec18[8192];
	float 	fConst65;
	int 	iConst66;
	float 	fVec19[2048];
	int 	iConst67;
	float 	fRec59[2];
	float 	fRec66[2];
	float 	fConst68;
	float 	fConst69;
	float 	fConst70;
	float 	fConst71;
	float 	fRec65[2];
	float 	fVec20[16384];
	float 	fConst72;
	int 	iConst73;
	float 	fVec21[2048];
	int 	iConst74;
	float 	fRec63[2];
	float 	fRec70[2];
	float 	fConst75;
	float 	fConst76;
	float 	fConst77;
	float 	fConst78;
	float 	fRec69[2];
	float 	fVec22[16384];
	float 	fConst79;
	int 	iConst80;
	float 	fVec23[1024];
	int 	iConst81;
	float 	fRec67[2];
	float 	fRec31[3];
	float 	fRec32[3];
	float 	fRec33[3];
	float 	fRec34[3];
	float 	fRec35[3];
	float 	fRec36[3];
	float 	fRec37[3];
	float 	fRec38[3];
  public:
	static void metadata(Meta* m) 	{ 
		m->declare("name", "Tuned Bar");
		m->declare("description", "Nonlinear Banded Waveguide Models");
		m->declare("author", "Romain Michon");
		m->declare("copyright", "Romain Michon (rmichon@ccrma.stanford.edu)");
		m->declare("version", "1.0");
		m->declare("licence", "STK-4.3");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/version", "1.0");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/version", "1.0");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("instrument.lib/name", "Faust-STK Tools Library");
		m->declare("instrument.lib/author", "Romain Michon (rmichon@ccrma.stanford.edu)");
		m->declare("instrument.lib/copyright", "Romain Michon");
		m->declare("instrument.lib/version", "1.0");
		m->declare("instrument.lib/licence", "STK-4.3");
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/version", "1.29");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("effect.lib/name", "Faust Audio Effect Library");
		m->declare("effect.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/copyright", "Julius O. Smith III");
		m->declare("effect.lib/version", "1.33");
		m->declare("effect.lib/license", "STK-4.3");
		m->declare("effect.lib/exciter_name", "Harmonic Exciter");
		m->declare("effect.lib/exciter_author", "Priyanka Shekar (pshekar@ccrma.stanford.edu)");
		m->declare("effect.lib/exciter_copyright", "Copyright (c) 2013 Priyanka Shekar");
		m->declare("effect.lib/exciter_version", "1.0");
		m->declare("effect.lib/exciter_license", "MIT License (MIT)");
	}

	virtual int getNumInputs() 	{ return 0; }
	virtual int getNumOutputs() 	{ return 2; }
	static void classInit(int samplingFreq) {
		SIG0 sig0;
		sig0.init(samplingFreq);
		sig0.fill(65536,ftbl0);
	}
	virtual void instanceInit(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fbutton0 = 0.0;
		for (int i=0; i<2; i++) iRec6[i] = 0;
		iConst0 = min(192000, max(1, fSamplingFreq));
		fConst1 = (1 - (1.0f / powf(9e+04f,(1e+02f / float(iConst0)))));
		fConst2 = (1 - powf(9e+01f,(2e+02f / float(iConst0))));
		fConst3 = (5e+01f / float(iConst0));
		for (int i=0; i<2; i++) fRec7[i] = 0;
		fentry0 = 0.8f;
		fslider0 = 1.0f;
		fslider1 = 0.0f;
		fslider2 = 0.2f;
		fentry1 = 0.0f;
		IOTA = 0;
		for (int i=0; i<4096; i++) fVec0[i] = 0;
		fentry2 = 4.4e+02f;
		fConst4 = (1 - (100.53096491487338f / float(iConst0)));
		fConst5 = faustpower<2>(fConst4);
		fConst6 = (6.283185307179586f / float(iConst0));
		fConst7 = (0 - (2 * fConst4));
		for (int i=0; i<3; i++) fRec5[i] = 0;
		fConst8 = (0.5f * fConst5);
		fConst9 = (fConst8 - 0.5f);
		fConst10 = (0.5f - fConst8);
		for (int i=0; i<2; i++) fRec4[i] = 0;
		for (int i=0; i<2; i++) fRec0[i] = 0;
		for (int i=0; i<4096; i++) fVec1[i] = 0;
		fConst11 = (0.24876617314156196f * iConst0);
		fConst12 = (25.257394234239797f / float(iConst0));
		for (int i=0; i<3; i++) fRec9[i] = 0;
		for (int i=0; i<2; i++) fRec8[i] = 0;
		for (int i=0; i<2; i++) fRec1[i] = 0;
		for (int i=0; i<1024; i++) fVec2[i] = 0;
		fConst13 = (0.09329664832431377f * iConst0);
		fConst14 = (67.34631329239448f / float(iConst0));
		for (int i=0; i<3; i++) fRec11[i] = 0;
		for (int i=0; i<2; i++) fRec10[i] = 0;
		for (int i=0; i<2; i++) fRec2[i] = 0;
		for (int i=0; i<1024; i++) fVec3[i] = 0;
		fConst15 = (0.055341246290904644f * iConst0);
		fConst16 = (113.53530555043228f / float(iConst0));
		for (int i=0; i<3; i++) fRec13[i] = 0;
		for (int i=0; i<2; i++) fRec12[i] = 0;
		for (int i=0; i<2; i++) fRec3[i] = 0;
		for (int i=0; i<2; i++) fVec4[i] = 0;
		fslider3 = 0.0f;
		for (int i=0; i<2; i++) fRec14[i] = 0;
		fentry3 = 0.0f;
		for (int i=0; i<2; i++) fRec20[i] = 0;
		for (int i=0; i<2; i++) fRec19[i] = 0;
		for (int i=0; i<2; i++) fRec18[i] = 0;
		for (int i=0; i<2; i++) fRec17[i] = 0;
		for (int i=0; i<2; i++) fRec16[i] = 0;
		for (int i=0; i<2; i++) fRec15[i] = 0;
		fslider4 = 2.2e+02f;
		for (int i=0; i<2; i++) fRec23[i] = 0;
		fConst17 = float(iConst0);
		fConst18 = (1.0f / fConst17);
		for (int i=0; i<2; i++) fRec22[i] = 0;
		for (int i=0; i<2; i++) fRec29[i] = 0;
		for (int i=0; i<2; i++) fRec28[i] = 0;
		for (int i=0; i<2; i++) fRec27[i] = 0;
		for (int i=0; i<2; i++) fRec26[i] = 0;
		for (int i=0; i<2; i++) fRec25[i] = 0;
		for (int i=0; i<2; i++) fRec24[i] = 0;
		for (int i=0; i<4096; i++) fVec5[i] = 0;
		fslider5 = 0.137f;
		for (int i=0; i<2; i++) fRec30[i] = 0;
		fslider6 = 0.6f;
		fConst19 = (1.0f / tanf((628.3185307179587f / float(iConst0))));
		fConst20 = (1 + fConst19);
		fConst21 = (1.0f / fConst20);
		fConst22 = (0 - ((1 - fConst19) / fConst20));
		for (int i=0; i<2; i++) fRec42[i] = 0;
		fslider7 = 0.72f;
		fConst23 = floorf((0.5f + (0.174713f * iConst0)));
		fConst24 = ((0 - (6.907755278982138f * fConst23)) / float(iConst0));
		fConst25 = (0.5f * fConst24);
		fConst26 = (0.3333333333333333f * fConst24);
		fConst27 = cosf((37699.11184307752f / fConst17));
		for (int i=0; i<2; i++) fRec41[i] = 0;
		for (int i=0; i<8192; i++) fVec6[i] = 0;
		fConst28 = floorf((0.5f + (0.022904f * iConst0)));
		iConst29 = int((int((fConst23 - fConst28)) & 8191));
		for (int i=0; i<4096; i++) fVec7[i] = 0;
		iConst30 = int((int((0.02f * iConst0)) & 8191));
		for (int i=0; i<2048; i++) fVec8[i] = 0;
		iConst31 = int((int((fConst28 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec39[i] = 0;
		for (int i=0; i<2; i++) fRec46[i] = 0;
		fConst32 = floorf((0.5f + (0.153129f * iConst0)));
		fConst33 = ((0 - (6.907755278982138f * fConst32)) / float(iConst0));
		fConst34 = (0.5f * fConst33);
		fConst35 = (0.3333333333333333f * fConst33);
		for (int i=0; i<2; i++) fRec45[i] = 0;
		for (int i=0; i<8192; i++) fVec9[i] = 0;
		fConst36 = floorf((0.5f + (0.020346f * iConst0)));
		iConst37 = int((int((fConst32 - fConst36)) & 8191));
		for (int i=0; i<1024; i++) fVec10[i] = 0;
		iConst38 = int((int((fConst36 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec43[i] = 0;
		for (int i=0; i<2; i++) fRec50[i] = 0;
		fConst39 = floorf((0.5f + (0.127837f * iConst0)));
		fConst40 = ((0 - (6.907755278982138f * fConst39)) / float(iConst0));
		fConst41 = (0.5f * fConst40);
		fConst42 = (0.3333333333333333f * fConst40);
		for (int i=0; i<2; i++) fRec49[i] = 0;
		for (int i=0; i<8192; i++) fVec11[i] = 0;
		fConst43 = floorf((0.5f + (0.031604f * iConst0)));
		iConst44 = int((int((fConst39 - fConst43)) & 8191));
		for (int i=0; i<2048; i++) fVec12[i] = 0;
		iConst45 = int((int((fConst43 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec47[i] = 0;
		for (int i=0; i<2; i++) fRec54[i] = 0;
		fConst46 = floorf((0.5f + (0.125f * iConst0)));
		fConst47 = ((0 - (6.907755278982138f * fConst46)) / float(iConst0));
		fConst48 = (0.5f * fConst47);
		fConst49 = (0.3333333333333333f * fConst47);
		for (int i=0; i<2; i++) fRec53[i] = 0;
		for (int i=0; i<8192; i++) fVec13[i] = 0;
		fConst50 = floorf((0.5f + (0.013458f * iConst0)));
		iConst51 = int((int((fConst46 - fConst50)) & 8191));
		for (int i=0; i<1024; i++) fVec14[i] = 0;
		iConst52 = int((int((fConst50 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec51[i] = 0;
		for (int i=0; i<2; i++) fRec58[i] = 0;
		fConst53 = floorf((0.5f + (0.210389f * iConst0)));
		fConst54 = ((0 - (6.907755278982138f * fConst53)) / float(iConst0));
		fConst55 = (0.5f * fConst54);
		fConst56 = (0.3333333333333333f * fConst54);
		for (int i=0; i<2; i++) fRec57[i] = 0;
		for (int i=0; i<16384; i++) fVec15[i] = 0;
		fConst57 = floorf((0.5f + (0.024421f * iConst0)));
		iConst58 = int((int((fConst53 - fConst57)) & 16383));
		fslider8 = 0.5f;
		fConst59 = (0.5f * iConst0);
		for (int i=0; i<4096; i++) fVec16[i] = 0;
		for (int i=0; i<2048; i++) fVec17[i] = 0;
		iConst60 = int((int((fConst57 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec55[i] = 0;
		for (int i=0; i<2; i++) fRec62[i] = 0;
		fConst61 = floorf((0.5f + (0.192303f * iConst0)));
		fConst62 = ((0 - (6.907755278982138f * fConst61)) / float(iConst0));
		fConst63 = (0.5f * fConst62);
		fConst64 = (0.3333333333333333f * fConst62);
		for (int i=0; i<2; i++) fRec61[i] = 0;
		for (int i=0; i<8192; i++) fVec18[i] = 0;
		fConst65 = floorf((0.5f + (0.029291f * iConst0)));
		iConst66 = int((int((fConst61 - fConst65)) & 8191));
		for (int i=0; i<2048; i++) fVec19[i] = 0;
		iConst67 = int((int((fConst65 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec59[i] = 0;
		for (int i=0; i<2; i++) fRec66[i] = 0;
		fConst68 = floorf((0.5f + (0.256891f * iConst0)));
		fConst69 = ((0 - (6.907755278982138f * fConst68)) / float(iConst0));
		fConst70 = (0.5f * fConst69);
		fConst71 = (0.3333333333333333f * fConst69);
		for (int i=0; i<2; i++) fRec65[i] = 0;
		for (int i=0; i<16384; i++) fVec20[i] = 0;
		fConst72 = floorf((0.5f + (0.027333f * iConst0)));
		iConst73 = int((int((fConst68 - fConst72)) & 16383));
		for (int i=0; i<2048; i++) fVec21[i] = 0;
		iConst74 = int((int((fConst72 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec63[i] = 0;
		for (int i=0; i<2; i++) fRec70[i] = 0;
		fConst75 = floorf((0.5f + (0.219991f * iConst0)));
		fConst76 = ((0 - (6.907755278982138f * fConst75)) / float(iConst0));
		fConst77 = (0.5f * fConst76);
		fConst78 = (0.3333333333333333f * fConst76);
		for (int i=0; i<2; i++) fRec69[i] = 0;
		for (int i=0; i<16384; i++) fVec22[i] = 0;
		fConst79 = floorf((0.5f + (0.019123f * iConst0)));
		iConst80 = int((int((fConst75 - fConst79)) & 16383));
		for (int i=0; i<1024; i++) fVec23[i] = 0;
		iConst81 = int((int((fConst79 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec67[i] = 0;
		for (int i=0; i<3; i++) fRec31[i] = 0;
		for (int i=0; i<3; i++) fRec32[i] = 0;
		for (int i=0; i<3; i++) fRec33[i] = 0;
		for (int i=0; i<3; i++) fRec34[i] = 0;
		for (int i=0; i<3; i++) fRec35[i] = 0;
		for (int i=0; i<3; i++) fRec36[i] = 0;
		for (int i=0; i<3; i++) fRec37[i] = 0;
		for (int i=0; i<3; i++) fRec38[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void buildUserInterface(UI* interface) {
		interface->openVerticalBox("0x00");
		interface->openHorizontalBox("Basic_Parameters");
		interface->declare(&fentry2, "1", "");
		interface->declare(&fentry2, "tooltip", "Tone frequency");
		interface->declare(&fentry2, "unit", "Hz");
		interface->addNumEntry("freq", &fentry2, 4.4e+02f, 2e+01f, 2e+04f, 1.0f);
		interface->declare(&fentry0, "1", "");
		interface->declare(&fentry0, "tooltip", "Gain (value between 0 and 1)");
		interface->addNumEntry("gain", &fentry0, 0.8f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fbutton0, "1", "");
		interface->declare(&fbutton0, "tooltip", "noteOn = 1, noteOff = 0");
		interface->addButton("gate", &fbutton0);
		interface->closeBox();
		interface->openHorizontalBox("Physical_and_Nonlinearity");
		interface->openVerticalBox("Nonlinear_Filter_Parameters");
		interface->declare(&fslider4, "3", "");
		interface->declare(&fslider4, "tooltip", "Frequency of the sine wave for the modulation of theta (works if Modulation Type=3)");
		interface->declare(&fslider4, "unit", "Hz");
		interface->addHorizontalSlider("Modulation_Frequency", &fslider4, 2.2e+02f, 2e+01f, 1e+03f, 0.1f);
		interface->declare(&fentry3, "3", "");
		interface->declare(&fentry3, "tooltip", "0=theta is modulated by the incoming signal; 1=theta is modulated by the averaged incoming signal; 2=theta is modulated by the squared incoming signal; 3=theta is modulated by a sine wave of frequency freqMod; 4=theta is modulated by a sine wave of frequency freq;");
		interface->addNumEntry("Modulation_Type", &fentry3, 0.0f, 0.0f, 4.0f, 1.0f);
		interface->declare(&fslider3, "3", "");
		interface->declare(&fslider3, "tooltip", "Nonlinearity factor (value between 0 and 1)");
		interface->addHorizontalSlider("Nonlinearity", &fslider3, 0.0f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->openVerticalBox("Physical_Parameters");
		interface->declare(&fslider0, "2", "");
		interface->declare(&fslider0, "tooltip", "A value between 0 and 1");
		interface->addHorizontalSlider("Base_Gain", &fslider0, 1.0f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fslider2, "2", "");
		interface->declare(&fslider2, "tooltip", "Bow pressure on the instrument (Value between 0 and 1)");
		interface->addHorizontalSlider("Bow_Pressure", &fslider2, 0.2f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fentry1, "2", "");
		interface->declare(&fentry1, "tooltip", "0=Bow; 1=Strike");
		interface->addNumEntry("Excitation_Selector", &fentry1, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->declare(&fslider1, "2", "");
		interface->declare(&fslider1, "tooltip", "A value between 0 and 1");
		interface->addHorizontalSlider("Integration_Constant", &fslider1, 0.0f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->closeBox();
		interface->openVerticalBox("Reverb");
		interface->addHorizontalSlider("reverbGain", &fslider5, 0.137f, 0.0f, 1.0f, 0.01f);
		interface->addHorizontalSlider("roomSize", &fslider7, 0.72f, 0.01f, 2.0f, 0.01f);
		interface->closeBox();
		interface->openVerticalBox("Spat");
		interface->addHorizontalSlider("pan angle", &fslider6, 0.6f, 0.0f, 1.0f, 0.01f);
		interface->addHorizontalSlider("spatial width", &fslider8, 0.5f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0 = float(fbutton0);
		int 	iSlow1 = (fSlow0 > 0);
		int 	iSlow2 = (fSlow0 <= 0);
		float 	fSlow3 = float(fentry0);
		float 	fSlow4 = (0.03f + (0.1f * fSlow3));
		float 	fSlow5 = (0.8999999999999999f + (0.1f * float(fslider0)));
		float 	fSlow6 = float(fslider1);
		float 	fSlow7 = (10 - (9 * float(fslider2)));
		float 	fSlow8 = float(fentry1);
		float 	fSlow9 = (0 - (fSlow8 - 1));
		float 	fSlow10 = ((fSlow0 * fSlow8) * fSlow3);
		float 	fSlow11 = float(fentry2);
		int 	iSlow12 = int((int((float(iConst0) / fSlow11)) & 4095));
		float 	fSlow13 = (fConst7 * cosf((fConst6 * fSlow11)));
		int 	iSlow14 = int((int((fConst11 / fSlow11)) & 4095));
		float 	fSlow15 = (fConst7 * cosf((fConst12 * fSlow11)));
		int 	iSlow16 = int((int((fConst13 / fSlow11)) & 4095));
		float 	fSlow17 = (fConst7 * cosf((fConst14 * fSlow11)));
		int 	iSlow18 = int((int((fConst15 / fSlow11)) & 4095));
		float 	fSlow19 = (fConst7 * cosf((fConst16 * fSlow11)));
		float 	fSlow20 = (0.0010000000000000009f * float(fslider3));
		float 	fSlow21 = float(fentry3);
		float 	fSlow22 = (50.26548245743669f * (fSlow21 == 2));
		float 	fSlow23 = (6.283185307179586f * (fSlow21 == 1));
		float 	fSlow24 = (12.566370614359172f * (fSlow21 == 0));
		int 	iSlow25 = (fSlow21 < 3);
		float 	fSlow26 = (0.0010000000000000009f * float(fslider4));
		int 	iSlow27 = (fSlow21 != 4);
		float 	fSlow28 = (fSlow11 * (fSlow21 == 4));
		int 	iSlow29 = (fSlow21 >= 3);
		float 	fSlow30 = (0.0010000000000000009f * float(fslider5));
		float 	fSlow31 = float(fslider6);
		float 	fSlow32 = (1.0f - fSlow31);
		float 	fSlow33 = float(fslider7);
		float 	fSlow34 = expf((fConst25 / fSlow33));
		float 	fSlow35 = ((expf((fConst26 / fSlow33)) / fSlow34) - 1);
		float 	fSlow36 = faustpower<2>(fSlow34);
		float 	fSlow37 = (1.0f - fSlow36);
		float 	fSlow38 = (1.0f - (fConst27 * fSlow36));
		float 	fSlow39 = (fSlow38 / fSlow37);
		float 	fSlow40 = sqrtf(max((float)0, ((faustpower<2>(fSlow38) / faustpower<2>(fSlow37)) - 1.0f)));
		float 	fSlow41 = (fSlow34 * ((1.0f + fSlow40) - fSlow39));
		float 	fSlow42 = (fSlow39 - fSlow40);
		float 	fSlow43 = expf((fConst34 / fSlow33));
		float 	fSlow44 = ((expf((fConst35 / fSlow33)) / fSlow43) - 1);
		float 	fSlow45 = faustpower<2>(fSlow43);
		float 	fSlow46 = (1.0f - fSlow45);
		float 	fSlow47 = (1.0f - (fConst27 * fSlow45));
		float 	fSlow48 = (fSlow47 / fSlow46);
		float 	fSlow49 = sqrtf(max((float)0, ((faustpower<2>(fSlow47) / faustpower<2>(fSlow46)) - 1.0f)));
		float 	fSlow50 = (fSlow43 * ((1.0f + fSlow49) - fSlow48));
		float 	fSlow51 = (fSlow48 - fSlow49);
		float 	fSlow52 = expf((fConst41 / fSlow33));
		float 	fSlow53 = ((expf((fConst42 / fSlow33)) / fSlow52) - 1);
		float 	fSlow54 = faustpower<2>(fSlow52);
		float 	fSlow55 = (1.0f - fSlow54);
		float 	fSlow56 = (1.0f - (fConst27 * fSlow54));
		float 	fSlow57 = (fSlow56 / fSlow55);
		float 	fSlow58 = sqrtf(max((float)0, ((faustpower<2>(fSlow56) / faustpower<2>(fSlow55)) - 1.0f)));
		float 	fSlow59 = (fSlow52 * ((1.0f + fSlow58) - fSlow57));
		float 	fSlow60 = (fSlow57 - fSlow58);
		float 	fSlow61 = expf((fConst48 / fSlow33));
		float 	fSlow62 = ((expf((fConst49 / fSlow33)) / fSlow61) - 1);
		float 	fSlow63 = faustpower<2>(fSlow61);
		float 	fSlow64 = (1.0f - fSlow63);
		float 	fSlow65 = (1.0f - (fConst27 * fSlow63));
		float 	fSlow66 = (fSlow65 / fSlow64);
		float 	fSlow67 = sqrtf(max((float)0, ((faustpower<2>(fSlow65) / faustpower<2>(fSlow64)) - 1.0f)));
		float 	fSlow68 = (fSlow61 * ((1.0f + fSlow67) - fSlow66));
		float 	fSlow69 = (fSlow66 - fSlow67);
		float 	fSlow70 = expf((fConst55 / fSlow33));
		float 	fSlow71 = ((expf((fConst56 / fSlow33)) / fSlow70) - 1);
		float 	fSlow72 = faustpower<2>(fSlow70);
		float 	fSlow73 = (1.0f - fSlow72);
		float 	fSlow74 = (1.0f - (fConst27 * fSlow72));
		float 	fSlow75 = (fSlow74 / fSlow73);
		float 	fSlow76 = sqrtf(max((float)0, ((faustpower<2>(fSlow74) / faustpower<2>(fSlow73)) - 1.0f)));
		float 	fSlow77 = (fSlow70 * ((1.0f + fSlow76) - fSlow75));
		float 	fSlow78 = (fSlow75 - fSlow76);
		int 	iSlow79 = int((int((fConst59 * (float(fslider8) / fSlow11))) & 4095));
		float 	fSlow80 = expf((fConst63 / fSlow33));
		float 	fSlow81 = ((expf((fConst64 / fSlow33)) / fSlow80) - 1);
		float 	fSlow82 = faustpower<2>(fSlow80);
		float 	fSlow83 = (1.0f - fSlow82);
		float 	fSlow84 = (1.0f - (fConst27 * fSlow82));
		float 	fSlow85 = (fSlow84 / fSlow83);
		float 	fSlow86 = sqrtf(max((float)0, ((faustpower<2>(fSlow84) / faustpower<2>(fSlow83)) - 1.0f)));
		float 	fSlow87 = (fSlow80 * ((1.0f + fSlow86) - fSlow85));
		float 	fSlow88 = (fSlow85 - fSlow86);
		float 	fSlow89 = expf((fConst70 / fSlow33));
		float 	fSlow90 = ((expf((fConst71 / fSlow33)) / fSlow89) - 1);
		float 	fSlow91 = faustpower<2>(fSlow89);
		float 	fSlow92 = (1.0f - fSlow91);
		float 	fSlow93 = (1.0f - (fConst27 * fSlow91));
		float 	fSlow94 = (fSlow93 / fSlow92);
		float 	fSlow95 = sqrtf(max((float)0, ((faustpower<2>(fSlow93) / faustpower<2>(fSlow92)) - 1.0f)));
		float 	fSlow96 = (fSlow89 * ((1.0f + fSlow95) - fSlow94));
		float 	fSlow97 = (fSlow94 - fSlow95);
		float 	fSlow98 = expf((fConst77 / fSlow33));
		float 	fSlow99 = ((expf((fConst78 / fSlow33)) / fSlow98) - 1);
		float 	fSlow100 = faustpower<2>(fSlow98);
		float 	fSlow101 = (1.0f - fSlow100);
		float 	fSlow102 = (1.0f - (fConst27 * fSlow100));
		float 	fSlow103 = (fSlow102 / fSlow101);
		float 	fSlow104 = sqrtf(max((float)0, ((faustpower<2>(fSlow102) / faustpower<2>(fSlow101)) - 1.0f)));
		float 	fSlow105 = (fSlow98 * ((1.0f + fSlow104) - fSlow103));
		float 	fSlow106 = (fSlow103 - fSlow104);
		FAUSTFLOAT* output0 = output[0];
		FAUSTFLOAT* output1 = output[1];
		for (int i=0; i<count; i++) {
			iRec6[0] = (iSlow1 & (iRec6[1] | (fRec7[1] >= 1)));
			int iTemp0 = (iSlow2 & (fRec7[1] > 0));
			fRec7[0] = (((fConst3 * (((iRec6[1] == 0) & iSlow1) & (fRec7[1] < 1))) + (fRec7[1] * ((1 - (fConst2 * (iRec6[1] & (fRec7[1] > 90)))) - (fConst1 * iTemp0)))) * ((iTemp0 == 0) | (fRec7[1] >= 1e-06f)));
			float fTemp1 = (0 - ((fSlow6 + (fSlow5 * ((fRec0[1] + fRec2[1]) + (fRec1[1] + fRec3[1])))) - (fSlow4 * fRec7[0])));
			float fTemp2 = faustpower<4>((0.75f + fabsf((fSlow7 * fTemp1))));
			float fTemp3 = (1.0f / fTemp2);
			float fTemp4 = (fSlow9 * (fTemp1 * ((fTemp3 > 1) + (float((fTemp3 <= 1)) / fTemp2))));
			fVec0[IOTA&4095] = (fSlow10 + (fTemp4 + (4.0f * fRec4[1])));
			fRec5[0] = (0 - (((fSlow13 * fRec5[1]) + (fConst5 * fRec5[2])) - (0.24975f * fVec0[(IOTA-iSlow12)&4095])));
			fRec4[0] = ((fConst10 * fRec5[0]) + (fConst9 * fRec5[2]));
			fRec0[0] = fRec4[0];
			fVec1[IOTA&4095] = (fSlow10 + (fTemp4 + (4.0f * fRec8[1])));
			fRec9[0] = (0 - (((fSlow15 * fRec9[1]) + (fConst5 * fRec9[2])) - (0.24950025f * fVec1[(IOTA-iSlow14)&4095])));
			fRec8[0] = ((fConst10 * fRec9[0]) + (fConst9 * fRec9[2]));
			fRec1[0] = fRec8[0];
			fVec2[IOTA&1023] = (fSlow10 + (fTemp4 + (4.0f * fRec10[1])));
			fRec11[0] = (0 - (((fSlow17 * fRec11[1]) + (fConst5 * fRec11[2])) - (0.24925074975f * fVec2[(IOTA-iSlow16)&1023])));
			fRec10[0] = ((fConst10 * fRec11[0]) + (fConst9 * fRec11[2]));
			fRec2[0] = fRec10[0];
			fVec3[IOTA&1023] = (fSlow10 + (fTemp4 + (4.0f * fRec12[1])));
			fRec13[0] = (0 - (((fSlow19 * fRec13[1]) + (fConst5 * fRec13[2])) - (0.24900149900025f * fVec3[(IOTA-iSlow18)&1023])));
			fRec12[0] = ((fConst10 * fRec13[0]) + (fConst9 * fRec13[2]));
			fRec3[0] = fRec12[0];
			float fTemp5 = (fRec3[0] + ((fRec0[0] + fRec2[0]) + fRec1[0]));
			fVec4[0] = fTemp5;
			fRec14[0] = (fSlow20 + (0.999f * fRec14[1]));
			float fTemp6 = (fRec14[0] * (((fSlow24 * fVec4[0]) + (fSlow23 * (fVec4[0] + fVec4[1]))) + (fSlow22 * faustpower<2>(fVec4[0]))));
			float fTemp7 = cosf(fTemp6);
			float fTemp8 = sinf(fTemp6);
			float fTemp9 = (0 - fTemp8);
			float fTemp10 = ((fRec15[1] * fTemp9) + (4 * (fVec4[0] * fTemp7)));
			float fTemp11 = ((fTemp9 * fRec16[1]) + (fTemp7 * fTemp10));
			float fTemp12 = ((fTemp9 * fRec17[1]) + (fTemp7 * fTemp11));
			float fTemp13 = ((fTemp9 * fRec18[1]) + (fTemp7 * fTemp12));
			float fTemp14 = ((fTemp9 * fRec19[1]) + (fTemp7 * fTemp13));
			fRec20[0] = ((fTemp9 * fRec20[1]) + (fTemp7 * fTemp14));
			fRec19[0] = ((fTemp8 * fTemp14) + (fTemp7 * fRec20[1]));
			fRec18[0] = ((fTemp8 * fTemp13) + (fTemp7 * fRec19[1]));
			fRec17[0] = ((fTemp8 * fTemp12) + (fTemp7 * fRec18[1]));
			fRec16[0] = ((fTemp8 * fTemp11) + (fTemp7 * fRec17[1]));
			fRec15[0] = ((fTemp8 * fTemp10) + (fTemp7 * fRec16[1]));
			fRec23[0] = (fSlow26 + (0.999f * fRec23[1]));
			float fTemp15 = (fRec22[1] + (fConst18 * (fSlow28 + (iSlow27 * fRec23[0]))));
			fRec22[0] = (fTemp15 - floorf(fTemp15));
			float fTemp16 = (3.141592653589793f * (fRec14[0] * ftbl0[int((65536.0f * fRec22[0]))]));
			float fTemp17 = cosf(fTemp16);
			float fTemp18 = sinf(fTemp16);
			float fTemp19 = (0 - fTemp18);
			float fTemp20 = ((fRec24[1] * fTemp19) + (4 * (fVec4[0] * fTemp17)));
			float fTemp21 = ((fTemp19 * fRec25[1]) + (fTemp17 * fTemp20));
			float fTemp22 = ((fTemp19 * fRec26[1]) + (fTemp17 * fTemp21));
			float fTemp23 = ((fTemp19 * fRec27[1]) + (fTemp17 * fTemp22));
			float fTemp24 = ((fTemp19 * fRec28[1]) + (fTemp17 * fTemp23));
			fRec29[0] = ((fTemp19 * fRec29[1]) + (fTemp17 * fTemp24));
			fRec28[0] = ((fTemp18 * fTemp24) + (fTemp17 * fRec29[1]));
			fRec27[0] = ((fTemp18 * fTemp23) + (fTemp17 * fRec28[1]));
			fRec26[0] = ((fTemp18 * fTemp22) + (fTemp17 * fRec27[1]));
			fRec25[0] = ((fTemp18 * fTemp21) + (fTemp17 * fRec26[1]));
			fRec24[0] = ((fTemp18 * fTemp20) + (fTemp17 * fRec25[1]));
			float fTemp25 = ((iSlow29 * ((4 * (fVec4[0] * fTemp18)) + (fRec24[1] * fTemp17))) + (iSlow25 * ((fRec14[0] * ((4 * (fVec4[0] * fTemp8)) + (fRec15[1] * fTemp7))) + (4 * ((1 - fRec14[0]) * fVec4[0])))));
			fVec5[IOTA&4095] = fTemp25;
			fRec30[0] = ((0.999f * fRec30[1]) + fSlow30);
			float fTemp26 = (1 - fRec30[0]);
			fRec42[0] = ((fConst22 * fRec42[1]) + (fConst21 * (fRec35[1] + fRec35[2])));
			fRec41[0] = ((fSlow42 * fRec41[1]) + (fSlow41 * (fRec35[1] + (fSlow35 * fRec42[0]))));
			fVec6[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec41[0]));
			fVec7[IOTA&4095] = (fSlow32 * (fRec30[0] * fVec5[IOTA&4095]));
			float fTemp27 = (0.3f * fVec7[(IOTA-iConst30)&4095]);
			float fTemp28 = ((fTemp27 + fVec6[(IOTA-iConst29)&8191]) - (0.6f * fRec39[1]));
			fVec8[IOTA&2047] = fTemp28;
			fRec39[0] = fVec8[(IOTA-iConst31)&2047];
			float 	fRec40 = (0.6f * fVec8[IOTA&2047]);
			fRec46[0] = ((fConst22 * fRec46[1]) + (fConst21 * (fRec31[1] + fRec31[2])));
			fRec45[0] = ((fSlow51 * fRec45[1]) + (fSlow50 * (fRec31[1] + (fSlow44 * fRec46[0]))));
			fVec9[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec45[0]));
			float fTemp29 = ((fVec9[(IOTA-iConst37)&8191] + fTemp27) - (0.6f * fRec43[1]));
			fVec10[IOTA&1023] = fTemp29;
			fRec43[0] = fVec10[(IOTA-iConst38)&1023];
			float 	fRec44 = (0.6f * fVec10[IOTA&1023]);
			float fTemp30 = (fRec44 + fRec40);
			fRec50[0] = ((fConst22 * fRec50[1]) + (fConst21 * (fRec33[1] + fRec33[2])));
			fRec49[0] = ((fSlow60 * fRec49[1]) + (fSlow59 * (fRec33[1] + (fSlow53 * fRec50[0]))));
			fVec11[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec49[0]));
			float fTemp31 = (fVec11[(IOTA-iConst44)&8191] - (fTemp27 + (0.6f * fRec47[1])));
			fVec12[IOTA&2047] = fTemp31;
			fRec47[0] = fVec12[(IOTA-iConst45)&2047];
			float 	fRec48 = (0.6f * fVec12[IOTA&2047]);
			fRec54[0] = ((fConst22 * fRec54[1]) + (fConst21 * (fRec37[1] + fRec37[2])));
			fRec53[0] = ((fSlow69 * fRec53[1]) + (fSlow68 * (fRec37[1] + (fSlow62 * fRec54[0]))));
			fVec13[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec53[0]));
			float fTemp32 = (fVec13[(IOTA-iConst51)&8191] - (fTemp27 + (0.6f * fRec51[1])));
			fVec14[IOTA&1023] = fTemp32;
			fRec51[0] = fVec14[(IOTA-iConst52)&1023];
			float 	fRec52 = (0.6f * fVec14[IOTA&1023]);
			float fTemp33 = (fRec52 + (fRec48 + fTemp30));
			fRec58[0] = ((fConst22 * fRec58[1]) + (fConst21 * (fRec32[1] + fRec32[2])));
			fRec57[0] = ((fSlow78 * fRec57[1]) + (fSlow77 * (fRec32[1] + (fSlow71 * fRec58[0]))));
			fVec15[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec57[0]));
			float fTemp34 = fVec5[(IOTA-iSlow79)&4095];
			fVec16[IOTA&4095] = (fSlow31 * (fRec30[0] * fTemp34));
			float fTemp35 = (0.3f * fVec16[(IOTA-iConst30)&4095]);
			float fTemp36 = (fTemp35 + ((0.6f * fRec55[1]) + fVec15[(IOTA-iConst58)&16383]));
			fVec17[IOTA&2047] = fTemp36;
			fRec55[0] = fVec17[(IOTA-iConst60)&2047];
			float 	fRec56 = (0 - (0.6f * fVec17[IOTA&2047]));
			fRec62[0] = ((fConst22 * fRec62[1]) + (fConst21 * (fRec36[1] + fRec36[2])));
			fRec61[0] = ((fSlow88 * fRec61[1]) + (fSlow87 * (fRec36[1] + (fSlow81 * fRec62[0]))));
			fVec18[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec61[0]));
			float fTemp37 = (fVec18[(IOTA-iConst66)&8191] + (fTemp35 + (0.6f * fRec59[1])));
			fVec19[IOTA&2047] = fTemp37;
			fRec59[0] = fVec19[(IOTA-iConst67)&2047];
			float 	fRec60 = (0 - (0.6f * fVec19[IOTA&2047]));
			fRec66[0] = ((fConst22 * fRec66[1]) + (fConst21 * (fRec34[1] + fRec34[2])));
			fRec65[0] = ((fSlow97 * fRec65[1]) + (fSlow96 * (fRec34[1] + (fSlow90 * fRec66[0]))));
			fVec20[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec65[0]));
			float fTemp38 = (((0.6f * fRec63[1]) + fVec20[(IOTA-iConst73)&16383]) - fTemp35);
			fVec21[IOTA&2047] = fTemp38;
			fRec63[0] = fVec21[(IOTA-iConst74)&2047];
			float 	fRec64 = (0 - (0.6f * fVec21[IOTA&2047]));
			fRec70[0] = ((fConst22 * fRec70[1]) + (fConst21 * (fRec38[1] + fRec38[2])));
			fRec69[0] = ((fSlow106 * fRec69[1]) + (fSlow105 * (fRec38[1] + (fSlow99 * fRec70[0]))));
			fVec22[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec69[0]));
			float fTemp39 = (((0.6f * fRec67[1]) + fVec22[(IOTA-iConst80)&16383]) - fTemp35);
			fVec23[IOTA&1023] = fTemp39;
			fRec67[0] = fVec23[(IOTA-iConst81)&1023];
			float 	fRec68 = (0 - (0.6f * fVec23[IOTA&1023]));
			fRec31[0] = (fRec67[1] + (fRec63[1] + (fRec59[1] + (fRec55[1] + (fRec51[1] + (fRec47[1] + (fRec39[1] + (fRec43[1] + (fRec68 + (fRec64 + (fRec60 + (fRec56 + fTemp33))))))))))));
			fRec32[0] = (0 - ((fRec67[1] + (fRec63[1] + (fRec59[1] + (fRec55[1] + (fRec68 + (fRec64 + (fRec56 + fRec60))))))) - (fRec51[1] + (fRec47[1] + (fRec39[1] + (fRec43[1] + fTemp33))))));
			float fTemp40 = (fRec48 + fRec52);
			fRec33[0] = (0 - ((fRec67[1] + (fRec63[1] + (fRec51[1] + (fRec47[1] + (fRec68 + (fRec64 + fTemp40)))))) - (fRec59[1] + (fRec55[1] + (fRec39[1] + (fRec43[1] + (fRec60 + (fRec56 + fTemp30))))))));
			fRec34[0] = (0 - ((fRec59[1] + (fRec55[1] + (fRec51[1] + (fRec47[1] + (fRec60 + (fRec56 + fTemp40)))))) - (fRec67[1] + (fRec63[1] + (fRec39[1] + (fRec43[1] + (fRec68 + (fRec64 + fTemp30))))))));
			float fTemp41 = (fRec44 + fRec48);
			float fTemp42 = (fRec40 + fRec52);
			fRec35[0] = (0 - ((fRec67[1] + (fRec59[1] + (fRec51[1] + (fRec39[1] + (fRec68 + (fRec60 + fTemp42)))))) - (fRec63[1] + (fRec55[1] + (fRec47[1] + (fRec43[1] + (fRec64 + (fRec56 + fTemp41))))))));
			fRec36[0] = (0 - ((fRec63[1] + (fRec55[1] + (fRec51[1] + (fRec39[1] + (fRec64 + (fRec56 + fTemp42)))))) - (fRec67[1] + (fRec59[1] + (fRec47[1] + (fRec43[1] + (fRec68 + (fRec60 + fTemp41))))))));
			float fTemp43 = (fRec44 + fRec52);
			float fTemp44 = (fRec40 + fRec48);
			fRec37[0] = (0 - ((fRec63[1] + (fRec59[1] + (fRec47[1] + (fRec39[1] + (fRec64 + (fRec60 + fTemp44)))))) - (fRec67[1] + (fRec55[1] + (fRec51[1] + (fRec43[1] + (fRec68 + (fRec56 + fTemp43))))))));
			fRec38[0] = (0 - ((fRec67[1] + (fRec55[1] + (fRec47[1] + (fRec39[1] + (fRec68 + (fRec56 + fTemp44)))))) - (fRec63[1] + (fRec59[1] + (fRec51[1] + (fRec43[1] + (fRec64 + (fRec60 + fTemp43))))))));
			output0[i] = (FAUSTFLOAT)((0.37f * (fRec32[0] + fRec33[0])) + (fSlow32 * (fTemp26 * fVec5[IOTA&4095])));
			output1[i] = (FAUSTFLOAT)((0.37f * (fRec32[0] - fRec33[0])) + (fSlow31 * (fTemp26 * fTemp34)));
			// post processing
			fRec38[2] = fRec38[1]; fRec38[1] = fRec38[0];
			fRec37[2] = fRec37[1]; fRec37[1] = fRec37[0];
			fRec36[2] = fRec36[1]; fRec36[1] = fRec36[0];
			fRec35[2] = fRec35[1]; fRec35[1] = fRec35[0];
			fRec34[2] = fRec34[1]; fRec34[1] = fRec34[0];
			fRec33[2] = fRec33[1]; fRec33[1] = fRec33[0];
			fRec32[2] = fRec32[1]; fRec32[1] = fRec32[0];
			fRec31[2] = fRec31[1]; fRec31[1] = fRec31[0];
			fRec67[1] = fRec67[0];
			fRec69[1] = fRec69[0];
			fRec70[1] = fRec70[0];
			fRec63[1] = fRec63[0];
			fRec65[1] = fRec65[0];
			fRec66[1] = fRec66[0];
			fRec59[1] = fRec59[0];
			fRec61[1] = fRec61[0];
			fRec62[1] = fRec62[0];
			fRec55[1] = fRec55[0];
			fRec57[1] = fRec57[0];
			fRec58[1] = fRec58[0];
			fRec51[1] = fRec51[0];
			fRec53[1] = fRec53[0];
			fRec54[1] = fRec54[0];
			fRec47[1] = fRec47[0];
			fRec49[1] = fRec49[0];
			fRec50[1] = fRec50[0];
			fRec43[1] = fRec43[0];
			fRec45[1] = fRec45[0];
			fRec46[1] = fRec46[0];
			fRec39[1] = fRec39[0];
			fRec41[1] = fRec41[0];
			fRec42[1] = fRec42[0];
			fRec30[1] = fRec30[0];
			fRec24[1] = fRec24[0];
			fRec25[1] = fRec25[0];
			fRec26[1] = fRec26[0];
			fRec27[1] = fRec27[0];
			fRec28[1] = fRec28[0];
			fRec29[1] = fRec29[0];
			fRec22[1] = fRec22[0];
			fRec23[1] = fRec23[0];
			fRec15[1] = fRec15[0];
			fRec16[1] = fRec16[0];
			fRec17[1] = fRec17[0];
			fRec18[1] = fRec18[0];
			fRec19[1] = fRec19[0];
			fRec20[1] = fRec20[0];
			fRec14[1] = fRec14[0];
			fVec4[1] = fVec4[0];
			fRec3[1] = fRec3[0];
			fRec12[1] = fRec12[0];
			fRec13[2] = fRec13[1]; fRec13[1] = fRec13[0];
			fRec2[1] = fRec2[0];
			fRec10[1] = fRec10[0];
			fRec11[2] = fRec11[1]; fRec11[1] = fRec11[0];
			fRec1[1] = fRec1[0];
			fRec8[1] = fRec8[0];
			fRec9[2] = fRec9[1]; fRec9[1] = fRec9[0];
			fRec0[1] = fRec0[0];
			fRec4[1] = fRec4[0];
			fRec5[2] = fRec5[1]; fRec5[1] = fRec5[0];
			IOTA = IOTA+1;
			fRec7[1] = fRec7[0];
			iRec6[1] = iRec6[0];
		}
	}
};


float 	mydsp::ftbl0[65536];
