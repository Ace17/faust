//-----------------------------------------------------
// name: "Flute"
// author: "Romain Michon (rmichon@ccrma.stanford.edu)"
// copyright: "Romain Michon"
// version: "1.0"
//
// Code generated with Faust 0.9.70 (http://faust.grame.fr)
//-----------------------------------------------------
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif  

typedef long double quad;
/* link with  */
#include <math.h>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline float faustpower(float x)          { return powf(x,N); } 
template <int N> inline double faustpower(double x)        { return pow(x,N); }
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <>   inline int faustpower<0>(int x)            { return 1; }
template <>   inline int faustpower<1>(int x)            { return x; }
#endif

#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	class SIG0 {
	  private:
		int 	fSamplingFreq;
		int 	iRec14[2];
	  public:
		int getNumInputs() 	{ return 0; }
		int getNumOutputs() 	{ return 1; }
		void init(int samplingFreq) {
			fSamplingFreq = samplingFreq;
			for (int i=0; i<2; i++) iRec14[i] = 0;
		}
		void fill (int count, float output[]) {
			for (int i=0; i<count; i++) {
				iRec14[0] = (1 + iRec14[1]);
				output[i] = sinf((9.587379924285257e-05f * float((iRec14[0] - 1))));
				// post processing
				iRec14[1] = iRec14[0];
			}
		}
	};


	FAUSTFLOAT 	fslider0;
	float 	fRec0[2];
	FAUSTFLOAT 	fbutton0;
	int 	iRec1[2];
	FAUSTFLOAT 	fslider1;
	int 	iConst0;
	FAUSTFLOAT 	fslider2;
	float 	fRec2[2];
	FAUSTFLOAT 	fentry0;
	float 	fVec0[2];
	FAUSTFLOAT 	fslider3;
	float 	fRec5[2];
	FAUSTFLOAT 	fentry1;
	int 	iRec6[2];
	float 	fConst1;
	FAUSTFLOAT 	fslider4;
	float 	fRec7[2];
	float 	fRec13[2];
	float 	fRec12[2];
	float 	fRec11[2];
	float 	fRec10[2];
	float 	fRec9[2];
	float 	fRec8[2];
	static float 	ftbl0[65536];
	FAUSTFLOAT 	fslider5;
	float 	fRec16[2];
	float 	fConst2;
	float 	fConst3;
	float 	fRec15[2];
	float 	fRec22[2];
	float 	fRec21[2];
	float 	fRec20[2];
	float 	fRec19[2];
	float 	fRec18[2];
	float 	fRec17[2];
	FAUSTFLOAT 	fslider6;
	float 	fRec23[2];
	int 	iRec24[2];
	int 	iRec25[2];
	FAUSTFLOAT 	fslider7;
	FAUSTFLOAT 	fslider8;
	FAUSTFLOAT 	fslider9;
	float 	fRec26[2];
	FAUSTFLOAT 	fslider10;
	int 	iRec27[2];
	FAUSTFLOAT 	fslider11;
	FAUSTFLOAT 	fslider12;
	float 	fRec28[2];
	FAUSTFLOAT 	fcheckbox0;
	int 	iRec29[2];
	FAUSTFLOAT 	fslider13;
	FAUSTFLOAT 	fslider14;
	FAUSTFLOAT 	fslider15;
	float 	fRec30[2];
	int 	IOTA;
	float 	fVec1[4096];
	float 	fConst4;
	float 	fVec2[2];
	float 	fConst5;
	float 	fConst6;
	float 	fConst7;
	float 	fConst8;
	float 	fRec4[2];
	float 	fRec3[8192];
	FAUSTFLOAT 	fslider16;
	FAUSTFLOAT 	fentry2;
	float 	fConst9;
	float 	fConst10;
	float 	fConst11;
	float 	fConst12;
	float 	fRec42[2];
	FAUSTFLOAT 	fslider17;
	float 	fConst13;
	float 	fConst14;
	float 	fConst15;
	float 	fConst16;
	float 	fConst17;
	float 	fRec41[2];
	float 	fVec3[8192];
	float 	fConst18;
	int 	iConst19;
	float 	fVec4[4096];
	int 	iConst20;
	float 	fVec5[2048];
	int 	iConst21;
	float 	fRec39[2];
	float 	fRec46[2];
	float 	fConst22;
	float 	fConst23;
	float 	fConst24;
	float 	fConst25;
	float 	fRec45[2];
	float 	fVec6[8192];
	float 	fConst26;
	int 	iConst27;
	float 	fVec7[1024];
	int 	iConst28;
	float 	fRec43[2];
	float 	fRec50[2];
	float 	fConst29;
	float 	fConst30;
	float 	fConst31;
	float 	fConst32;
	float 	fRec49[2];
	float 	fVec8[8192];
	float 	fConst33;
	int 	iConst34;
	float 	fVec9[2048];
	int 	iConst35;
	float 	fRec47[2];
	float 	fRec54[2];
	float 	fConst36;
	float 	fConst37;
	float 	fConst38;
	float 	fConst39;
	float 	fRec53[2];
	float 	fVec10[8192];
	float 	fConst40;
	int 	iConst41;
	float 	fVec11[1024];
	int 	iConst42;
	float 	fRec51[2];
	float 	fRec58[2];
	float 	fConst43;
	float 	fConst44;
	float 	fConst45;
	float 	fConst46;
	float 	fRec57[2];
	float 	fVec12[16384];
	float 	fConst47;
	int 	iConst48;
	float 	fVec13[4096];
	FAUSTFLOAT 	fslider18;
	float 	fVec14[4096];
	float 	fVec15[2048];
	int 	iConst49;
	float 	fRec55[2];
	float 	fRec62[2];
	float 	fConst50;
	float 	fConst51;
	float 	fConst52;
	float 	fConst53;
	float 	fRec61[2];
	float 	fVec16[8192];
	float 	fConst54;
	int 	iConst55;
	float 	fVec17[2048];
	int 	iConst56;
	float 	fRec59[2];
	float 	fRec66[2];
	float 	fConst57;
	float 	fConst58;
	float 	fConst59;
	float 	fConst60;
	float 	fRec65[2];
	float 	fVec18[16384];
	float 	fConst61;
	int 	iConst62;
	float 	fVec19[2048];
	int 	iConst63;
	float 	fRec63[2];
	float 	fRec70[2];
	float 	fConst64;
	float 	fConst65;
	float 	fConst66;
	float 	fConst67;
	float 	fRec69[2];
	float 	fVec20[16384];
	float 	fConst68;
	int 	iConst69;
	float 	fVec21[1024];
	int 	iConst70;
	float 	fRec67[2];
	float 	fRec31[3];
	float 	fRec32[3];
	float 	fRec33[3];
	float 	fRec34[3];
	float 	fRec35[3];
	float 	fRec36[3];
	float 	fRec37[3];
	float 	fRec38[3];
  public:
	static void metadata(Meta* m) 	{ 
		m->declare("name", "Flute");
		m->declare("description", "Nonlinear WaveGuide Flute");
		m->declare("author", "Romain Michon (rmichon@ccrma.stanford.edu)");
		m->declare("copyright", "Romain Michon");
		m->declare("version", "1.0");
		m->declare("licence", "STK-4.3");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/version", "1.0");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/version", "1.0");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("instrument.lib/name", "Faust-STK Tools Library");
		m->declare("instrument.lib/author", "Romain Michon (rmichon@ccrma.stanford.edu)");
		m->declare("instrument.lib/copyright", "Romain Michon");
		m->declare("instrument.lib/version", "1.0");
		m->declare("instrument.lib/licence", "STK-4.3");
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/version", "1.29");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("effect.lib/name", "Faust Audio Effect Library");
		m->declare("effect.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/copyright", "Julius O. Smith III");
		m->declare("effect.lib/version", "1.33");
		m->declare("effect.lib/license", "STK-4.3");
		m->declare("effect.lib/exciter_name", "Harmonic Exciter");
		m->declare("effect.lib/exciter_author", "Priyanka Shekar (pshekar@ccrma.stanford.edu)");
		m->declare("effect.lib/exciter_copyright", "Copyright (c) 2013 Priyanka Shekar");
		m->declare("effect.lib/exciter_version", "1.0");
		m->declare("effect.lib/exciter_license", "MIT License (MIT)");
	}

	virtual int getNumInputs() 	{ return 0; }
	virtual int getNumOutputs() 	{ return 2; }
	static void classInit(int samplingFreq) {
		SIG0 sig0;
		sig0.init(samplingFreq);
		sig0.fill(65536,ftbl0);
	}
	virtual void instanceInit(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fslider0 = 0.137f;
		for (int i=0; i<2; i++) fRec0[i] = 0;
		fbutton0 = 0.0;
		for (int i=0; i<2; i++) iRec1[i] = 0;
		fslider1 = 0.1f;
		iConst0 = min(192000, max(1, fSamplingFreq));
		fslider2 = 0.1f;
		for (int i=0; i<2; i++) fRec2[i] = 0;
		fentry0 = 4.4e+02f;
		for (int i=0; i<2; i++) fVec0[i] = 0;
		fslider3 = 0.0f;
		for (int i=0; i<2; i++) fRec5[i] = 0;
		fentry1 = 0.0f;
		for (int i=0; i<2; i++) iRec6[i] = 0;
		fConst1 = (1 - (1.0f / powf(1e+05f,(1e+01f / float(iConst0)))));
		fslider4 = 0.1f;
		for (int i=0; i<2; i++) fRec7[i] = 0;
		for (int i=0; i<2; i++) fRec13[i] = 0;
		for (int i=0; i<2; i++) fRec12[i] = 0;
		for (int i=0; i<2; i++) fRec11[i] = 0;
		for (int i=0; i<2; i++) fRec10[i] = 0;
		for (int i=0; i<2; i++) fRec9[i] = 0;
		for (int i=0; i<2; i++) fRec8[i] = 0;
		fslider5 = 2.2e+02f;
		for (int i=0; i<2; i++) fRec16[i] = 0;
		fConst2 = float(iConst0);
		fConst3 = (1.0f / fConst2);
		for (int i=0; i<2; i++) fRec15[i] = 0;
		for (int i=0; i<2; i++) fRec22[i] = 0;
		for (int i=0; i<2; i++) fRec21[i] = 0;
		for (int i=0; i<2; i++) fRec20[i] = 0;
		for (int i=0; i<2; i++) fRec19[i] = 0;
		for (int i=0; i<2; i++) fRec18[i] = 0;
		for (int i=0; i<2; i++) fRec17[i] = 0;
		fslider6 = 5.0f;
		for (int i=0; i<2; i++) fRec23[i] = 0;
		for (int i=0; i<2; i++) iRec24[i] = 0;
		for (int i=0; i<2; i++) iRec25[i] = 0;
		fslider7 = 0.2f;
		fslider8 = 0.1f;
		fslider9 = 0.5f;
		for (int i=0; i<2; i++) fRec26[i] = 0;
		fslider10 = 0.1f;
		for (int i=0; i<2; i++) iRec27[i] = 0;
		fslider11 = 0.1f;
		fslider12 = 0.9f;
		for (int i=0; i<2; i++) fRec28[i] = 0;
		fcheckbox0 = 0.0;
		for (int i=0; i<2; i++) iRec29[i] = 0;
		fslider13 = 1.0f;
		fslider14 = 0.2f;
		fslider15 = 0.05f;
		for (int i=0; i<2; i++) fRec30[i] = 0;
		IOTA = 0;
		for (int i=0; i<4096; i++) fVec1[i] = 0;
		fConst4 = (0.5f * iConst0);
		for (int i=0; i<2; i++) fVec2[i] = 0;
		fConst5 = (1.0f / tanf((6283.185307179586f / float(iConst0))));
		fConst6 = (1 + fConst5);
		fConst7 = (1.0f / fConst6);
		fConst8 = (0 - ((1 - fConst5) / fConst6));
		for (int i=0; i<2; i++) fRec4[i] = 0;
		for (int i=0; i<8192; i++) fRec3[i] = 0;
		fslider16 = 0.6f;
		fentry2 = 1.0f;
		fConst9 = (1.0f / tanf((628.3185307179587f / float(iConst0))));
		fConst10 = (1 + fConst9);
		fConst11 = (1.0f / fConst10);
		fConst12 = (0 - ((1 - fConst9) / fConst10));
		for (int i=0; i<2; i++) fRec42[i] = 0;
		fslider17 = 0.72f;
		fConst13 = floorf((0.5f + (0.174713f * iConst0)));
		fConst14 = ((0 - (6.907755278982138f * fConst13)) / float(iConst0));
		fConst15 = (0.5f * fConst14);
		fConst16 = (0.3333333333333333f * fConst14);
		fConst17 = cosf((37699.11184307752f / fConst2));
		for (int i=0; i<2; i++) fRec41[i] = 0;
		for (int i=0; i<8192; i++) fVec3[i] = 0;
		fConst18 = floorf((0.5f + (0.022904f * iConst0)));
		iConst19 = int((int((fConst13 - fConst18)) & 8191));
		for (int i=0; i<4096; i++) fVec4[i] = 0;
		iConst20 = int((int((0.02f * iConst0)) & 8191));
		for (int i=0; i<2048; i++) fVec5[i] = 0;
		iConst21 = int((int((fConst18 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec39[i] = 0;
		for (int i=0; i<2; i++) fRec46[i] = 0;
		fConst22 = floorf((0.5f + (0.153129f * iConst0)));
		fConst23 = ((0 - (6.907755278982138f * fConst22)) / float(iConst0));
		fConst24 = (0.5f * fConst23);
		fConst25 = (0.3333333333333333f * fConst23);
		for (int i=0; i<2; i++) fRec45[i] = 0;
		for (int i=0; i<8192; i++) fVec6[i] = 0;
		fConst26 = floorf((0.5f + (0.020346f * iConst0)));
		iConst27 = int((int((fConst22 - fConst26)) & 8191));
		for (int i=0; i<1024; i++) fVec7[i] = 0;
		iConst28 = int((int((fConst26 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec43[i] = 0;
		for (int i=0; i<2; i++) fRec50[i] = 0;
		fConst29 = floorf((0.5f + (0.127837f * iConst0)));
		fConst30 = ((0 - (6.907755278982138f * fConst29)) / float(iConst0));
		fConst31 = (0.5f * fConst30);
		fConst32 = (0.3333333333333333f * fConst30);
		for (int i=0; i<2; i++) fRec49[i] = 0;
		for (int i=0; i<8192; i++) fVec8[i] = 0;
		fConst33 = floorf((0.5f + (0.031604f * iConst0)));
		iConst34 = int((int((fConst29 - fConst33)) & 8191));
		for (int i=0; i<2048; i++) fVec9[i] = 0;
		iConst35 = int((int((fConst33 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec47[i] = 0;
		for (int i=0; i<2; i++) fRec54[i] = 0;
		fConst36 = floorf((0.5f + (0.125f * iConst0)));
		fConst37 = ((0 - (6.907755278982138f * fConst36)) / float(iConst0));
		fConst38 = (0.5f * fConst37);
		fConst39 = (0.3333333333333333f * fConst37);
		for (int i=0; i<2; i++) fRec53[i] = 0;
		for (int i=0; i<8192; i++) fVec10[i] = 0;
		fConst40 = floorf((0.5f + (0.013458f * iConst0)));
		iConst41 = int((int((fConst36 - fConst40)) & 8191));
		for (int i=0; i<1024; i++) fVec11[i] = 0;
		iConst42 = int((int((fConst40 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec51[i] = 0;
		for (int i=0; i<2; i++) fRec58[i] = 0;
		fConst43 = floorf((0.5f + (0.210389f * iConst0)));
		fConst44 = ((0 - (6.907755278982138f * fConst43)) / float(iConst0));
		fConst45 = (0.5f * fConst44);
		fConst46 = (0.3333333333333333f * fConst44);
		for (int i=0; i<2; i++) fRec57[i] = 0;
		for (int i=0; i<16384; i++) fVec12[i] = 0;
		fConst47 = floorf((0.5f + (0.024421f * iConst0)));
		iConst48 = int((int((fConst43 - fConst47)) & 16383));
		for (int i=0; i<4096; i++) fVec13[i] = 0;
		fslider18 = 0.5f;
		for (int i=0; i<4096; i++) fVec14[i] = 0;
		for (int i=0; i<2048; i++) fVec15[i] = 0;
		iConst49 = int((int((fConst47 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec55[i] = 0;
		for (int i=0; i<2; i++) fRec62[i] = 0;
		fConst50 = floorf((0.5f + (0.192303f * iConst0)));
		fConst51 = ((0 - (6.907755278982138f * fConst50)) / float(iConst0));
		fConst52 = (0.5f * fConst51);
		fConst53 = (0.3333333333333333f * fConst51);
		for (int i=0; i<2; i++) fRec61[i] = 0;
		for (int i=0; i<8192; i++) fVec16[i] = 0;
		fConst54 = floorf((0.5f + (0.029291f * iConst0)));
		iConst55 = int((int((fConst50 - fConst54)) & 8191));
		for (int i=0; i<2048; i++) fVec17[i] = 0;
		iConst56 = int((int((fConst54 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec59[i] = 0;
		for (int i=0; i<2; i++) fRec66[i] = 0;
		fConst57 = floorf((0.5f + (0.256891f * iConst0)));
		fConst58 = ((0 - (6.907755278982138f * fConst57)) / float(iConst0));
		fConst59 = (0.5f * fConst58);
		fConst60 = (0.3333333333333333f * fConst58);
		for (int i=0; i<2; i++) fRec65[i] = 0;
		for (int i=0; i<16384; i++) fVec18[i] = 0;
		fConst61 = floorf((0.5f + (0.027333f * iConst0)));
		iConst62 = int((int((fConst57 - fConst61)) & 16383));
		for (int i=0; i<2048; i++) fVec19[i] = 0;
		iConst63 = int((int((fConst61 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec63[i] = 0;
		for (int i=0; i<2; i++) fRec70[i] = 0;
		fConst64 = floorf((0.5f + (0.219991f * iConst0)));
		fConst65 = ((0 - (6.907755278982138f * fConst64)) / float(iConst0));
		fConst66 = (0.5f * fConst65);
		fConst67 = (0.3333333333333333f * fConst65);
		for (int i=0; i<2; i++) fRec69[i] = 0;
		for (int i=0; i<16384; i++) fVec20[i] = 0;
		fConst68 = floorf((0.5f + (0.019123f * iConst0)));
		iConst69 = int((int((fConst64 - fConst68)) & 16383));
		for (int i=0; i<1024; i++) fVec21[i] = 0;
		iConst70 = int((int((fConst68 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec67[i] = 0;
		for (int i=0; i<3; i++) fRec31[i] = 0;
		for (int i=0; i<3; i++) fRec32[i] = 0;
		for (int i=0; i<3; i++) fRec33[i] = 0;
		for (int i=0; i<3; i++) fRec34[i] = 0;
		for (int i=0; i<3; i++) fRec35[i] = 0;
		for (int i=0; i<3; i++) fRec36[i] = 0;
		for (int i=0; i<3; i++) fRec37[i] = 0;
		for (int i=0; i<3; i++) fRec38[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void buildUserInterface(UI* interface) {
		interface->openVerticalBox("0x00");
		interface->openHorizontalBox("Basic_Parameters");
		interface->declare(&fentry0, "1", "");
		interface->declare(&fentry0, "tooltip", "Tone frequency");
		interface->declare(&fentry0, "unit", "Hz");
		interface->addNumEntry("freq", &fentry0, 4.4e+02f, 2e+01f, 2e+04f, 1.0f);
		interface->declare(&fentry2, "1", "");
		interface->declare(&fentry2, "tooltip", "Gain (value between 0 and 1)");
		interface->addNumEntry("gain", &fentry2, 1.0f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fbutton0, "1", "");
		interface->declare(&fbutton0, "tooltip", "noteOn = 1, noteOff = 0");
		interface->addButton("gate", &fbutton0);
		interface->closeBox();
		interface->openHorizontalBox("Envelopes_and_Vibrato");
		interface->openVerticalBox("Global_Envelope_Parameters");
		interface->declare(&fslider2, "6", "");
		interface->declare(&fslider2, "tooltip", "Global envelope attack duration");
		interface->declare(&fslider2, "unit", "s");
		interface->addHorizontalSlider("Glob_Env_Attack", &fslider2, 0.1f, 0.0f, 2.0f, 0.01f);
		interface->declare(&fslider1, "6", "");
		interface->declare(&fslider1, "tooltip", "Global envelope release duration");
		interface->declare(&fslider1, "unit", "s");
		interface->addHorizontalSlider("Glob_Env_Release", &fslider1, 0.1f, 0.0f, 2.0f, 0.01f);
		interface->closeBox();
		interface->openVerticalBox("Pressure_Envelope_Parameters");
		interface->declare(&fslider15, "5", "");
		interface->declare(&fslider15, "tooltip", "Pressure envelope attack duration");
		interface->declare(&fslider15, "unit", "s");
		interface->addHorizontalSlider("Press_Env_Attack", &fslider15, 0.05f, 0.0f, 2.0f, 0.01f);
		interface->declare(&fslider14, "5", "");
		interface->declare(&fslider14, "tooltip", "Pressure envelope decay duration");
		interface->declare(&fslider14, "unit", "s");
		interface->addHorizontalSlider("Press_Env_Decay", &fslider14, 0.2f, 0.0f, 2.0f, 0.01f);
		interface->declare(&fslider13, "5", "");
		interface->declare(&fslider13, "tooltip", "Pressure envelope release duration");
		interface->declare(&fslider13, "unit", "s");
		interface->addHorizontalSlider("Press_Env_Release", &fslider13, 1.0f, 0.0f, 2.0f, 0.01f);
		interface->declare(&fcheckbox0, "5", "");
		interface->declare(&fcheckbox0, "tooltip", "Activate Pressure envelope");
		interface->declare(&fcheckbox0, "unit", "s");
		interface->addCheckButton("Pressure_Env", &fcheckbox0);
		interface->closeBox();
		interface->openVerticalBox("Vibrato_Parameters");
		interface->declare(&fslider9, "4", "");
		interface->declare(&fslider9, "tooltip", "Vibrato attack duration");
		interface->declare(&fslider9, "unit", "s");
		interface->addHorizontalSlider("Vibrato_Attack", &fslider9, 0.5f, 0.0f, 2.0f, 0.01f);
		interface->declare(&fslider8, "4", "");
		interface->declare(&fslider8, "tooltip", "Vibrato silence duration before attack");
		interface->declare(&fslider8, "unit", "s");
		interface->addHorizontalSlider("Vibrato_Begin", &fslider8, 0.1f, 0.0f, 2.0f, 0.01f);
		interface->declare(&fslider6, "4", "");
		interface->declare(&fslider6, "unit", "Hz");
		interface->addHorizontalSlider("Vibrato_Freq", &fslider6, 5.0f, 1.0f, 15.0f, 0.1f);
		interface->declare(&fslider10, "4", "");
		interface->declare(&fslider10, "tooltip", "A value between 0 and 1");
		interface->addHorizontalSlider("Vibrato_Gain", &fslider10, 0.1f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fslider7, "4", "");
		interface->declare(&fslider7, "tooltip", "Vibrato release duration");
		interface->declare(&fslider7, "unit", "s");
		interface->addHorizontalSlider("Vibrato_Release", &fslider7, 0.2f, 0.0f, 2.0f, 0.01f);
		interface->closeBox();
		interface->closeBox();
		interface->openHorizontalBox("Physical_and_Nonlinearity");
		interface->openVerticalBox("Nonlinear_Filter_Parameters");
		interface->declare(&fslider5, "3", "");
		interface->declare(&fslider5, "tooltip", "Frequency of the sine wave for the modulation of theta (works if Modulation Type=3)");
		interface->declare(&fslider5, "unit", "Hz");
		interface->addHorizontalSlider("Modulation_Frequency", &fslider5, 2.2e+02f, 2e+01f, 1e+03f, 0.1f);
		interface->declare(&fentry1, "3", "");
		interface->declare(&fentry1, "tooltip", "0=theta is modulated by the incoming signal; 1=theta is modulated by the averaged incoming signal; 2=theta is modulated by the squared incoming signal; 3=theta is modulated by a sine wave of frequency freqMod; 4=theta is modulated by a sine wave of frequency freq;");
		interface->addNumEntry("Modulation_Type", &fentry1, 0.0f, 0.0f, 4.0f, 1.0f);
		interface->declare(&fslider3, "3", "");
		interface->declare(&fslider3, "tooltip", "Nonlinearity factor (value between 0 and 1)");
		interface->addHorizontalSlider("Nonlinearity", &fslider3, 0.0f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fslider4, "3", "");
		interface->declare(&fslider4, "Attack duration of the nonlinearity", "");
		interface->declare(&fslider4, "unit", "s");
		interface->addHorizontalSlider("Nonlinearity Attack", &fslider4, 0.1f, 0.0f, 2.0f, 0.01f);
		interface->closeBox();
		interface->openVerticalBox("Physical_Parameters");
		interface->declare(&fslider11, "2", "");
		interface->declare(&fslider11, "tooltip", "Breath noise gain (value between 0 and 1)");
		interface->addHorizontalSlider("Noise Gain", &fslider11, 0.1f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fslider12, "2", "");
		interface->declare(&fslider12, "tooltip", "Breath pressure (value bewteen 0 and 1)");
		interface->addHorizontalSlider("Pressure", &fslider12, 0.9f, 0.0f, 1.5f, 0.01f);
		interface->closeBox();
		interface->closeBox();
		interface->openVerticalBox("Reverb");
		interface->addHorizontalSlider("reverbGain", &fslider0, 0.137f, 0.0f, 1.0f, 0.01f);
		interface->addHorizontalSlider("roomSize", &fslider17, 0.72f, 0.01f, 2.0f, 0.01f);
		interface->closeBox();
		interface->openVerticalBox("Spat");
		interface->addHorizontalSlider("pan angle", &fslider16, 0.6f, 0.0f, 1.0f, 0.01f);
		interface->addHorizontalSlider("spatial width", &fslider18, 0.5f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0 = (0.0010000000000000009f * float(fslider0));
		int 	iSlow1 = int(float(fbutton0));
		int 	iSlow2 = (iSlow1 > 0);
		int 	iSlow3 = (iSlow1 <= 0);
		float 	fSlow4 = float(fslider1);
		float 	fSlow5 = (1 - (1.0f / powf(1e+05f,(1.0f / ((fSlow4 == 0.0f) + (iConst0 * fSlow4))))));
		float 	fSlow6 = float(fslider2);
		float 	fSlow7 = (1.0f / ((fSlow6 == 0.0f) + (iConst0 * fSlow6)));
		float 	fSlow8 = float(fentry0);
		float 	fSlow9 = (float(iConst0) / fSlow8);
		int 	iSlow10 = int((fSlow9 - 2));
		int 	iSlow11 = int((1 + int((int((1 + iSlow10)) & 4095))));
		float 	fSlow12 = (fSlow9 - (2 + iSlow10));
		int 	iSlow13 = int((1 + int((iSlow10 & 4095))));
		float 	fSlow14 = ((3 + iSlow10) - fSlow9);
		float 	fSlow15 = (0.0010000000000000009f * float(fslider3));
		float 	fSlow16 = float(fentry1);
		float 	fSlow17 = (3.141592653589793f * (fSlow16 == 2));
		float 	fSlow18 = (1.5707963267948966f * (fSlow16 == 1));
		float 	fSlow19 = (3.141592653589793f * (fSlow16 == 0));
		float 	fSlow20 = float(fslider4);
		float 	fSlow21 = (1.0f / ((fSlow20 == 0.0f) + (iConst0 * fSlow20)));
		int 	iSlow22 = (fSlow16 < 3);
		float 	fSlow23 = (0.0010000000000000009f * float(fslider5));
		int 	iSlow24 = (fSlow16 != 4);
		float 	fSlow25 = (fSlow8 * (fSlow16 == 4));
		int 	iSlow26 = (fSlow16 >= 3);
		float 	fSlow27 = (fConst3 * float(fslider6));
		float 	fSlow28 = float(fslider7);
		float 	fSlow29 = (1 - (1.0f / powf(1e+05f,(1.0f / ((fSlow28 == 0.0f) + (iConst0 * fSlow28))))));
		float 	fSlow30 = float(fslider8);
		float 	fSlow31 = (iConst0 * fSlow30);
		float 	fSlow32 = ((fSlow30 == 0.0f) + fSlow31);
		float 	fSlow33 = float(fslider9);
		float 	fSlow34 = (1.0f / ((fSlow33 == 0.0f) + (iConst0 * fSlow33)));
		float 	fSlow35 = float(fslider10);
		float 	fSlow36 = (5.122274162770377e-11f * float(fslider11));
		float 	fSlow37 = (0.0010000000000000009f * float(fslider12));
		int 	iSlow38 = (iSlow1 | int(float(fcheckbox0)));
		int 	iSlow39 = (iSlow38 > 0);
		int 	iSlow40 = (iSlow38 <= 0);
		float 	fSlow41 = float(fslider13);
		float 	fSlow42 = (1 - (1.0f / powf(9e+04f,(1.0f / ((fSlow41 == 0.0f) + (iConst0 * fSlow41))))));
		float 	fSlow43 = float(fslider14);
		float 	fSlow44 = (1 - powf(9e+01f,(1.0f / ((fSlow43 == 0.0f) + (iConst0 * fSlow43)))));
		float 	fSlow45 = float(fslider15);
		float 	fSlow46 = (1.0f / ((fSlow45 == 0.0f) + (iConst0 * fSlow45)));
		float 	fSlow47 = (fConst4 / fSlow8);
		int 	iSlow48 = int((fSlow47 - 2));
		int 	iSlow49 = int((int((1 + iSlow48)) & 4095));
		float 	fSlow50 = (fSlow47 - (2 + iSlow48));
		int 	iSlow51 = int((iSlow48 & 4095));
		float 	fSlow52 = ((3 + iSlow48) - fSlow47);
		float 	fSlow53 = float(fslider16);
		float 	fSlow54 = float(fentry2);
		float 	fSlow55 = (0.5f * (fSlow54 * (1.0f - fSlow53)));
		float 	fSlow56 = float(fslider17);
		float 	fSlow57 = expf((fConst15 / fSlow56));
		float 	fSlow58 = ((expf((fConst16 / fSlow56)) / fSlow57) - 1);
		float 	fSlow59 = faustpower<2>(fSlow57);
		float 	fSlow60 = (1.0f - fSlow59);
		float 	fSlow61 = (1.0f - (fConst17 * fSlow59));
		float 	fSlow62 = (fSlow61 / fSlow60);
		float 	fSlow63 = sqrtf(max((float)0, ((faustpower<2>(fSlow61) / faustpower<2>(fSlow60)) - 1.0f)));
		float 	fSlow64 = (fSlow57 * ((1.0f + fSlow63) - fSlow62));
		float 	fSlow65 = (fSlow62 - fSlow63);
		float 	fSlow66 = expf((fConst24 / fSlow56));
		float 	fSlow67 = ((expf((fConst25 / fSlow56)) / fSlow66) - 1);
		float 	fSlow68 = faustpower<2>(fSlow66);
		float 	fSlow69 = (1.0f - fSlow68);
		float 	fSlow70 = (1.0f - (fConst17 * fSlow68));
		float 	fSlow71 = (fSlow70 / fSlow69);
		float 	fSlow72 = sqrtf(max((float)0, ((faustpower<2>(fSlow70) / faustpower<2>(fSlow69)) - 1.0f)));
		float 	fSlow73 = (fSlow66 * ((1.0f + fSlow72) - fSlow71));
		float 	fSlow74 = (fSlow71 - fSlow72);
		float 	fSlow75 = expf((fConst31 / fSlow56));
		float 	fSlow76 = ((expf((fConst32 / fSlow56)) / fSlow75) - 1);
		float 	fSlow77 = faustpower<2>(fSlow75);
		float 	fSlow78 = (1.0f - fSlow77);
		float 	fSlow79 = (1.0f - (fConst17 * fSlow77));
		float 	fSlow80 = (fSlow79 / fSlow78);
		float 	fSlow81 = sqrtf(max((float)0, ((faustpower<2>(fSlow79) / faustpower<2>(fSlow78)) - 1.0f)));
		float 	fSlow82 = (fSlow75 * ((1.0f + fSlow81) - fSlow80));
		float 	fSlow83 = (fSlow80 - fSlow81);
		float 	fSlow84 = expf((fConst38 / fSlow56));
		float 	fSlow85 = ((expf((fConst39 / fSlow56)) / fSlow84) - 1);
		float 	fSlow86 = faustpower<2>(fSlow84);
		float 	fSlow87 = (1.0f - fSlow86);
		float 	fSlow88 = (1.0f - (fConst17 * fSlow86));
		float 	fSlow89 = (fSlow88 / fSlow87);
		float 	fSlow90 = sqrtf(max((float)0, ((faustpower<2>(fSlow88) / faustpower<2>(fSlow87)) - 1.0f)));
		float 	fSlow91 = (fSlow84 * ((1.0f + fSlow90) - fSlow89));
		float 	fSlow92 = (fSlow89 - fSlow90);
		float 	fSlow93 = expf((fConst45 / fSlow56));
		float 	fSlow94 = ((expf((fConst46 / fSlow56)) / fSlow93) - 1);
		float 	fSlow95 = faustpower<2>(fSlow93);
		float 	fSlow96 = (1.0f - fSlow95);
		float 	fSlow97 = (1.0f - (fConst17 * fSlow95));
		float 	fSlow98 = (fSlow97 / fSlow96);
		float 	fSlow99 = sqrtf(max((float)0, ((faustpower<2>(fSlow97) / faustpower<2>(fSlow96)) - 1.0f)));
		float 	fSlow100 = (fSlow93 * ((1.0f + fSlow99) - fSlow98));
		float 	fSlow101 = (fSlow98 - fSlow99);
		float 	fSlow102 = (0.5f * fSlow54);
		int 	iSlow103 = int((int((fConst4 * (float(fslider18) / fSlow8))) & 4095));
		float 	fSlow104 = expf((fConst52 / fSlow56));
		float 	fSlow105 = ((expf((fConst53 / fSlow56)) / fSlow104) - 1);
		float 	fSlow106 = faustpower<2>(fSlow104);
		float 	fSlow107 = (1.0f - fSlow106);
		float 	fSlow108 = (1.0f - (fConst17 * fSlow106));
		float 	fSlow109 = (fSlow108 / fSlow107);
		float 	fSlow110 = sqrtf(max((float)0, ((faustpower<2>(fSlow108) / faustpower<2>(fSlow107)) - 1.0f)));
		float 	fSlow111 = (fSlow104 * ((1.0f + fSlow110) - fSlow109));
		float 	fSlow112 = (fSlow109 - fSlow110);
		float 	fSlow113 = expf((fConst59 / fSlow56));
		float 	fSlow114 = ((expf((fConst60 / fSlow56)) / fSlow113) - 1);
		float 	fSlow115 = faustpower<2>(fSlow113);
		float 	fSlow116 = (1.0f - fSlow115);
		float 	fSlow117 = (1.0f - (fConst17 * fSlow115));
		float 	fSlow118 = (fSlow117 / fSlow116);
		float 	fSlow119 = sqrtf(max((float)0, ((faustpower<2>(fSlow117) / faustpower<2>(fSlow116)) - 1.0f)));
		float 	fSlow120 = (fSlow113 * ((1.0f + fSlow119) - fSlow118));
		float 	fSlow121 = (fSlow118 - fSlow119);
		float 	fSlow122 = expf((fConst66 / fSlow56));
		float 	fSlow123 = ((expf((fConst67 / fSlow56)) / fSlow122) - 1);
		float 	fSlow124 = faustpower<2>(fSlow122);
		float 	fSlow125 = (1.0f - fSlow124);
		float 	fSlow126 = (1.0f - (fConst17 * fSlow124));
		float 	fSlow127 = (fSlow126 / fSlow125);
		float 	fSlow128 = sqrtf(max((float)0, ((faustpower<2>(fSlow126) / faustpower<2>(fSlow125)) - 1.0f)));
		float 	fSlow129 = (fSlow122 * ((1.0f + fSlow128) - fSlow127));
		float 	fSlow130 = (fSlow127 - fSlow128);
		FAUSTFLOAT* output0 = output[0];
		FAUSTFLOAT* output1 = output[1];
		for (int i=0; i<count; i++) {
			fRec0[0] = ((0.999f * fRec0[1]) + fSlow0);
			float fTemp0 = (1 - fRec0[0]);
			iRec1[0] = (iSlow2 & (iRec1[1] | (fRec2[1] >= 1)));
			int iTemp1 = (iSlow3 & (fRec2[1] > 0));
			fRec2[0] = (((fSlow7 * (((iRec1[1] == 0) & iSlow2) & (fRec2[1] < 1))) + (fRec2[1] * (1 - (fSlow5 * iTemp1)))) * ((iTemp1 == 0) | (fRec2[1] >= 1e-06f)));
			float fTemp2 = ((fSlow14 * fRec3[(IOTA-iSlow13)&8191]) + (fSlow12 * fRec3[(IOTA-iSlow11)&8191]));
			fVec0[0] = fTemp2;
			fRec5[0] = (fSlow15 + (0.999f * fRec5[1]));
			iRec6[0] = (iSlow2 & (iRec6[1] | (fRec7[1] >= 1)));
			int iTemp3 = (iSlow3 & (fRec7[1] > 0));
			fRec7[0] = (((fSlow21 * (((iRec6[1] == 0) & iSlow2) & (fRec7[1] < 1))) + (fRec7[1] * (1 - (fConst1 * iTemp3)))) * ((iTemp3 == 0) | (fRec7[1] >= 1e-06f)));
			float fTemp4 = (fRec5[0] * fRec7[0]);
			float fTemp5 = (fTemp4 * (((fSlow19 * fVec0[0]) + (fSlow18 * (fVec0[0] + fVec0[1]))) + (fSlow17 * faustpower<2>(fVec0[0]))));
			float fTemp6 = cosf(fTemp5);
			float fTemp7 = sinf(fTemp5);
			float fTemp8 = (0 - fTemp7);
			float fTemp9 = ((fRec8[1] * fTemp8) + (fVec0[0] * fTemp6));
			float fTemp10 = ((fTemp8 * fRec9[1]) + (fTemp6 * fTemp9));
			float fTemp11 = ((fTemp8 * fRec10[1]) + (fTemp6 * fTemp10));
			float fTemp12 = ((fTemp8 * fRec11[1]) + (fTemp6 * fTemp11));
			float fTemp13 = ((fTemp8 * fRec12[1]) + (fTemp6 * fTemp12));
			fRec13[0] = ((fTemp8 * fRec13[1]) + (fTemp6 * fTemp13));
			fRec12[0] = ((fTemp7 * fTemp13) + (fTemp6 * fRec13[1]));
			fRec11[0] = ((fTemp7 * fTemp12) + (fTemp6 * fRec12[1]));
			fRec10[0] = ((fTemp7 * fTemp11) + (fTemp6 * fRec11[1]));
			fRec9[0] = ((fTemp7 * fTemp10) + (fTemp6 * fRec10[1]));
			fRec8[0] = ((fTemp7 * fTemp9) + (fTemp6 * fRec9[1]));
			fRec16[0] = (fSlow23 + (0.999f * fRec16[1]));
			float fTemp14 = (fRec15[1] + (fConst3 * (fSlow25 + (iSlow24 * fRec16[0]))));
			fRec15[0] = (fTemp14 - floorf(fTemp14));
			float fTemp15 = (3.141592653589793f * (fTemp4 * ftbl0[int((65536.0f * fRec15[0]))]));
			float fTemp16 = cosf(fTemp15);
			float fTemp17 = sinf(fTemp15);
			float fTemp18 = (0 - fTemp17);
			float fTemp19 = ((fRec17[1] * fTemp18) + (fVec0[0] * fTemp16));
			float fTemp20 = ((fTemp18 * fRec18[1]) + (fTemp16 * fTemp19));
			float fTemp21 = ((fTemp18 * fRec19[1]) + (fTemp16 * fTemp20));
			float fTemp22 = ((fTemp18 * fRec20[1]) + (fTemp16 * fTemp21));
			float fTemp23 = ((fTemp18 * fRec21[1]) + (fTemp16 * fTemp22));
			fRec22[0] = ((fTemp18 * fRec22[1]) + (fTemp16 * fTemp23));
			fRec21[0] = ((fTemp17 * fTemp23) + (fTemp16 * fRec22[1]));
			fRec20[0] = ((fTemp17 * fTemp22) + (fTemp16 * fRec21[1]));
			fRec19[0] = ((fTemp17 * fTemp21) + (fTemp16 * fRec20[1]));
			fRec18[0] = ((fTemp17 * fTemp20) + (fTemp16 * fRec19[1]));
			fRec17[0] = ((fTemp17 * fTemp19) + (fTemp16 * fRec18[1]));
			float fTemp24 = (0.4f * ((iSlow26 * ((fVec0[0] * fTemp17) + (fRec17[1] * fTemp16))) + (iSlow22 * ((fRec5[0] * ((fVec0[0] * fTemp7) + (fRec8[1] * fTemp6))) + ((1 - fRec5[0]) * fVec0[0])))));
			float fTemp25 = (fRec23[1] + fSlow27);
			fRec23[0] = (fTemp25 - floorf(fTemp25));
			iRec24[0] = (iSlow2 & (iRec24[1] | (fRec26[1] >= 1)));
			iRec25[0] = (iSlow2 * (1 + iRec25[1]));
			int iTemp26 = (iSlow3 & (fRec26[1] > 0));
			fRec26[0] = (((fSlow34 * (((((iRec24[1] == 0) & iSlow2) & (fRec26[1] < 1)) & (iRec25[1] > fSlow31)) * (1 - (iRec25[1] < fSlow32)))) + (fRec26[1] * (1 - (fSlow29 * iTemp26)))) * ((iTemp26 == 0) | (fRec26[1] >= 1e-06f)));
			iRec27[0] = (12345 + (1103515245 * iRec27[1]));
			fRec28[0] = ((0.999f * fRec28[1]) + fSlow37);
			iRec29[0] = (iSlow39 & (iRec29[1] | (fRec30[1] >= 1)));
			int iTemp27 = (iSlow40 & (fRec30[1] > 0));
			fRec30[0] = (((fSlow46 * (((iRec29[1] == 0) & iSlow39) & (fRec30[1] < 1))) + (fRec30[1] * ((1 - (fSlow44 * (iRec29[1] & (fRec30[1] > 90)))) - (fSlow42 * iTemp27)))) * ((iTemp27 == 0) | (fRec30[1] >= 1e-06f)));
			float fTemp28 = ((((fRec30[0] * fRec28[0]) * (1.1f + (fSlow36 * iRec27[0]))) + (fSlow35 * (fRec26[0] * ftbl0[int((65536.0f * fRec23[0]))]))) + fTemp24);
			fVec1[IOTA&4095] = fTemp28;
			float fTemp29 = (fSlow50 * fVec1[(IOTA-iSlow49)&4095]);
			float fTemp30 = (fSlow52 * fVec1[(IOTA-iSlow51)&4095]);
			float fTemp31 = ((fTemp29 + (fTemp24 + fTemp30)) - faustpower<3>((fTemp30 + fTemp29)));
			fVec2[0] = fTemp31;
			fRec4[0] = ((fConst8 * fRec4[1]) + (fConst7 * (fVec2[0] + fVec2[1])));
			fRec3[IOTA&8191] = fRec4[0];
			float fTemp32 = (fRec3[(IOTA-0)&8191] * fRec2[0]);
			fRec42[0] = ((fConst12 * fRec42[1]) + (fConst11 * (fRec35[1] + fRec35[2])));
			fRec41[0] = ((fSlow65 * fRec41[1]) + (fSlow64 * (fRec35[1] + (fSlow58 * fRec42[0]))));
			fVec3[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec41[0]));
			fVec4[IOTA&4095] = (fSlow55 * (fTemp32 * fRec0[0]));
			float fTemp33 = (0.3f * fVec4[(IOTA-iConst20)&4095]);
			float fTemp34 = ((fTemp33 + fVec3[(IOTA-iConst19)&8191]) - (0.6f * fRec39[1]));
			fVec5[IOTA&2047] = fTemp34;
			fRec39[0] = fVec5[(IOTA-iConst21)&2047];
			float 	fRec40 = (0.6f * fVec5[IOTA&2047]);
			fRec46[0] = ((fConst12 * fRec46[1]) + (fConst11 * (fRec31[1] + fRec31[2])));
			fRec45[0] = ((fSlow74 * fRec45[1]) + (fSlow73 * (fRec31[1] + (fSlow67 * fRec46[0]))));
			fVec6[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec45[0]));
			float fTemp35 = ((fVec6[(IOTA-iConst27)&8191] + fTemp33) - (0.6f * fRec43[1]));
			fVec7[IOTA&1023] = fTemp35;
			fRec43[0] = fVec7[(IOTA-iConst28)&1023];
			float 	fRec44 = (0.6f * fVec7[IOTA&1023]);
			float fTemp36 = (fRec44 + fRec40);
			fRec50[0] = ((fConst12 * fRec50[1]) + (fConst11 * (fRec33[1] + fRec33[2])));
			fRec49[0] = ((fSlow83 * fRec49[1]) + (fSlow82 * (fRec33[1] + (fSlow76 * fRec50[0]))));
			fVec8[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec49[0]));
			float fTemp37 = (fVec8[(IOTA-iConst34)&8191] - (fTemp33 + (0.6f * fRec47[1])));
			fVec9[IOTA&2047] = fTemp37;
			fRec47[0] = fVec9[(IOTA-iConst35)&2047];
			float 	fRec48 = (0.6f * fVec9[IOTA&2047]);
			fRec54[0] = ((fConst12 * fRec54[1]) + (fConst11 * (fRec37[1] + fRec37[2])));
			fRec53[0] = ((fSlow92 * fRec53[1]) + (fSlow91 * (fRec37[1] + (fSlow85 * fRec54[0]))));
			fVec10[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec53[0]));
			float fTemp38 = (fVec10[(IOTA-iConst41)&8191] - (fTemp33 + (0.6f * fRec51[1])));
			fVec11[IOTA&1023] = fTemp38;
			fRec51[0] = fVec11[(IOTA-iConst42)&1023];
			float 	fRec52 = (0.6f * fVec11[IOTA&1023]);
			float fTemp39 = (fRec52 + (fRec48 + fTemp36));
			fRec58[0] = ((fConst12 * fRec58[1]) + (fConst11 * (fRec32[1] + fRec32[2])));
			fRec57[0] = ((fSlow101 * fRec57[1]) + (fSlow100 * (fRec32[1] + (fSlow94 * fRec58[0]))));
			fVec12[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec57[0]));
			fVec13[IOTA&4095] = (fSlow102 * fTemp32);
			float fTemp40 = fVec13[(IOTA-iSlow103)&4095];
			fVec14[IOTA&4095] = (fSlow53 * (fRec0[0] * fTemp40));
			float fTemp41 = (0.3f * fVec14[(IOTA-iConst20)&4095]);
			float fTemp42 = (fTemp41 + ((0.6f * fRec55[1]) + fVec12[(IOTA-iConst48)&16383]));
			fVec15[IOTA&2047] = fTemp42;
			fRec55[0] = fVec15[(IOTA-iConst49)&2047];
			float 	fRec56 = (0 - (0.6f * fVec15[IOTA&2047]));
			fRec62[0] = ((fConst12 * fRec62[1]) + (fConst11 * (fRec36[1] + fRec36[2])));
			fRec61[0] = ((fSlow112 * fRec61[1]) + (fSlow111 * (fRec36[1] + (fSlow105 * fRec62[0]))));
			fVec16[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec61[0]));
			float fTemp43 = (fVec16[(IOTA-iConst55)&8191] + (fTemp41 + (0.6f * fRec59[1])));
			fVec17[IOTA&2047] = fTemp43;
			fRec59[0] = fVec17[(IOTA-iConst56)&2047];
			float 	fRec60 = (0 - (0.6f * fVec17[IOTA&2047]));
			fRec66[0] = ((fConst12 * fRec66[1]) + (fConst11 * (fRec34[1] + fRec34[2])));
			fRec65[0] = ((fSlow121 * fRec65[1]) + (fSlow120 * (fRec34[1] + (fSlow114 * fRec66[0]))));
			fVec18[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec65[0]));
			float fTemp44 = (((0.6f * fRec63[1]) + fVec18[(IOTA-iConst62)&16383]) - fTemp41);
			fVec19[IOTA&2047] = fTemp44;
			fRec63[0] = fVec19[(IOTA-iConst63)&2047];
			float 	fRec64 = (0 - (0.6f * fVec19[IOTA&2047]));
			fRec70[0] = ((fConst12 * fRec70[1]) + (fConst11 * (fRec38[1] + fRec38[2])));
			fRec69[0] = ((fSlow130 * fRec69[1]) + (fSlow129 * (fRec38[1] + (fSlow123 * fRec70[0]))));
			fVec20[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec69[0]));
			float fTemp45 = (((0.6f * fRec67[1]) + fVec20[(IOTA-iConst69)&16383]) - fTemp41);
			fVec21[IOTA&1023] = fTemp45;
			fRec67[0] = fVec21[(IOTA-iConst70)&1023];
			float 	fRec68 = (0 - (0.6f * fVec21[IOTA&1023]));
			fRec31[0] = (fRec67[1] + (fRec63[1] + (fRec59[1] + (fRec55[1] + (fRec51[1] + (fRec47[1] + (fRec39[1] + (fRec43[1] + (fRec68 + (fRec64 + (fRec60 + (fRec56 + fTemp39))))))))))));
			fRec32[0] = (0 - ((fRec67[1] + (fRec63[1] + (fRec59[1] + (fRec55[1] + (fRec68 + (fRec64 + (fRec56 + fRec60))))))) - (fRec51[1] + (fRec47[1] + (fRec39[1] + (fRec43[1] + fTemp39))))));
			float fTemp46 = (fRec48 + fRec52);
			fRec33[0] = (0 - ((fRec67[1] + (fRec63[1] + (fRec51[1] + (fRec47[1] + (fRec68 + (fRec64 + fTemp46)))))) - (fRec59[1] + (fRec55[1] + (fRec39[1] + (fRec43[1] + (fRec60 + (fRec56 + fTemp36))))))));
			fRec34[0] = (0 - ((fRec59[1] + (fRec55[1] + (fRec51[1] + (fRec47[1] + (fRec60 + (fRec56 + fTemp46)))))) - (fRec67[1] + (fRec63[1] + (fRec39[1] + (fRec43[1] + (fRec68 + (fRec64 + fTemp36))))))));
			float fTemp47 = (fRec44 + fRec48);
			float fTemp48 = (fRec40 + fRec52);
			fRec35[0] = (0 - ((fRec67[1] + (fRec59[1] + (fRec51[1] + (fRec39[1] + (fRec68 + (fRec60 + fTemp48)))))) - (fRec63[1] + (fRec55[1] + (fRec47[1] + (fRec43[1] + (fRec64 + (fRec56 + fTemp47))))))));
			fRec36[0] = (0 - ((fRec63[1] + (fRec55[1] + (fRec51[1] + (fRec39[1] + (fRec64 + (fRec56 + fTemp48)))))) - (fRec67[1] + (fRec59[1] + (fRec47[1] + (fRec43[1] + (fRec68 + (fRec60 + fTemp47))))))));
			float fTemp49 = (fRec44 + fRec52);
			float fTemp50 = (fRec40 + fRec48);
			fRec37[0] = (0 - ((fRec63[1] + (fRec59[1] + (fRec47[1] + (fRec39[1] + (fRec64 + (fRec60 + fTemp50)))))) - (fRec67[1] + (fRec55[1] + (fRec51[1] + (fRec43[1] + (fRec68 + (fRec56 + fTemp49))))))));
			fRec38[0] = (0 - ((fRec67[1] + (fRec55[1] + (fRec47[1] + (fRec39[1] + (fRec68 + (fRec56 + fTemp50)))))) - (fRec63[1] + (fRec59[1] + (fRec51[1] + (fRec43[1] + (fRec64 + (fRec60 + fTemp49))))))));
			output0[i] = (FAUSTFLOAT)((0.37f * (fRec32[0] + fRec33[0])) + (fSlow55 * (fTemp32 * fTemp0)));
			output1[i] = (FAUSTFLOAT)((0.37f * (fRec32[0] - fRec33[0])) + (fSlow53 * (fTemp0 * fTemp40)));
			// post processing
			fRec38[2] = fRec38[1]; fRec38[1] = fRec38[0];
			fRec37[2] = fRec37[1]; fRec37[1] = fRec37[0];
			fRec36[2] = fRec36[1]; fRec36[1] = fRec36[0];
			fRec35[2] = fRec35[1]; fRec35[1] = fRec35[0];
			fRec34[2] = fRec34[1]; fRec34[1] = fRec34[0];
			fRec33[2] = fRec33[1]; fRec33[1] = fRec33[0];
			fRec32[2] = fRec32[1]; fRec32[1] = fRec32[0];
			fRec31[2] = fRec31[1]; fRec31[1] = fRec31[0];
			fRec67[1] = fRec67[0];
			fRec69[1] = fRec69[0];
			fRec70[1] = fRec70[0];
			fRec63[1] = fRec63[0];
			fRec65[1] = fRec65[0];
			fRec66[1] = fRec66[0];
			fRec59[1] = fRec59[0];
			fRec61[1] = fRec61[0];
			fRec62[1] = fRec62[0];
			fRec55[1] = fRec55[0];
			fRec57[1] = fRec57[0];
			fRec58[1] = fRec58[0];
			fRec51[1] = fRec51[0];
			fRec53[1] = fRec53[0];
			fRec54[1] = fRec54[0];
			fRec47[1] = fRec47[0];
			fRec49[1] = fRec49[0];
			fRec50[1] = fRec50[0];
			fRec43[1] = fRec43[0];
			fRec45[1] = fRec45[0];
			fRec46[1] = fRec46[0];
			fRec39[1] = fRec39[0];
			fRec41[1] = fRec41[0];
			fRec42[1] = fRec42[0];
			fRec4[1] = fRec4[0];
			fVec2[1] = fVec2[0];
			IOTA = IOTA+1;
			fRec30[1] = fRec30[0];
			iRec29[1] = iRec29[0];
			fRec28[1] = fRec28[0];
			iRec27[1] = iRec27[0];
			fRec26[1] = fRec26[0];
			iRec25[1] = iRec25[0];
			iRec24[1] = iRec24[0];
			fRec23[1] = fRec23[0];
			fRec17[1] = fRec17[0];
			fRec18[1] = fRec18[0];
			fRec19[1] = fRec19[0];
			fRec20[1] = fRec20[0];
			fRec21[1] = fRec21[0];
			fRec22[1] = fRec22[0];
			fRec15[1] = fRec15[0];
			fRec16[1] = fRec16[0];
			fRec8[1] = fRec8[0];
			fRec9[1] = fRec9[0];
			fRec10[1] = fRec10[0];
			fRec11[1] = fRec11[0];
			fRec12[1] = fRec12[0];
			fRec13[1] = fRec13[0];
			fRec7[1] = fRec7[0];
			iRec6[1] = iRec6[0];
			fRec5[1] = fRec5[0];
			fVec0[1] = fVec0[0];
			fRec2[1] = fRec2[0];
			iRec1[1] = iRec1[0];
			fRec0[1] = fRec0[0];
		}
	}
};


float 	mydsp::ftbl0[65536];
