//-----------------------------------------------------
// name: "Clarinet"
// author: "Romain Michon"
// copyright: "Romain Michon (rmichon@ccrma.stanford.edu)"
// version: "1.0"
//
// Code generated with Faust 0.9.70 (http://faust.grame.fr)
//-----------------------------------------------------
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif  

typedef long double quad;
/* link with  */
#include <math.h>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline float faustpower(float x)          { return powf(x,N); } 
template <int N> inline double faustpower(double x)        { return pow(x,N); }
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <>   inline int faustpower<0>(int x)            { return 1; }
template <>   inline int faustpower<1>(int x)            { return x; }
#endif

#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	class SIG0 {
	  private:
		int 	fSamplingFreq;
		int 	iRec2[2];
	  public:
		int getNumInputs() 	{ return 0; }
		int getNumOutputs() 	{ return 1; }
		void init(int samplingFreq) {
			fSamplingFreq = samplingFreq;
			for (int i=0; i<2; i++) iRec2[i] = 0;
		}
		void fill (int count, float output[]) {
			for (int i=0; i<count; i++) {
				iRec2[0] = (1 + iRec2[1]);
				output[i] = sinf((9.587379924285257e-05f * float((iRec2[0] - 1))));
				// post processing
				iRec2[1] = iRec2[0];
			}
		}
	};


	FAUSTFLOAT 	fslider0;
	float 	fRec0[2];
	static float 	ftbl0[65536];
	FAUSTFLOAT 	fslider1;
	int 	iConst0;
	float 	fConst1;
	float 	fConst2;
	float 	fRec3[2];
	FAUSTFLOAT 	fbutton0;
	int 	iRec4[2];
	int 	iRec5[2];
	FAUSTFLOAT 	fslider2;
	FAUSTFLOAT 	fslider3;
	float 	fConst3;
	float 	fConst4;
	float 	fRec6[2];
	FAUSTFLOAT 	fslider4;
	int 	iRec7[2];
	FAUSTFLOAT 	fslider5;
	int 	iRec8[2];
	FAUSTFLOAT 	fslider6;
	FAUSTFLOAT 	fslider7;
	FAUSTFLOAT 	fslider8;
	float 	fRec9[2];
	FAUSTFLOAT 	fslider9;
	FAUSTFLOAT 	fentry0;
	FAUSTFLOAT 	fslider10;
	FAUSTFLOAT 	fentry1;
	float 	fConst5;
	float 	fVec0[2];
	float 	fRec11[2];
	int 	iRec12[2];
	FAUSTFLOAT 	fslider11;
	float 	fRec13[2];
	float 	fRec19[2];
	float 	fRec18[2];
	float 	fRec17[2];
	float 	fRec16[2];
	float 	fRec15[2];
	float 	fRec14[2];
	FAUSTFLOAT 	fslider12;
	float 	fRec21[2];
	float 	fRec20[2];
	float 	fRec27[2];
	float 	fRec26[2];
	float 	fRec25[2];
	float 	fRec24[2];
	float 	fRec23[2];
	float 	fRec22[2];
	float 	fRec10[2];
	FAUSTFLOAT 	fslider13;
	int 	IOTA;
	float 	fRec1[8192];
	FAUSTFLOAT 	fslider14;
	FAUSTFLOAT 	fentry2;
	float 	fConst6;
	float 	fConst7;
	float 	fConst8;
	float 	fConst9;
	float 	fRec39[2];
	FAUSTFLOAT 	fslider15;
	float 	fConst10;
	float 	fConst11;
	float 	fConst12;
	float 	fConst13;
	float 	fConst14;
	float 	fRec38[2];
	float 	fVec1[8192];
	float 	fConst15;
	int 	iConst16;
	float 	fVec2[4096];
	int 	iConst17;
	float 	fVec3[2048];
	int 	iConst18;
	float 	fRec36[2];
	float 	fRec43[2];
	float 	fConst19;
	float 	fConst20;
	float 	fConst21;
	float 	fConst22;
	float 	fRec42[2];
	float 	fVec4[8192];
	float 	fConst23;
	int 	iConst24;
	float 	fVec5[1024];
	int 	iConst25;
	float 	fRec40[2];
	float 	fRec47[2];
	float 	fConst26;
	float 	fConst27;
	float 	fConst28;
	float 	fConst29;
	float 	fRec46[2];
	float 	fVec6[8192];
	float 	fConst30;
	int 	iConst31;
	float 	fVec7[2048];
	int 	iConst32;
	float 	fRec44[2];
	float 	fRec51[2];
	float 	fConst33;
	float 	fConst34;
	float 	fConst35;
	float 	fConst36;
	float 	fRec50[2];
	float 	fVec8[8192];
	float 	fConst37;
	int 	iConst38;
	float 	fVec9[1024];
	int 	iConst39;
	float 	fRec48[2];
	float 	fRec55[2];
	float 	fConst40;
	float 	fConst41;
	float 	fConst42;
	float 	fConst43;
	float 	fRec54[2];
	float 	fVec10[16384];
	float 	fConst44;
	int 	iConst45;
	float 	fVec11[4096];
	FAUSTFLOAT 	fslider16;
	float 	fVec12[4096];
	float 	fVec13[2048];
	int 	iConst46;
	float 	fRec52[2];
	float 	fRec59[2];
	float 	fConst47;
	float 	fConst48;
	float 	fConst49;
	float 	fConst50;
	float 	fRec58[2];
	float 	fVec14[8192];
	float 	fConst51;
	int 	iConst52;
	float 	fVec15[2048];
	int 	iConst53;
	float 	fRec56[2];
	float 	fRec63[2];
	float 	fConst54;
	float 	fConst55;
	float 	fConst56;
	float 	fConst57;
	float 	fRec62[2];
	float 	fVec16[16384];
	float 	fConst58;
	int 	iConst59;
	float 	fVec17[2048];
	int 	iConst60;
	float 	fRec60[2];
	float 	fRec67[2];
	float 	fConst61;
	float 	fConst62;
	float 	fConst63;
	float 	fConst64;
	float 	fRec66[2];
	float 	fVec18[16384];
	float 	fConst65;
	int 	iConst66;
	float 	fVec19[1024];
	int 	iConst67;
	float 	fRec64[2];
	float 	fRec28[3];
	float 	fRec29[3];
	float 	fRec30[3];
	float 	fRec31[3];
	float 	fRec32[3];
	float 	fRec33[3];
	float 	fRec34[3];
	float 	fRec35[3];
  public:
	static void metadata(Meta* m) 	{ 
		m->declare("name", "Clarinet");
		m->declare("description", "Nonlinear WaveGuide Clarinet");
		m->declare("author", "Romain Michon");
		m->declare("copyright", "Romain Michon (rmichon@ccrma.stanford.edu)");
		m->declare("version", "1.0");
		m->declare("licence", "STK-4.3");
		m->declare("reference", "https://ccrma.stanford.edu/~jos/pasp/Woodwinds.html");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/version", "1.0");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/version", "1.0");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("instrument.lib/name", "Faust-STK Tools Library");
		m->declare("instrument.lib/author", "Romain Michon (rmichon@ccrma.stanford.edu)");
		m->declare("instrument.lib/copyright", "Romain Michon");
		m->declare("instrument.lib/version", "1.0");
		m->declare("instrument.lib/licence", "STK-4.3");
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/version", "1.29");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("effect.lib/name", "Faust Audio Effect Library");
		m->declare("effect.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/copyright", "Julius O. Smith III");
		m->declare("effect.lib/version", "1.33");
		m->declare("effect.lib/license", "STK-4.3");
		m->declare("effect.lib/exciter_name", "Harmonic Exciter");
		m->declare("effect.lib/exciter_author", "Priyanka Shekar (pshekar@ccrma.stanford.edu)");
		m->declare("effect.lib/exciter_copyright", "Copyright (c) 2013 Priyanka Shekar");
		m->declare("effect.lib/exciter_version", "1.0");
		m->declare("effect.lib/exciter_license", "MIT License (MIT)");
	}

	virtual int getNumInputs() 	{ return 0; }
	virtual int getNumOutputs() 	{ return 2; }
	static void classInit(int samplingFreq) {
		SIG0 sig0;
		sig0.init(samplingFreq);
		sig0.fill(65536,ftbl0);
	}
	virtual void instanceInit(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fslider0 = 0.137f;
		for (int i=0; i<2; i++) fRec0[i] = 0;
		fslider1 = 5.0f;
		iConst0 = min(192000, max(1, fSamplingFreq));
		fConst1 = float(iConst0);
		fConst2 = (1.0f / fConst1);
		for (int i=0; i<2; i++) fRec3[i] = 0;
		fbutton0 = 0.0;
		for (int i=0; i<2; i++) iRec4[i] = 0;
		for (int i=0; i<2; i++) iRec5[i] = 0;
		fslider2 = 0.01f;
		fslider3 = 0.5f;
		fConst3 = (0.2f * iConst0);
		fConst4 = (1.8f * iConst0);
		for (int i=0; i<2; i++) fRec6[i] = 0;
		fslider4 = 0.1f;
		for (int i=0; i<2; i++) iRec7[i] = 0;
		fslider5 = 0.0f;
		for (int i=0; i<2; i++) iRec8[i] = 0;
		fslider6 = 0.1f;
		fslider7 = 0.05f;
		fslider8 = 0.01f;
		for (int i=0; i<2; i++) fRec9[i] = 0;
		fslider9 = 1.0f;
		fentry0 = 0.0f;
		fslider10 = 0.0f;
		fentry1 = 4.4e+02f;
		fConst5 = (0.5f * iConst0);
		for (int i=0; i<2; i++) fVec0[i] = 0;
		for (int i=0; i<2; i++) fRec11[i] = 0;
		for (int i=0; i<2; i++) iRec12[i] = 0;
		fslider11 = 0.1f;
		for (int i=0; i<2; i++) fRec13[i] = 0;
		for (int i=0; i<2; i++) fRec19[i] = 0;
		for (int i=0; i<2; i++) fRec18[i] = 0;
		for (int i=0; i<2; i++) fRec17[i] = 0;
		for (int i=0; i<2; i++) fRec16[i] = 0;
		for (int i=0; i<2; i++) fRec15[i] = 0;
		for (int i=0; i<2; i++) fRec14[i] = 0;
		fslider12 = 2.2e+02f;
		for (int i=0; i<2; i++) fRec21[i] = 0;
		for (int i=0; i<2; i++) fRec20[i] = 0;
		for (int i=0; i<2; i++) fRec27[i] = 0;
		for (int i=0; i<2; i++) fRec26[i] = 0;
		for (int i=0; i<2; i++) fRec25[i] = 0;
		for (int i=0; i<2; i++) fRec24[i] = 0;
		for (int i=0; i<2; i++) fRec23[i] = 0;
		for (int i=0; i<2; i++) fRec22[i] = 0;
		for (int i=0; i<2; i++) fRec10[i] = 0;
		fslider13 = 0.5f;
		IOTA = 0;
		for (int i=0; i<8192; i++) fRec1[i] = 0;
		fslider14 = 0.6f;
		fentry2 = 1.0f;
		fConst6 = (1.0f / tanf((628.3185307179587f / float(iConst0))));
		fConst7 = (1 + fConst6);
		fConst8 = (1.0f / fConst7);
		fConst9 = (0 - ((1 - fConst6) / fConst7));
		for (int i=0; i<2; i++) fRec39[i] = 0;
		fslider15 = 0.72f;
		fConst10 = floorf((0.5f + (0.174713f * iConst0)));
		fConst11 = ((0 - (6.907755278982138f * fConst10)) / float(iConst0));
		fConst12 = (0.5f * fConst11);
		fConst13 = (0.3333333333333333f * fConst11);
		fConst14 = cosf((37699.11184307752f / fConst1));
		for (int i=0; i<2; i++) fRec38[i] = 0;
		for (int i=0; i<8192; i++) fVec1[i] = 0;
		fConst15 = floorf((0.5f + (0.022904f * iConst0)));
		iConst16 = int((int((fConst10 - fConst15)) & 8191));
		for (int i=0; i<4096; i++) fVec2[i] = 0;
		iConst17 = int((int((0.02f * iConst0)) & 8191));
		for (int i=0; i<2048; i++) fVec3[i] = 0;
		iConst18 = int((int((fConst15 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec36[i] = 0;
		for (int i=0; i<2; i++) fRec43[i] = 0;
		fConst19 = floorf((0.5f + (0.153129f * iConst0)));
		fConst20 = ((0 - (6.907755278982138f * fConst19)) / float(iConst0));
		fConst21 = (0.5f * fConst20);
		fConst22 = (0.3333333333333333f * fConst20);
		for (int i=0; i<2; i++) fRec42[i] = 0;
		for (int i=0; i<8192; i++) fVec4[i] = 0;
		fConst23 = floorf((0.5f + (0.020346f * iConst0)));
		iConst24 = int((int((fConst19 - fConst23)) & 8191));
		for (int i=0; i<1024; i++) fVec5[i] = 0;
		iConst25 = int((int((fConst23 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec40[i] = 0;
		for (int i=0; i<2; i++) fRec47[i] = 0;
		fConst26 = floorf((0.5f + (0.127837f * iConst0)));
		fConst27 = ((0 - (6.907755278982138f * fConst26)) / float(iConst0));
		fConst28 = (0.5f * fConst27);
		fConst29 = (0.3333333333333333f * fConst27);
		for (int i=0; i<2; i++) fRec46[i] = 0;
		for (int i=0; i<8192; i++) fVec6[i] = 0;
		fConst30 = floorf((0.5f + (0.031604f * iConst0)));
		iConst31 = int((int((fConst26 - fConst30)) & 8191));
		for (int i=0; i<2048; i++) fVec7[i] = 0;
		iConst32 = int((int((fConst30 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec44[i] = 0;
		for (int i=0; i<2; i++) fRec51[i] = 0;
		fConst33 = floorf((0.5f + (0.125f * iConst0)));
		fConst34 = ((0 - (6.907755278982138f * fConst33)) / float(iConst0));
		fConst35 = (0.5f * fConst34);
		fConst36 = (0.3333333333333333f * fConst34);
		for (int i=0; i<2; i++) fRec50[i] = 0;
		for (int i=0; i<8192; i++) fVec8[i] = 0;
		fConst37 = floorf((0.5f + (0.013458f * iConst0)));
		iConst38 = int((int((fConst33 - fConst37)) & 8191));
		for (int i=0; i<1024; i++) fVec9[i] = 0;
		iConst39 = int((int((fConst37 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec48[i] = 0;
		for (int i=0; i<2; i++) fRec55[i] = 0;
		fConst40 = floorf((0.5f + (0.210389f * iConst0)));
		fConst41 = ((0 - (6.907755278982138f * fConst40)) / float(iConst0));
		fConst42 = (0.5f * fConst41);
		fConst43 = (0.3333333333333333f * fConst41);
		for (int i=0; i<2; i++) fRec54[i] = 0;
		for (int i=0; i<16384; i++) fVec10[i] = 0;
		fConst44 = floorf((0.5f + (0.024421f * iConst0)));
		iConst45 = int((int((fConst40 - fConst44)) & 16383));
		for (int i=0; i<4096; i++) fVec11[i] = 0;
		fslider16 = 0.5f;
		for (int i=0; i<4096; i++) fVec12[i] = 0;
		for (int i=0; i<2048; i++) fVec13[i] = 0;
		iConst46 = int((int((fConst44 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec52[i] = 0;
		for (int i=0; i<2; i++) fRec59[i] = 0;
		fConst47 = floorf((0.5f + (0.192303f * iConst0)));
		fConst48 = ((0 - (6.907755278982138f * fConst47)) / float(iConst0));
		fConst49 = (0.5f * fConst48);
		fConst50 = (0.3333333333333333f * fConst48);
		for (int i=0; i<2; i++) fRec58[i] = 0;
		for (int i=0; i<8192; i++) fVec14[i] = 0;
		fConst51 = floorf((0.5f + (0.029291f * iConst0)));
		iConst52 = int((int((fConst47 - fConst51)) & 8191));
		for (int i=0; i<2048; i++) fVec15[i] = 0;
		iConst53 = int((int((fConst51 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec56[i] = 0;
		for (int i=0; i<2; i++) fRec63[i] = 0;
		fConst54 = floorf((0.5f + (0.256891f * iConst0)));
		fConst55 = ((0 - (6.907755278982138f * fConst54)) / float(iConst0));
		fConst56 = (0.5f * fConst55);
		fConst57 = (0.3333333333333333f * fConst55);
		for (int i=0; i<2; i++) fRec62[i] = 0;
		for (int i=0; i<16384; i++) fVec16[i] = 0;
		fConst58 = floorf((0.5f + (0.027333f * iConst0)));
		iConst59 = int((int((fConst54 - fConst58)) & 16383));
		for (int i=0; i<2048; i++) fVec17[i] = 0;
		iConst60 = int((int((fConst58 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec60[i] = 0;
		for (int i=0; i<2; i++) fRec67[i] = 0;
		fConst61 = floorf((0.5f + (0.219991f * iConst0)));
		fConst62 = ((0 - (6.907755278982138f * fConst61)) / float(iConst0));
		fConst63 = (0.5f * fConst62);
		fConst64 = (0.3333333333333333f * fConst62);
		for (int i=0; i<2; i++) fRec66[i] = 0;
		for (int i=0; i<16384; i++) fVec18[i] = 0;
		fConst65 = floorf((0.5f + (0.019123f * iConst0)));
		iConst66 = int((int((fConst61 - fConst65)) & 16383));
		for (int i=0; i<1024; i++) fVec19[i] = 0;
		iConst67 = int((int((fConst65 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec64[i] = 0;
		for (int i=0; i<3; i++) fRec28[i] = 0;
		for (int i=0; i<3; i++) fRec29[i] = 0;
		for (int i=0; i<3; i++) fRec30[i] = 0;
		for (int i=0; i<3; i++) fRec31[i] = 0;
		for (int i=0; i<3; i++) fRec32[i] = 0;
		for (int i=0; i<3; i++) fRec33[i] = 0;
		for (int i=0; i<3; i++) fRec34[i] = 0;
		for (int i=0; i<3; i++) fRec35[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void buildUserInterface(UI* interface) {
		interface->openVerticalBox("0x00");
		interface->openHorizontalBox("Basic_Parameters");
		interface->declare(&fentry1, "1", "");
		interface->declare(&fentry1, "tooltip", "Tone frequency");
		interface->declare(&fentry1, "unit", "Hz");
		interface->addNumEntry("freq", &fentry1, 4.4e+02f, 2e+01f, 2e+04f, 1.0f);
		interface->declare(&fentry2, "1", "");
		interface->declare(&fentry2, "tooltip", "Gain (value between 0 and 1)");
		interface->addNumEntry("gain", &fentry2, 1.0f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fbutton0, "1", "");
		interface->declare(&fbutton0, "tooltip", "noteOn = 1, noteOff = 0");
		interface->addButton("gate", &fbutton0);
		interface->closeBox();
		interface->openHorizontalBox("Envelopes_and_Vibrato");
		interface->openVerticalBox("Envelope_Parameters");
		interface->declare(&fslider8, "5", "");
		interface->declare(&fslider8, "tooltip", "Envelope attack duration");
		interface->declare(&fslider8, "unit", "s");
		interface->addHorizontalSlider("Envelope_Attack", &fslider8, 0.01f, 0.0f, 2.0f, 0.01f);
		interface->declare(&fslider7, "5", "");
		interface->declare(&fslider7, "tooltip", "Envelope decay duration");
		interface->declare(&fslider7, "unit", "s");
		interface->addHorizontalSlider("Envelope_Decay", &fslider7, 0.05f, 0.0f, 2.0f, 0.01f);
		interface->declare(&fslider6, "5", "");
		interface->declare(&fslider6, "tooltip", "Envelope release duration");
		interface->declare(&fslider6, "unit", "s");
		interface->addHorizontalSlider("Envelope_Release", &fslider6, 0.1f, 0.0f, 2.0f, 0.01f);
		interface->closeBox();
		interface->openVerticalBox("Vibrato_Parameters");
		interface->declare(&fslider3, "4", "");
		interface->declare(&fslider3, "tooltip", "Vibrato attack duration");
		interface->declare(&fslider3, "unit", "s");
		interface->addHorizontalSlider("Vibrato_Attack", &fslider3, 0.5f, 0.0f, 2.0f, 0.01f);
		interface->declare(&fslider1, "4", "");
		interface->declare(&fslider1, "unit", "Hz");
		interface->addHorizontalSlider("Vibrato_Freq", &fslider1, 5.0f, 1.0f, 15.0f, 0.1f);
		interface->declare(&fslider4, "4", "");
		interface->declare(&fslider4, "tooltip", "A value between 0 and 1");
		interface->addHorizontalSlider("Vibrato_Gain", &fslider4, 0.1f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fslider2, "4", "");
		interface->declare(&fslider2, "tooltip", "Vibrato release duration");
		interface->declare(&fslider2, "unit", "s");
		interface->addHorizontalSlider("Vibrato_Release", &fslider2, 0.01f, 0.0f, 2.0f, 0.01f);
		interface->closeBox();
		interface->closeBox();
		interface->openHorizontalBox("Physical_and_Nonlinearity");
		interface->openVerticalBox("Nonlinear_Filter_Parameters");
		interface->declare(&fslider12, "3", "");
		interface->declare(&fslider12, "tooltip", "Frequency of the sine wave for the modulation of theta (works if Modulation Type=3)");
		interface->declare(&fslider12, "unit", "Hz");
		interface->addHorizontalSlider("Modulation_Frequency", &fslider12, 2.2e+02f, 2e+01f, 1e+03f, 0.1f);
		interface->declare(&fentry0, "3", "");
		interface->declare(&fentry0, "tooltip", "0=theta is modulated by the incoming signal; 1=theta is modulated by the averaged incoming signal; 2=theta is modulated by the squared incoming signal; 3=theta is modulated by a sine wave of frequency freqMod; 4=theta is modulated by a sine wave of frequency freq;");
		interface->addNumEntry("Modulation_Type", &fentry0, 0.0f, 0.0f, 4.0f, 1.0f);
		interface->declare(&fslider10, "3", "");
		interface->declare(&fslider10, "tooltip", "Nonlinearity factor (value between 0 and 1)");
		interface->addHorizontalSlider("Nonlinearity", &fslider10, 0.0f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fslider11, "3", "");
		interface->declare(&fslider11, "Attack duration of the nonlinearity", "");
		interface->declare(&fslider11, "unit", "s");
		interface->addHorizontalSlider("Nonlinearity_Attack", &fslider11, 0.1f, 0.0f, 2.0f, 0.01f);
		interface->closeBox();
		interface->openVerticalBox("Physical_Parameters");
		interface->declare(&fslider5, "2", "");
		interface->declare(&fslider5, "tooltip", "Breath noise gain (value between 0 and 1)");
		interface->addHorizontalSlider("Noise_Gain", &fslider5, 0.0f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fslider9, "2", "");
		interface->declare(&fslider9, "tooltip", "Breath pressure (value bewteen 0 and 1)");
		interface->addHorizontalSlider("Pressure", &fslider9, 1.0f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fslider13, "2", "");
		interface->declare(&fslider13, "tooltip", "Reed stiffness (value between 0 and 1)");
		interface->addHorizontalSlider("Reed_Stiffness", &fslider13, 0.5f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->closeBox();
		interface->openVerticalBox("Reverb");
		interface->addHorizontalSlider("reverbGain", &fslider0, 0.137f, 0.0f, 1.0f, 0.01f);
		interface->addHorizontalSlider("roomSize", &fslider15, 0.72f, 0.01f, 2.0f, 0.01f);
		interface->closeBox();
		interface->openVerticalBox("Spat");
		interface->addHorizontalSlider("pan angle", &fslider14, 0.6f, 0.0f, 1.0f, 0.01f);
		interface->addHorizontalSlider("spatial width", &fslider16, 0.5f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0 = (0.0010000000000000009f * float(fslider0));
		float 	fSlow1 = (fConst2 * float(fslider1));
		float 	fSlow2 = float(fbutton0);
		int 	iSlow3 = (fSlow2 > 0);
		int 	iSlow4 = (fSlow2 <= 0);
		float 	fSlow5 = float(fslider2);
		float 	fSlow6 = (1 - (1.0f / powf(1e+05f,(1.0f / ((fSlow5 == 0.0f) + (iConst0 * fSlow5))))));
		float 	fSlow7 = float(fslider3);
		float 	fSlow8 = (fConst3 * fSlow7);
		float 	fSlow9 = (fSlow8 + ((0.2f * fSlow7) == 0.0f));
		float 	fSlow10 = (1.0f / ((fConst4 * fSlow7) + ((1.8f * fSlow7) == 0.0f)));
		float 	fSlow11 = float(fslider4);
		float 	fSlow12 = (4.1909515877212175e-10f * float(fslider5));
		float 	fSlow13 = float(fslider6);
		float 	fSlow14 = (1 - (1.0f / powf(1e+05f,(1.0f / ((fSlow13 == 0.0f) + (iConst0 * fSlow13))))));
		float 	fSlow15 = float(fslider7);
		float 	fSlow16 = (1 - powf(1e+02f,(1.0f / ((fSlow15 == 0.0f) + (iConst0 * fSlow15)))));
		float 	fSlow17 = float(fslider8);
		float 	fSlow18 = (1.0f / ((fSlow17 == 0.0f) + (iConst0 * fSlow17)));
		float 	fSlow19 = float(fslider9);
		float 	fSlow20 = float(fentry0);
		float 	fSlow21 = float(fslider10);
		float 	fSlow22 = (6 * (fSlow21 * (fSlow20 < 2)));
		float 	fSlow23 = float(fentry1);
		float 	fSlow24 = (fConst5 / fSlow23);
		int 	iSlow25 = int((fSlow24 - (1.5f + fSlow22)));
		int 	iSlow26 = int((1 + int((int((1 + iSlow25)) & 4095))));
		float 	fSlow27 = (fSlow22 + iSlow25);
		float 	fSlow28 = (fSlow24 - (1.5f + fSlow27));
		int 	iSlow29 = int((1 + int((iSlow25 & 4095))));
		float 	fSlow30 = ((fSlow27 + 2.5f) - fSlow24);
		float 	fSlow31 = (0.0010000000000000009f * fSlow21);
		float 	fSlow32 = (3.141592653589793f * (fSlow20 == 2));
		float 	fSlow33 = (1.5707963267948966f * (fSlow20 == 1));
		float 	fSlow34 = (3.141592653589793f * (fSlow20 == 0));
		float 	fSlow35 = float(fslider11);
		float 	fSlow36 = (1.0f / ((fSlow35 == 0.0f) + (iConst0 * fSlow35)));
		int 	iSlow37 = (fSlow20 < 3);
		float 	fSlow38 = (0.0010000000000000009f * float(fslider12));
		int 	iSlow39 = (fSlow20 != 4);
		float 	fSlow40 = (fSlow23 * (fSlow20 == 4));
		int 	iSlow41 = (fSlow20 >= 3);
		float 	fSlow42 = ((0.26f * float(fslider13)) - 0.44f);
		float 	fSlow43 = float(fslider14);
		float 	fSlow44 = float(fentry2);
		float 	fSlow45 = (1.5f * (fSlow44 * (1.0f - fSlow43)));
		float 	fSlow46 = float(fslider15);
		float 	fSlow47 = expf((fConst12 / fSlow46));
		float 	fSlow48 = ((expf((fConst13 / fSlow46)) / fSlow47) - 1);
		float 	fSlow49 = faustpower<2>(fSlow47);
		float 	fSlow50 = (1.0f - fSlow49);
		float 	fSlow51 = (1.0f - (fConst14 * fSlow49));
		float 	fSlow52 = (fSlow51 / fSlow50);
		float 	fSlow53 = sqrtf(max((float)0, ((faustpower<2>(fSlow51) / faustpower<2>(fSlow50)) - 1.0f)));
		float 	fSlow54 = (fSlow47 * ((1.0f + fSlow53) - fSlow52));
		float 	fSlow55 = (fSlow52 - fSlow53);
		float 	fSlow56 = expf((fConst21 / fSlow46));
		float 	fSlow57 = ((expf((fConst22 / fSlow46)) / fSlow56) - 1);
		float 	fSlow58 = faustpower<2>(fSlow56);
		float 	fSlow59 = (1.0f - fSlow58);
		float 	fSlow60 = (1.0f - (fConst14 * fSlow58));
		float 	fSlow61 = (fSlow60 / fSlow59);
		float 	fSlow62 = sqrtf(max((float)0, ((faustpower<2>(fSlow60) / faustpower<2>(fSlow59)) - 1.0f)));
		float 	fSlow63 = (fSlow56 * ((1.0f + fSlow62) - fSlow61));
		float 	fSlow64 = (fSlow61 - fSlow62);
		float 	fSlow65 = expf((fConst28 / fSlow46));
		float 	fSlow66 = ((expf((fConst29 / fSlow46)) / fSlow65) - 1);
		float 	fSlow67 = faustpower<2>(fSlow65);
		float 	fSlow68 = (1.0f - fSlow67);
		float 	fSlow69 = (1.0f - (fConst14 * fSlow67));
		float 	fSlow70 = (fSlow69 / fSlow68);
		float 	fSlow71 = sqrtf(max((float)0, ((faustpower<2>(fSlow69) / faustpower<2>(fSlow68)) - 1.0f)));
		float 	fSlow72 = (fSlow65 * ((1.0f + fSlow71) - fSlow70));
		float 	fSlow73 = (fSlow70 - fSlow71);
		float 	fSlow74 = expf((fConst35 / fSlow46));
		float 	fSlow75 = ((expf((fConst36 / fSlow46)) / fSlow74) - 1);
		float 	fSlow76 = faustpower<2>(fSlow74);
		float 	fSlow77 = (1.0f - fSlow76);
		float 	fSlow78 = (1.0f - (fConst14 * fSlow76));
		float 	fSlow79 = (fSlow78 / fSlow77);
		float 	fSlow80 = sqrtf(max((float)0, ((faustpower<2>(fSlow78) / faustpower<2>(fSlow77)) - 1.0f)));
		float 	fSlow81 = (fSlow74 * ((1.0f + fSlow80) - fSlow79));
		float 	fSlow82 = (fSlow79 - fSlow80);
		float 	fSlow83 = expf((fConst42 / fSlow46));
		float 	fSlow84 = ((expf((fConst43 / fSlow46)) / fSlow83) - 1);
		float 	fSlow85 = faustpower<2>(fSlow83);
		float 	fSlow86 = (1.0f - fSlow85);
		float 	fSlow87 = (1.0f - (fConst14 * fSlow85));
		float 	fSlow88 = (fSlow87 / fSlow86);
		float 	fSlow89 = sqrtf(max((float)0, ((faustpower<2>(fSlow87) / faustpower<2>(fSlow86)) - 1.0f)));
		float 	fSlow90 = (fSlow83 * ((1.0f + fSlow89) - fSlow88));
		float 	fSlow91 = (fSlow88 - fSlow89);
		float 	fSlow92 = (1.5f * fSlow44);
		int 	iSlow93 = int((int((fConst5 * (float(fslider16) / fSlow23))) & 4095));
		float 	fSlow94 = expf((fConst49 / fSlow46));
		float 	fSlow95 = ((expf((fConst50 / fSlow46)) / fSlow94) - 1);
		float 	fSlow96 = faustpower<2>(fSlow94);
		float 	fSlow97 = (1.0f - fSlow96);
		float 	fSlow98 = (1.0f - (fConst14 * fSlow96));
		float 	fSlow99 = (fSlow98 / fSlow97);
		float 	fSlow100 = sqrtf(max((float)0, ((faustpower<2>(fSlow98) / faustpower<2>(fSlow97)) - 1.0f)));
		float 	fSlow101 = (fSlow94 * ((1.0f + fSlow100) - fSlow99));
		float 	fSlow102 = (fSlow99 - fSlow100);
		float 	fSlow103 = expf((fConst56 / fSlow46));
		float 	fSlow104 = ((expf((fConst57 / fSlow46)) / fSlow103) - 1);
		float 	fSlow105 = faustpower<2>(fSlow103);
		float 	fSlow106 = (1.0f - fSlow105);
		float 	fSlow107 = (1.0f - (fConst14 * fSlow105));
		float 	fSlow108 = (fSlow107 / fSlow106);
		float 	fSlow109 = sqrtf(max((float)0, ((faustpower<2>(fSlow107) / faustpower<2>(fSlow106)) - 1.0f)));
		float 	fSlow110 = (fSlow103 * ((1.0f + fSlow109) - fSlow108));
		float 	fSlow111 = (fSlow108 - fSlow109);
		float 	fSlow112 = expf((fConst63 / fSlow46));
		float 	fSlow113 = ((expf((fConst64 / fSlow46)) / fSlow112) - 1);
		float 	fSlow114 = faustpower<2>(fSlow112);
		float 	fSlow115 = (1.0f - fSlow114);
		float 	fSlow116 = (1.0f - (fConst14 * fSlow114));
		float 	fSlow117 = (fSlow116 / fSlow115);
		float 	fSlow118 = sqrtf(max((float)0, ((faustpower<2>(fSlow116) / faustpower<2>(fSlow115)) - 1.0f)));
		float 	fSlow119 = (fSlow112 * ((1.0f + fSlow118) - fSlow117));
		float 	fSlow120 = (fSlow117 - fSlow118);
		FAUSTFLOAT* output0 = output[0];
		FAUSTFLOAT* output1 = output[1];
		for (int i=0; i<count; i++) {
			fRec0[0] = ((0.999f * fRec0[1]) + fSlow0);
			float fTemp0 = (1 - fRec0[0]);
			float fTemp1 = (fRec3[1] + fSlow1);
			fRec3[0] = (fTemp1 - floorf(fTemp1));
			iRec4[0] = (iSlow3 & (iRec4[1] | (fRec6[1] >= 1)));
			iRec5[0] = (iSlow3 * (1 + iRec5[1]));
			int iTemp2 = (iSlow4 & (fRec6[1] > 0));
			fRec6[0] = (((fSlow10 * (((((iRec4[1] == 0) & iSlow3) & (fRec6[1] < 1)) & (iRec5[1] > fSlow8)) * (1 - (iRec5[1] < fSlow9)))) + (fRec6[1] * (1 - (fSlow6 * iTemp2)))) * ((iTemp2 == 0) | (fRec6[1] >= 1e-06f)));
			iRec7[0] = (12345 + (1103515245 * iRec7[1]));
			iRec8[0] = (iSlow3 & (iRec8[1] | (fRec9[1] >= 1)));
			int iTemp3 = (iSlow4 & (fRec9[1] > 0));
			fRec9[0] = (((fSlow18 * (((iRec8[1] == 0) & iSlow3) & (fRec9[1] < 1))) + (fRec9[1] * ((1 - (fSlow16 * (iRec8[1] & (fRec9[1] > 100)))) - (fSlow14 * iTemp3)))) * ((iTemp3 == 0) | (fRec9[1] >= 1e-06f)));
			float fTemp4 = (fSlow19 * ((fRec9[0] * (0.9f + (fSlow12 * iRec7[0]))) * (1 + (fSlow11 * (fRec6[0] * ftbl0[int((65536.0f * fRec3[0]))])))));
			float fTemp5 = ((fSlow30 * fRec1[(IOTA-iSlow29)&8191]) + (fSlow28 * fRec1[(IOTA-iSlow26)&8191]));
			fVec0[0] = fTemp5;
			fRec11[0] = (fSlow31 + (0.999f * fRec11[1]));
			iRec12[0] = (iSlow3 & (iRec12[1] | (fRec13[1] >= 1)));
			int iTemp6 = (iSlow4 & (fRec13[1] > 0));
			fRec13[0] = (((fSlow36 * (((iRec12[1] == 0) & iSlow3) & (fRec13[1] < 1))) + (fRec13[1] * (1 - (fSlow14 * iTemp6)))) * ((iTemp6 == 0) | (fRec13[1] >= 1e-06f)));
			float fTemp7 = (fRec11[0] * fRec13[0]);
			float fTemp8 = (fTemp7 * (((fSlow34 * fVec0[0]) + (fSlow33 * (fVec0[0] + fVec0[1]))) + (fSlow32 * faustpower<2>(fVec0[0]))));
			float fTemp9 = cosf(fTemp8);
			float fTemp10 = sinf(fTemp8);
			float fTemp11 = (0 - fTemp10);
			float fTemp12 = ((fRec14[1] * fTemp11) + (fVec0[0] * fTemp9));
			float fTemp13 = ((fTemp11 * fRec15[1]) + (fTemp9 * fTemp12));
			float fTemp14 = ((fTemp11 * fRec16[1]) + (fTemp9 * fTemp13));
			float fTemp15 = ((fTemp11 * fRec17[1]) + (fTemp9 * fTemp14));
			float fTemp16 = ((fTemp11 * fRec18[1]) + (fTemp9 * fTemp15));
			fRec19[0] = ((fTemp11 * fRec19[1]) + (fTemp9 * fTemp16));
			fRec18[0] = ((fTemp10 * fTemp16) + (fTemp9 * fRec19[1]));
			fRec17[0] = ((fTemp10 * fTemp15) + (fTemp9 * fRec18[1]));
			fRec16[0] = ((fTemp10 * fTemp14) + (fTemp9 * fRec17[1]));
			fRec15[0] = ((fTemp10 * fTemp13) + (fTemp9 * fRec16[1]));
			fRec14[0] = ((fTemp10 * fTemp12) + (fTemp9 * fRec15[1]));
			fRec21[0] = (fSlow38 + (0.999f * fRec21[1]));
			float fTemp17 = (fRec20[1] + (fConst2 * (fSlow40 + (iSlow39 * fRec21[0]))));
			fRec20[0] = (fTemp17 - floorf(fTemp17));
			float fTemp18 = (3.141592653589793f * (fTemp7 * ftbl0[int((65536.0f * fRec20[0]))]));
			float fTemp19 = cosf(fTemp18);
			float fTemp20 = sinf(fTemp18);
			float fTemp21 = (0 - fTemp20);
			float fTemp22 = ((fRec22[1] * fTemp21) + (fVec0[0] * fTemp19));
			float fTemp23 = ((fTemp21 * fRec23[1]) + (fTemp19 * fTemp22));
			float fTemp24 = ((fTemp21 * fRec24[1]) + (fTemp19 * fTemp23));
			float fTemp25 = ((fTemp21 * fRec25[1]) + (fTemp19 * fTemp24));
			float fTemp26 = ((fTemp21 * fRec26[1]) + (fTemp19 * fTemp25));
			fRec27[0] = ((fTemp21 * fRec27[1]) + (fTemp19 * fTemp26));
			fRec26[0] = ((fTemp20 * fTemp26) + (fTemp19 * fRec27[1]));
			fRec25[0] = ((fTemp20 * fTemp25) + (fTemp19 * fRec26[1]));
			fRec24[0] = ((fTemp20 * fTemp24) + (fTemp19 * fRec25[1]));
			fRec23[0] = ((fTemp20 * fTemp23) + (fTemp19 * fRec24[1]));
			fRec22[0] = ((fTemp20 * fTemp22) + (fTemp19 * fRec23[1]));
			fRec10[0] = (0.5f * (fRec10[1] + ((iSlow41 * ((fVec0[0] * fTemp20) + (fRec22[1] * fTemp19))) + (iSlow37 * ((fRec11[0] * ((fVec0[0] * fTemp10) + (fRec14[1] * fTemp9))) + ((1 - fRec11[0]) * fVec0[0]))))));
			float fTemp27 = (0 - ((0.95f * fRec10[0]) + fTemp4));
			float fTemp28 = (0.7f + (fSlow42 * fTemp27));
			float fTemp29 = ((fTemp28 > 1) + (fTemp28 * (fTemp28 <= 1)));
			fRec1[IOTA&8191] = (fTemp4 + (fTemp27 * ((fTemp29 * (fTemp29 >= -1)) - (fTemp29 < -1))));
			float fTemp30 = fRec1[(IOTA-0)&8191];
			fRec39[0] = ((fConst9 * fRec39[1]) + (fConst8 * (fRec32[1] + fRec32[2])));
			fRec38[0] = ((fSlow55 * fRec38[1]) + (fSlow54 * (fRec32[1] + (fSlow48 * fRec39[0]))));
			fVec1[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec38[0]));
			fVec2[IOTA&4095] = (fSlow45 * (fTemp30 * fRec0[0]));
			float fTemp31 = (0.3f * fVec2[(IOTA-iConst17)&4095]);
			float fTemp32 = ((fTemp31 + fVec1[(IOTA-iConst16)&8191]) - (0.6f * fRec36[1]));
			fVec3[IOTA&2047] = fTemp32;
			fRec36[0] = fVec3[(IOTA-iConst18)&2047];
			float 	fRec37 = (0.6f * fVec3[IOTA&2047]);
			fRec43[0] = ((fConst9 * fRec43[1]) + (fConst8 * (fRec28[1] + fRec28[2])));
			fRec42[0] = ((fSlow64 * fRec42[1]) + (fSlow63 * (fRec28[1] + (fSlow57 * fRec43[0]))));
			fVec4[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec42[0]));
			float fTemp33 = ((fVec4[(IOTA-iConst24)&8191] + fTemp31) - (0.6f * fRec40[1]));
			fVec5[IOTA&1023] = fTemp33;
			fRec40[0] = fVec5[(IOTA-iConst25)&1023];
			float 	fRec41 = (0.6f * fVec5[IOTA&1023]);
			float fTemp34 = (fRec41 + fRec37);
			fRec47[0] = ((fConst9 * fRec47[1]) + (fConst8 * (fRec30[1] + fRec30[2])));
			fRec46[0] = ((fSlow73 * fRec46[1]) + (fSlow72 * (fRec30[1] + (fSlow66 * fRec47[0]))));
			fVec6[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec46[0]));
			float fTemp35 = (fVec6[(IOTA-iConst31)&8191] - (fTemp31 + (0.6f * fRec44[1])));
			fVec7[IOTA&2047] = fTemp35;
			fRec44[0] = fVec7[(IOTA-iConst32)&2047];
			float 	fRec45 = (0.6f * fVec7[IOTA&2047]);
			fRec51[0] = ((fConst9 * fRec51[1]) + (fConst8 * (fRec34[1] + fRec34[2])));
			fRec50[0] = ((fSlow82 * fRec50[1]) + (fSlow81 * (fRec34[1] + (fSlow75 * fRec51[0]))));
			fVec8[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec50[0]));
			float fTemp36 = (fVec8[(IOTA-iConst38)&8191] - (fTemp31 + (0.6f * fRec48[1])));
			fVec9[IOTA&1023] = fTemp36;
			fRec48[0] = fVec9[(IOTA-iConst39)&1023];
			float 	fRec49 = (0.6f * fVec9[IOTA&1023]);
			float fTemp37 = (fRec49 + (fRec45 + fTemp34));
			fRec55[0] = ((fConst9 * fRec55[1]) + (fConst8 * (fRec29[1] + fRec29[2])));
			fRec54[0] = ((fSlow91 * fRec54[1]) + (fSlow90 * (fRec29[1] + (fSlow84 * fRec55[0]))));
			fVec10[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec54[0]));
			fVec11[IOTA&4095] = (fSlow92 * fTemp30);
			float fTemp38 = fVec11[(IOTA-iSlow93)&4095];
			fVec12[IOTA&4095] = (fSlow43 * (fRec0[0] * fTemp38));
			float fTemp39 = (0.3f * fVec12[(IOTA-iConst17)&4095]);
			float fTemp40 = (fTemp39 + ((0.6f * fRec52[1]) + fVec10[(IOTA-iConst45)&16383]));
			fVec13[IOTA&2047] = fTemp40;
			fRec52[0] = fVec13[(IOTA-iConst46)&2047];
			float 	fRec53 = (0 - (0.6f * fVec13[IOTA&2047]));
			fRec59[0] = ((fConst9 * fRec59[1]) + (fConst8 * (fRec33[1] + fRec33[2])));
			fRec58[0] = ((fSlow102 * fRec58[1]) + (fSlow101 * (fRec33[1] + (fSlow95 * fRec59[0]))));
			fVec14[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec58[0]));
			float fTemp41 = (fVec14[(IOTA-iConst52)&8191] + (fTemp39 + (0.6f * fRec56[1])));
			fVec15[IOTA&2047] = fTemp41;
			fRec56[0] = fVec15[(IOTA-iConst53)&2047];
			float 	fRec57 = (0 - (0.6f * fVec15[IOTA&2047]));
			fRec63[0] = ((fConst9 * fRec63[1]) + (fConst8 * (fRec31[1] + fRec31[2])));
			fRec62[0] = ((fSlow111 * fRec62[1]) + (fSlow110 * (fRec31[1] + (fSlow104 * fRec63[0]))));
			fVec16[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec62[0]));
			float fTemp42 = (((0.6f * fRec60[1]) + fVec16[(IOTA-iConst59)&16383]) - fTemp39);
			fVec17[IOTA&2047] = fTemp42;
			fRec60[0] = fVec17[(IOTA-iConst60)&2047];
			float 	fRec61 = (0 - (0.6f * fVec17[IOTA&2047]));
			fRec67[0] = ((fConst9 * fRec67[1]) + (fConst8 * (fRec35[1] + fRec35[2])));
			fRec66[0] = ((fSlow120 * fRec66[1]) + (fSlow119 * (fRec35[1] + (fSlow113 * fRec67[0]))));
			fVec18[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec66[0]));
			float fTemp43 = (((0.6f * fRec64[1]) + fVec18[(IOTA-iConst66)&16383]) - fTemp39);
			fVec19[IOTA&1023] = fTemp43;
			fRec64[0] = fVec19[(IOTA-iConst67)&1023];
			float 	fRec65 = (0 - (0.6f * fVec19[IOTA&1023]));
			fRec28[0] = (fRec64[1] + (fRec60[1] + (fRec56[1] + (fRec52[1] + (fRec48[1] + (fRec44[1] + (fRec36[1] + (fRec40[1] + (fRec65 + (fRec61 + (fRec57 + (fRec53 + fTemp37))))))))))));
			fRec29[0] = (0 - ((fRec64[1] + (fRec60[1] + (fRec56[1] + (fRec52[1] + (fRec65 + (fRec61 + (fRec53 + fRec57))))))) - (fRec48[1] + (fRec44[1] + (fRec36[1] + (fRec40[1] + fTemp37))))));
			float fTemp44 = (fRec45 + fRec49);
			fRec30[0] = (0 - ((fRec64[1] + (fRec60[1] + (fRec48[1] + (fRec44[1] + (fRec65 + (fRec61 + fTemp44)))))) - (fRec56[1] + (fRec52[1] + (fRec36[1] + (fRec40[1] + (fRec57 + (fRec53 + fTemp34))))))));
			fRec31[0] = (0 - ((fRec56[1] + (fRec52[1] + (fRec48[1] + (fRec44[1] + (fRec57 + (fRec53 + fTemp44)))))) - (fRec64[1] + (fRec60[1] + (fRec36[1] + (fRec40[1] + (fRec65 + (fRec61 + fTemp34))))))));
			float fTemp45 = (fRec41 + fRec45);
			float fTemp46 = (fRec37 + fRec49);
			fRec32[0] = (0 - ((fRec64[1] + (fRec56[1] + (fRec48[1] + (fRec36[1] + (fRec65 + (fRec57 + fTemp46)))))) - (fRec60[1] + (fRec52[1] + (fRec44[1] + (fRec40[1] + (fRec61 + (fRec53 + fTemp45))))))));
			fRec33[0] = (0 - ((fRec60[1] + (fRec52[1] + (fRec48[1] + (fRec36[1] + (fRec61 + (fRec53 + fTemp46)))))) - (fRec64[1] + (fRec56[1] + (fRec44[1] + (fRec40[1] + (fRec65 + (fRec57 + fTemp45))))))));
			float fTemp47 = (fRec41 + fRec49);
			float fTemp48 = (fRec37 + fRec45);
			fRec34[0] = (0 - ((fRec60[1] + (fRec56[1] + (fRec44[1] + (fRec36[1] + (fRec61 + (fRec57 + fTemp48)))))) - (fRec64[1] + (fRec52[1] + (fRec48[1] + (fRec40[1] + (fRec65 + (fRec53 + fTemp47))))))));
			fRec35[0] = (0 - ((fRec64[1] + (fRec52[1] + (fRec44[1] + (fRec36[1] + (fRec65 + (fRec53 + fTemp48)))))) - (fRec60[1] + (fRec56[1] + (fRec48[1] + (fRec40[1] + (fRec61 + (fRec57 + fTemp47))))))));
			output0[i] = (FAUSTFLOAT)((0.37f * (fRec29[0] + fRec30[0])) + (fSlow45 * (fTemp30 * fTemp0)));
			output1[i] = (FAUSTFLOAT)((0.37f * (fRec29[0] - fRec30[0])) + (fSlow43 * (fTemp0 * fTemp38)));
			// post processing
			fRec35[2] = fRec35[1]; fRec35[1] = fRec35[0];
			fRec34[2] = fRec34[1]; fRec34[1] = fRec34[0];
			fRec33[2] = fRec33[1]; fRec33[1] = fRec33[0];
			fRec32[2] = fRec32[1]; fRec32[1] = fRec32[0];
			fRec31[2] = fRec31[1]; fRec31[1] = fRec31[0];
			fRec30[2] = fRec30[1]; fRec30[1] = fRec30[0];
			fRec29[2] = fRec29[1]; fRec29[1] = fRec29[0];
			fRec28[2] = fRec28[1]; fRec28[1] = fRec28[0];
			fRec64[1] = fRec64[0];
			fRec66[1] = fRec66[0];
			fRec67[1] = fRec67[0];
			fRec60[1] = fRec60[0];
			fRec62[1] = fRec62[0];
			fRec63[1] = fRec63[0];
			fRec56[1] = fRec56[0];
			fRec58[1] = fRec58[0];
			fRec59[1] = fRec59[0];
			fRec52[1] = fRec52[0];
			fRec54[1] = fRec54[0];
			fRec55[1] = fRec55[0];
			fRec48[1] = fRec48[0];
			fRec50[1] = fRec50[0];
			fRec51[1] = fRec51[0];
			fRec44[1] = fRec44[0];
			fRec46[1] = fRec46[0];
			fRec47[1] = fRec47[0];
			fRec40[1] = fRec40[0];
			fRec42[1] = fRec42[0];
			fRec43[1] = fRec43[0];
			fRec36[1] = fRec36[0];
			fRec38[1] = fRec38[0];
			fRec39[1] = fRec39[0];
			IOTA = IOTA+1;
			fRec10[1] = fRec10[0];
			fRec22[1] = fRec22[0];
			fRec23[1] = fRec23[0];
			fRec24[1] = fRec24[0];
			fRec25[1] = fRec25[0];
			fRec26[1] = fRec26[0];
			fRec27[1] = fRec27[0];
			fRec20[1] = fRec20[0];
			fRec21[1] = fRec21[0];
			fRec14[1] = fRec14[0];
			fRec15[1] = fRec15[0];
			fRec16[1] = fRec16[0];
			fRec17[1] = fRec17[0];
			fRec18[1] = fRec18[0];
			fRec19[1] = fRec19[0];
			fRec13[1] = fRec13[0];
			iRec12[1] = iRec12[0];
			fRec11[1] = fRec11[0];
			fVec0[1] = fVec0[0];
			fRec9[1] = fRec9[0];
			iRec8[1] = iRec8[0];
			iRec7[1] = iRec7[0];
			fRec6[1] = fRec6[0];
			iRec5[1] = iRec5[0];
			iRec4[1] = iRec4[0];
			fRec3[1] = fRec3[0];
			fRec0[1] = fRec0[0];
		}
	}
};


float 	mydsp::ftbl0[65536];
