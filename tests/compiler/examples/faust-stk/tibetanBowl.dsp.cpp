//-----------------------------------------------------
// name: "Tibetan Bowl"
// author: "Romain Michon"
// copyright: "Romain Michon (rmichon@ccrma.stanford.edu)"
// version: "1.0"
//
// Code generated with Faust 0.9.70 (http://faust.grame.fr)
//-----------------------------------------------------
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif  

typedef long double quad;
/* link with  */
#include <math.h>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline float faustpower(float x)          { return powf(x,N); } 
template <int N> inline double faustpower(double x)        { return pow(x,N); }
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <>   inline int faustpower<0>(int x)            { return 1; }
template <>   inline int faustpower<1>(int x)            { return x; }
#endif

#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	class SIG0 {
	  private:
		int 	fSamplingFreq;
		int 	iRec43[2];
	  public:
		int getNumInputs() 	{ return 0; }
		int getNumOutputs() 	{ return 1; }
		void init(int samplingFreq) {
			fSamplingFreq = samplingFreq;
			for (int i=0; i<2; i++) iRec43[i] = 0;
		}
		void fill (int count, float output[]) {
			for (int i=0; i<count; i++) {
				iRec43[0] = (1 + iRec43[1]);
				output[i] = sinf((9.587379924285257e-05f * float((iRec43[0] - 1))));
				// post processing
				iRec43[1] = iRec43[0];
			}
		}
	};


	FAUSTFLOAT 	fentry0;
	FAUSTFLOAT 	fbutton0;
	int 	iRec14[2];
	int 	iConst0;
	float 	fConst1;
	float 	fConst2;
	float 	fConst3;
	float 	fRec15[2];
	FAUSTFLOAT 	fentry1;
	FAUSTFLOAT 	fslider0;
	FAUSTFLOAT 	fslider1;
	FAUSTFLOAT 	fslider2;
	int 	IOTA;
	float 	fVec0[4096];
	FAUSTFLOAT 	fentry2;
	float 	fConst4;
	float 	fConst5;
	float 	fConst6;
	float 	fConst7;
	float 	fConst8;
	float 	fRec13[3];
	float 	fConst9;
	float 	fConst10;
	float 	fConst11;
	float 	fRec12[2];
	float 	fRec0[2];
	float 	fVec1[4096];
	float 	fConst12;
	float 	fConst13;
	float 	fRec17[3];
	float 	fRec16[2];
	float 	fRec1[2];
	float 	fVec2[4096];
	float 	fConst14;
	float 	fConst15;
	float 	fRec19[3];
	float 	fRec18[2];
	float 	fRec2[2];
	float 	fVec3[4096];
	float 	fConst16;
	float 	fConst17;
	float 	fRec21[3];
	float 	fRec20[2];
	float 	fRec3[2];
	float 	fVec4[2048];
	float 	fConst18;
	float 	fConst19;
	float 	fRec23[3];
	float 	fRec22[2];
	float 	fRec4[2];
	float 	fRec5[2];
	float 	fVec5[2048];
	float 	fConst20;
	float 	fConst21;
	float 	fRec25[3];
	float 	fRec24[2];
	float 	fRec6[2];
	float 	fVec6[2048];
	float 	fConst22;
	float 	fConst23;
	float 	fRec27[3];
	float 	fRec26[2];
	float 	fRec7[2];
	float 	fVec7[1024];
	float 	fConst24;
	float 	fConst25;
	float 	fRec29[3];
	float 	fRec28[2];
	float 	fRec8[2];
	float 	fVec8[1024];
	float 	fConst26;
	float 	fConst27;
	float 	fRec31[3];
	float 	fRec30[2];
	float 	fRec9[2];
	float 	fVec9[1024];
	float 	fConst28;
	float 	fConst29;
	float 	fRec33[3];
	float 	fRec32[2];
	float 	fRec10[2];
	float 	fVec10[512];
	float 	fConst30;
	float 	fConst31;
	float 	fRec35[3];
	float 	fRec34[2];
	float 	fRec11[2];
	float 	fVec11[2];
	FAUSTFLOAT 	fslider3;
	float 	fRec36[2];
	FAUSTFLOAT 	fentry3;
	float 	fRec42[2];
	float 	fRec41[2];
	float 	fRec40[2];
	float 	fRec39[2];
	float 	fRec38[2];
	float 	fRec37[2];
	static float 	ftbl0[65536];
	FAUSTFLOAT 	fslider4;
	float 	fRec45[2];
	float 	fConst32;
	float 	fConst33;
	float 	fRec44[2];
	float 	fRec51[2];
	float 	fRec50[2];
	float 	fRec49[2];
	float 	fRec48[2];
	float 	fRec47[2];
	float 	fRec46[2];
	float 	fVec12[4096];
	FAUSTFLOAT 	fslider5;
	float 	fRec52[2];
	FAUSTFLOAT 	fslider6;
	float 	fConst34;
	float 	fConst35;
	float 	fConst36;
	float 	fConst37;
	float 	fRec64[2];
	FAUSTFLOAT 	fslider7;
	float 	fConst38;
	float 	fConst39;
	float 	fConst40;
	float 	fConst41;
	float 	fConst42;
	float 	fRec63[2];
	float 	fVec13[8192];
	float 	fConst43;
	int 	iConst44;
	float 	fVec14[4096];
	int 	iConst45;
	float 	fVec15[2048];
	int 	iConst46;
	float 	fRec61[2];
	float 	fRec68[2];
	float 	fConst47;
	float 	fConst48;
	float 	fConst49;
	float 	fConst50;
	float 	fRec67[2];
	float 	fVec16[8192];
	float 	fConst51;
	int 	iConst52;
	float 	fVec17[1024];
	int 	iConst53;
	float 	fRec65[2];
	float 	fRec72[2];
	float 	fConst54;
	float 	fConst55;
	float 	fConst56;
	float 	fConst57;
	float 	fRec71[2];
	float 	fVec18[8192];
	float 	fConst58;
	int 	iConst59;
	float 	fVec19[2048];
	int 	iConst60;
	float 	fRec69[2];
	float 	fRec76[2];
	float 	fConst61;
	float 	fConst62;
	float 	fConst63;
	float 	fConst64;
	float 	fRec75[2];
	float 	fVec20[8192];
	float 	fConst65;
	int 	iConst66;
	float 	fVec21[1024];
	int 	iConst67;
	float 	fRec73[2];
	float 	fRec80[2];
	float 	fConst68;
	float 	fConst69;
	float 	fConst70;
	float 	fConst71;
	float 	fRec79[2];
	float 	fVec22[16384];
	float 	fConst72;
	int 	iConst73;
	FAUSTFLOAT 	fslider8;
	float 	fConst74;
	float 	fVec23[4096];
	float 	fVec24[2048];
	int 	iConst75;
	float 	fRec77[2];
	float 	fRec84[2];
	float 	fConst76;
	float 	fConst77;
	float 	fConst78;
	float 	fConst79;
	float 	fRec83[2];
	float 	fVec25[8192];
	float 	fConst80;
	int 	iConst81;
	float 	fVec26[2048];
	int 	iConst82;
	float 	fRec81[2];
	float 	fRec88[2];
	float 	fConst83;
	float 	fConst84;
	float 	fConst85;
	float 	fConst86;
	float 	fRec87[2];
	float 	fVec27[16384];
	float 	fConst87;
	int 	iConst88;
	float 	fVec28[2048];
	int 	iConst89;
	float 	fRec85[2];
	float 	fRec92[2];
	float 	fConst90;
	float 	fConst91;
	float 	fConst92;
	float 	fConst93;
	float 	fRec91[2];
	float 	fVec29[16384];
	float 	fConst94;
	int 	iConst95;
	float 	fVec30[1024];
	int 	iConst96;
	float 	fRec89[2];
	float 	fRec53[3];
	float 	fRec54[3];
	float 	fRec55[3];
	float 	fRec56[3];
	float 	fRec57[3];
	float 	fRec58[3];
	float 	fRec59[3];
	float 	fRec60[3];
  public:
	static void metadata(Meta* m) 	{ 
		m->declare("name", "Tibetan Bowl");
		m->declare("description", "Banded Waveguide Modeld Tibetan Bowl");
		m->declare("author", "Romain Michon");
		m->declare("copyright", "Romain Michon (rmichon@ccrma.stanford.edu)");
		m->declare("version", "1.0");
		m->declare("licence", "STK-4.3");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/version", "1.0");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/version", "1.0");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("instrument.lib/name", "Faust-STK Tools Library");
		m->declare("instrument.lib/author", "Romain Michon (rmichon@ccrma.stanford.edu)");
		m->declare("instrument.lib/copyright", "Romain Michon");
		m->declare("instrument.lib/version", "1.0");
		m->declare("instrument.lib/licence", "STK-4.3");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/version", "1.29");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("effect.lib/name", "Faust Audio Effect Library");
		m->declare("effect.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/copyright", "Julius O. Smith III");
		m->declare("effect.lib/version", "1.33");
		m->declare("effect.lib/license", "STK-4.3");
		m->declare("effect.lib/exciter_name", "Harmonic Exciter");
		m->declare("effect.lib/exciter_author", "Priyanka Shekar (pshekar@ccrma.stanford.edu)");
		m->declare("effect.lib/exciter_copyright", "Copyright (c) 2013 Priyanka Shekar");
		m->declare("effect.lib/exciter_version", "1.0");
		m->declare("effect.lib/exciter_license", "MIT License (MIT)");
	}

	virtual int getNumInputs() 	{ return 0; }
	virtual int getNumOutputs() 	{ return 2; }
	static void classInit(int samplingFreq) {
		SIG0 sig0;
		sig0.init(samplingFreq);
		sig0.fill(65536,ftbl0);
	}
	virtual void instanceInit(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fentry0 = 0.0f;
		fbutton0 = 0.0;
		for (int i=0; i<2; i++) iRec14[i] = 0;
		iConst0 = min(192000, max(1, fSamplingFreq));
		fConst1 = (1 - (1.0f / powf(9e+04f,(1e+02f / float(iConst0)))));
		fConst2 = (1 - powf(9e+01f,(2e+02f / float(iConst0))));
		fConst3 = (5e+01f / float(iConst0));
		for (int i=0; i<2; i++) fRec15[i] = 0;
		fentry1 = 0.8f;
		fslider0 = 1.0f;
		fslider1 = 0.0f;
		fslider2 = 0.2f;
		IOTA = 0;
		for (int i=0; i<4096; i++) fVec0[i] = 0;
		fentry2 = 4.4e+02f;
		fConst4 = (1.0039068601557664f * iConst0);
		fConst5 = (1 - (100.53096491487338f / float(iConst0)));
		fConst6 = faustpower<2>(fConst5);
		fConst7 = (6.258733311379789f / float(iConst0));
		fConst8 = (0 - (2 * fConst5));
		for (int i=0; i<3; i++) fRec13[i] = 0;
		fConst9 = (0.5f * fConst6);
		fConst10 = (fConst9 - 0.5f);
		fConst11 = (0.5f - fConst9);
		for (int i=0; i<2; i++) fRec12[i] = 0;
		for (int i=0; i<2; i++) fRec0[i] = 0;
		for (int i=0; i<4096; i++) fVec1[i] = 0;
		fConst12 = (0.9961234300773741f * iConst0);
		fConst13 = (6.30763730423602f / float(iConst0));
		for (int i=0; i<3; i++) fRec17[i] = 0;
		for (int i=0; i<2; i++) fRec16[i] = 0;
		for (int i=0; i<2; i++) fRec1[i] = 0;
		for (int i=0; i<4096; i++) fVec2[i] = 0;
		fConst14 = (0.335663058736336f * iConst0);
		fConst15 = (18.718727437072666f / float(iConst0));
		for (int i=0; i<3; i++) fRec19[i] = 0;
		for (int i=0; i<2; i++) fRec18[i] = 0;
		for (int i=0; i<2; i++) fRec2[i] = 0;
		for (int i=0; i<4096; i++) fVec3[i] = 0;
		fConst16 = (0.3340797041411521f * iConst0);
		fConst17 = (18.80744394015889f / float(iConst0));
		for (int i=0; i<3; i++) fRec21[i] = 0;
		for (int i=0; i<2; i++) fRec20[i] = 0;
		for (int i=0; i<2; i++) fRec3[i] = 0;
		for (int i=0; i<2048; i++) fVec4[i] = 0;
		fConst18 = (0.1753016766553562f * iConst0);
		fConst19 = (35.8421289919112f / float(iConst0));
		for (int i=0; i<3; i++) fRec23[i] = 0;
		for (int i=0; i<2; i++) fRec22[i] = 0;
		for (int i=0; i<2; i++) fRec4[i] = 0;
		for (int i=0; i<2; i++) fRec5[i] = 0;
		for (int i=0; i<2048; i++) fVec5[i] = 0;
		fConst20 = (0.11113333777866684f * iConst0);
		fConst21 = (56.537358031063356f / float(iConst0));
		for (int i=0; i<3; i++) fRec25[i] = 0;
		for (int i=0; i<2; i++) fRec24[i] = 0;
		for (int i=0; i<2; i++) fRec6[i] = 0;
		for (int i=0; i<2048; i++) fVec6[i] = 0;
		fConst22 = (0.11092011579181602f * iConst0);
		fConst23 = (56.64603992094982f / float(iConst0));
		for (int i=0; i<3; i++) fRec27[i] = 0;
		for (int i=0; i<2; i++) fRec26[i] = 0;
		for (int i=0; i<2; i++) fRec7[i] = 0;
		for (int i=0; i<1024; i++) fVec7[i] = 0;
		fConst24 = (0.07792391976018134f * iConst0);
		fConst25 = (80.63230554259485f / float(iConst0));
		for (int i=0; i<3; i++) fRec29[i] = 0;
		for (int i=0; i<2; i++) fRec28[i] = 0;
		for (int i=0; i<2; i++) fRec8[i] = 0;
		for (int i=0; i<1024; i++) fVec8[i] = 0;
		fConst26 = (0.07807996981740686f * iConst0);
		fConst27 = (80.4711544058363f / float(iConst0));
		for (int i=0; i<3; i++) fRec31[i] = 0;
		for (int i=0; i<2; i++) fRec30[i] = 0;
		for (int i=0; i<2; i++) fRec9[i] = 0;
		for (int i=0; i<1024; i++) fVec9[i] = 0;
		fConst28 = (0.05786761797481404f * iConst0);
		fConst29 = (108.57860625806721f / float(iConst0));
		for (int i=0; i<3; i++) fRec33[i] = 0;
		for (int i=0; i<2; i++) fRec32[i] = 0;
		for (int i=0; i<2; i++) fRec10[i] = 0;
		for (int i=0; i<512; i++) fVec10[i] = 0;
		fConst30 = (0.04550412965560287f * iConst0);
		fConst31 = (138.07945245264008f / float(iConst0));
		for (int i=0; i<3; i++) fRec35[i] = 0;
		for (int i=0; i<2; i++) fRec34[i] = 0;
		for (int i=0; i<2; i++) fRec11[i] = 0;
		for (int i=0; i<2; i++) fVec11[i] = 0;
		fslider3 = 0.0f;
		for (int i=0; i<2; i++) fRec36[i] = 0;
		fentry3 = 0.0f;
		for (int i=0; i<2; i++) fRec42[i] = 0;
		for (int i=0; i<2; i++) fRec41[i] = 0;
		for (int i=0; i<2; i++) fRec40[i] = 0;
		for (int i=0; i<2; i++) fRec39[i] = 0;
		for (int i=0; i<2; i++) fRec38[i] = 0;
		for (int i=0; i<2; i++) fRec37[i] = 0;
		fslider4 = 2.2e+02f;
		for (int i=0; i<2; i++) fRec45[i] = 0;
		fConst32 = float(iConst0);
		fConst33 = (1.0f / fConst32);
		for (int i=0; i<2; i++) fRec44[i] = 0;
		for (int i=0; i<2; i++) fRec51[i] = 0;
		for (int i=0; i<2; i++) fRec50[i] = 0;
		for (int i=0; i<2; i++) fRec49[i] = 0;
		for (int i=0; i<2; i++) fRec48[i] = 0;
		for (int i=0; i<2; i++) fRec47[i] = 0;
		for (int i=0; i<2; i++) fRec46[i] = 0;
		for (int i=0; i<4096; i++) fVec12[i] = 0;
		fslider5 = 0.137f;
		for (int i=0; i<2; i++) fRec52[i] = 0;
		fslider6 = 0.6f;
		fConst34 = (1.0f / tanf((628.3185307179587f / float(iConst0))));
		fConst35 = (1 + fConst34);
		fConst36 = (1.0f / fConst35);
		fConst37 = (0 - ((1 - fConst34) / fConst35));
		for (int i=0; i<2; i++) fRec64[i] = 0;
		fslider7 = 0.72f;
		fConst38 = floorf((0.5f + (0.174713f * iConst0)));
		fConst39 = ((0 - (6.907755278982138f * fConst38)) / float(iConst0));
		fConst40 = (0.5f * fConst39);
		fConst41 = (0.3333333333333333f * fConst39);
		fConst42 = cosf((37699.11184307752f / fConst32));
		for (int i=0; i<2; i++) fRec63[i] = 0;
		for (int i=0; i<8192; i++) fVec13[i] = 0;
		fConst43 = floorf((0.5f + (0.022904f * iConst0)));
		iConst44 = int((int((fConst38 - fConst43)) & 8191));
		for (int i=0; i<4096; i++) fVec14[i] = 0;
		iConst45 = int((int((0.02f * iConst0)) & 8191));
		for (int i=0; i<2048; i++) fVec15[i] = 0;
		iConst46 = int((int((fConst43 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec61[i] = 0;
		for (int i=0; i<2; i++) fRec68[i] = 0;
		fConst47 = floorf((0.5f + (0.153129f * iConst0)));
		fConst48 = ((0 - (6.907755278982138f * fConst47)) / float(iConst0));
		fConst49 = (0.5f * fConst48);
		fConst50 = (0.3333333333333333f * fConst48);
		for (int i=0; i<2; i++) fRec67[i] = 0;
		for (int i=0; i<8192; i++) fVec16[i] = 0;
		fConst51 = floorf((0.5f + (0.020346f * iConst0)));
		iConst52 = int((int((fConst47 - fConst51)) & 8191));
		for (int i=0; i<1024; i++) fVec17[i] = 0;
		iConst53 = int((int((fConst51 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec65[i] = 0;
		for (int i=0; i<2; i++) fRec72[i] = 0;
		fConst54 = floorf((0.5f + (0.127837f * iConst0)));
		fConst55 = ((0 - (6.907755278982138f * fConst54)) / float(iConst0));
		fConst56 = (0.5f * fConst55);
		fConst57 = (0.3333333333333333f * fConst55);
		for (int i=0; i<2; i++) fRec71[i] = 0;
		for (int i=0; i<8192; i++) fVec18[i] = 0;
		fConst58 = floorf((0.5f + (0.031604f * iConst0)));
		iConst59 = int((int((fConst54 - fConst58)) & 8191));
		for (int i=0; i<2048; i++) fVec19[i] = 0;
		iConst60 = int((int((fConst58 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec69[i] = 0;
		for (int i=0; i<2; i++) fRec76[i] = 0;
		fConst61 = floorf((0.5f + (0.125f * iConst0)));
		fConst62 = ((0 - (6.907755278982138f * fConst61)) / float(iConst0));
		fConst63 = (0.5f * fConst62);
		fConst64 = (0.3333333333333333f * fConst62);
		for (int i=0; i<2; i++) fRec75[i] = 0;
		for (int i=0; i<8192; i++) fVec20[i] = 0;
		fConst65 = floorf((0.5f + (0.013458f * iConst0)));
		iConst66 = int((int((fConst61 - fConst65)) & 8191));
		for (int i=0; i<1024; i++) fVec21[i] = 0;
		iConst67 = int((int((fConst65 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec73[i] = 0;
		for (int i=0; i<2; i++) fRec80[i] = 0;
		fConst68 = floorf((0.5f + (0.210389f * iConst0)));
		fConst69 = ((0 - (6.907755278982138f * fConst68)) / float(iConst0));
		fConst70 = (0.5f * fConst69);
		fConst71 = (0.3333333333333333f * fConst69);
		for (int i=0; i<2; i++) fRec79[i] = 0;
		for (int i=0; i<16384; i++) fVec22[i] = 0;
		fConst72 = floorf((0.5f + (0.024421f * iConst0)));
		iConst73 = int((int((fConst68 - fConst72)) & 16383));
		fslider8 = 0.5f;
		fConst74 = (0.5f * iConst0);
		for (int i=0; i<4096; i++) fVec23[i] = 0;
		for (int i=0; i<2048; i++) fVec24[i] = 0;
		iConst75 = int((int((fConst72 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec77[i] = 0;
		for (int i=0; i<2; i++) fRec84[i] = 0;
		fConst76 = floorf((0.5f + (0.192303f * iConst0)));
		fConst77 = ((0 - (6.907755278982138f * fConst76)) / float(iConst0));
		fConst78 = (0.5f * fConst77);
		fConst79 = (0.3333333333333333f * fConst77);
		for (int i=0; i<2; i++) fRec83[i] = 0;
		for (int i=0; i<8192; i++) fVec25[i] = 0;
		fConst80 = floorf((0.5f + (0.029291f * iConst0)));
		iConst81 = int((int((fConst76 - fConst80)) & 8191));
		for (int i=0; i<2048; i++) fVec26[i] = 0;
		iConst82 = int((int((fConst80 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec81[i] = 0;
		for (int i=0; i<2; i++) fRec88[i] = 0;
		fConst83 = floorf((0.5f + (0.256891f * iConst0)));
		fConst84 = ((0 - (6.907755278982138f * fConst83)) / float(iConst0));
		fConst85 = (0.5f * fConst84);
		fConst86 = (0.3333333333333333f * fConst84);
		for (int i=0; i<2; i++) fRec87[i] = 0;
		for (int i=0; i<16384; i++) fVec27[i] = 0;
		fConst87 = floorf((0.5f + (0.027333f * iConst0)));
		iConst88 = int((int((fConst83 - fConst87)) & 16383));
		for (int i=0; i<2048; i++) fVec28[i] = 0;
		iConst89 = int((int((fConst87 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec85[i] = 0;
		for (int i=0; i<2; i++) fRec92[i] = 0;
		fConst90 = floorf((0.5f + (0.219991f * iConst0)));
		fConst91 = ((0 - (6.907755278982138f * fConst90)) / float(iConst0));
		fConst92 = (0.5f * fConst91);
		fConst93 = (0.3333333333333333f * fConst91);
		for (int i=0; i<2; i++) fRec91[i] = 0;
		for (int i=0; i<16384; i++) fVec29[i] = 0;
		fConst94 = floorf((0.5f + (0.019123f * iConst0)));
		iConst95 = int((int((fConst90 - fConst94)) & 16383));
		for (int i=0; i<1024; i++) fVec30[i] = 0;
		iConst96 = int((int((fConst94 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec89[i] = 0;
		for (int i=0; i<3; i++) fRec53[i] = 0;
		for (int i=0; i<3; i++) fRec54[i] = 0;
		for (int i=0; i<3; i++) fRec55[i] = 0;
		for (int i=0; i<3; i++) fRec56[i] = 0;
		for (int i=0; i<3; i++) fRec57[i] = 0;
		for (int i=0; i<3; i++) fRec58[i] = 0;
		for (int i=0; i<3; i++) fRec59[i] = 0;
		for (int i=0; i<3; i++) fRec60[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void buildUserInterface(UI* interface) {
		interface->openVerticalBox("0x00");
		interface->openHorizontalBox("Basic_Parameters");
		interface->declare(&fentry2, "1", "");
		interface->declare(&fentry2, "tooltip", "Tone frequency");
		interface->declare(&fentry2, "unit", "Hz");
		interface->addNumEntry("freq", &fentry2, 4.4e+02f, 2e+01f, 2e+04f, 1.0f);
		interface->declare(&fentry1, "1", "");
		interface->declare(&fentry1, "tooltip", "Gain (value between 0 and 1)");
		interface->addNumEntry("gain", &fentry1, 0.8f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fbutton0, "1", "");
		interface->declare(&fbutton0, "tooltip", "noteOn = 1, noteOff = 0");
		interface->addButton("gate", &fbutton0);
		interface->closeBox();
		interface->openHorizontalBox("Physical_and_Nonlinearity");
		interface->openVerticalBox("Nonlinear_Filter_Parameters");
		interface->declare(&fslider4, "3", "");
		interface->declare(&fslider4, "tooltip", "Frequency of the sine wave for the modulation of theta (works if Modulation Type=3)");
		interface->declare(&fslider4, "unit", "Hz");
		interface->addHorizontalSlider("Modulation_Frequency", &fslider4, 2.2e+02f, 2e+01f, 1e+03f, 0.1f);
		interface->declare(&fentry3, "3", "");
		interface->declare(&fentry3, "tooltip", "0=theta is modulated by the incoming signal; 1=theta is modulated by the averaged incoming signal; 2=theta is modulated by the squared incoming signal; 3=theta is modulated by a sine wave of frequency freqMod; 4=theta is modulated by a sine wave of frequency freq;");
		interface->addNumEntry("Modulation_Type", &fentry3, 0.0f, 0.0f, 4.0f, 1.0f);
		interface->declare(&fslider3, "3", "");
		interface->declare(&fslider3, "tooltip", "Nonlinearity factor (value between 0 and 1)");
		interface->addHorizontalSlider("Nonlinearity", &fslider3, 0.0f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->openVerticalBox("Physical_Parameters");
		interface->declare(&fslider0, "2", "");
		interface->declare(&fslider0, "tooltip", "A value between 0 and 1");
		interface->addHorizontalSlider("Base_Gain", &fslider0, 1.0f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fslider2, "2", "");
		interface->declare(&fslider2, "tooltip", "Bow pressure on the instrument (Value between 0 and 1)");
		interface->addHorizontalSlider("Bow_Pressure", &fslider2, 0.2f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fentry0, "2", "");
		interface->declare(&fentry0, "tooltip", "0=Bow; 1=Strike");
		interface->addNumEntry("Excitation_Selector", &fentry0, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->declare(&fslider1, "2", "");
		interface->declare(&fslider1, "tooltip", "A value between 0 and 1");
		interface->addHorizontalSlider("Integration_Constant", &fslider1, 0.0f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->closeBox();
		interface->openVerticalBox("Reverb");
		interface->addHorizontalSlider("reverbGain", &fslider5, 0.137f, 0.0f, 1.0f, 0.01f);
		interface->addHorizontalSlider("roomSize", &fslider7, 0.72f, 0.01f, 2.0f, 0.01f);
		interface->closeBox();
		interface->openVerticalBox("Spat");
		interface->addHorizontalSlider("pan angle", &fslider6, 0.6f, 0.0f, 1.0f, 0.01f);
		interface->addHorizontalSlider("spatial width", &fslider8, 0.5f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0 = float(fentry0);
		float 	fSlow1 = (1.1900357f * fSlow0);
		float 	fSlow2 = float(fbutton0);
		int 	iSlow3 = (fSlow2 > 0);
		int 	iSlow4 = (fSlow2 <= 0);
		float 	fSlow5 = (0.03f + (0.1f * float(fentry1)));
		float 	fSlow6 = (0.8999999999999999f + (0.1f * float(fslider0)));
		float 	fSlow7 = float(fslider1);
		float 	fSlow8 = (10 - (9 * float(fslider2)));
		float 	fSlow9 = (0.08333333333333333f * (0 - (fSlow0 - 1)));
		float 	fSlow10 = float(fentry2);
		int 	iSlow11 = int((int((fConst4 / fSlow10)) & 4095));
		float 	fSlow12 = (fConst8 * cosf((fConst7 * fSlow10)));
		int 	iSlow13 = int((int((fConst12 / fSlow10)) & 4095));
		float 	fSlow14 = (fConst8 * cosf((fConst13 * fSlow10)));
		float 	fSlow15 = (1.0914886f * fSlow0);
		int 	iSlow16 = int((int((fConst14 / fSlow10)) & 4095));
		float 	fSlow17 = (fConst8 * cosf((fConst15 * fSlow10)));
		int 	iSlow18 = int((int((fConst16 / fSlow10)) & 4095));
		float 	fSlow19 = (fConst8 * cosf((fConst17 * fSlow10)));
		float 	fSlow20 = (4.2995041f * fSlow0);
		int 	iSlow21 = int((int((fConst18 / fSlow10)) & 4095));
		float 	fSlow22 = (fConst8 * cosf((fConst19 * fSlow10)));
		float 	fSlow23 = (4.0063034f * fSlow0);
		int 	iSlow24 = int((int((fConst20 / fSlow10)) & 4095));
		float 	fSlow25 = (fConst8 * cosf((fConst21 * fSlow10)));
		int 	iSlow26 = int((int((fConst22 / fSlow10)) & 4095));
		float 	fSlow27 = (fConst8 * cosf((fConst23 * fSlow10)));
		float 	fSlow28 = (0.7063034f * fSlow0);
		int 	iSlow29 = int((int((fConst24 / fSlow10)) & 4095));
		float 	fSlow30 = (fConst8 * cosf((fConst25 * fSlow10)));
		int 	iSlow31 = int((int((fConst26 / fSlow10)) & 4095));
		float 	fSlow32 = (fConst8 * cosf((fConst27 * fSlow10)));
		float 	fSlow33 = (5.7063034f * fSlow0);
		int 	iSlow34 = int((int((fConst28 / fSlow10)) & 4095));
		float 	fSlow35 = (fConst8 * cosf((fConst29 * fSlow10)));
		int 	iSlow36 = int((int((fConst30 / fSlow10)) & 4095));
		float 	fSlow37 = (fConst8 * cosf((fConst31 * fSlow10)));
		float 	fSlow38 = (0.0010000000000000009f * float(fslider3));
		float 	fSlow39 = float(fentry3);
		float 	fSlow40 = (3.141592653589793f * (fSlow39 == 2));
		float 	fSlow41 = (1.5707963267948966f * (fSlow39 == 1));
		float 	fSlow42 = (3.141592653589793f * (fSlow39 == 0));
		int 	iSlow43 = (fSlow39 < 3);
		float 	fSlow44 = (0.0010000000000000009f * float(fslider4));
		int 	iSlow45 = (fSlow39 != 4);
		float 	fSlow46 = (fSlow10 * (fSlow39 == 4));
		int 	iSlow47 = (fSlow39 >= 3);
		float 	fSlow48 = (0.0010000000000000009f * float(fslider5));
		float 	fSlow49 = float(fslider6);
		float 	fSlow50 = (1.0f - fSlow49);
		float 	fSlow51 = float(fslider7);
		float 	fSlow52 = expf((fConst40 / fSlow51));
		float 	fSlow53 = ((expf((fConst41 / fSlow51)) / fSlow52) - 1);
		float 	fSlow54 = faustpower<2>(fSlow52);
		float 	fSlow55 = (1.0f - fSlow54);
		float 	fSlow56 = (1.0f - (fConst42 * fSlow54));
		float 	fSlow57 = (fSlow56 / fSlow55);
		float 	fSlow58 = sqrtf(max((float)0, ((faustpower<2>(fSlow56) / faustpower<2>(fSlow55)) - 1.0f)));
		float 	fSlow59 = (fSlow52 * ((1.0f + fSlow58) - fSlow57));
		float 	fSlow60 = (fSlow57 - fSlow58);
		float 	fSlow61 = expf((fConst49 / fSlow51));
		float 	fSlow62 = ((expf((fConst50 / fSlow51)) / fSlow61) - 1);
		float 	fSlow63 = faustpower<2>(fSlow61);
		float 	fSlow64 = (1.0f - fSlow63);
		float 	fSlow65 = (1.0f - (fConst42 * fSlow63));
		float 	fSlow66 = (fSlow65 / fSlow64);
		float 	fSlow67 = sqrtf(max((float)0, ((faustpower<2>(fSlow65) / faustpower<2>(fSlow64)) - 1.0f)));
		float 	fSlow68 = (fSlow61 * ((1.0f + fSlow67) - fSlow66));
		float 	fSlow69 = (fSlow66 - fSlow67);
		float 	fSlow70 = expf((fConst56 / fSlow51));
		float 	fSlow71 = ((expf((fConst57 / fSlow51)) / fSlow70) - 1);
		float 	fSlow72 = faustpower<2>(fSlow70);
		float 	fSlow73 = (1.0f - fSlow72);
		float 	fSlow74 = (1.0f - (fConst42 * fSlow72));
		float 	fSlow75 = (fSlow74 / fSlow73);
		float 	fSlow76 = sqrtf(max((float)0, ((faustpower<2>(fSlow74) / faustpower<2>(fSlow73)) - 1.0f)));
		float 	fSlow77 = (fSlow70 * ((1.0f + fSlow76) - fSlow75));
		float 	fSlow78 = (fSlow75 - fSlow76);
		float 	fSlow79 = expf((fConst63 / fSlow51));
		float 	fSlow80 = ((expf((fConst64 / fSlow51)) / fSlow79) - 1);
		float 	fSlow81 = faustpower<2>(fSlow79);
		float 	fSlow82 = (1.0f - fSlow81);
		float 	fSlow83 = (1.0f - (fConst42 * fSlow81));
		float 	fSlow84 = (fSlow83 / fSlow82);
		float 	fSlow85 = sqrtf(max((float)0, ((faustpower<2>(fSlow83) / faustpower<2>(fSlow82)) - 1.0f)));
		float 	fSlow86 = (fSlow79 * ((1.0f + fSlow85) - fSlow84));
		float 	fSlow87 = (fSlow84 - fSlow85);
		float 	fSlow88 = expf((fConst70 / fSlow51));
		float 	fSlow89 = ((expf((fConst71 / fSlow51)) / fSlow88) - 1);
		float 	fSlow90 = faustpower<2>(fSlow88);
		float 	fSlow91 = (1.0f - fSlow90);
		float 	fSlow92 = (1.0f - (fConst42 * fSlow90));
		float 	fSlow93 = (fSlow92 / fSlow91);
		float 	fSlow94 = sqrtf(max((float)0, ((faustpower<2>(fSlow92) / faustpower<2>(fSlow91)) - 1.0f)));
		float 	fSlow95 = (fSlow88 * ((1.0f + fSlow94) - fSlow93));
		float 	fSlow96 = (fSlow93 - fSlow94);
		int 	iSlow97 = int((int((fConst74 * (float(fslider8) / fSlow10))) & 4095));
		float 	fSlow98 = expf((fConst78 / fSlow51));
		float 	fSlow99 = ((expf((fConst79 / fSlow51)) / fSlow98) - 1);
		float 	fSlow100 = faustpower<2>(fSlow98);
		float 	fSlow101 = (1.0f - fSlow100);
		float 	fSlow102 = (1.0f - (fConst42 * fSlow100));
		float 	fSlow103 = (fSlow102 / fSlow101);
		float 	fSlow104 = sqrtf(max((float)0, ((faustpower<2>(fSlow102) / faustpower<2>(fSlow101)) - 1.0f)));
		float 	fSlow105 = (fSlow98 * ((1.0f + fSlow104) - fSlow103));
		float 	fSlow106 = (fSlow103 - fSlow104);
		float 	fSlow107 = expf((fConst85 / fSlow51));
		float 	fSlow108 = ((expf((fConst86 / fSlow51)) / fSlow107) - 1);
		float 	fSlow109 = faustpower<2>(fSlow107);
		float 	fSlow110 = (1.0f - fSlow109);
		float 	fSlow111 = (1.0f - (fConst42 * fSlow109));
		float 	fSlow112 = (fSlow111 / fSlow110);
		float 	fSlow113 = sqrtf(max((float)0, ((faustpower<2>(fSlow111) / faustpower<2>(fSlow110)) - 1.0f)));
		float 	fSlow114 = (fSlow107 * ((1.0f + fSlow113) - fSlow112));
		float 	fSlow115 = (fSlow112 - fSlow113);
		float 	fSlow116 = expf((fConst92 / fSlow51));
		float 	fSlow117 = ((expf((fConst93 / fSlow51)) / fSlow116) - 1);
		float 	fSlow118 = faustpower<2>(fSlow116);
		float 	fSlow119 = (1.0f - fSlow118);
		float 	fSlow120 = (1.0f - (fConst42 * fSlow118));
		float 	fSlow121 = (fSlow120 / fSlow119);
		float 	fSlow122 = sqrtf(max((float)0, ((faustpower<2>(fSlow120) / faustpower<2>(fSlow119)) - 1.0f)));
		float 	fSlow123 = (fSlow116 * ((1.0f + fSlow122) - fSlow121));
		float 	fSlow124 = (fSlow121 - fSlow122);
		FAUSTFLOAT* output0 = output[0];
		FAUSTFLOAT* output1 = output[1];
		for (int i=0; i<count; i++) {
			iRec14[0] = (iSlow3 & (iRec14[1] | (fRec15[1] >= 1)));
			int iTemp0 = (iSlow4 & (fRec15[1] > 0));
			fRec15[0] = (((fConst3 * (((iRec14[1] == 0) & iSlow3) & (fRec15[1] < 1))) + (fRec15[1] * ((1 - (fConst2 * (iRec14[1] & (fRec15[1] > 90)))) - (fConst1 * iTemp0)))) * ((iTemp0 == 0) | (fRec15[1] >= 1e-06f)));
			float fTemp1 = (0 - ((fSlow7 + (fSlow6 * ((((((fRec0[1] + fRec2[1]) + fRec4[1]) + fRec6[1]) + fRec8[1]) + fRec10[1]) + (((((fRec1[1] + fRec3[1]) + fRec5[1]) + fRec7[1]) + fRec9[1]) + fRec11[1])))) - (fSlow5 * fRec15[0])));
			float fTemp2 = faustpower<4>((0.75f + fabsf((fSlow8 * fTemp1))));
			float fTemp3 = (1.0f / fTemp2);
			float fTemp4 = (fSlow9 * (fTemp1 * ((fTemp3 > 1) + (float((fTemp3 <= 1)) / fTemp2))));
			fVec0[IOTA&4095] = ((fRec12[1] + fTemp4) + fSlow1);
			fRec13[0] = (0 - (((fSlow12 * fRec13[1]) + (fConst6 * fRec13[2])) - (0.999925960128219f * fVec0[(IOTA-iSlow11)&4095])));
			fRec12[0] = ((fConst11 * fRec13[0]) + (fConst10 * fRec13[2]));
			fRec0[0] = fRec12[0];
			fVec1[IOTA&4095] = (fSlow1 + (fTemp4 + fRec16[1]));
			fRec17[0] = (0 - (((fSlow14 * fRec17[1]) + (fConst6 * fRec17[2])) - (0.999925960128219f * fVec1[(IOTA-iSlow13)&4095])));
			fRec16[0] = ((fConst11 * fRec17[0]) + (fConst10 * fRec17[2]));
			fRec1[0] = fRec16[0];
			fVec2[IOTA&4095] = ((fTemp4 + fRec18[1]) + fSlow15);
			fRec19[0] = (0 - (((fSlow17 * fRec19[1]) + (fConst6 * fRec19[2])) - (0.999982774366897f * fVec2[(IOTA-iSlow16)&4095])));
			fRec18[0] = ((fConst11 * fRec19[0]) + (fConst10 * fRec19[2]));
			fRec2[0] = fRec18[0];
			fVec3[IOTA&4095] = (fSlow15 + (fTemp4 + fRec20[1]));
			fRec21[0] = (0 - (((fSlow19 * fRec21[1]) + (fConst6 * fRec21[2])) - (0.999982774366897f * fVec3[(IOTA-iSlow18)&4095])));
			fRec20[0] = ((fConst11 * fRec21[0]) + (fConst10 * fRec21[2]));
			fRec3[0] = fRec20[0];
			fVec4[IOTA&2047] = ((fTemp4 + fRec22[1]) + fSlow20);
			fRec23[0] = (0 - (((fSlow22 * fRec23[1]) + (fConst6 * fRec23[2])) - fVec4[(IOTA-iSlow21)&2047]));
			fRec22[0] = ((fConst11 * fRec23[0]) + (fConst10 * fRec23[2]));
			fRec4[0] = fRec22[0];
			fRec5[0] = fRec22[0];
			fVec5[IOTA&2047] = ((fTemp4 + fRec24[1]) + fSlow23);
			fRec25[0] = (0 - (((fSlow25 * fRec25[1]) + (fConst6 * fRec25[2])) - fVec5[(IOTA-iSlow24)&2047]));
			fRec24[0] = ((fConst11 * fRec25[0]) + (fConst10 * fRec25[2]));
			fRec6[0] = fRec24[0];
			fVec6[IOTA&2047] = (fSlow23 + (fTemp4 + fRec26[1]));
			fRec27[0] = (0 - (((fSlow27 * fRec27[1]) + (fConst6 * fRec27[2])) - fVec6[(IOTA-iSlow26)&2047]));
			fRec26[0] = ((fConst11 * fRec27[0]) + (fConst10 * fRec27[2]));
			fRec7[0] = fRec26[0];
			fVec7[IOTA&1023] = ((fTemp4 + fRec28[1]) + fSlow28);
			fRec29[0] = (0 - (((fSlow30 * fRec29[1]) + (fConst6 * fRec29[2])) - (0.999965497558225f * fVec7[(IOTA-iSlow29)&1023])));
			fRec28[0] = ((fConst11 * fRec29[0]) + (fConst10 * fRec29[2]));
			fRec8[0] = fRec28[0];
			fVec8[IOTA&1023] = (fSlow28 + (fTemp4 + fRec30[1]));
			fRec31[0] = (0 - (((fSlow32 * fRec31[1]) + (fConst6 * fRec31[2])) - (0.999965497558225f * fVec8[(IOTA-iSlow31)&1023])));
			fRec30[0] = ((fConst11 * fRec31[0]) + (fConst10 * fRec31[2]));
			fRec9[0] = fRec30[0];
			fVec9[IOTA&1023] = ((fTemp4 + fRec32[1]) + fSlow33);
			fRec33[0] = (0 - (((fSlow35 * fRec33[1]) + (fConst6 * fRec33[2])) - fVec9[(IOTA-iSlow34)&1023]));
			fRec32[0] = ((fConst11 * fRec33[0]) + (fConst10 * fRec33[2]));
			fRec10[0] = fRec32[0];
			fVec10[IOTA&511] = (fSlow33 + (fTemp4 + fRec34[1]));
			fRec35[0] = (0 - (((fSlow37 * fRec35[1]) + (fConst6 * fRec35[2])) - fVec10[(IOTA-iSlow36)&511]));
			fRec34[0] = ((fConst11 * fRec35[0]) + (fConst10 * fRec35[2]));
			fRec11[0] = fRec34[0];
			float fTemp5 = (fRec11[0] + (fRec9[0] + (fRec7[0] + (fRec5[0] + (fRec3[0] + ((((((fRec0[0] + fRec2[0]) + fRec4[0]) + fRec6[0]) + fRec8[0]) + fRec10[0]) + fRec1[0]))))));
			fVec11[0] = fTemp5;
			fRec36[0] = (fSlow38 + (0.999f * fRec36[1]));
			float fTemp6 = (fRec36[0] * (((fSlow42 * fVec11[0]) + (fSlow41 * (fVec11[0] + fVec11[1]))) + (fSlow40 * faustpower<2>(fVec11[0]))));
			float fTemp7 = cosf(fTemp6);
			float fTemp8 = sinf(fTemp6);
			float fTemp9 = (0 - fTemp8);
			float fTemp10 = ((fRec37[1] * fTemp9) + (fVec11[0] * fTemp7));
			float fTemp11 = ((fTemp9 * fRec38[1]) + (fTemp7 * fTemp10));
			float fTemp12 = ((fTemp9 * fRec39[1]) + (fTemp7 * fTemp11));
			float fTemp13 = ((fTemp9 * fRec40[1]) + (fTemp7 * fTemp12));
			float fTemp14 = ((fTemp9 * fRec41[1]) + (fTemp7 * fTemp13));
			fRec42[0] = ((fTemp9 * fRec42[1]) + (fTemp7 * fTemp14));
			fRec41[0] = ((fTemp8 * fTemp14) + (fTemp7 * fRec42[1]));
			fRec40[0] = ((fTemp8 * fTemp13) + (fTemp7 * fRec41[1]));
			fRec39[0] = ((fTemp8 * fTemp12) + (fTemp7 * fRec40[1]));
			fRec38[0] = ((fTemp8 * fTemp11) + (fTemp7 * fRec39[1]));
			fRec37[0] = ((fTemp8 * fTemp10) + (fTemp7 * fRec38[1]));
			fRec45[0] = (fSlow44 + (0.999f * fRec45[1]));
			float fTemp15 = (fRec44[1] + (fConst33 * (fSlow46 + (iSlow45 * fRec45[0]))));
			fRec44[0] = (fTemp15 - floorf(fTemp15));
			float fTemp16 = (3.141592653589793f * (fRec36[0] * ftbl0[int((65536.0f * fRec44[0]))]));
			float fTemp17 = cosf(fTemp16);
			float fTemp18 = sinf(fTemp16);
			float fTemp19 = (0 - fTemp18);
			float fTemp20 = ((fRec46[1] * fTemp19) + (fVec11[0] * fTemp17));
			float fTemp21 = ((fTemp19 * fRec47[1]) + (fTemp17 * fTemp20));
			float fTemp22 = ((fTemp19 * fRec48[1]) + (fTemp17 * fTemp21));
			float fTemp23 = ((fTemp19 * fRec49[1]) + (fTemp17 * fTemp22));
			float fTemp24 = ((fTemp19 * fRec50[1]) + (fTemp17 * fTemp23));
			fRec51[0] = ((fTemp19 * fRec51[1]) + (fTemp17 * fTemp24));
			fRec50[0] = ((fTemp18 * fTemp24) + (fTemp17 * fRec51[1]));
			fRec49[0] = ((fTemp18 * fTemp23) + (fTemp17 * fRec50[1]));
			fRec48[0] = ((fTemp18 * fTemp22) + (fTemp17 * fRec49[1]));
			fRec47[0] = ((fTemp18 * fTemp21) + (fTemp17 * fRec48[1]));
			fRec46[0] = ((fTemp18 * fTemp20) + (fTemp17 * fRec47[1]));
			float fTemp25 = ((iSlow47 * ((fVec11[0] * fTemp18) + (fRec46[1] * fTemp17))) + (iSlow43 * ((fRec36[0] * ((fVec11[0] * fTemp8) + (fRec37[1] * fTemp7))) + ((1 - fRec36[0]) * fVec11[0]))));
			fVec12[IOTA&4095] = fTemp25;
			fRec52[0] = ((0.999f * fRec52[1]) + fSlow48);
			float fTemp26 = (1 - fRec52[0]);
			fRec64[0] = ((fConst37 * fRec64[1]) + (fConst36 * (fRec57[1] + fRec57[2])));
			fRec63[0] = ((fSlow60 * fRec63[1]) + (fSlow59 * (fRec57[1] + (fSlow53 * fRec64[0]))));
			fVec13[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec63[0]));
			fVec14[IOTA&4095] = (fSlow50 * (fRec52[0] * fVec12[IOTA&4095]));
			float fTemp27 = (0.3f * fVec14[(IOTA-iConst45)&4095]);
			float fTemp28 = ((fTemp27 + fVec13[(IOTA-iConst44)&8191]) - (0.6f * fRec61[1]));
			fVec15[IOTA&2047] = fTemp28;
			fRec61[0] = fVec15[(IOTA-iConst46)&2047];
			float 	fRec62 = (0.6f * fVec15[IOTA&2047]);
			fRec68[0] = ((fConst37 * fRec68[1]) + (fConst36 * (fRec53[1] + fRec53[2])));
			fRec67[0] = ((fSlow69 * fRec67[1]) + (fSlow68 * (fRec53[1] + (fSlow62 * fRec68[0]))));
			fVec16[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec67[0]));
			float fTemp29 = ((fVec16[(IOTA-iConst52)&8191] + fTemp27) - (0.6f * fRec65[1]));
			fVec17[IOTA&1023] = fTemp29;
			fRec65[0] = fVec17[(IOTA-iConst53)&1023];
			float 	fRec66 = (0.6f * fVec17[IOTA&1023]);
			float fTemp30 = (fRec66 + fRec62);
			fRec72[0] = ((fConst37 * fRec72[1]) + (fConst36 * (fRec55[1] + fRec55[2])));
			fRec71[0] = ((fSlow78 * fRec71[1]) + (fSlow77 * (fRec55[1] + (fSlow71 * fRec72[0]))));
			fVec18[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec71[0]));
			float fTemp31 = (fVec18[(IOTA-iConst59)&8191] - (fTemp27 + (0.6f * fRec69[1])));
			fVec19[IOTA&2047] = fTemp31;
			fRec69[0] = fVec19[(IOTA-iConst60)&2047];
			float 	fRec70 = (0.6f * fVec19[IOTA&2047]);
			fRec76[0] = ((fConst37 * fRec76[1]) + (fConst36 * (fRec59[1] + fRec59[2])));
			fRec75[0] = ((fSlow87 * fRec75[1]) + (fSlow86 * (fRec59[1] + (fSlow80 * fRec76[0]))));
			fVec20[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec75[0]));
			float fTemp32 = (fVec20[(IOTA-iConst66)&8191] - (fTemp27 + (0.6f * fRec73[1])));
			fVec21[IOTA&1023] = fTemp32;
			fRec73[0] = fVec21[(IOTA-iConst67)&1023];
			float 	fRec74 = (0.6f * fVec21[IOTA&1023]);
			float fTemp33 = (fRec74 + (fRec70 + fTemp30));
			fRec80[0] = ((fConst37 * fRec80[1]) + (fConst36 * (fRec54[1] + fRec54[2])));
			fRec79[0] = ((fSlow96 * fRec79[1]) + (fSlow95 * (fRec54[1] + (fSlow89 * fRec80[0]))));
			fVec22[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec79[0]));
			float fTemp34 = fVec12[(IOTA-iSlow97)&4095];
			fVec23[IOTA&4095] = (fSlow49 * (fRec52[0] * fTemp34));
			float fTemp35 = (0.3f * fVec23[(IOTA-iConst45)&4095]);
			float fTemp36 = (fTemp35 + ((0.6f * fRec77[1]) + fVec22[(IOTA-iConst73)&16383]));
			fVec24[IOTA&2047] = fTemp36;
			fRec77[0] = fVec24[(IOTA-iConst75)&2047];
			float 	fRec78 = (0 - (0.6f * fVec24[IOTA&2047]));
			fRec84[0] = ((fConst37 * fRec84[1]) + (fConst36 * (fRec58[1] + fRec58[2])));
			fRec83[0] = ((fSlow106 * fRec83[1]) + (fSlow105 * (fRec58[1] + (fSlow99 * fRec84[0]))));
			fVec25[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec83[0]));
			float fTemp37 = (fVec25[(IOTA-iConst81)&8191] + (fTemp35 + (0.6f * fRec81[1])));
			fVec26[IOTA&2047] = fTemp37;
			fRec81[0] = fVec26[(IOTA-iConst82)&2047];
			float 	fRec82 = (0 - (0.6f * fVec26[IOTA&2047]));
			fRec88[0] = ((fConst37 * fRec88[1]) + (fConst36 * (fRec56[1] + fRec56[2])));
			fRec87[0] = ((fSlow115 * fRec87[1]) + (fSlow114 * (fRec56[1] + (fSlow108 * fRec88[0]))));
			fVec27[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec87[0]));
			float fTemp38 = (((0.6f * fRec85[1]) + fVec27[(IOTA-iConst88)&16383]) - fTemp35);
			fVec28[IOTA&2047] = fTemp38;
			fRec85[0] = fVec28[(IOTA-iConst89)&2047];
			float 	fRec86 = (0 - (0.6f * fVec28[IOTA&2047]));
			fRec92[0] = ((fConst37 * fRec92[1]) + (fConst36 * (fRec60[1] + fRec60[2])));
			fRec91[0] = ((fSlow124 * fRec91[1]) + (fSlow123 * (fRec60[1] + (fSlow117 * fRec92[0]))));
			fVec29[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec91[0]));
			float fTemp39 = (((0.6f * fRec89[1]) + fVec29[(IOTA-iConst95)&16383]) - fTemp35);
			fVec30[IOTA&1023] = fTemp39;
			fRec89[0] = fVec30[(IOTA-iConst96)&1023];
			float 	fRec90 = (0 - (0.6f * fVec30[IOTA&1023]));
			fRec53[0] = (fRec89[1] + (fRec85[1] + (fRec81[1] + (fRec77[1] + (fRec73[1] + (fRec69[1] + (fRec61[1] + (fRec65[1] + (fRec90 + (fRec86 + (fRec82 + (fRec78 + fTemp33))))))))))));
			fRec54[0] = (0 - ((fRec89[1] + (fRec85[1] + (fRec81[1] + (fRec77[1] + (fRec90 + (fRec86 + (fRec78 + fRec82))))))) - (fRec73[1] + (fRec69[1] + (fRec61[1] + (fRec65[1] + fTemp33))))));
			float fTemp40 = (fRec70 + fRec74);
			fRec55[0] = (0 - ((fRec89[1] + (fRec85[1] + (fRec73[1] + (fRec69[1] + (fRec90 + (fRec86 + fTemp40)))))) - (fRec81[1] + (fRec77[1] + (fRec61[1] + (fRec65[1] + (fRec82 + (fRec78 + fTemp30))))))));
			fRec56[0] = (0 - ((fRec81[1] + (fRec77[1] + (fRec73[1] + (fRec69[1] + (fRec82 + (fRec78 + fTemp40)))))) - (fRec89[1] + (fRec85[1] + (fRec61[1] + (fRec65[1] + (fRec90 + (fRec86 + fTemp30))))))));
			float fTemp41 = (fRec66 + fRec70);
			float fTemp42 = (fRec62 + fRec74);
			fRec57[0] = (0 - ((fRec89[1] + (fRec81[1] + (fRec73[1] + (fRec61[1] + (fRec90 + (fRec82 + fTemp42)))))) - (fRec85[1] + (fRec77[1] + (fRec69[1] + (fRec65[1] + (fRec86 + (fRec78 + fTemp41))))))));
			fRec58[0] = (0 - ((fRec85[1] + (fRec77[1] + (fRec73[1] + (fRec61[1] + (fRec86 + (fRec78 + fTemp42)))))) - (fRec89[1] + (fRec81[1] + (fRec69[1] + (fRec65[1] + (fRec90 + (fRec82 + fTemp41))))))));
			float fTemp43 = (fRec66 + fRec74);
			float fTemp44 = (fRec62 + fRec70);
			fRec59[0] = (0 - ((fRec85[1] + (fRec81[1] + (fRec69[1] + (fRec61[1] + (fRec86 + (fRec82 + fTemp44)))))) - (fRec89[1] + (fRec77[1] + (fRec73[1] + (fRec65[1] + (fRec90 + (fRec78 + fTemp43))))))));
			fRec60[0] = (0 - ((fRec89[1] + (fRec77[1] + (fRec69[1] + (fRec61[1] + (fRec90 + (fRec78 + fTemp44)))))) - (fRec85[1] + (fRec81[1] + (fRec73[1] + (fRec65[1] + (fRec86 + (fRec82 + fTemp43))))))));
			output0[i] = (FAUSTFLOAT)((0.37f * (fRec54[0] + fRec55[0])) + (fSlow50 * (fTemp26 * fVec12[IOTA&4095])));
			output1[i] = (FAUSTFLOAT)((0.37f * (fRec54[0] - fRec55[0])) + (fSlow49 * (fTemp26 * fTemp34)));
			// post processing
			fRec60[2] = fRec60[1]; fRec60[1] = fRec60[0];
			fRec59[2] = fRec59[1]; fRec59[1] = fRec59[0];
			fRec58[2] = fRec58[1]; fRec58[1] = fRec58[0];
			fRec57[2] = fRec57[1]; fRec57[1] = fRec57[0];
			fRec56[2] = fRec56[1]; fRec56[1] = fRec56[0];
			fRec55[2] = fRec55[1]; fRec55[1] = fRec55[0];
			fRec54[2] = fRec54[1]; fRec54[1] = fRec54[0];
			fRec53[2] = fRec53[1]; fRec53[1] = fRec53[0];
			fRec89[1] = fRec89[0];
			fRec91[1] = fRec91[0];
			fRec92[1] = fRec92[0];
			fRec85[1] = fRec85[0];
			fRec87[1] = fRec87[0];
			fRec88[1] = fRec88[0];
			fRec81[1] = fRec81[0];
			fRec83[1] = fRec83[0];
			fRec84[1] = fRec84[0];
			fRec77[1] = fRec77[0];
			fRec79[1] = fRec79[0];
			fRec80[1] = fRec80[0];
			fRec73[1] = fRec73[0];
			fRec75[1] = fRec75[0];
			fRec76[1] = fRec76[0];
			fRec69[1] = fRec69[0];
			fRec71[1] = fRec71[0];
			fRec72[1] = fRec72[0];
			fRec65[1] = fRec65[0];
			fRec67[1] = fRec67[0];
			fRec68[1] = fRec68[0];
			fRec61[1] = fRec61[0];
			fRec63[1] = fRec63[0];
			fRec64[1] = fRec64[0];
			fRec52[1] = fRec52[0];
			fRec46[1] = fRec46[0];
			fRec47[1] = fRec47[0];
			fRec48[1] = fRec48[0];
			fRec49[1] = fRec49[0];
			fRec50[1] = fRec50[0];
			fRec51[1] = fRec51[0];
			fRec44[1] = fRec44[0];
			fRec45[1] = fRec45[0];
			fRec37[1] = fRec37[0];
			fRec38[1] = fRec38[0];
			fRec39[1] = fRec39[0];
			fRec40[1] = fRec40[0];
			fRec41[1] = fRec41[0];
			fRec42[1] = fRec42[0];
			fRec36[1] = fRec36[0];
			fVec11[1] = fVec11[0];
			fRec11[1] = fRec11[0];
			fRec34[1] = fRec34[0];
			fRec35[2] = fRec35[1]; fRec35[1] = fRec35[0];
			fRec10[1] = fRec10[0];
			fRec32[1] = fRec32[0];
			fRec33[2] = fRec33[1]; fRec33[1] = fRec33[0];
			fRec9[1] = fRec9[0];
			fRec30[1] = fRec30[0];
			fRec31[2] = fRec31[1]; fRec31[1] = fRec31[0];
			fRec8[1] = fRec8[0];
			fRec28[1] = fRec28[0];
			fRec29[2] = fRec29[1]; fRec29[1] = fRec29[0];
			fRec7[1] = fRec7[0];
			fRec26[1] = fRec26[0];
			fRec27[2] = fRec27[1]; fRec27[1] = fRec27[0];
			fRec6[1] = fRec6[0];
			fRec24[1] = fRec24[0];
			fRec25[2] = fRec25[1]; fRec25[1] = fRec25[0];
			fRec5[1] = fRec5[0];
			fRec4[1] = fRec4[0];
			fRec22[1] = fRec22[0];
			fRec23[2] = fRec23[1]; fRec23[1] = fRec23[0];
			fRec3[1] = fRec3[0];
			fRec20[1] = fRec20[0];
			fRec21[2] = fRec21[1]; fRec21[1] = fRec21[0];
			fRec2[1] = fRec2[0];
			fRec18[1] = fRec18[0];
			fRec19[2] = fRec19[1]; fRec19[1] = fRec19[0];
			fRec1[1] = fRec1[0];
			fRec16[1] = fRec16[0];
			fRec17[2] = fRec17[1]; fRec17[1] = fRec17[0];
			fRec0[1] = fRec0[0];
			fRec12[1] = fRec12[0];
			fRec13[2] = fRec13[1]; fRec13[1] = fRec13[0];
			IOTA = IOTA+1;
			fRec15[1] = fRec15[0];
			iRec14[1] = iRec14[0];
		}
	}
};


float 	mydsp::ftbl0[65536];
