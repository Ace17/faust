//-----------------------------------------------------
// name: "Nonlinear EKS"
// author: "Julius Smith and Romain Michon"
// version: "1.0"
// license: "STK-4.3"
// copyright: "Julius Smith"
//
// Code generated with Faust 0.9.70 (http://faust.grame.fr)
//-----------------------------------------------------
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif  

typedef long double quad;
/* link with  */
#include <math.h>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline float faustpower(float x)          { return powf(x,N); } 
template <int N> inline double faustpower(double x)        { return pow(x,N); }
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <>   inline int faustpower<0>(int x)            { return 1; }
template <>   inline int faustpower<1>(int x)            { return x; }
#endif

#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	class SIG0 {
	  private:
		int 	fSamplingFreq;
		int 	iRec12[2];
	  public:
		int getNumInputs() 	{ return 0; }
		int getNumOutputs() 	{ return 1; }
		void init(int samplingFreq) {
			fSamplingFreq = samplingFreq;
			for (int i=0; i<2; i++) iRec12[i] = 0;
		}
		void fill (int count, float output[]) {
			for (int i=0; i<count; i++) {
				iRec12[0] = (1 + iRec12[1]);
				output[i] = sinf((9.587379924285257e-05f * float((iRec12[0] - 1))));
				// post processing
				iRec12[1] = iRec12[0];
			}
		}
	};


	FAUSTFLOAT 	fslider0;
	float 	fRec0[2];
	FAUSTFLOAT 	fentry0;
	int 	iConst0;
	float 	fConst1;
	FAUSTFLOAT 	fbutton0;
	float 	fVec0[2];
	float 	fRec3[2];
	int 	iRec4[2];
	FAUSTFLOAT 	fslider1;
	FAUSTFLOAT 	fentry1;
	int 	IOTA;
	float 	fRec2[4096];
	FAUSTFLOAT 	fslider2;
	FAUSTFLOAT 	fslider3;
	FAUSTFLOAT 	fslider4;
	FAUSTFLOAT 	fslider5;
	float 	fRec5[2];
	FAUSTFLOAT 	fslider6;
	FAUSTFLOAT 	fentry2;
	float 	fVec1[2];
	float 	fRec11[2];
	float 	fRec10[2];
	float 	fRec9[2];
	float 	fRec8[2];
	float 	fRec7[2];
	float 	fRec6[2];
	static float 	ftbl0[65536];
	FAUSTFLOAT 	fslider7;
	float 	fRec14[2];
	float 	fConst2;
	float 	fConst3;
	float 	fRec13[2];
	float 	fRec20[2];
	float 	fRec19[2];
	float 	fRec18[2];
	float 	fRec17[2];
	float 	fRec16[2];
	float 	fRec15[2];
	float 	fConst4;
	float 	fRec21[2];
	float 	fVec2[4096];
	float 	fRec1[4096];
	FAUSTFLOAT 	fslider8;
	float 	fConst5;
	float 	fConst6;
	float 	fConst7;
	float 	fConst8;
	float 	fRec33[2];
	FAUSTFLOAT 	fslider9;
	float 	fConst9;
	float 	fConst10;
	float 	fConst11;
	float 	fConst12;
	float 	fConst13;
	float 	fRec32[2];
	float 	fVec3[8192];
	float 	fConst14;
	int 	iConst15;
	float 	fVec4[4096];
	int 	iConst16;
	float 	fVec5[2048];
	int 	iConst17;
	float 	fRec30[2];
	float 	fRec37[2];
	float 	fConst18;
	float 	fConst19;
	float 	fConst20;
	float 	fConst21;
	float 	fRec36[2];
	float 	fVec6[8192];
	float 	fConst22;
	int 	iConst23;
	float 	fVec7[1024];
	int 	iConst24;
	float 	fRec34[2];
	float 	fRec41[2];
	float 	fConst25;
	float 	fConst26;
	float 	fConst27;
	float 	fConst28;
	float 	fRec40[2];
	float 	fVec8[8192];
	float 	fConst29;
	int 	iConst30;
	float 	fVec9[2048];
	int 	iConst31;
	float 	fRec38[2];
	float 	fRec45[2];
	float 	fConst32;
	float 	fConst33;
	float 	fConst34;
	float 	fConst35;
	float 	fRec44[2];
	float 	fVec10[8192];
	float 	fConst36;
	int 	iConst37;
	float 	fVec11[1024];
	int 	iConst38;
	float 	fRec42[2];
	float 	fRec49[2];
	float 	fConst39;
	float 	fConst40;
	float 	fConst41;
	float 	fConst42;
	float 	fRec48[2];
	float 	fVec12[16384];
	float 	fConst43;
	int 	iConst44;
	FAUSTFLOAT 	fslider10;
	float 	fConst45;
	float 	fVec13[4096];
	float 	fVec14[2048];
	int 	iConst46;
	float 	fRec46[2];
	float 	fRec53[2];
	float 	fConst47;
	float 	fConst48;
	float 	fConst49;
	float 	fConst50;
	float 	fRec52[2];
	float 	fVec15[8192];
	float 	fConst51;
	int 	iConst52;
	float 	fVec16[2048];
	int 	iConst53;
	float 	fRec50[2];
	float 	fRec57[2];
	float 	fConst54;
	float 	fConst55;
	float 	fConst56;
	float 	fConst57;
	float 	fRec56[2];
	float 	fVec17[16384];
	float 	fConst58;
	int 	iConst59;
	float 	fVec18[2048];
	int 	iConst60;
	float 	fRec54[2];
	float 	fRec61[2];
	float 	fConst61;
	float 	fConst62;
	float 	fConst63;
	float 	fConst64;
	float 	fRec60[2];
	float 	fVec19[16384];
	float 	fConst65;
	int 	iConst66;
	float 	fVec20[1024];
	int 	iConst67;
	float 	fRec58[2];
	float 	fRec22[3];
	float 	fRec23[3];
	float 	fRec24[3];
	float 	fRec25[3];
	float 	fRec26[3];
	float 	fRec27[3];
	float 	fRec28[3];
	float 	fRec29[3];
  public:
	static void metadata(Meta* m) 	{ 
		m->declare("name", "Nonlinear EKS");
		m->declare("author", "Julius Smith and Romain Michon");
		m->declare("version", "1.0");
		m->declare("license", "STK-4.3");
		m->declare("copyright", "Julius Smith");
		m->declare("reference", "http://ccrma.stanford.edu/~jos/pasp/vegf.html");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/version", "1.0");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/version", "1.0");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("instrument.lib/name", "Faust-STK Tools Library");
		m->declare("instrument.lib/author", "Romain Michon (rmichon@ccrma.stanford.edu)");
		m->declare("instrument.lib/copyright", "Romain Michon");
		m->declare("instrument.lib/version", "1.0");
		m->declare("instrument.lib/licence", "STK-4.3");
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/version", "1.29");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("effect.lib/name", "Faust Audio Effect Library");
		m->declare("effect.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/copyright", "Julius O. Smith III");
		m->declare("effect.lib/version", "1.33");
		m->declare("effect.lib/license", "STK-4.3");
		m->declare("effect.lib/exciter_name", "Harmonic Exciter");
		m->declare("effect.lib/exciter_author", "Priyanka Shekar (pshekar@ccrma.stanford.edu)");
		m->declare("effect.lib/exciter_copyright", "Copyright (c) 2013 Priyanka Shekar");
		m->declare("effect.lib/exciter_version", "1.0");
		m->declare("effect.lib/exciter_license", "MIT License (MIT)");
	}

	virtual int getNumInputs() 	{ return 0; }
	virtual int getNumOutputs() 	{ return 2; }
	static void classInit(int samplingFreq) {
		SIG0 sig0;
		sig0.init(samplingFreq);
		sig0.fill(65536,ftbl0);
	}
	virtual void instanceInit(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fslider0 = 0.137f;
		for (int i=0; i<2; i++) fRec0[i] = 0;
		fentry0 = 4.4e+02f;
		iConst0 = min(192000, max(1, fSamplingFreq));
		fConst1 = (1.0f / float(iConst0));
		fbutton0 = 0.0;
		for (int i=0; i<2; i++) fVec0[i] = 0;
		for (int i=0; i<2; i++) fRec3[i] = 0;
		for (int i=0; i<2; i++) iRec4[i] = 0;
		fslider1 = 0.0f;
		fentry1 = 1.0f;
		IOTA = 0;
		for (int i=0; i<4096; i++) fRec2[i] = 0;
		fslider2 = 0.13f;
		fslider3 = -1e+01f;
		fslider4 = 0.5f;
		fslider5 = 0.0f;
		for (int i=0; i<2; i++) fRec5[i] = 0;
		fslider6 = 4.0f;
		fentry2 = 0.0f;
		for (int i=0; i<2; i++) fVec1[i] = 0;
		for (int i=0; i<2; i++) fRec11[i] = 0;
		for (int i=0; i<2; i++) fRec10[i] = 0;
		for (int i=0; i<2; i++) fRec9[i] = 0;
		for (int i=0; i<2; i++) fRec8[i] = 0;
		for (int i=0; i<2; i++) fRec7[i] = 0;
		for (int i=0; i<2; i++) fRec6[i] = 0;
		fslider7 = 2.2e+02f;
		for (int i=0; i<2; i++) fRec14[i] = 0;
		fConst2 = float(iConst0);
		fConst3 = (1.0f / fConst2);
		for (int i=0; i<2; i++) fRec13[i] = 0;
		for (int i=0; i<2; i++) fRec20[i] = 0;
		for (int i=0; i<2; i++) fRec19[i] = 0;
		for (int i=0; i<2; i++) fRec18[i] = 0;
		for (int i=0; i<2; i++) fRec17[i] = 0;
		for (int i=0; i<2; i++) fRec16[i] = 0;
		for (int i=0; i<2; i++) fRec15[i] = 0;
		fConst4 = (3.141592653589793f / float(iConst0));
		for (int i=0; i<2; i++) fRec21[i] = 0;
		for (int i=0; i<4096; i++) fVec2[i] = 0;
		for (int i=0; i<4096; i++) fRec1[i] = 0;
		fslider8 = 0.6f;
		fConst5 = (1.0f / tanf((628.3185307179587f / float(iConst0))));
		fConst6 = (1 + fConst5);
		fConst7 = (1.0f / fConst6);
		fConst8 = (0 - ((1 - fConst5) / fConst6));
		for (int i=0; i<2; i++) fRec33[i] = 0;
		fslider9 = 0.72f;
		fConst9 = floorf((0.5f + (0.174713f * iConst0)));
		fConst10 = ((0 - (6.907755278982138f * fConst9)) / float(iConst0));
		fConst11 = (0.5f * fConst10);
		fConst12 = (0.3333333333333333f * fConst10);
		fConst13 = cosf((37699.11184307752f / fConst2));
		for (int i=0; i<2; i++) fRec32[i] = 0;
		for (int i=0; i<8192; i++) fVec3[i] = 0;
		fConst14 = floorf((0.5f + (0.022904f * iConst0)));
		iConst15 = int((int((fConst9 - fConst14)) & 8191));
		for (int i=0; i<4096; i++) fVec4[i] = 0;
		iConst16 = int((int((0.02f * iConst0)) & 8191));
		for (int i=0; i<2048; i++) fVec5[i] = 0;
		iConst17 = int((int((fConst14 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec30[i] = 0;
		for (int i=0; i<2; i++) fRec37[i] = 0;
		fConst18 = floorf((0.5f + (0.153129f * iConst0)));
		fConst19 = ((0 - (6.907755278982138f * fConst18)) / float(iConst0));
		fConst20 = (0.5f * fConst19);
		fConst21 = (0.3333333333333333f * fConst19);
		for (int i=0; i<2; i++) fRec36[i] = 0;
		for (int i=0; i<8192; i++) fVec6[i] = 0;
		fConst22 = floorf((0.5f + (0.020346f * iConst0)));
		iConst23 = int((int((fConst18 - fConst22)) & 8191));
		for (int i=0; i<1024; i++) fVec7[i] = 0;
		iConst24 = int((int((fConst22 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec34[i] = 0;
		for (int i=0; i<2; i++) fRec41[i] = 0;
		fConst25 = floorf((0.5f + (0.127837f * iConst0)));
		fConst26 = ((0 - (6.907755278982138f * fConst25)) / float(iConst0));
		fConst27 = (0.5f * fConst26);
		fConst28 = (0.3333333333333333f * fConst26);
		for (int i=0; i<2; i++) fRec40[i] = 0;
		for (int i=0; i<8192; i++) fVec8[i] = 0;
		fConst29 = floorf((0.5f + (0.031604f * iConst0)));
		iConst30 = int((int((fConst25 - fConst29)) & 8191));
		for (int i=0; i<2048; i++) fVec9[i] = 0;
		iConst31 = int((int((fConst29 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec38[i] = 0;
		for (int i=0; i<2; i++) fRec45[i] = 0;
		fConst32 = floorf((0.5f + (0.125f * iConst0)));
		fConst33 = ((0 - (6.907755278982138f * fConst32)) / float(iConst0));
		fConst34 = (0.5f * fConst33);
		fConst35 = (0.3333333333333333f * fConst33);
		for (int i=0; i<2; i++) fRec44[i] = 0;
		for (int i=0; i<8192; i++) fVec10[i] = 0;
		fConst36 = floorf((0.5f + (0.013458f * iConst0)));
		iConst37 = int((int((fConst32 - fConst36)) & 8191));
		for (int i=0; i<1024; i++) fVec11[i] = 0;
		iConst38 = int((int((fConst36 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec42[i] = 0;
		for (int i=0; i<2; i++) fRec49[i] = 0;
		fConst39 = floorf((0.5f + (0.210389f * iConst0)));
		fConst40 = ((0 - (6.907755278982138f * fConst39)) / float(iConst0));
		fConst41 = (0.5f * fConst40);
		fConst42 = (0.3333333333333333f * fConst40);
		for (int i=0; i<2; i++) fRec48[i] = 0;
		for (int i=0; i<16384; i++) fVec12[i] = 0;
		fConst43 = floorf((0.5f + (0.024421f * iConst0)));
		iConst44 = int((int((fConst39 - fConst43)) & 16383));
		fslider10 = 0.5f;
		fConst45 = (0.5f * iConst0);
		for (int i=0; i<4096; i++) fVec13[i] = 0;
		for (int i=0; i<2048; i++) fVec14[i] = 0;
		iConst46 = int((int((fConst43 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec46[i] = 0;
		for (int i=0; i<2; i++) fRec53[i] = 0;
		fConst47 = floorf((0.5f + (0.192303f * iConst0)));
		fConst48 = ((0 - (6.907755278982138f * fConst47)) / float(iConst0));
		fConst49 = (0.5f * fConst48);
		fConst50 = (0.3333333333333333f * fConst48);
		for (int i=0; i<2; i++) fRec52[i] = 0;
		for (int i=0; i<8192; i++) fVec15[i] = 0;
		fConst51 = floorf((0.5f + (0.029291f * iConst0)));
		iConst52 = int((int((fConst47 - fConst51)) & 8191));
		for (int i=0; i<2048; i++) fVec16[i] = 0;
		iConst53 = int((int((fConst51 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec50[i] = 0;
		for (int i=0; i<2; i++) fRec57[i] = 0;
		fConst54 = floorf((0.5f + (0.256891f * iConst0)));
		fConst55 = ((0 - (6.907755278982138f * fConst54)) / float(iConst0));
		fConst56 = (0.5f * fConst55);
		fConst57 = (0.3333333333333333f * fConst55);
		for (int i=0; i<2; i++) fRec56[i] = 0;
		for (int i=0; i<16384; i++) fVec17[i] = 0;
		fConst58 = floorf((0.5f + (0.027333f * iConst0)));
		iConst59 = int((int((fConst54 - fConst58)) & 16383));
		for (int i=0; i<2048; i++) fVec18[i] = 0;
		iConst60 = int((int((fConst58 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec54[i] = 0;
		for (int i=0; i<2; i++) fRec61[i] = 0;
		fConst61 = floorf((0.5f + (0.219991f * iConst0)));
		fConst62 = ((0 - (6.907755278982138f * fConst61)) / float(iConst0));
		fConst63 = (0.5f * fConst62);
		fConst64 = (0.3333333333333333f * fConst62);
		for (int i=0; i<2; i++) fRec60[i] = 0;
		for (int i=0; i<16384; i++) fVec19[i] = 0;
		fConst65 = floorf((0.5f + (0.019123f * iConst0)));
		iConst66 = int((int((fConst61 - fConst65)) & 16383));
		for (int i=0; i<1024; i++) fVec20[i] = 0;
		iConst67 = int((int((fConst65 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec58[i] = 0;
		for (int i=0; i<3; i++) fRec22[i] = 0;
		for (int i=0; i<3; i++) fRec23[i] = 0;
		for (int i=0; i<3; i++) fRec24[i] = 0;
		for (int i=0; i<3; i++) fRec25[i] = 0;
		for (int i=0; i<3; i++) fRec26[i] = 0;
		for (int i=0; i<3; i++) fRec27[i] = 0;
		for (int i=0; i<3; i++) fRec28[i] = 0;
		for (int i=0; i<3; i++) fRec29[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void buildUserInterface(UI* interface) {
		interface->openVerticalBox("0x00");
		interface->openVerticalBox("Nonlinear Filter");
		interface->addNumEntry("typeMod", &fentry2, 0.0f, 0.0f, 4.0f, 1.0f);
		interface->closeBox();
		interface->addHorizontalSlider("Nonlinearity", &fslider5, 0.0f, 0.0f, 1.0f, 0.01f);
		interface->openVerticalBox("Reverb");
		interface->addHorizontalSlider("reverbGain", &fslider0, 0.137f, 0.0f, 1.0f, 0.01f);
		interface->addHorizontalSlider("roomSize", &fslider9, 0.72f, 0.01f, 2.0f, 0.01f);
		interface->closeBox();
		interface->openVerticalBox("Spat");
		interface->addHorizontalSlider("pan angle", &fslider8, 0.6f, 0.0f, 1.0f, 0.01f);
		interface->addHorizontalSlider("spatial width", &fslider10, 0.5f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->declare(&fslider4, "midi", "ctrl 0x74");
		interface->addHorizontalSlider("brightness", &fslider4, 0.5f, 0.0f, 1.0f, 0.01f);
		interface->addHorizontalSlider("decaytime_T60", &fslider6, 4.0f, 0.0f, 1e+01f, 0.01f);
		interface->addHorizontalSlider("dynamic_level", &fslider3, -1e+01f, -6e+01f, 0.0f, 1.0f);
		interface->addNumEntry("freq", &fentry0, 4.4e+02f, 2e+01f, 7.04e+03f, 1.0f);
		interface->addHorizontalSlider("freqMod", &fslider7, 2.2e+02f, 2e+01f, 1e+03f, 0.1f);
		interface->addNumEntry("gain", &fentry1, 1.0f, 0.0f, 1e+01f, 0.01f);
		interface->addButton("gate", &fbutton0);
		interface->addHorizontalSlider("pick_angle", &fslider1, 0.0f, 0.0f, 0.9f, 0.1f);
		interface->declare(&fslider2, "midi", "ctrl 0x81");
		interface->addHorizontalSlider("pick_position", &fslider2, 0.13f, 0.02f, 0.5f, 0.01f);
		interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0 = (0.0010000000000000009f * float(fslider0));
		float 	fSlow1 = float(fentry0);
		float 	fSlow2 = (fConst1 * fSlow1);
		float 	fSlow3 = float(fbutton0);
		float 	fSlow4 = (0.9f * float(fslider1));
		float 	fSlow5 = (4.656612875245797e-10f * (float(fentry1) * (1.0f - fSlow4)));
		int 	iSlow6 = int((int((iConst0 * (float(fslider2) / fSlow1))) & 4095));
		float 	fSlow7 = powf(10,(0.05f * float(fslider3)));
		float 	fSlow8 = (fSlow7 * powf(fSlow7,0.3333333333333333f));
		float 	fSlow9 = float(fslider4);
		float 	fSlow10 = (0.25f * (1.0f - fSlow9));
		float 	fSlow11 = (0.5f * (1.0f + fSlow9));
		float 	fSlow12 = (0.0010000000000000009f * float(fslider5));
		float 	fSlow13 = powf(0.001f,(1.0f / (fSlow1 * float(fslider6))));
		float 	fSlow14 = float(fentry2);
		float 	fSlow15 = (3.141592653589793f * (faustpower<2>(fSlow13) * (fSlow14 == 2)));
		float 	fSlow16 = (1.5707963267948966f * (fSlow14 == 1));
		float 	fSlow17 = (3.141592653589793f * (fSlow13 * (fSlow14 == 0)));
		int 	iSlow18 = (fSlow14 < 3);
		float 	fSlow19 = (0.0010000000000000009f * float(fslider7));
		int 	iSlow20 = (fSlow14 != 4);
		float 	fSlow21 = (fSlow1 * (fSlow14 == 4));
		int 	iSlow22 = (fSlow14 >= 3);
		float 	fSlow23 = (fConst4 * fSlow1);
		float 	fSlow24 = (1.0f - fSlow23);
		float 	fSlow25 = (1.0f / (1.0f + fSlow23));
		float 	fSlow26 = (1.0f - fSlow7);
		float 	fSlow27 = (float(iConst0) / fSlow1);
		int 	iSlow28 = int((fSlow27 - 3.49999f));
		int 	iSlow29 = int((int((4 + iSlow28)) & 4095));
		float 	fSlow30 = (fSlow27 - (5.0f + iSlow28));
		float 	fSlow31 = (fSlow27 - (4.0f + iSlow28));
		float 	fSlow32 = (fSlow27 - (iSlow28 + 3.0f));
		float 	fSlow33 = (fSlow27 - (2.0f + iSlow28));
		float 	fSlow34 = ((fSlow33 * fSlow32) * fSlow31);
		float 	fSlow35 = (0.041666666666666664f * (fSlow34 * fSlow30));
		int 	iSlow36 = int((iSlow28 & 4095));
		float 	fSlow37 = (0.041666666666666664f * fSlow31);
		int 	iSlow38 = int((int((2 + iSlow28)) & 4095));
		float 	fSlow39 = (0.25f * fSlow33);
		float 	fSlow40 = (fSlow27 - (iSlow28 + 6.0f));
		float 	fSlow41 = (6.0f * ((fSlow32 * fSlow30) * fSlow40));
		int 	iSlow42 = int((int((1 + iSlow28)) & 4095));
		float 	fSlow43 = (0 - (((fSlow33 * fSlow31) * fSlow30) * fSlow40));
		int 	iSlow44 = int((int((3 + iSlow28)) & 4095));
		float 	fSlow45 = (0 - (fSlow34 * fSlow40));
		float 	fSlow46 = float(fslider8);
		float 	fSlow47 = (1.0f - fSlow46);
		float 	fSlow48 = float(fslider9);
		float 	fSlow49 = expf((fConst11 / fSlow48));
		float 	fSlow50 = ((expf((fConst12 / fSlow48)) / fSlow49) - 1);
		float 	fSlow51 = faustpower<2>(fSlow49);
		float 	fSlow52 = (1.0f - fSlow51);
		float 	fSlow53 = (1.0f - (fConst13 * fSlow51));
		float 	fSlow54 = (fSlow53 / fSlow52);
		float 	fSlow55 = sqrtf(max((float)0, ((faustpower<2>(fSlow53) / faustpower<2>(fSlow52)) - 1.0f)));
		float 	fSlow56 = (fSlow49 * ((1.0f + fSlow55) - fSlow54));
		float 	fSlow57 = (fSlow54 - fSlow55);
		float 	fSlow58 = expf((fConst20 / fSlow48));
		float 	fSlow59 = ((expf((fConst21 / fSlow48)) / fSlow58) - 1);
		float 	fSlow60 = faustpower<2>(fSlow58);
		float 	fSlow61 = (1.0f - fSlow60);
		float 	fSlow62 = (1.0f - (fConst13 * fSlow60));
		float 	fSlow63 = (fSlow62 / fSlow61);
		float 	fSlow64 = sqrtf(max((float)0, ((faustpower<2>(fSlow62) / faustpower<2>(fSlow61)) - 1.0f)));
		float 	fSlow65 = (fSlow58 * ((1.0f + fSlow64) - fSlow63));
		float 	fSlow66 = (fSlow63 - fSlow64);
		float 	fSlow67 = expf((fConst27 / fSlow48));
		float 	fSlow68 = ((expf((fConst28 / fSlow48)) / fSlow67) - 1);
		float 	fSlow69 = faustpower<2>(fSlow67);
		float 	fSlow70 = (1.0f - fSlow69);
		float 	fSlow71 = (1.0f - (fConst13 * fSlow69));
		float 	fSlow72 = (fSlow71 / fSlow70);
		float 	fSlow73 = sqrtf(max((float)0, ((faustpower<2>(fSlow71) / faustpower<2>(fSlow70)) - 1.0f)));
		float 	fSlow74 = (fSlow67 * ((1.0f + fSlow73) - fSlow72));
		float 	fSlow75 = (fSlow72 - fSlow73);
		float 	fSlow76 = expf((fConst34 / fSlow48));
		float 	fSlow77 = ((expf((fConst35 / fSlow48)) / fSlow76) - 1);
		float 	fSlow78 = faustpower<2>(fSlow76);
		float 	fSlow79 = (1.0f - fSlow78);
		float 	fSlow80 = (1.0f - (fConst13 * fSlow78));
		float 	fSlow81 = (fSlow80 / fSlow79);
		float 	fSlow82 = sqrtf(max((float)0, ((faustpower<2>(fSlow80) / faustpower<2>(fSlow79)) - 1.0f)));
		float 	fSlow83 = (fSlow76 * ((1.0f + fSlow82) - fSlow81));
		float 	fSlow84 = (fSlow81 - fSlow82);
		float 	fSlow85 = expf((fConst41 / fSlow48));
		float 	fSlow86 = ((expf((fConst42 / fSlow48)) / fSlow85) - 1);
		float 	fSlow87 = faustpower<2>(fSlow85);
		float 	fSlow88 = (1.0f - fSlow87);
		float 	fSlow89 = (1.0f - (fConst13 * fSlow87));
		float 	fSlow90 = (fSlow89 / fSlow88);
		float 	fSlow91 = sqrtf(max((float)0, ((faustpower<2>(fSlow89) / faustpower<2>(fSlow88)) - 1.0f)));
		float 	fSlow92 = (fSlow85 * ((1.0f + fSlow91) - fSlow90));
		float 	fSlow93 = (fSlow90 - fSlow91);
		int 	iSlow94 = int((int((fConst45 * (float(fslider10) / fSlow1))) & 4095));
		float 	fSlow95 = expf((fConst49 / fSlow48));
		float 	fSlow96 = ((expf((fConst50 / fSlow48)) / fSlow95) - 1);
		float 	fSlow97 = faustpower<2>(fSlow95);
		float 	fSlow98 = (1.0f - fSlow97);
		float 	fSlow99 = (1.0f - (fConst13 * fSlow97));
		float 	fSlow100 = (fSlow99 / fSlow98);
		float 	fSlow101 = sqrtf(max((float)0, ((faustpower<2>(fSlow99) / faustpower<2>(fSlow98)) - 1.0f)));
		float 	fSlow102 = (fSlow95 * ((1.0f + fSlow101) - fSlow100));
		float 	fSlow103 = (fSlow100 - fSlow101);
		float 	fSlow104 = expf((fConst56 / fSlow48));
		float 	fSlow105 = ((expf((fConst57 / fSlow48)) / fSlow104) - 1);
		float 	fSlow106 = faustpower<2>(fSlow104);
		float 	fSlow107 = (1.0f - fSlow106);
		float 	fSlow108 = (1.0f - (fConst13 * fSlow106));
		float 	fSlow109 = (fSlow108 / fSlow107);
		float 	fSlow110 = sqrtf(max((float)0, ((faustpower<2>(fSlow108) / faustpower<2>(fSlow107)) - 1.0f)));
		float 	fSlow111 = (fSlow104 * ((1.0f + fSlow110) - fSlow109));
		float 	fSlow112 = (fSlow109 - fSlow110);
		float 	fSlow113 = expf((fConst63 / fSlow48));
		float 	fSlow114 = ((expf((fConst64 / fSlow48)) / fSlow113) - 1);
		float 	fSlow115 = faustpower<2>(fSlow113);
		float 	fSlow116 = (1.0f - fSlow115);
		float 	fSlow117 = (1.0f - (fConst13 * fSlow115));
		float 	fSlow118 = (fSlow117 / fSlow116);
		float 	fSlow119 = sqrtf(max((float)0, ((faustpower<2>(fSlow117) / faustpower<2>(fSlow116)) - 1.0f)));
		float 	fSlow120 = (fSlow113 * ((1.0f + fSlow119) - fSlow118));
		float 	fSlow121 = (fSlow118 - fSlow119);
		FAUSTFLOAT* output0 = output[0];
		FAUSTFLOAT* output1 = output[1];
		for (int i=0; i<count; i++) {
			fRec0[0] = ((0.999f * fRec0[1]) + fSlow0);
			float fTemp0 = (1 - fRec0[0]);
			fVec0[0] = fSlow3;
			fRec3[0] = ((fRec3[1] + ((fSlow3 - fVec0[1]) > 0)) - (fSlow2 * (fRec3[1] > 0)));
			iRec4[0] = (12345 + (1103515245 * iRec4[1]));
			fRec2[IOTA&4095] = ((fSlow4 * fRec2[(IOTA-1)&4095]) + (fSlow5 * (iRec4[0] * (fRec3[0] > 0.0f))));
			float fTemp1 = (fRec2[(IOTA-0)&4095] - fRec2[(IOTA-iSlow6)&4095]);
			float fTemp2 = ((fSlow11 * fRec1[(IOTA-2)&4095]) + (fSlow10 * (fRec1[(IOTA-1)&4095] + fRec1[(IOTA-3)&4095])));
			fRec5[0] = (fSlow12 + (0.999f * fRec5[1]));
			float fTemp3 = (fSlow13 * fTemp2);
			fVec1[0] = fTemp3;
			float fTemp4 = (fRec5[0] * (((fSlow17 * fTemp2) + (fSlow16 * (fVec1[0] + fVec1[1]))) + (fSlow15 * faustpower<2>(fTemp2))));
			float fTemp5 = cosf(fTemp4);
			float fTemp6 = sinf(fTemp4);
			float fTemp7 = (0 - fTemp6);
			float fTemp8 = ((fRec6[1] * fTemp7) + (fSlow13 * (fTemp2 * fTemp5)));
			float fTemp9 = ((fTemp7 * fRec7[1]) + (fTemp5 * fTemp8));
			float fTemp10 = ((fTemp7 * fRec8[1]) + (fTemp5 * fTemp9));
			float fTemp11 = ((fTemp7 * fRec9[1]) + (fTemp5 * fTemp10));
			float fTemp12 = ((fTemp7 * fRec10[1]) + (fTemp5 * fTemp11));
			fRec11[0] = ((fTemp7 * fRec11[1]) + (fTemp5 * fTemp12));
			fRec10[0] = ((fTemp6 * fTemp12) + (fTemp5 * fRec11[1]));
			fRec9[0] = ((fTemp6 * fTemp11) + (fTemp5 * fRec10[1]));
			fRec8[0] = ((fTemp6 * fTemp10) + (fTemp5 * fRec9[1]));
			fRec7[0] = ((fTemp6 * fTemp9) + (fTemp5 * fRec8[1]));
			fRec6[0] = ((fTemp6 * fTemp8) + (fTemp5 * fRec7[1]));
			fRec14[0] = (fSlow19 + (0.999f * fRec14[1]));
			float fTemp13 = (fRec13[1] + (fConst3 * (fSlow21 + (iSlow20 * fRec14[0]))));
			fRec13[0] = (fTemp13 - floorf(fTemp13));
			float fTemp14 = (3.141592653589793f * (fRec5[0] * ftbl0[int((65536.0f * fRec13[0]))]));
			float fTemp15 = cosf(fTemp14);
			float fTemp16 = sinf(fTemp14);
			float fTemp17 = (0 - fTemp16);
			float fTemp18 = ((fRec15[1] * fTemp17) + (fSlow13 * (fTemp2 * fTemp15)));
			float fTemp19 = ((fTemp17 * fRec16[1]) + (fTemp15 * fTemp18));
			float fTemp20 = ((fTemp17 * fRec17[1]) + (fTemp15 * fTemp19));
			float fTemp21 = ((fTemp17 * fRec18[1]) + (fTemp15 * fTemp20));
			float fTemp22 = ((fTemp17 * fRec19[1]) + (fTemp15 * fTemp21));
			fRec20[0] = ((fTemp17 * fRec20[1]) + (fTemp15 * fTemp22));
			fRec19[0] = ((fTemp16 * fTemp22) + (fTemp15 * fRec20[1]));
			fRec18[0] = ((fTemp16 * fTemp21) + (fTemp15 * fRec19[1]));
			fRec17[0] = ((fTemp16 * fTemp20) + (fTemp15 * fRec18[1]));
			fRec16[0] = ((fTemp16 * fTemp19) + (fTemp15 * fRec17[1]));
			fRec15[0] = ((fTemp16 * fTemp18) + (fTemp15 * fRec16[1]));
			fRec21[0] = (fSlow25 * ((fSlow24 * fRec21[1]) + (fSlow23 * fTemp1)));
			float fTemp23 = ((fSlow26 * fRec21[0]) + (((iSlow22 * ((fSlow13 * (fTemp2 * fTemp16)) + (fRec15[1] * fTemp15))) + (iSlow18 * ((fRec5[0] * ((fSlow13 * (fTemp2 * fTemp6)) + (fRec6[1] * fTemp5))) + (fSlow13 * ((1 - fRec5[0]) * fTemp2))))) + (fSlow8 * fTemp1)));
			fVec2[IOTA&4095] = fTemp23;
			fRec1[IOTA&4095] = ((0.16666666666666666f * ((fSlow45 * fVec2[(IOTA-iSlow44)&4095]) + ((fSlow43 * fVec2[(IOTA-iSlow42)&4095]) + (fSlow41 * ((fSlow39 * fVec2[(IOTA-iSlow38)&4095]) + (fSlow37 * fVec2[(IOTA-iSlow36)&4095])))))) + (fSlow35 * fVec2[(IOTA-iSlow29)&4095]));
			float fTemp24 = fRec1[(IOTA-0)&4095];
			fRec33[0] = ((fConst8 * fRec33[1]) + (fConst7 * (fRec26[1] + fRec26[2])));
			fRec32[0] = ((fSlow57 * fRec32[1]) + (fSlow56 * (fRec26[1] + (fSlow50 * fRec33[0]))));
			fVec3[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec32[0]));
			fVec4[IOTA&4095] = (fSlow47 * (fTemp24 * fRec0[0]));
			float fTemp25 = (0.3f * fVec4[(IOTA-iConst16)&4095]);
			float fTemp26 = ((fTemp25 + fVec3[(IOTA-iConst15)&8191]) - (0.6f * fRec30[1]));
			fVec5[IOTA&2047] = fTemp26;
			fRec30[0] = fVec5[(IOTA-iConst17)&2047];
			float 	fRec31 = (0.6f * fVec5[IOTA&2047]);
			fRec37[0] = ((fConst8 * fRec37[1]) + (fConst7 * (fRec22[1] + fRec22[2])));
			fRec36[0] = ((fSlow66 * fRec36[1]) + (fSlow65 * (fRec22[1] + (fSlow59 * fRec37[0]))));
			fVec6[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec36[0]));
			float fTemp27 = ((fVec6[(IOTA-iConst23)&8191] + fTemp25) - (0.6f * fRec34[1]));
			fVec7[IOTA&1023] = fTemp27;
			fRec34[0] = fVec7[(IOTA-iConst24)&1023];
			float 	fRec35 = (0.6f * fVec7[IOTA&1023]);
			float fTemp28 = (fRec35 + fRec31);
			fRec41[0] = ((fConst8 * fRec41[1]) + (fConst7 * (fRec24[1] + fRec24[2])));
			fRec40[0] = ((fSlow75 * fRec40[1]) + (fSlow74 * (fRec24[1] + (fSlow68 * fRec41[0]))));
			fVec8[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec40[0]));
			float fTemp29 = (fVec8[(IOTA-iConst30)&8191] - (fTemp25 + (0.6f * fRec38[1])));
			fVec9[IOTA&2047] = fTemp29;
			fRec38[0] = fVec9[(IOTA-iConst31)&2047];
			float 	fRec39 = (0.6f * fVec9[IOTA&2047]);
			fRec45[0] = ((fConst8 * fRec45[1]) + (fConst7 * (fRec28[1] + fRec28[2])));
			fRec44[0] = ((fSlow84 * fRec44[1]) + (fSlow83 * (fRec28[1] + (fSlow77 * fRec45[0]))));
			fVec10[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec44[0]));
			float fTemp30 = (fVec10[(IOTA-iConst37)&8191] - (fTemp25 + (0.6f * fRec42[1])));
			fVec11[IOTA&1023] = fTemp30;
			fRec42[0] = fVec11[(IOTA-iConst38)&1023];
			float 	fRec43 = (0.6f * fVec11[IOTA&1023]);
			float fTemp31 = (fRec43 + (fRec39 + fTemp28));
			fRec49[0] = ((fConst8 * fRec49[1]) + (fConst7 * (fRec23[1] + fRec23[2])));
			fRec48[0] = ((fSlow93 * fRec48[1]) + (fSlow92 * (fRec23[1] + (fSlow86 * fRec49[0]))));
			fVec12[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec48[0]));
			float fTemp32 = fRec1[(IOTA-iSlow94)&4095];
			fVec13[IOTA&4095] = (fSlow46 * (fRec0[0] * fTemp32));
			float fTemp33 = (0.3f * fVec13[(IOTA-iConst16)&4095]);
			float fTemp34 = (fTemp33 + ((0.6f * fRec46[1]) + fVec12[(IOTA-iConst44)&16383]));
			fVec14[IOTA&2047] = fTemp34;
			fRec46[0] = fVec14[(IOTA-iConst46)&2047];
			float 	fRec47 = (0 - (0.6f * fVec14[IOTA&2047]));
			fRec53[0] = ((fConst8 * fRec53[1]) + (fConst7 * (fRec27[1] + fRec27[2])));
			fRec52[0] = ((fSlow103 * fRec52[1]) + (fSlow102 * (fRec27[1] + (fSlow96 * fRec53[0]))));
			fVec15[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec52[0]));
			float fTemp35 = (fVec15[(IOTA-iConst52)&8191] + (fTemp33 + (0.6f * fRec50[1])));
			fVec16[IOTA&2047] = fTemp35;
			fRec50[0] = fVec16[(IOTA-iConst53)&2047];
			float 	fRec51 = (0 - (0.6f * fVec16[IOTA&2047]));
			fRec57[0] = ((fConst8 * fRec57[1]) + (fConst7 * (fRec25[1] + fRec25[2])));
			fRec56[0] = ((fSlow112 * fRec56[1]) + (fSlow111 * (fRec25[1] + (fSlow105 * fRec57[0]))));
			fVec17[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec56[0]));
			float fTemp36 = (((0.6f * fRec54[1]) + fVec17[(IOTA-iConst59)&16383]) - fTemp33);
			fVec18[IOTA&2047] = fTemp36;
			fRec54[0] = fVec18[(IOTA-iConst60)&2047];
			float 	fRec55 = (0 - (0.6f * fVec18[IOTA&2047]));
			fRec61[0] = ((fConst8 * fRec61[1]) + (fConst7 * (fRec29[1] + fRec29[2])));
			fRec60[0] = ((fSlow121 * fRec60[1]) + (fSlow120 * (fRec29[1] + (fSlow114 * fRec61[0]))));
			fVec19[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec60[0]));
			float fTemp37 = (((0.6f * fRec58[1]) + fVec19[(IOTA-iConst66)&16383]) - fTemp33);
			fVec20[IOTA&1023] = fTemp37;
			fRec58[0] = fVec20[(IOTA-iConst67)&1023];
			float 	fRec59 = (0 - (0.6f * fVec20[IOTA&1023]));
			fRec22[0] = (fRec58[1] + (fRec54[1] + (fRec50[1] + (fRec46[1] + (fRec42[1] + (fRec38[1] + (fRec30[1] + (fRec34[1] + (fRec59 + (fRec55 + (fRec51 + (fRec47 + fTemp31))))))))))));
			fRec23[0] = (0 - ((fRec58[1] + (fRec54[1] + (fRec50[1] + (fRec46[1] + (fRec59 + (fRec55 + (fRec47 + fRec51))))))) - (fRec42[1] + (fRec38[1] + (fRec30[1] + (fRec34[1] + fTemp31))))));
			float fTemp38 = (fRec39 + fRec43);
			fRec24[0] = (0 - ((fRec58[1] + (fRec54[1] + (fRec42[1] + (fRec38[1] + (fRec59 + (fRec55 + fTemp38)))))) - (fRec50[1] + (fRec46[1] + (fRec30[1] + (fRec34[1] + (fRec51 + (fRec47 + fTemp28))))))));
			fRec25[0] = (0 - ((fRec50[1] + (fRec46[1] + (fRec42[1] + (fRec38[1] + (fRec51 + (fRec47 + fTemp38)))))) - (fRec58[1] + (fRec54[1] + (fRec30[1] + (fRec34[1] + (fRec59 + (fRec55 + fTemp28))))))));
			float fTemp39 = (fRec35 + fRec39);
			float fTemp40 = (fRec31 + fRec43);
			fRec26[0] = (0 - ((fRec58[1] + (fRec50[1] + (fRec42[1] + (fRec30[1] + (fRec59 + (fRec51 + fTemp40)))))) - (fRec54[1] + (fRec46[1] + (fRec38[1] + (fRec34[1] + (fRec55 + (fRec47 + fTemp39))))))));
			fRec27[0] = (0 - ((fRec54[1] + (fRec46[1] + (fRec42[1] + (fRec30[1] + (fRec55 + (fRec47 + fTemp40)))))) - (fRec58[1] + (fRec50[1] + (fRec38[1] + (fRec34[1] + (fRec59 + (fRec51 + fTemp39))))))));
			float fTemp41 = (fRec35 + fRec43);
			float fTemp42 = (fRec31 + fRec39);
			fRec28[0] = (0 - ((fRec54[1] + (fRec50[1] + (fRec38[1] + (fRec30[1] + (fRec55 + (fRec51 + fTemp42)))))) - (fRec58[1] + (fRec46[1] + (fRec42[1] + (fRec34[1] + (fRec59 + (fRec47 + fTemp41))))))));
			fRec29[0] = (0 - ((fRec58[1] + (fRec46[1] + (fRec38[1] + (fRec30[1] + (fRec59 + (fRec47 + fTemp42)))))) - (fRec54[1] + (fRec50[1] + (fRec42[1] + (fRec34[1] + (fRec55 + (fRec51 + fTemp41))))))));
			output0[i] = (FAUSTFLOAT)((0.37f * (fRec23[0] + fRec24[0])) + (fSlow47 * (fTemp24 * fTemp0)));
			output1[i] = (FAUSTFLOAT)((0.37f * (fRec23[0] - fRec24[0])) + (fSlow46 * (fTemp0 * fTemp32)));
			// post processing
			fRec29[2] = fRec29[1]; fRec29[1] = fRec29[0];
			fRec28[2] = fRec28[1]; fRec28[1] = fRec28[0];
			fRec27[2] = fRec27[1]; fRec27[1] = fRec27[0];
			fRec26[2] = fRec26[1]; fRec26[1] = fRec26[0];
			fRec25[2] = fRec25[1]; fRec25[1] = fRec25[0];
			fRec24[2] = fRec24[1]; fRec24[1] = fRec24[0];
			fRec23[2] = fRec23[1]; fRec23[1] = fRec23[0];
			fRec22[2] = fRec22[1]; fRec22[1] = fRec22[0];
			fRec58[1] = fRec58[0];
			fRec60[1] = fRec60[0];
			fRec61[1] = fRec61[0];
			fRec54[1] = fRec54[0];
			fRec56[1] = fRec56[0];
			fRec57[1] = fRec57[0];
			fRec50[1] = fRec50[0];
			fRec52[1] = fRec52[0];
			fRec53[1] = fRec53[0];
			fRec46[1] = fRec46[0];
			fRec48[1] = fRec48[0];
			fRec49[1] = fRec49[0];
			fRec42[1] = fRec42[0];
			fRec44[1] = fRec44[0];
			fRec45[1] = fRec45[0];
			fRec38[1] = fRec38[0];
			fRec40[1] = fRec40[0];
			fRec41[1] = fRec41[0];
			fRec34[1] = fRec34[0];
			fRec36[1] = fRec36[0];
			fRec37[1] = fRec37[0];
			fRec30[1] = fRec30[0];
			fRec32[1] = fRec32[0];
			fRec33[1] = fRec33[0];
			fRec21[1] = fRec21[0];
			fRec15[1] = fRec15[0];
			fRec16[1] = fRec16[0];
			fRec17[1] = fRec17[0];
			fRec18[1] = fRec18[0];
			fRec19[1] = fRec19[0];
			fRec20[1] = fRec20[0];
			fRec13[1] = fRec13[0];
			fRec14[1] = fRec14[0];
			fRec6[1] = fRec6[0];
			fRec7[1] = fRec7[0];
			fRec8[1] = fRec8[0];
			fRec9[1] = fRec9[0];
			fRec10[1] = fRec10[0];
			fRec11[1] = fRec11[0];
			fVec1[1] = fVec1[0];
			fRec5[1] = fRec5[0];
			IOTA = IOTA+1;
			iRec4[1] = iRec4[0];
			fRec3[1] = fRec3[0];
			fVec0[1] = fVec0[0];
			fRec0[1] = fRec0[0];
		}
	}
};


float 	mydsp::ftbl0[65536];
