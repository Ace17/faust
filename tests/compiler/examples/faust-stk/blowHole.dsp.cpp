//-----------------------------------------------------
// name: "BlowHole"
// author: "Romain Michon"
// copyright: "Romain Michon (rmichon@ccrma.stanford.edu)"
// version: "1.0"
//
// Code generated with Faust 0.9.70 (http://faust.grame.fr)
//-----------------------------------------------------
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif  

typedef long double quad;
/* link with  */
#include <math.h>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline float faustpower(float x)          { return powf(x,N); } 
template <int N> inline double faustpower(double x)        { return pow(x,N); }
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <>   inline int faustpower<0>(int x)            { return 1; }
template <>   inline int faustpower<1>(int x)            { return x; }
#endif

#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	class SIG0 {
	  private:
		int 	fSamplingFreq;
		int 	iRec14[2];
	  public:
		int getNumInputs() 	{ return 0; }
		int getNumOutputs() 	{ return 1; }
		void init(int samplingFreq) {
			fSamplingFreq = samplingFreq;
			for (int i=0; i<2; i++) iRec14[i] = 0;
		}
		void fill (int count, float output[]) {
			for (int i=0; i<count; i++) {
				iRec14[0] = (1 + iRec14[1]);
				output[i] = sinf((9.587379924285257e-05f * float((iRec14[0] - 1))));
				// post processing
				iRec14[1] = iRec14[0];
			}
		}
	};


	FAUSTFLOAT 	fslider0;
	float 	fRec0[2];
	int 	iConst0;
	float 	fConst1;
	int 	iConst2;
	int 	iConst3;
	int 	iConst4;
	float 	fConst5;
	static float 	ftbl0[65536];
	FAUSTFLOAT 	fslider1;
	float 	fRec16[2];
	FAUSTFLOAT 	fentry0;
	FAUSTFLOAT 	fentry1;
	float 	fConst6;
	float 	fConst7;
	float 	fRec15[2];
	FAUSTFLOAT 	fbutton0;
	int 	iRec17[2];
	FAUSTFLOAT 	fslider2;
	FAUSTFLOAT 	fslider3;
	float 	fRec18[2];
	FAUSTFLOAT 	fslider4;
	float 	fRec19[2];
	float 	fVec0[2];
	float 	fRec21[2];
	float 	fRec20[2];
	float 	fConst8;
	float 	fConst9;
	float 	fConst10;
	FAUSTFLOAT 	fslider5;
	float 	fRec23[2];
	int 	iRec24[2];
	int 	iRec25[2];
	FAUSTFLOAT 	fslider6;
	FAUSTFLOAT 	fslider7;
	float 	fConst11;
	float 	fConst12;
	float 	fRec26[2];
	FAUSTFLOAT 	fslider8;
	int 	iRec27[2];
	FAUSTFLOAT 	fslider9;
	int 	iRec28[2];
	FAUSTFLOAT 	fslider10;
	FAUSTFLOAT 	fslider11;
	float 	fRec29[2];
	float 	fConst13;
	int 	iConst14;
	int 	iConst15;
	int 	iConst16;
	float 	fConst17;
	int 	iConst18;
	float 	fConst19;
	FAUSTFLOAT 	fslider12;
	float 	fRec31[2];
	float 	fRec30[2];
	FAUSTFLOAT 	fslider13;
	float 	fConst20;
	float 	fVec1[2];
	float 	fRec22[2];
	int 	IOTA;
	float 	fRec11[128];
	int 	iConst21;
	float 	fConst22;
	float 	fVec2[2];
	FAUSTFLOAT 	fslider14;
	float 	fConst23;
	float 	fConst24;
	float 	fRec10[2];
	float 	fRec9[2];
	float 	fRec6[2];
	float 	fRec5[2];
	float 	fRec3[128];
	float 	fRec1[8192];
	FAUSTFLOAT 	fslider15;
	FAUSTFLOAT 	fentry2;
	float 	fConst25;
	float 	fConst26;
	float 	fConst27;
	float 	fConst28;
	float 	fRec43[2];
	FAUSTFLOAT 	fslider16;
	float 	fConst29;
	float 	fConst30;
	float 	fConst31;
	float 	fConst32;
	float 	fConst33;
	float 	fRec42[2];
	float 	fVec3[8192];
	float 	fConst34;
	int 	iConst35;
	float 	fVec4[4096];
	int 	iConst36;
	float 	fVec5[2048];
	int 	iConst37;
	float 	fRec40[2];
	float 	fRec47[2];
	float 	fConst38;
	float 	fConst39;
	float 	fConst40;
	float 	fConst41;
	float 	fRec46[2];
	float 	fVec6[8192];
	float 	fConst42;
	int 	iConst43;
	float 	fVec7[1024];
	int 	iConst44;
	float 	fRec44[2];
	float 	fRec51[2];
	float 	fConst45;
	float 	fConst46;
	float 	fConst47;
	float 	fConst48;
	float 	fRec50[2];
	float 	fVec8[8192];
	float 	fConst49;
	int 	iConst50;
	float 	fVec9[2048];
	int 	iConst51;
	float 	fRec48[2];
	float 	fRec55[2];
	float 	fConst52;
	float 	fConst53;
	float 	fConst54;
	float 	fConst55;
	float 	fRec54[2];
	float 	fVec10[8192];
	float 	fConst56;
	int 	iConst57;
	float 	fVec11[1024];
	int 	iConst58;
	float 	fRec52[2];
	float 	fRec59[2];
	float 	fConst59;
	float 	fConst60;
	float 	fConst61;
	float 	fConst62;
	float 	fRec58[2];
	float 	fVec12[16384];
	float 	fConst63;
	int 	iConst64;
	float 	fVec13[4096];
	FAUSTFLOAT 	fslider17;
	float 	fConst65;
	float 	fVec14[4096];
	float 	fVec15[2048];
	int 	iConst66;
	float 	fRec56[2];
	float 	fRec63[2];
	float 	fConst67;
	float 	fConst68;
	float 	fConst69;
	float 	fConst70;
	float 	fRec62[2];
	float 	fVec16[8192];
	float 	fConst71;
	int 	iConst72;
	float 	fVec17[2048];
	int 	iConst73;
	float 	fRec60[2];
	float 	fRec67[2];
	float 	fConst74;
	float 	fConst75;
	float 	fConst76;
	float 	fConst77;
	float 	fRec66[2];
	float 	fVec18[16384];
	float 	fConst78;
	int 	iConst79;
	float 	fVec19[2048];
	int 	iConst80;
	float 	fRec64[2];
	float 	fRec71[2];
	float 	fConst81;
	float 	fConst82;
	float 	fConst83;
	float 	fConst84;
	float 	fRec70[2];
	float 	fVec20[16384];
	float 	fConst85;
	int 	iConst86;
	float 	fVec21[1024];
	int 	iConst87;
	float 	fRec68[2];
	float 	fRec32[3];
	float 	fRec33[3];
	float 	fRec34[3];
	float 	fRec35[3];
	float 	fRec36[3];
	float 	fRec37[3];
	float 	fRec38[3];
	float 	fRec39[3];
  public:
	static void metadata(Meta* m) 	{ 
		m->declare("name", "BlowHole");
		m->declare("description", "Nonlinear WaveGuide Clarinet with one register hole and one tonehole");
		m->declare("author", "Romain Michon");
		m->declare("copyright", "Romain Michon (rmichon@ccrma.stanford.edu)");
		m->declare("version", "1.0");
		m->declare("licence", "STK-4.3");
		m->declare("reference", "https://ccrma.stanford.edu/~jos/pasp/Woodwinds.html");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/version", "1.0");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/version", "1.0");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("instrument.lib/name", "Faust-STK Tools Library");
		m->declare("instrument.lib/author", "Romain Michon (rmichon@ccrma.stanford.edu)");
		m->declare("instrument.lib/copyright", "Romain Michon");
		m->declare("instrument.lib/version", "1.0");
		m->declare("instrument.lib/licence", "STK-4.3");
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/version", "1.29");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("effect.lib/name", "Faust Audio Effect Library");
		m->declare("effect.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/copyright", "Julius O. Smith III");
		m->declare("effect.lib/version", "1.33");
		m->declare("effect.lib/license", "STK-4.3");
		m->declare("effect.lib/exciter_name", "Harmonic Exciter");
		m->declare("effect.lib/exciter_author", "Priyanka Shekar (pshekar@ccrma.stanford.edu)");
		m->declare("effect.lib/exciter_copyright", "Copyright (c) 2013 Priyanka Shekar");
		m->declare("effect.lib/exciter_version", "1.0");
		m->declare("effect.lib/exciter_license", "MIT License (MIT)");
	}

	virtual int getNumInputs() 	{ return 0; }
	virtual int getNumOutputs() 	{ return 2; }
	static void classInit(int samplingFreq) {
		SIG0 sig0;
		sig0.init(samplingFreq);
		sig0.fill(65536,ftbl0);
	}
	virtual void instanceInit(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fslider0 = 0.137f;
		for (int i=0; i<2; i++) fRec0[i] = 0;
		iConst0 = min(192000, max(1, fSamplingFreq));
		fConst1 = (0.00018140589569160998f * iConst0);
		iConst2 = int(fConst1);
		iConst3 = int((1 + int((iConst2 & 4095))));
		iConst4 = (1 + iConst2);
		fConst5 = (iConst4 - fConst1);
		fslider1 = 2.2e+02f;
		for (int i=0; i<2; i++) fRec16[i] = 0;
		fentry0 = 0.0f;
		fentry1 = 4.4e+02f;
		fConst6 = float(iConst0);
		fConst7 = (1.0f / fConst6);
		for (int i=0; i<2; i++) fRec15[i] = 0;
		fbutton0 = 0.0;
		for (int i=0; i<2; i++) iRec17[i] = 0;
		fslider2 = 0.1f;
		fslider3 = 0.1f;
		for (int i=0; i<2; i++) fRec18[i] = 0;
		fslider4 = 0.0f;
		for (int i=0; i<2; i++) fRec19[i] = 0;
		for (int i=0; i<2; i++) fVec0[i] = 0;
		for (int i=0; i<2; i++) fRec21[i] = 0;
		for (int i=0; i<2; i++) fRec20[i] = 0;
		fConst8 = (0.20999999999999996f * iConst0);
		fConst9 = (347.23f + fConst8);
		fConst10 = ((347.23f - fConst8) / fConst9);
		fslider5 = 5.0f;
		for (int i=0; i<2; i++) fRec23[i] = 0;
		for (int i=0; i<2; i++) iRec24[i] = 0;
		for (int i=0; i<2; i++) iRec25[i] = 0;
		fslider6 = 0.01f;
		fslider7 = 0.5f;
		fConst11 = (0.2f * iConst0);
		fConst12 = (1.8f * iConst0);
		for (int i=0; i<2; i++) fRec26[i] = 0;
		fslider8 = 0.1f;
		for (int i=0; i<2; i++) iRec27[i] = 0;
		fslider9 = 0.0f;
		for (int i=0; i<2; i++) iRec28[i] = 0;
		fslider10 = 0.35f;
		fslider11 = 0.01f;
		for (int i=0; i<2; i++) fRec29[i] = 0;
		fConst13 = (0.00022675736961451248f * iConst0);
		iConst14 = int(fConst13);
		iConst15 = (1 + iConst14);
		iConst16 = int((1 + int((int(iConst15) & 4095))));
		fConst17 = (fConst13 - iConst14);
		iConst18 = int((1 + int((iConst14 & 4095))));
		fConst19 = (iConst15 - fConst13);
		fslider12 = 0.35f;
		for (int i=0; i<2; i++) fRec31[i] = 0;
		for (int i=0; i<2; i++) fRec30[i] = 0;
		fslider13 = 0.0f;
		fConst20 = (0 - (347.23f / fConst9));
		for (int i=0; i<2; i++) fVec1[i] = 0;
		for (int i=0; i<2; i++) fRec22[i] = 0;
		IOTA = 0;
		for (int i=0; i<128; i++) fRec11[i] = 0;
		iConst21 = int((1 + int((int(iConst4) & 4095))));
		fConst22 = (fConst1 - iConst2);
		for (int i=0; i<2; i++) fVec2[i] = 0;
		fslider14 = 0.12f;
		fConst23 = (0.0084f * iConst0);
		fConst24 = (((fConst23 - 347.23f) / (347.23f + fConst23)) - 0.9995f);
		for (int i=0; i<2; i++) fRec10[i] = 0;
		for (int i=0; i<2; i++) fRec9[i] = 0;
		for (int i=0; i<2; i++) fRec6[i] = 0;
		for (int i=0; i<2; i++) fRec5[i] = 0;
		for (int i=0; i<128; i++) fRec3[i] = 0;
		for (int i=0; i<8192; i++) fRec1[i] = 0;
		fslider15 = 0.6f;
		fentry2 = 1.0f;
		fConst25 = (1.0f / tanf((628.3185307179587f / float(iConst0))));
		fConst26 = (1 + fConst25);
		fConst27 = (1.0f / fConst26);
		fConst28 = (0 - ((1 - fConst25) / fConst26));
		for (int i=0; i<2; i++) fRec43[i] = 0;
		fslider16 = 0.72f;
		fConst29 = floorf((0.5f + (0.174713f * iConst0)));
		fConst30 = ((0 - (6.907755278982138f * fConst29)) / float(iConst0));
		fConst31 = (0.5f * fConst30);
		fConst32 = (0.3333333333333333f * fConst30);
		fConst33 = cosf((37699.11184307752f / fConst6));
		for (int i=0; i<2; i++) fRec42[i] = 0;
		for (int i=0; i<8192; i++) fVec3[i] = 0;
		fConst34 = floorf((0.5f + (0.022904f * iConst0)));
		iConst35 = int((int((fConst29 - fConst34)) & 8191));
		for (int i=0; i<4096; i++) fVec4[i] = 0;
		iConst36 = int((int((0.02f * iConst0)) & 8191));
		for (int i=0; i<2048; i++) fVec5[i] = 0;
		iConst37 = int((int((fConst34 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec40[i] = 0;
		for (int i=0; i<2; i++) fRec47[i] = 0;
		fConst38 = floorf((0.5f + (0.153129f * iConst0)));
		fConst39 = ((0 - (6.907755278982138f * fConst38)) / float(iConst0));
		fConst40 = (0.5f * fConst39);
		fConst41 = (0.3333333333333333f * fConst39);
		for (int i=0; i<2; i++) fRec46[i] = 0;
		for (int i=0; i<8192; i++) fVec6[i] = 0;
		fConst42 = floorf((0.5f + (0.020346f * iConst0)));
		iConst43 = int((int((fConst38 - fConst42)) & 8191));
		for (int i=0; i<1024; i++) fVec7[i] = 0;
		iConst44 = int((int((fConst42 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec44[i] = 0;
		for (int i=0; i<2; i++) fRec51[i] = 0;
		fConst45 = floorf((0.5f + (0.127837f * iConst0)));
		fConst46 = ((0 - (6.907755278982138f * fConst45)) / float(iConst0));
		fConst47 = (0.5f * fConst46);
		fConst48 = (0.3333333333333333f * fConst46);
		for (int i=0; i<2; i++) fRec50[i] = 0;
		for (int i=0; i<8192; i++) fVec8[i] = 0;
		fConst49 = floorf((0.5f + (0.031604f * iConst0)));
		iConst50 = int((int((fConst45 - fConst49)) & 8191));
		for (int i=0; i<2048; i++) fVec9[i] = 0;
		iConst51 = int((int((fConst49 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec48[i] = 0;
		for (int i=0; i<2; i++) fRec55[i] = 0;
		fConst52 = floorf((0.5f + (0.125f * iConst0)));
		fConst53 = ((0 - (6.907755278982138f * fConst52)) / float(iConst0));
		fConst54 = (0.5f * fConst53);
		fConst55 = (0.3333333333333333f * fConst53);
		for (int i=0; i<2; i++) fRec54[i] = 0;
		for (int i=0; i<8192; i++) fVec10[i] = 0;
		fConst56 = floorf((0.5f + (0.013458f * iConst0)));
		iConst57 = int((int((fConst52 - fConst56)) & 8191));
		for (int i=0; i<1024; i++) fVec11[i] = 0;
		iConst58 = int((int((fConst56 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec52[i] = 0;
		for (int i=0; i<2; i++) fRec59[i] = 0;
		fConst59 = floorf((0.5f + (0.210389f * iConst0)));
		fConst60 = ((0 - (6.907755278982138f * fConst59)) / float(iConst0));
		fConst61 = (0.5f * fConst60);
		fConst62 = (0.3333333333333333f * fConst60);
		for (int i=0; i<2; i++) fRec58[i] = 0;
		for (int i=0; i<16384; i++) fVec12[i] = 0;
		fConst63 = floorf((0.5f + (0.024421f * iConst0)));
		iConst64 = int((int((fConst59 - fConst63)) & 16383));
		for (int i=0; i<4096; i++) fVec13[i] = 0;
		fslider17 = 0.5f;
		fConst65 = (0.5f * iConst0);
		for (int i=0; i<4096; i++) fVec14[i] = 0;
		for (int i=0; i<2048; i++) fVec15[i] = 0;
		iConst66 = int((int((fConst63 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec56[i] = 0;
		for (int i=0; i<2; i++) fRec63[i] = 0;
		fConst67 = floorf((0.5f + (0.192303f * iConst0)));
		fConst68 = ((0 - (6.907755278982138f * fConst67)) / float(iConst0));
		fConst69 = (0.5f * fConst68);
		fConst70 = (0.3333333333333333f * fConst68);
		for (int i=0; i<2; i++) fRec62[i] = 0;
		for (int i=0; i<8192; i++) fVec16[i] = 0;
		fConst71 = floorf((0.5f + (0.029291f * iConst0)));
		iConst72 = int((int((fConst67 - fConst71)) & 8191));
		for (int i=0; i<2048; i++) fVec17[i] = 0;
		iConst73 = int((int((fConst71 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec60[i] = 0;
		for (int i=0; i<2; i++) fRec67[i] = 0;
		fConst74 = floorf((0.5f + (0.256891f * iConst0)));
		fConst75 = ((0 - (6.907755278982138f * fConst74)) / float(iConst0));
		fConst76 = (0.5f * fConst75);
		fConst77 = (0.3333333333333333f * fConst75);
		for (int i=0; i<2; i++) fRec66[i] = 0;
		for (int i=0; i<16384; i++) fVec18[i] = 0;
		fConst78 = floorf((0.5f + (0.027333f * iConst0)));
		iConst79 = int((int((fConst74 - fConst78)) & 16383));
		for (int i=0; i<2048; i++) fVec19[i] = 0;
		iConst80 = int((int((fConst78 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec64[i] = 0;
		for (int i=0; i<2; i++) fRec71[i] = 0;
		fConst81 = floorf((0.5f + (0.219991f * iConst0)));
		fConst82 = ((0 - (6.907755278982138f * fConst81)) / float(iConst0));
		fConst83 = (0.5f * fConst82);
		fConst84 = (0.3333333333333333f * fConst82);
		for (int i=0; i<2; i++) fRec70[i] = 0;
		for (int i=0; i<16384; i++) fVec20[i] = 0;
		fConst85 = floorf((0.5f + (0.019123f * iConst0)));
		iConst86 = int((int((fConst81 - fConst85)) & 16383));
		for (int i=0; i<1024; i++) fVec21[i] = 0;
		iConst87 = int((int((fConst85 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec68[i] = 0;
		for (int i=0; i<3; i++) fRec32[i] = 0;
		for (int i=0; i<3; i++) fRec33[i] = 0;
		for (int i=0; i<3; i++) fRec34[i] = 0;
		for (int i=0; i<3; i++) fRec35[i] = 0;
		for (int i=0; i<3; i++) fRec36[i] = 0;
		for (int i=0; i<3; i++) fRec37[i] = 0;
		for (int i=0; i<3; i++) fRec38[i] = 0;
		for (int i=0; i<3; i++) fRec39[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void buildUserInterface(UI* interface) {
		interface->openVerticalBox("0x00");
		interface->openHorizontalBox("Basic_Parameters");
		interface->declare(&fentry1, "1", "");
		interface->declare(&fentry1, "tooltip", "Tone frequency");
		interface->declare(&fentry1, "unit", "Hz");
		interface->addNumEntry("freq", &fentry1, 4.4e+02f, 2e+01f, 2e+04f, 1.0f);
		interface->declare(&fentry2, "1", "");
		interface->declare(&fentry2, "tooltip", "Gain (value between 0 and 1)");
		interface->addNumEntry("gain", &fentry2, 1.0f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fbutton0, "1", "");
		interface->declare(&fbutton0, "tooltip", "noteOn = 1, noteOff = 0");
		interface->addButton("gate", &fbutton0);
		interface->closeBox();
		interface->openHorizontalBox("Envelopes_and_Vibrato");
		interface->openVerticalBox("Envelope_Parameters");
		interface->declare(&fslider11, "5", "");
		interface->declare(&fslider11, "tooltip", "Envelope attack duration");
		interface->declare(&fslider11, "unit", "s");
		interface->addHorizontalSlider("Envelope_Attack", &fslider11, 0.01f, 0.0f, 2.0f, 0.01f);
		interface->declare(&fslider2, "5", "");
		interface->declare(&fslider2, "tooltip", "Envelope release duration");
		interface->declare(&fslider2, "unit", "s");
		interface->addHorizontalSlider("Envelope_Release", &fslider2, 0.1f, 0.0f, 2.0f, 0.01f);
		interface->closeBox();
		interface->openVerticalBox("Vibrato_Parameters");
		interface->declare(&fslider7, "4", "");
		interface->declare(&fslider7, "tooltip", "Vibrato attack duration");
		interface->declare(&fslider7, "unit", "s");
		interface->addHorizontalSlider("Vibrato_Attack", &fslider7, 0.5f, 0.0f, 2.0f, 0.01f);
		interface->declare(&fslider5, "4", "");
		interface->declare(&fslider5, "unit", "Hz");
		interface->addHorizontalSlider("Vibrato_Freq", &fslider5, 5.0f, 1.0f, 15.0f, 0.1f);
		interface->declare(&fslider8, "4", "");
		interface->declare(&fslider8, "tooltip", "A value between 0 and 1");
		interface->addHorizontalSlider("Vibrato_Gain", &fslider8, 0.1f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fslider6, "4", "");
		interface->declare(&fslider6, "tooltip", "Vibrato release duration");
		interface->declare(&fslider6, "unit", "s");
		interface->addHorizontalSlider("Vibrato_Release", &fslider6, 0.01f, 0.0f, 2.0f, 0.01f);
		interface->closeBox();
		interface->closeBox();
		interface->openHorizontalBox("Physical_and_Nonlinearity");
		interface->openVerticalBox("Nonlinear_Filter_Parameters");
		interface->declare(&fslider1, "3", "");
		interface->declare(&fslider1, "tooltip", "Frequency of the sine wave for the modulation of theta (works if Modulation Type=3)");
		interface->declare(&fslider1, "unit", "Hz");
		interface->addHorizontalSlider("Modulation_Frequency", &fslider1, 2.2e+02f, 2e+01f, 1e+03f, 0.1f);
		interface->declare(&fentry0, "3", "");
		interface->declare(&fentry0, "tooltip", "0=theta is modulated by the incoming signal; 1=theta is modulated by the averaged incoming signal; 2=theta is modulated by the squared incoming signal; 3=theta is modulated by a sine wave of frequency freqMod; 4=theta is modulated by a sine wave of frequency freq;");
		interface->addNumEntry("Modulation_Type", &fentry0, 0.0f, 0.0f, 4.0f, 1.0f);
		interface->declare(&fslider4, "3", "");
		interface->declare(&fslider4, "tooltip", "Nonlinearity factor (value between 0 and 1)");
		interface->addHorizontalSlider("Nonlinearity", &fslider4, 0.0f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fslider3, "3", "");
		interface->declare(&fslider3, "Attack duration of the nonlinearity", "");
		interface->declare(&fslider3, "unit", "s");
		interface->addHorizontalSlider("Nonlinearity_Attack", &fslider3, 0.1f, 0.0f, 2.0f, 0.01f);
		interface->closeBox();
		interface->openVerticalBox("Physical_Parameters");
		interface->declare(&fslider9, "2", "");
		interface->declare(&fslider9, "tooltip", "Breath noise gain (value between 0 and 1)");
		interface->addHorizontalSlider("Noise_Gain", &fslider9, 0.0f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fslider10, "2", "");
		interface->declare(&fslider10, "tooltip", "Breath pressure (value bewteen 0 and 1)");
		interface->addHorizontalSlider("Pressure", &fslider10, 0.35f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fslider12, "2", "");
		interface->declare(&fslider12, "tooltip", "Reed stiffness (value between 0 and 1)");
		interface->addHorizontalSlider("Reed_Stiffness", &fslider12, 0.35f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fslider14, "2", "");
		interface->declare(&fslider14, "tooltip", "A value between 0 and 1");
		interface->addHorizontalSlider("Tone_Hole_Openness", &fslider14, 0.12f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fslider13, "2", "");
		interface->declare(&fslider13, "tooltip", "A value between 0 and 1");
		interface->addHorizontalSlider("Vent_Openness", &fslider13, 0.0f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->closeBox();
		interface->openVerticalBox("Reverb");
		interface->addHorizontalSlider("reverbGain", &fslider0, 0.137f, 0.0f, 1.0f, 0.01f);
		interface->addHorizontalSlider("roomSize", &fslider16, 0.72f, 0.01f, 2.0f, 0.01f);
		interface->closeBox();
		interface->openVerticalBox("Spat");
		interface->addHorizontalSlider("pan angle", &fslider15, 0.6f, 0.0f, 1.0f, 0.01f);
		interface->addHorizontalSlider("spatial width", &fslider17, 0.5f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0 = (0.0010000000000000009f * float(fslider0));
		float 	fSlow1 = (0.0010000000000000009f * float(fslider1));
		float 	fSlow2 = float(fentry0);
		int 	iSlow3 = (fSlow2 != 4);
		float 	fSlow4 = float(fentry1);
		float 	fSlow5 = (fSlow4 * (fSlow2 == 4));
		float 	fSlow6 = float(fbutton0);
		int 	iSlow7 = (fSlow6 > 0);
		int 	iSlow8 = (fSlow6 <= 0);
		float 	fSlow9 = float(fslider2);
		float 	fSlow10 = (1 - (1.0f / powf(1e+05f,(1.0f / ((fSlow9 == 0.0f) + (iConst0 * fSlow9))))));
		float 	fSlow11 = float(fslider3);
		float 	fSlow12 = (1.0f / ((fSlow11 == 0.0f) + (iConst0 * fSlow11)));
		float 	fSlow13 = float(fslider4);
		float 	fSlow14 = (0.0010000000000000009f * fSlow13);
		float 	fSlow15 = (2 * (fSlow13 * (fSlow2 < 2)));
		float 	fSlow16 = (iConst0 * ((0.5f / fSlow4) - 0.00040816326530612246f));
		int 	iSlow17 = int((fSlow16 - (3.5f + fSlow15)));
		int 	iSlow18 = int((1 + int((int((1 + iSlow17)) & 4095))));
		float 	fSlow19 = (fSlow15 + iSlow17);
		float 	fSlow20 = (fSlow16 - (3.5f + fSlow19));
		int 	iSlow21 = int((1 + int((iSlow17 & 4095))));
		float 	fSlow22 = ((fSlow19 + 4.5f) - fSlow16);
		int 	iSlow23 = (fSlow2 >= 3);
		float 	fSlow24 = (fConst7 * float(fslider5));
		float 	fSlow25 = float(fslider6);
		float 	fSlow26 = (1 - (1.0f / powf(1e+05f,(1.0f / ((fSlow25 == 0.0f) + (iConst0 * fSlow25))))));
		float 	fSlow27 = float(fslider7);
		float 	fSlow28 = (fConst11 * fSlow27);
		float 	fSlow29 = (fSlow28 + ((0.2f * fSlow27) == 0.0f));
		float 	fSlow30 = (1.0f / ((fConst12 * fSlow27) + ((1.8f * fSlow27) == 0.0f)));
		float 	fSlow31 = float(fslider8);
		float 	fSlow32 = (4.656612875245797e-10f * float(fslider9));
		float 	fSlow33 = float(fslider10);
		float 	fSlow34 = (fSlow9 * fSlow33);
		float 	fSlow35 = (1 - (1.0f / powf(1e+05f,(1.0f / ((iConst0 * fSlow34) + (fSlow34 == 0.0f))))));
		float 	fSlow36 = (float(fslider11) * fSlow33);
		float 	fSlow37 = (1.0f / ((iConst0 * fSlow36) + (fSlow36 == 0.0f)));
		float 	fSlow38 = (0.55f + (0.3f * fSlow33));
		float 	fSlow39 = ((0.26f * float(fslider12)) - 0.44f);
		float 	fSlow40 = (3.141592653589793f * (fSlow2 == 2));
		float 	fSlow41 = (1.5707963267948966f * (fSlow2 == 1));
		float 	fSlow42 = (3.141592653589793f * (fSlow2 == 0));
		int 	iSlow43 = (fSlow2 < 3);
		float 	fSlow44 = (fConst20 * float(fslider13));
		float 	fSlow45 = (0.9995f + (fConst24 * float(fslider14)));
		float 	fSlow46 = (0 - fSlow45);
		float 	fSlow47 = float(fslider15);
		float 	fSlow48 = float(fentry2);
		float 	fSlow49 = (1.5f * (fSlow48 * (1.0f - fSlow47)));
		float 	fSlow50 = float(fslider16);
		float 	fSlow51 = expf((fConst31 / fSlow50));
		float 	fSlow52 = ((expf((fConst32 / fSlow50)) / fSlow51) - 1);
		float 	fSlow53 = faustpower<2>(fSlow51);
		float 	fSlow54 = (1.0f - fSlow53);
		float 	fSlow55 = (1.0f - (fConst33 * fSlow53));
		float 	fSlow56 = (fSlow55 / fSlow54);
		float 	fSlow57 = sqrtf(max((float)0, ((faustpower<2>(fSlow55) / faustpower<2>(fSlow54)) - 1.0f)));
		float 	fSlow58 = (fSlow51 * ((1.0f + fSlow57) - fSlow56));
		float 	fSlow59 = (fSlow56 - fSlow57);
		float 	fSlow60 = expf((fConst40 / fSlow50));
		float 	fSlow61 = ((expf((fConst41 / fSlow50)) / fSlow60) - 1);
		float 	fSlow62 = faustpower<2>(fSlow60);
		float 	fSlow63 = (1.0f - fSlow62);
		float 	fSlow64 = (1.0f - (fConst33 * fSlow62));
		float 	fSlow65 = (fSlow64 / fSlow63);
		float 	fSlow66 = sqrtf(max((float)0, ((faustpower<2>(fSlow64) / faustpower<2>(fSlow63)) - 1.0f)));
		float 	fSlow67 = (fSlow60 * ((1.0f + fSlow66) - fSlow65));
		float 	fSlow68 = (fSlow65 - fSlow66);
		float 	fSlow69 = expf((fConst47 / fSlow50));
		float 	fSlow70 = ((expf((fConst48 / fSlow50)) / fSlow69) - 1);
		float 	fSlow71 = faustpower<2>(fSlow69);
		float 	fSlow72 = (1.0f - fSlow71);
		float 	fSlow73 = (1.0f - (fConst33 * fSlow71));
		float 	fSlow74 = (fSlow73 / fSlow72);
		float 	fSlow75 = sqrtf(max((float)0, ((faustpower<2>(fSlow73) / faustpower<2>(fSlow72)) - 1.0f)));
		float 	fSlow76 = (fSlow69 * ((1.0f + fSlow75) - fSlow74));
		float 	fSlow77 = (fSlow74 - fSlow75);
		float 	fSlow78 = expf((fConst54 / fSlow50));
		float 	fSlow79 = ((expf((fConst55 / fSlow50)) / fSlow78) - 1);
		float 	fSlow80 = faustpower<2>(fSlow78);
		float 	fSlow81 = (1.0f - fSlow80);
		float 	fSlow82 = (1.0f - (fConst33 * fSlow80));
		float 	fSlow83 = (fSlow82 / fSlow81);
		float 	fSlow84 = sqrtf(max((float)0, ((faustpower<2>(fSlow82) / faustpower<2>(fSlow81)) - 1.0f)));
		float 	fSlow85 = (fSlow78 * ((1.0f + fSlow84) - fSlow83));
		float 	fSlow86 = (fSlow83 - fSlow84);
		float 	fSlow87 = expf((fConst61 / fSlow50));
		float 	fSlow88 = ((expf((fConst62 / fSlow50)) / fSlow87) - 1);
		float 	fSlow89 = faustpower<2>(fSlow87);
		float 	fSlow90 = (1.0f - fSlow89);
		float 	fSlow91 = (1.0f - (fConst33 * fSlow89));
		float 	fSlow92 = (fSlow91 / fSlow90);
		float 	fSlow93 = sqrtf(max((float)0, ((faustpower<2>(fSlow91) / faustpower<2>(fSlow90)) - 1.0f)));
		float 	fSlow94 = (fSlow87 * ((1.0f + fSlow93) - fSlow92));
		float 	fSlow95 = (fSlow92 - fSlow93);
		float 	fSlow96 = (1.5f * fSlow48);
		int 	iSlow97 = int((int((fConst65 * (float(fslider17) / fSlow4))) & 4095));
		float 	fSlow98 = expf((fConst69 / fSlow50));
		float 	fSlow99 = ((expf((fConst70 / fSlow50)) / fSlow98) - 1);
		float 	fSlow100 = faustpower<2>(fSlow98);
		float 	fSlow101 = (1.0f - fSlow100);
		float 	fSlow102 = (1.0f - (fConst33 * fSlow100));
		float 	fSlow103 = (fSlow102 / fSlow101);
		float 	fSlow104 = sqrtf(max((float)0, ((faustpower<2>(fSlow102) / faustpower<2>(fSlow101)) - 1.0f)));
		float 	fSlow105 = (fSlow98 * ((1.0f + fSlow104) - fSlow103));
		float 	fSlow106 = (fSlow103 - fSlow104);
		float 	fSlow107 = expf((fConst76 / fSlow50));
		float 	fSlow108 = ((expf((fConst77 / fSlow50)) / fSlow107) - 1);
		float 	fSlow109 = faustpower<2>(fSlow107);
		float 	fSlow110 = (1.0f - fSlow109);
		float 	fSlow111 = (1.0f - (fConst33 * fSlow109));
		float 	fSlow112 = (fSlow111 / fSlow110);
		float 	fSlow113 = sqrtf(max((float)0, ((faustpower<2>(fSlow111) / faustpower<2>(fSlow110)) - 1.0f)));
		float 	fSlow114 = (fSlow107 * ((1.0f + fSlow113) - fSlow112));
		float 	fSlow115 = (fSlow112 - fSlow113);
		float 	fSlow116 = expf((fConst83 / fSlow50));
		float 	fSlow117 = ((expf((fConst84 / fSlow50)) / fSlow116) - 1);
		float 	fSlow118 = faustpower<2>(fSlow116);
		float 	fSlow119 = (1.0f - fSlow118);
		float 	fSlow120 = (1.0f - (fConst33 * fSlow118));
		float 	fSlow121 = (fSlow120 / fSlow119);
		float 	fSlow122 = sqrtf(max((float)0, ((faustpower<2>(fSlow120) / faustpower<2>(fSlow119)) - 1.0f)));
		float 	fSlow123 = (fSlow116 * ((1.0f + fSlow122) - fSlow121));
		float 	fSlow124 = (fSlow121 - fSlow122);
		FAUSTFLOAT* output0 = output[0];
		FAUSTFLOAT* output1 = output[1];
		for (int i=0; i<count; i++) {
			fRec0[0] = ((0.999f * fRec0[1]) + fSlow0);
			float fTemp0 = (1 - fRec0[0]);
			float fTemp1 = (fConst5 * fRec3[(IOTA-iConst3)&127]);
			fRec16[0] = (fSlow1 + (0.999f * fRec16[1]));
			float fTemp2 = (fRec15[1] + (fConst7 * (fSlow5 + (iSlow3 * fRec16[0]))));
			fRec15[0] = (fTemp2 - floorf(fTemp2));
			iRec17[0] = (iSlow7 & (iRec17[1] | (fRec18[1] >= 1)));
			int iTemp3 = (iSlow8 & (fRec18[1] > 0));
			fRec18[0] = (((fSlow12 * (((iRec17[1] == 0) & iSlow7) & (fRec18[1] < 1))) + (fRec18[1] * (1 - (fSlow10 * iTemp3)))) * ((iTemp3 == 0) | (fRec18[1] >= 1e-06f)));
			fRec19[0] = (fSlow14 + (0.999f * fRec19[1]));
			float fTemp4 = (fRec19[0] * fRec18[0]);
			float fTemp5 = (3.141592653589793f * (fTemp4 * ftbl0[int((65536.0f * fRec15[0]))]));
			float fTemp6 = cosf(fTemp5);
			float fTemp7 = ((fSlow22 * fRec1[(IOTA-iSlow21)&8191]) + (fSlow20 * fRec1[(IOTA-iSlow18)&8191]));
			fVec0[0] = fTemp7;
			float fTemp8 = sinf(fTemp5);
			float fTemp9 = (0 - fTemp8);
			float fTemp10 = ((fRec20[1] * fTemp9) + (fVec0[0] * fTemp6));
			fRec21[0] = ((fTemp9 * fRec21[1]) + (fTemp6 * fTemp10));
			fRec20[0] = ((fTemp8 * fTemp10) + (fTemp6 * fRec21[1]));
			float fTemp11 = (iSlow23 * ((fVec0[0] * fTemp8) + (fRec20[1] * fTemp6)));
			float fTemp12 = (fRec23[1] + fSlow24);
			fRec23[0] = (fTemp12 - floorf(fTemp12));
			iRec24[0] = (iSlow7 & (iRec24[1] | (fRec26[1] >= 1)));
			iRec25[0] = (iSlow7 * (1 + iRec25[1]));
			int iTemp13 = (iSlow8 & (fRec26[1] > 0));
			fRec26[0] = (((fSlow30 * (((((iRec24[1] == 0) & iSlow7) & (fRec26[1] < 1)) & (iRec25[1] > fSlow28)) * (1 - (iRec25[1] < fSlow29)))) + (fRec26[1] * (1 - (fSlow26 * iTemp13)))) * ((iTemp13 == 0) | (fRec26[1] >= 1e-06f)));
			iRec27[0] = (12345 + (1103515245 * iRec27[1]));
			iRec28[0] = (iSlow7 & (iRec28[1] | (fRec29[1] >= 1)));
			int iTemp14 = (iSlow8 & (fRec29[1] > 0));
			fRec29[0] = (((fSlow37 * (((iRec28[1] == 0) & iSlow7) & (fRec29[1] < 1))) + (fRec29[1] * (1 - (fSlow35 * iTemp14)))) * ((iTemp14 == 0) | (fRec29[1] >= 1e-06f)));
			float fTemp15 = (fSlow38 * ((fRec29[0] * (1 + (fSlow32 * iRec27[0]))) * (1 + (fSlow31 * (fRec26[0] * ftbl0[int((65536.0f * fRec23[0]))])))));
			float fTemp16 = (((fConst19 * fRec11[(IOTA-iConst18)&127]) + (fConst17 * fRec11[(IOTA-iConst16)&127])) - fTemp15);
			float fTemp17 = (0.7f + (fSlow39 * fTemp16));
			float fTemp18 = ((fTemp17 > 1) + (fTemp17 * (fTemp17 <= 1)));
			float fTemp19 = (fTemp15 + (fTemp16 * ((fTemp18 * (fTemp18 >= -1)) - (fTemp18 < -1))));
			float fTemp20 = (fTemp4 * (((fSlow42 * fVec0[0]) + (fSlow41 * (fVec0[0] + fVec0[1]))) + (fSlow40 * faustpower<2>(fVec0[0]))));
			float fTemp21 = cosf(fTemp20);
			float fTemp22 = sinf(fTemp20);
			float fTemp23 = (0 - fTemp22);
			float fTemp24 = ((fRec30[1] * fTemp23) + (fVec0[0] * fTemp21));
			fRec31[0] = ((fTemp23 * fRec31[1]) + (fTemp21 * fTemp24));
			fRec30[0] = ((fTemp22 * fTemp24) + (fTemp21 * fRec31[1]));
			float fTemp25 = (iSlow43 * ((fRec19[0] * ((fVec0[0] * fTemp22) + (fRec30[1] * fTemp21))) + ((1 - fRec19[0]) * fVec0[0])));
			float fTemp26 = (fSlow44 * (fTemp25 + (fTemp19 + fTemp11)));
			fVec1[0] = fTemp26;
			fRec22[0] = ((fVec1[0] + fVec1[1]) - (fConst10 * fRec22[1]));
			fRec11[IOTA&127] = (fTemp25 + (fRec22[0] + fTemp11));
			float 	fRec12 = fRec22[0];
			float 	fRec13 = fTemp19;
			float fTemp27 = (fRec12 + fRec13);
			float fTemp28 = (fConst22 * fRec3[(IOTA-iConst21)&127]);
			float fTemp29 = (fTemp28 + (fTemp27 + fTemp1));
			float fTemp30 = (0.07407407407407407f * (fTemp29 - (2 * fRec6[1])));
			float fTemp31 = (fTemp29 - (fRec9[1] + fTemp30));
			fVec2[0] = fTemp31;
			fRec10[0] = (0 - ((fVec2[1] + (fSlow46 * fRec10[1])) - (fSlow45 * fVec2[0])));
			fRec9[0] = fRec10[0];
			fRec6[0] = fRec9[0];
			float fTemp32 = (0 - fTemp30);
			float 	fRec7 = fTemp32;
			float 	fRec8 = fTemp32;
			fRec5[0] = (0.5f * (fRec5[1] + (fTemp27 + fRec7)));
			fRec3[IOTA&127] = (0 - (0.95f * fRec5[0]));
			float 	fRec4 = (fTemp28 + (fRec8 + fTemp1));
			fRec1[IOTA&8191] = fRec4;
			float 	fRec2 = fRec11[(IOTA-0)&127];
			fRec43[0] = ((fConst28 * fRec43[1]) + (fConst27 * (fRec36[1] + fRec36[2])));
			fRec42[0] = ((fSlow59 * fRec42[1]) + (fSlow58 * (fRec36[1] + (fSlow52 * fRec43[0]))));
			fVec3[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec42[0]));
			fVec4[IOTA&4095] = (fSlow49 * (fRec2 * fRec0[0]));
			float fTemp33 = (0.3f * fVec4[(IOTA-iConst36)&4095]);
			float fTemp34 = ((fTemp33 + fVec3[(IOTA-iConst35)&8191]) - (0.6f * fRec40[1]));
			fVec5[IOTA&2047] = fTemp34;
			fRec40[0] = fVec5[(IOTA-iConst37)&2047];
			float 	fRec41 = (0.6f * fVec5[IOTA&2047]);
			fRec47[0] = ((fConst28 * fRec47[1]) + (fConst27 * (fRec32[1] + fRec32[2])));
			fRec46[0] = ((fSlow68 * fRec46[1]) + (fSlow67 * (fRec32[1] + (fSlow61 * fRec47[0]))));
			fVec6[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec46[0]));
			float fTemp35 = ((fVec6[(IOTA-iConst43)&8191] + fTemp33) - (0.6f * fRec44[1]));
			fVec7[IOTA&1023] = fTemp35;
			fRec44[0] = fVec7[(IOTA-iConst44)&1023];
			float 	fRec45 = (0.6f * fVec7[IOTA&1023]);
			float fTemp36 = (fRec45 + fRec41);
			fRec51[0] = ((fConst28 * fRec51[1]) + (fConst27 * (fRec34[1] + fRec34[2])));
			fRec50[0] = ((fSlow77 * fRec50[1]) + (fSlow76 * (fRec34[1] + (fSlow70 * fRec51[0]))));
			fVec8[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec50[0]));
			float fTemp37 = (fVec8[(IOTA-iConst50)&8191] - (fTemp33 + (0.6f * fRec48[1])));
			fVec9[IOTA&2047] = fTemp37;
			fRec48[0] = fVec9[(IOTA-iConst51)&2047];
			float 	fRec49 = (0.6f * fVec9[IOTA&2047]);
			fRec55[0] = ((fConst28 * fRec55[1]) + (fConst27 * (fRec38[1] + fRec38[2])));
			fRec54[0] = ((fSlow86 * fRec54[1]) + (fSlow85 * (fRec38[1] + (fSlow79 * fRec55[0]))));
			fVec10[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec54[0]));
			float fTemp38 = (fVec10[(IOTA-iConst57)&8191] - (fTemp33 + (0.6f * fRec52[1])));
			fVec11[IOTA&1023] = fTemp38;
			fRec52[0] = fVec11[(IOTA-iConst58)&1023];
			float 	fRec53 = (0.6f * fVec11[IOTA&1023]);
			float fTemp39 = (fRec53 + (fRec49 + fTemp36));
			fRec59[0] = ((fConst28 * fRec59[1]) + (fConst27 * (fRec33[1] + fRec33[2])));
			fRec58[0] = ((fSlow95 * fRec58[1]) + (fSlow94 * (fRec33[1] + (fSlow88 * fRec59[0]))));
			fVec12[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec58[0]));
			fVec13[IOTA&4095] = (fSlow96 * fRec2);
			float fTemp40 = fVec13[(IOTA-iSlow97)&4095];
			fVec14[IOTA&4095] = (fSlow47 * (fRec0[0] * fTemp40));
			float fTemp41 = (0.3f * fVec14[(IOTA-iConst36)&4095]);
			float fTemp42 = (fTemp41 + ((0.6f * fRec56[1]) + fVec12[(IOTA-iConst64)&16383]));
			fVec15[IOTA&2047] = fTemp42;
			fRec56[0] = fVec15[(IOTA-iConst66)&2047];
			float 	fRec57 = (0 - (0.6f * fVec15[IOTA&2047]));
			fRec63[0] = ((fConst28 * fRec63[1]) + (fConst27 * (fRec37[1] + fRec37[2])));
			fRec62[0] = ((fSlow106 * fRec62[1]) + (fSlow105 * (fRec37[1] + (fSlow99 * fRec63[0]))));
			fVec16[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec62[0]));
			float fTemp43 = (fVec16[(IOTA-iConst72)&8191] + (fTemp41 + (0.6f * fRec60[1])));
			fVec17[IOTA&2047] = fTemp43;
			fRec60[0] = fVec17[(IOTA-iConst73)&2047];
			float 	fRec61 = (0 - (0.6f * fVec17[IOTA&2047]));
			fRec67[0] = ((fConst28 * fRec67[1]) + (fConst27 * (fRec35[1] + fRec35[2])));
			fRec66[0] = ((fSlow115 * fRec66[1]) + (fSlow114 * (fRec35[1] + (fSlow108 * fRec67[0]))));
			fVec18[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec66[0]));
			float fTemp44 = (((0.6f * fRec64[1]) + fVec18[(IOTA-iConst79)&16383]) - fTemp41);
			fVec19[IOTA&2047] = fTemp44;
			fRec64[0] = fVec19[(IOTA-iConst80)&2047];
			float 	fRec65 = (0 - (0.6f * fVec19[IOTA&2047]));
			fRec71[0] = ((fConst28 * fRec71[1]) + (fConst27 * (fRec39[1] + fRec39[2])));
			fRec70[0] = ((fSlow124 * fRec70[1]) + (fSlow123 * (fRec39[1] + (fSlow117 * fRec71[0]))));
			fVec20[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec70[0]));
			float fTemp45 = (((0.6f * fRec68[1]) + fVec20[(IOTA-iConst86)&16383]) - fTemp41);
			fVec21[IOTA&1023] = fTemp45;
			fRec68[0] = fVec21[(IOTA-iConst87)&1023];
			float 	fRec69 = (0 - (0.6f * fVec21[IOTA&1023]));
			fRec32[0] = (fRec68[1] + (fRec64[1] + (fRec60[1] + (fRec56[1] + (fRec52[1] + (fRec48[1] + (fRec40[1] + (fRec44[1] + (fRec69 + (fRec65 + (fRec61 + (fRec57 + fTemp39))))))))))));
			fRec33[0] = (0 - ((fRec68[1] + (fRec64[1] + (fRec60[1] + (fRec56[1] + (fRec69 + (fRec65 + (fRec57 + fRec61))))))) - (fRec52[1] + (fRec48[1] + (fRec40[1] + (fRec44[1] + fTemp39))))));
			float fTemp46 = (fRec49 + fRec53);
			fRec34[0] = (0 - ((fRec68[1] + (fRec64[1] + (fRec52[1] + (fRec48[1] + (fRec69 + (fRec65 + fTemp46)))))) - (fRec60[1] + (fRec56[1] + (fRec40[1] + (fRec44[1] + (fRec61 + (fRec57 + fTemp36))))))));
			fRec35[0] = (0 - ((fRec60[1] + (fRec56[1] + (fRec52[1] + (fRec48[1] + (fRec61 + (fRec57 + fTemp46)))))) - (fRec68[1] + (fRec64[1] + (fRec40[1] + (fRec44[1] + (fRec69 + (fRec65 + fTemp36))))))));
			float fTemp47 = (fRec45 + fRec49);
			float fTemp48 = (fRec41 + fRec53);
			fRec36[0] = (0 - ((fRec68[1] + (fRec60[1] + (fRec52[1] + (fRec40[1] + (fRec69 + (fRec61 + fTemp48)))))) - (fRec64[1] + (fRec56[1] + (fRec48[1] + (fRec44[1] + (fRec65 + (fRec57 + fTemp47))))))));
			fRec37[0] = (0 - ((fRec64[1] + (fRec56[1] + (fRec52[1] + (fRec40[1] + (fRec65 + (fRec57 + fTemp48)))))) - (fRec68[1] + (fRec60[1] + (fRec48[1] + (fRec44[1] + (fRec69 + (fRec61 + fTemp47))))))));
			float fTemp49 = (fRec45 + fRec53);
			float fTemp50 = (fRec41 + fRec49);
			fRec38[0] = (0 - ((fRec64[1] + (fRec60[1] + (fRec48[1] + (fRec40[1] + (fRec65 + (fRec61 + fTemp50)))))) - (fRec68[1] + (fRec56[1] + (fRec52[1] + (fRec44[1] + (fRec69 + (fRec57 + fTemp49))))))));
			fRec39[0] = (0 - ((fRec68[1] + (fRec56[1] + (fRec48[1] + (fRec40[1] + (fRec69 + (fRec57 + fTemp50)))))) - (fRec64[1] + (fRec60[1] + (fRec52[1] + (fRec44[1] + (fRec65 + (fRec61 + fTemp49))))))));
			output0[i] = (FAUSTFLOAT)((0.37f * (fRec33[0] + fRec34[0])) + (fSlow49 * (fRec2 * fTemp0)));
			output1[i] = (FAUSTFLOAT)((0.37f * (fRec33[0] - fRec34[0])) + (fSlow47 * (fTemp0 * fTemp40)));
			// post processing
			fRec39[2] = fRec39[1]; fRec39[1] = fRec39[0];
			fRec38[2] = fRec38[1]; fRec38[1] = fRec38[0];
			fRec37[2] = fRec37[1]; fRec37[1] = fRec37[0];
			fRec36[2] = fRec36[1]; fRec36[1] = fRec36[0];
			fRec35[2] = fRec35[1]; fRec35[1] = fRec35[0];
			fRec34[2] = fRec34[1]; fRec34[1] = fRec34[0];
			fRec33[2] = fRec33[1]; fRec33[1] = fRec33[0];
			fRec32[2] = fRec32[1]; fRec32[1] = fRec32[0];
			fRec68[1] = fRec68[0];
			fRec70[1] = fRec70[0];
			fRec71[1] = fRec71[0];
			fRec64[1] = fRec64[0];
			fRec66[1] = fRec66[0];
			fRec67[1] = fRec67[0];
			fRec60[1] = fRec60[0];
			fRec62[1] = fRec62[0];
			fRec63[1] = fRec63[0];
			fRec56[1] = fRec56[0];
			fRec58[1] = fRec58[0];
			fRec59[1] = fRec59[0];
			fRec52[1] = fRec52[0];
			fRec54[1] = fRec54[0];
			fRec55[1] = fRec55[0];
			fRec48[1] = fRec48[0];
			fRec50[1] = fRec50[0];
			fRec51[1] = fRec51[0];
			fRec44[1] = fRec44[0];
			fRec46[1] = fRec46[0];
			fRec47[1] = fRec47[0];
			fRec40[1] = fRec40[0];
			fRec42[1] = fRec42[0];
			fRec43[1] = fRec43[0];
			fRec5[1] = fRec5[0];
			fRec6[1] = fRec6[0];
			fRec9[1] = fRec9[0];
			fRec10[1] = fRec10[0];
			fVec2[1] = fVec2[0];
			IOTA = IOTA+1;
			fRec22[1] = fRec22[0];
			fVec1[1] = fVec1[0];
			fRec30[1] = fRec30[0];
			fRec31[1] = fRec31[0];
			fRec29[1] = fRec29[0];
			iRec28[1] = iRec28[0];
			iRec27[1] = iRec27[0];
			fRec26[1] = fRec26[0];
			iRec25[1] = iRec25[0];
			iRec24[1] = iRec24[0];
			fRec23[1] = fRec23[0];
			fRec20[1] = fRec20[0];
			fRec21[1] = fRec21[0];
			fVec0[1] = fVec0[0];
			fRec19[1] = fRec19[0];
			fRec18[1] = fRec18[0];
			iRec17[1] = iRec17[0];
			fRec15[1] = fRec15[0];
			fRec16[1] = fRec16[0];
			fRec0[1] = fRec0[0];
		}
	}
};


float 	mydsp::ftbl0[65536];
