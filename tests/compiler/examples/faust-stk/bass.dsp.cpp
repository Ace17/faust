//-----------------------------------------------------
// name: "Bass"
// author: "Romain Michon"
// copyright: "Romain Michon (rmichon@ccrma.stanford.edu)"
// version: "1.0"
//
// Code generated with Faust 0.9.70 (http://faust.grame.fr)
//-----------------------------------------------------
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif  

typedef long double quad;
/* link with : "" */
#include <bass.h>
#include <math.h>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline float faustpower(float x)          { return powf(x,N); } 
template <int N> inline double faustpower(double x)        { return pow(x,N); }
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <>   inline int faustpower<0>(int x)            { return 1; }
template <>   inline int faustpower<1>(int x)            { return x; }
#endif

#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	class SIG0 {
	  private:
		int 	fSamplingFreq;
		int 	iRec18[2];
	  public:
		int getNumInputs() 	{ return 0; }
		int getNumOutputs() 	{ return 1; }
		void init(int samplingFreq) {
			fSamplingFreq = samplingFreq;
			for (int i=0; i<2; i++) iRec18[i] = 0;
		}
		void fill (int count, float output[]) {
			for (int i=0; i<count; i++) {
				iRec18[0] = (1 + iRec18[1]);
				output[i] = sinf((9.587379924285257e-05f * float((iRec18[0] - 1))));
				// post processing
				iRec18[1] = iRec18[0];
			}
		}
	};


	FAUSTFLOAT 	fbutton0;
	float 	fRec4[2];
	FAUSTFLOAT 	fslider0;
	int 	iConst0;
	float 	fConst1;
	float 	fConst2;
	FAUSTFLOAT 	fentry0;
	float 	fRec3[2];
	int 	iRec5[2];
	float 	fVec0[2];
	float 	fConst3;
	float 	fRec6[2];
	float 	fRec2[2];
	float 	fRec1[2];
	int 	iRec8[2];
	float 	fConst4;
	float 	fRec7[2];
	FAUSTFLOAT 	fentry1;
	float 	fConst5;
	float 	fRec10[2];
	float 	fVec1[2];
	FAUSTFLOAT 	fslider1;
	float 	fRec11[2];
	FAUSTFLOAT 	fentry2;
	float 	fRec17[2];
	float 	fRec16[2];
	float 	fRec15[2];
	float 	fRec14[2];
	float 	fRec13[2];
	float 	fRec12[2];
	static float 	ftbl0[65536];
	FAUSTFLOAT 	fslider2;
	float 	fRec20[2];
	float 	fConst6;
	float 	fRec19[2];
	float 	fRec26[2];
	float 	fRec25[2];
	float 	fRec24[2];
	float 	fRec23[2];
	float 	fRec22[2];
	float 	fRec21[2];
	float 	fVec2[2];
	float 	fRec9[2];
	int 	IOTA;
	float 	fRec0[8192];
	float 	fConst7;
	float 	fRec27[3];
	float 	fVec3[4096];
	FAUSTFLOAT 	fslider3;
	float 	fRec28[2];
	FAUSTFLOAT 	fslider4;
	float 	fConst8;
	float 	fConst9;
	float 	fConst10;
	float 	fConst11;
	float 	fRec40[2];
	FAUSTFLOAT 	fslider5;
	float 	fConst12;
	float 	fConst13;
	float 	fConst14;
	float 	fConst15;
	float 	fConst16;
	float 	fRec39[2];
	float 	fVec4[8192];
	float 	fConst17;
	int 	iConst18;
	float 	fVec5[4096];
	int 	iConst19;
	float 	fVec6[2048];
	int 	iConst20;
	float 	fRec37[2];
	float 	fRec44[2];
	float 	fConst21;
	float 	fConst22;
	float 	fConst23;
	float 	fConst24;
	float 	fRec43[2];
	float 	fVec7[8192];
	float 	fConst25;
	int 	iConst26;
	float 	fVec8[1024];
	int 	iConst27;
	float 	fRec41[2];
	float 	fRec48[2];
	float 	fConst28;
	float 	fConst29;
	float 	fConst30;
	float 	fConst31;
	float 	fRec47[2];
	float 	fVec9[8192];
	float 	fConst32;
	int 	iConst33;
	float 	fVec10[2048];
	int 	iConst34;
	float 	fRec45[2];
	float 	fRec52[2];
	float 	fConst35;
	float 	fConst36;
	float 	fConst37;
	float 	fConst38;
	float 	fRec51[2];
	float 	fVec11[8192];
	float 	fConst39;
	int 	iConst40;
	float 	fVec12[1024];
	int 	iConst41;
	float 	fRec49[2];
	float 	fRec56[2];
	float 	fConst42;
	float 	fConst43;
	float 	fConst44;
	float 	fConst45;
	float 	fRec55[2];
	float 	fVec13[16384];
	float 	fConst46;
	int 	iConst47;
	FAUSTFLOAT 	fslider6;
	float 	fConst48;
	float 	fVec14[4096];
	float 	fVec15[2048];
	int 	iConst49;
	float 	fRec53[2];
	float 	fRec60[2];
	float 	fConst50;
	float 	fConst51;
	float 	fConst52;
	float 	fConst53;
	float 	fRec59[2];
	float 	fVec16[8192];
	float 	fConst54;
	int 	iConst55;
	float 	fVec17[2048];
	int 	iConst56;
	float 	fRec57[2];
	float 	fRec64[2];
	float 	fConst57;
	float 	fConst58;
	float 	fConst59;
	float 	fConst60;
	float 	fRec63[2];
	float 	fVec18[16384];
	float 	fConst61;
	int 	iConst62;
	float 	fVec19[2048];
	int 	iConst63;
	float 	fRec61[2];
	float 	fRec68[2];
	float 	fConst64;
	float 	fConst65;
	float 	fConst66;
	float 	fConst67;
	float 	fRec67[2];
	float 	fVec20[16384];
	float 	fConst68;
	int 	iConst69;
	float 	fVec21[1024];
	int 	iConst70;
	float 	fRec65[2];
	float 	fRec29[3];
	float 	fRec30[3];
	float 	fRec31[3];
	float 	fRec32[3];
	float 	fRec33[3];
	float 	fRec34[3];
	float 	fRec35[3];
	float 	fRec36[3];
  public:
	static void metadata(Meta* m) 	{ 
		m->declare("name", "Bass");
		m->declare("description", "Nonlinear WaveGuide Acoustic Bass");
		m->declare("author", "Romain Michon");
		m->declare("copyright", "Romain Michon (rmichon@ccrma.stanford.edu)");
		m->declare("version", "1.0");
		m->declare("licence", "STK-4.3");
		m->declare("instrument.lib/name", "Faust-STK Tools Library");
		m->declare("instrument.lib/author", "Romain Michon (rmichon@ccrma.stanford.edu)");
		m->declare("instrument.lib/copyright", "Romain Michon");
		m->declare("instrument.lib/version", "1.0");
		m->declare("instrument.lib/licence", "STK-4.3");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/version", "1.0");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/version", "1.29");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/version", "1.0");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("effect.lib/name", "Faust Audio Effect Library");
		m->declare("effect.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/copyright", "Julius O. Smith III");
		m->declare("effect.lib/version", "1.33");
		m->declare("effect.lib/license", "STK-4.3");
		m->declare("effect.lib/exciter_name", "Harmonic Exciter");
		m->declare("effect.lib/exciter_author", "Priyanka Shekar (pshekar@ccrma.stanford.edu)");
		m->declare("effect.lib/exciter_copyright", "Copyright (c) 2013 Priyanka Shekar");
		m->declare("effect.lib/exciter_version", "1.0");
		m->declare("effect.lib/exciter_license", "MIT License (MIT)");
	}

	virtual int getNumInputs() 	{ return 0; }
	virtual int getNumOutputs() 	{ return 2; }
	static void classInit(int samplingFreq) {
		SIG0 sig0;
		sig0.init(samplingFreq);
		sig0.fill(65536,ftbl0);
	}
	virtual void instanceInit(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fbutton0 = 0.0;
		for (int i=0; i<2; i++) fRec4[i] = 0;
		fslider0 = 0.15f;
		iConst0 = min(192000, max(1, fSamplingFreq));
		fConst1 = float(iConst0);
		fConst2 = (3.5f / fConst1);
		fentry0 = 1.0f;
		for (int i=0; i<2; i++) fRec3[i] = 0;
		for (int i=0; i<2; i++) iRec5[i] = 0;
		for (int i=0; i<2; i++) fVec0[i] = 0;
		fConst3 = expf((0 - (3.5e+02f / fConst1)));
		for (int i=0; i<2; i++) fRec6[i] = 0;
		for (int i=0; i<2; i++) fRec2[i] = 0;
		for (int i=0; i<2; i++) fRec1[i] = 0;
		for (int i=0; i<2; i++) iRec8[i] = 0;
		fConst4 = expf((0 - (1.4e+02f / fConst1)));
		for (int i=0; i<2; i++) fRec7[i] = 0;
		fentry1 = 1.2e+02f;
		fConst5 = expf((0 - (7e+02f / fConst1)));
		for (int i=0; i<2; i++) fRec10[i] = 0;
		for (int i=0; i<2; i++) fVec1[i] = 0;
		fslider1 = 0.0f;
		for (int i=0; i<2; i++) fRec11[i] = 0;
		fentry2 = 0.0f;
		for (int i=0; i<2; i++) fRec17[i] = 0;
		for (int i=0; i<2; i++) fRec16[i] = 0;
		for (int i=0; i<2; i++) fRec15[i] = 0;
		for (int i=0; i<2; i++) fRec14[i] = 0;
		for (int i=0; i<2; i++) fRec13[i] = 0;
		for (int i=0; i<2; i++) fRec12[i] = 0;
		fslider2 = 2.2e+02f;
		for (int i=0; i<2; i++) fRec20[i] = 0;
		fConst6 = (1.0f / fConst1);
		for (int i=0; i<2; i++) fRec19[i] = 0;
		for (int i=0; i<2; i++) fRec26[i] = 0;
		for (int i=0; i<2; i++) fRec25[i] = 0;
		for (int i=0; i<2; i++) fRec24[i] = 0;
		for (int i=0; i<2; i++) fRec23[i] = 0;
		for (int i=0; i<2; i++) fRec22[i] = 0;
		for (int i=0; i<2; i++) fRec21[i] = 0;
		for (int i=0; i<2; i++) fVec2[i] = 0;
		for (int i=0; i<2; i++) fRec9[i] = 0;
		IOTA = 0;
		for (int i=0; i<8192; i++) fRec0[i] = 0;
		fConst7 = (0 - (1.994f * cosf((678.5840131753953f / float(iConst0)))));
		for (int i=0; i<3; i++) fRec27[i] = 0;
		for (int i=0; i<4096; i++) fVec3[i] = 0;
		fslider3 = 0.137f;
		for (int i=0; i<2; i++) fRec28[i] = 0;
		fslider4 = 0.6f;
		fConst8 = (1.0f / tanf((628.3185307179587f / float(iConst0))));
		fConst9 = (1 + fConst8);
		fConst10 = (1.0f / fConst9);
		fConst11 = (0 - ((1 - fConst8) / fConst9));
		for (int i=0; i<2; i++) fRec40[i] = 0;
		fslider5 = 0.72f;
		fConst12 = floorf((0.5f + (0.174713f * iConst0)));
		fConst13 = ((0 - (6.907755278982138f * fConst12)) / float(iConst0));
		fConst14 = (0.5f * fConst13);
		fConst15 = (0.3333333333333333f * fConst13);
		fConst16 = cosf((37699.11184307752f / fConst1));
		for (int i=0; i<2; i++) fRec39[i] = 0;
		for (int i=0; i<8192; i++) fVec4[i] = 0;
		fConst17 = floorf((0.5f + (0.022904f * iConst0)));
		iConst18 = int((int((fConst12 - fConst17)) & 8191));
		for (int i=0; i<4096; i++) fVec5[i] = 0;
		iConst19 = int((int((0.02f * iConst0)) & 8191));
		for (int i=0; i<2048; i++) fVec6[i] = 0;
		iConst20 = int((int((fConst17 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec37[i] = 0;
		for (int i=0; i<2; i++) fRec44[i] = 0;
		fConst21 = floorf((0.5f + (0.153129f * iConst0)));
		fConst22 = ((0 - (6.907755278982138f * fConst21)) / float(iConst0));
		fConst23 = (0.5f * fConst22);
		fConst24 = (0.3333333333333333f * fConst22);
		for (int i=0; i<2; i++) fRec43[i] = 0;
		for (int i=0; i<8192; i++) fVec7[i] = 0;
		fConst25 = floorf((0.5f + (0.020346f * iConst0)));
		iConst26 = int((int((fConst21 - fConst25)) & 8191));
		for (int i=0; i<1024; i++) fVec8[i] = 0;
		iConst27 = int((int((fConst25 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec41[i] = 0;
		for (int i=0; i<2; i++) fRec48[i] = 0;
		fConst28 = floorf((0.5f + (0.127837f * iConst0)));
		fConst29 = ((0 - (6.907755278982138f * fConst28)) / float(iConst0));
		fConst30 = (0.5f * fConst29);
		fConst31 = (0.3333333333333333f * fConst29);
		for (int i=0; i<2; i++) fRec47[i] = 0;
		for (int i=0; i<8192; i++) fVec9[i] = 0;
		fConst32 = floorf((0.5f + (0.031604f * iConst0)));
		iConst33 = int((int((fConst28 - fConst32)) & 8191));
		for (int i=0; i<2048; i++) fVec10[i] = 0;
		iConst34 = int((int((fConst32 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec45[i] = 0;
		for (int i=0; i<2; i++) fRec52[i] = 0;
		fConst35 = floorf((0.5f + (0.125f * iConst0)));
		fConst36 = ((0 - (6.907755278982138f * fConst35)) / float(iConst0));
		fConst37 = (0.5f * fConst36);
		fConst38 = (0.3333333333333333f * fConst36);
		for (int i=0; i<2; i++) fRec51[i] = 0;
		for (int i=0; i<8192; i++) fVec11[i] = 0;
		fConst39 = floorf((0.5f + (0.013458f * iConst0)));
		iConst40 = int((int((fConst35 - fConst39)) & 8191));
		for (int i=0; i<1024; i++) fVec12[i] = 0;
		iConst41 = int((int((fConst39 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec49[i] = 0;
		for (int i=0; i<2; i++) fRec56[i] = 0;
		fConst42 = floorf((0.5f + (0.210389f * iConst0)));
		fConst43 = ((0 - (6.907755278982138f * fConst42)) / float(iConst0));
		fConst44 = (0.5f * fConst43);
		fConst45 = (0.3333333333333333f * fConst43);
		for (int i=0; i<2; i++) fRec55[i] = 0;
		for (int i=0; i<16384; i++) fVec13[i] = 0;
		fConst46 = floorf((0.5f + (0.024421f * iConst0)));
		iConst47 = int((int((fConst42 - fConst46)) & 16383));
		fslider6 = 0.5f;
		fConst48 = (0.5f * fConst1);
		for (int i=0; i<4096; i++) fVec14[i] = 0;
		for (int i=0; i<2048; i++) fVec15[i] = 0;
		iConst49 = int((int((fConst46 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec53[i] = 0;
		for (int i=0; i<2; i++) fRec60[i] = 0;
		fConst50 = floorf((0.5f + (0.192303f * iConst0)));
		fConst51 = ((0 - (6.907755278982138f * fConst50)) / float(iConst0));
		fConst52 = (0.5f * fConst51);
		fConst53 = (0.3333333333333333f * fConst51);
		for (int i=0; i<2; i++) fRec59[i] = 0;
		for (int i=0; i<8192; i++) fVec16[i] = 0;
		fConst54 = floorf((0.5f + (0.029291f * iConst0)));
		iConst55 = int((int((fConst50 - fConst54)) & 8191));
		for (int i=0; i<2048; i++) fVec17[i] = 0;
		iConst56 = int((int((fConst54 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec57[i] = 0;
		for (int i=0; i<2; i++) fRec64[i] = 0;
		fConst57 = floorf((0.5f + (0.256891f * iConst0)));
		fConst58 = ((0 - (6.907755278982138f * fConst57)) / float(iConst0));
		fConst59 = (0.5f * fConst58);
		fConst60 = (0.3333333333333333f * fConst58);
		for (int i=0; i<2; i++) fRec63[i] = 0;
		for (int i=0; i<16384; i++) fVec18[i] = 0;
		fConst61 = floorf((0.5f + (0.027333f * iConst0)));
		iConst62 = int((int((fConst57 - fConst61)) & 16383));
		for (int i=0; i<2048; i++) fVec19[i] = 0;
		iConst63 = int((int((fConst61 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec61[i] = 0;
		for (int i=0; i<2; i++) fRec68[i] = 0;
		fConst64 = floorf((0.5f + (0.219991f * iConst0)));
		fConst65 = ((0 - (6.907755278982138f * fConst64)) / float(iConst0));
		fConst66 = (0.5f * fConst65);
		fConst67 = (0.3333333333333333f * fConst65);
		for (int i=0; i<2; i++) fRec67[i] = 0;
		for (int i=0; i<16384; i++) fVec20[i] = 0;
		fConst68 = floorf((0.5f + (0.019123f * iConst0)));
		iConst69 = int((int((fConst64 - fConst68)) & 16383));
		for (int i=0; i<1024; i++) fVec21[i] = 0;
		iConst70 = int((int((fConst68 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec65[i] = 0;
		for (int i=0; i<3; i++) fRec29[i] = 0;
		for (int i=0; i<3; i++) fRec30[i] = 0;
		for (int i=0; i<3; i++) fRec31[i] = 0;
		for (int i=0; i<3; i++) fRec32[i] = 0;
		for (int i=0; i<3; i++) fRec33[i] = 0;
		for (int i=0; i<3; i++) fRec34[i] = 0;
		for (int i=0; i<3; i++) fRec35[i] = 0;
		for (int i=0; i<3; i++) fRec36[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void buildUserInterface(UI* interface) {
		interface->openVerticalBox("0x00");
		interface->openHorizontalBox("Basic_Parameters");
		interface->declare(&fentry1, "1", "");
		interface->declare(&fentry1, "tooltip", "Tone frequency");
		interface->declare(&fentry1, "unit", "Hz");
		interface->addNumEntry("freq", &fentry1, 1.2e+02f, 2e+01f, 2e+04f, 1.0f);
		interface->declare(&fentry0, "1", "");
		interface->declare(&fentry0, "tooltip", "Gain (value between 0 and 1)");
		interface->addNumEntry("gain", &fentry0, 1.0f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fbutton0, "1", "");
		interface->declare(&fbutton0, "tooltip", "noteOn = 1, noteOff = 0");
		interface->addButton("gate", &fbutton0);
		interface->closeBox();
		interface->openVerticalBox("Nonlinear_Filter_Parameters");
		interface->declare(&fslider2, "3", "");
		interface->declare(&fslider2, "tooltip", "Frequency of the sine wave for the modulation of theta (works if Modulation Type=3)");
		interface->declare(&fslider2, "unit", "Hz");
		interface->addHorizontalSlider("Modulation_Frequency", &fslider2, 2.2e+02f, 2e+01f, 1e+03f, 0.1f);
		interface->declare(&fentry2, "3", "");
		interface->declare(&fentry2, "tooltip", "0=theta is modulated by the incoming signal; 1=theta is modulated by the averaged incoming signal; 2=theta is modulated by the squared incoming signal; 3=theta is modulated by a sine wave of frequency freqMod; 4=theta is modulated by a sine wave of frequency freq;");
		interface->addNumEntry("Modulation_Type", &fentry2, 0.0f, 0.0f, 4.0f, 1.0f);
		interface->declare(&fslider1, "3", "");
		interface->declare(&fslider1, "tooltip", "Nonlinearity factor (value between 0 and 1)");
		interface->addHorizontalSlider("Nonlinearity", &fslider1, 0.0f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->openVerticalBox("Physical_Parameters");
		interface->declare(&fslider0, "2", "");
		interface->declare(&fslider0, "tooltip", "A value between 0 and 1");
		interface->addHorizontalSlider("Touch_Length", &fslider0, 0.15f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->openVerticalBox("Reverb");
		interface->addHorizontalSlider("reverbGain", &fslider3, 0.137f, 0.0f, 1.0f, 0.01f);
		interface->addHorizontalSlider("roomSize", &fslider5, 0.72f, 0.01f, 2.0f, 0.01f);
		interface->closeBox();
		interface->openVerticalBox("Spat");
		interface->addHorizontalSlider("pan angle", &fslider4, 0.6f, 0.0f, 1.0f, 0.01f);
		interface->addHorizontalSlider("spatial width", &fslider6, 0.5f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0 = float(fbutton0);
		int 	iSlow1 = (fSlow0 < 1);
		float 	fSlow2 = expf((0 - (fConst2 / float(fslider0))));
		int 	iSlow3 = (fSlow0 > 0);
		float 	fSlow4 = float(fentry0);
		int 	iSlow5 = (iSlow1 > 0);
		int 	iSlow6 = (iSlow1 < 1);
		float 	fSlow7 = float(fentry1);
		int 	iSlow8 = int(((17.31234049066756f * (logf(fSlow7) - 6.0867747269123065f)) + 69.5f));
		float 	fSlow9 = getValueBassLoopFiltera1(iSlow8);
		float 	fSlow10 = (fConst1 / fSlow7);
		float 	fSlow11 = (0.0010000000000000009f * float(fslider1));
		float 	fSlow12 = float(fentry2);
		float 	fSlow13 = (3.141592653589793f * (fSlow12 == 2));
		float 	fSlow14 = (1.5707963267948966f * (fSlow12 == 1));
		float 	fSlow15 = (3.141592653589793f * (fSlow12 == 0));
		int 	iSlow16 = (fSlow12 < 3);
		float 	fSlow17 = (0.0010000000000000009f * float(fslider2));
		int 	iSlow18 = (fSlow12 != 4);
		float 	fSlow19 = (fSlow7 * (fSlow12 == 4));
		int 	iSlow20 = (fSlow12 >= 3);
		float 	fSlow21 = getValueBassLoopFilterb1(iSlow8);
		float 	fSlow22 = getValueBassLoopFilterb0(iSlow8);
		float 	fSlow23 = (0.0010000000000000009f * float(fslider3));
		float 	fSlow24 = float(fslider4);
		float 	fSlow25 = (4 * (1.0f - fSlow24));
		float 	fSlow26 = float(fslider5);
		float 	fSlow27 = expf((fConst14 / fSlow26));
		float 	fSlow28 = ((expf((fConst15 / fSlow26)) / fSlow27) - 1);
		float 	fSlow29 = faustpower<2>(fSlow27);
		float 	fSlow30 = (1.0f - fSlow29);
		float 	fSlow31 = (1.0f - (fConst16 * fSlow29));
		float 	fSlow32 = (fSlow31 / fSlow30);
		float 	fSlow33 = sqrtf(max((float)0, ((faustpower<2>(fSlow31) / faustpower<2>(fSlow30)) - 1.0f)));
		float 	fSlow34 = (fSlow27 * ((1.0f + fSlow33) - fSlow32));
		float 	fSlow35 = (fSlow32 - fSlow33);
		float 	fSlow36 = expf((fConst23 / fSlow26));
		float 	fSlow37 = ((expf((fConst24 / fSlow26)) / fSlow36) - 1);
		float 	fSlow38 = faustpower<2>(fSlow36);
		float 	fSlow39 = (1.0f - fSlow38);
		float 	fSlow40 = (1.0f - (fConst16 * fSlow38));
		float 	fSlow41 = (fSlow40 / fSlow39);
		float 	fSlow42 = sqrtf(max((float)0, ((faustpower<2>(fSlow40) / faustpower<2>(fSlow39)) - 1.0f)));
		float 	fSlow43 = (fSlow36 * ((1.0f + fSlow42) - fSlow41));
		float 	fSlow44 = (fSlow41 - fSlow42);
		float 	fSlow45 = expf((fConst30 / fSlow26));
		float 	fSlow46 = ((expf((fConst31 / fSlow26)) / fSlow45) - 1);
		float 	fSlow47 = faustpower<2>(fSlow45);
		float 	fSlow48 = (1.0f - fSlow47);
		float 	fSlow49 = (1.0f - (fConst16 * fSlow47));
		float 	fSlow50 = (fSlow49 / fSlow48);
		float 	fSlow51 = sqrtf(max((float)0, ((faustpower<2>(fSlow49) / faustpower<2>(fSlow48)) - 1.0f)));
		float 	fSlow52 = (fSlow45 * ((1.0f + fSlow51) - fSlow50));
		float 	fSlow53 = (fSlow50 - fSlow51);
		float 	fSlow54 = expf((fConst37 / fSlow26));
		float 	fSlow55 = ((expf((fConst38 / fSlow26)) / fSlow54) - 1);
		float 	fSlow56 = faustpower<2>(fSlow54);
		float 	fSlow57 = (1.0f - fSlow56);
		float 	fSlow58 = (1.0f - (fConst16 * fSlow56));
		float 	fSlow59 = (fSlow58 / fSlow57);
		float 	fSlow60 = sqrtf(max((float)0, ((faustpower<2>(fSlow58) / faustpower<2>(fSlow57)) - 1.0f)));
		float 	fSlow61 = (fSlow54 * ((1.0f + fSlow60) - fSlow59));
		float 	fSlow62 = (fSlow59 - fSlow60);
		float 	fSlow63 = expf((fConst44 / fSlow26));
		float 	fSlow64 = ((expf((fConst45 / fSlow26)) / fSlow63) - 1);
		float 	fSlow65 = faustpower<2>(fSlow63);
		float 	fSlow66 = (1.0f - fSlow65);
		float 	fSlow67 = (1.0f - (fConst16 * fSlow65));
		float 	fSlow68 = (fSlow67 / fSlow66);
		float 	fSlow69 = sqrtf(max((float)0, ((faustpower<2>(fSlow67) / faustpower<2>(fSlow66)) - 1.0f)));
		float 	fSlow70 = (fSlow63 * ((1.0f + fSlow69) - fSlow68));
		float 	fSlow71 = (fSlow68 - fSlow69);
		int 	iSlow72 = int((int((fConst48 * (float(fslider6) / fSlow7))) & 4095));
		float 	fSlow73 = (4 * fSlow24);
		float 	fSlow74 = expf((fConst52 / fSlow26));
		float 	fSlow75 = ((expf((fConst53 / fSlow26)) / fSlow74) - 1);
		float 	fSlow76 = faustpower<2>(fSlow74);
		float 	fSlow77 = (1.0f - fSlow76);
		float 	fSlow78 = (1.0f - (fConst16 * fSlow76));
		float 	fSlow79 = (fSlow78 / fSlow77);
		float 	fSlow80 = sqrtf(max((float)0, ((faustpower<2>(fSlow78) / faustpower<2>(fSlow77)) - 1.0f)));
		float 	fSlow81 = (fSlow74 * ((1.0f + fSlow80) - fSlow79));
		float 	fSlow82 = (fSlow79 - fSlow80);
		float 	fSlow83 = expf((fConst59 / fSlow26));
		float 	fSlow84 = ((expf((fConst60 / fSlow26)) / fSlow83) - 1);
		float 	fSlow85 = faustpower<2>(fSlow83);
		float 	fSlow86 = (1.0f - fSlow85);
		float 	fSlow87 = (1.0f - (fConst16 * fSlow85));
		float 	fSlow88 = (fSlow87 / fSlow86);
		float 	fSlow89 = sqrtf(max((float)0, ((faustpower<2>(fSlow87) / faustpower<2>(fSlow86)) - 1.0f)));
		float 	fSlow90 = (fSlow83 * ((1.0f + fSlow89) - fSlow88));
		float 	fSlow91 = (fSlow88 - fSlow89);
		float 	fSlow92 = expf((fConst66 / fSlow26));
		float 	fSlow93 = ((expf((fConst67 / fSlow26)) / fSlow92) - 1);
		float 	fSlow94 = faustpower<2>(fSlow92);
		float 	fSlow95 = (1.0f - fSlow94);
		float 	fSlow96 = (1.0f - (fConst16 * fSlow94));
		float 	fSlow97 = (fSlow96 / fSlow95);
		float 	fSlow98 = sqrtf(max((float)0, ((faustpower<2>(fSlow96) / faustpower<2>(fSlow95)) - 1.0f)));
		float 	fSlow99 = (fSlow92 * ((1.0f + fSlow98) - fSlow97));
		float 	fSlow100 = (fSlow97 - fSlow98);
		FAUSTFLOAT* output0 = output[0];
		FAUSTFLOAT* output1 = output[1];
		for (int i=0; i<count; i++) {
			fRec4[0] = (1 + (fSlow0 * fRec4[1]));
			float fTemp0 = (fRec4[0] - 1);
			int iTemp1 = ((fTemp0 >= 2.0f) | iSlow1);
			int iTemp2 = ((fTemp0 < 2.0f) & iSlow3);
			float fTemp3 = (0.0301973834223185f * iTemp2);
			float fTemp4 = (fTemp3 + (fSlow2 * iTemp1));
			fRec3[0] = ((fRec3[1] * fTemp4) + (fSlow4 * (iTemp2 * (1 - fTemp4))));
			iRec5[0] = (12345 + (1103515245 * iRec5[1]));
			fVec0[0] = (iRec5[0] * fRec3[0]);
			int iTemp5 = (iTemp2 < 1);
			float fTemp6 = (fTemp3 + (fConst3 * iTemp1));
			fRec6[0] = ((fRec6[1] * fTemp6) + ((1 - fTemp6) * (0 - ((0.5f * iTemp2) + (0.985f * iTemp5)))));
			fRec2[0] = ((0.035f * ((4.656612875245797e-10f * (((1 + fRec6[0]) * iRec5[0]) * fRec3[0])) - (4.656612875245797e-10f * (fRec6[0] * fVec0[1])))) + (0.965f * fRec2[1]));
			fRec1[0] = ((0.035f * fRec2[0]) + (0.965f * fRec1[1]));
			iRec8[0] = (1 + (iSlow1 * iRec8[1]));
			int iTemp7 = (iRec8[0] - 1);
			int iTemp8 = ((iTemp7 < 2.0f) & iSlow5);
			float fTemp9 = ((0.0301973834223185f * iTemp8) + (fConst4 * ((iTemp7 >= 2.0f) | iSlow6)));
			fRec7[0] = ((fRec7[1] * fTemp9) + ((1 - fTemp9) * (iTemp8 + (0.9f * (iTemp8 < 1)))));
			float fTemp10 = (fTemp3 + (fConst5 * iTemp1));
			fRec10[0] = ((fRec10[1] * fTemp10) + (fSlow10 * (iTemp5 * (1 - fTemp10))));
			int iTemp11 = int(fRec10[0]);
			int iTemp12 = (1 + iTemp11);
			float fTemp13 = ((fRec0[(IOTA-int((1 + int((iTemp11 & 4095)))))&8191] * (iTemp12 - fRec10[0])) + ((fRec10[0] - iTemp11) * fRec0[(IOTA-int((1 + int((int(iTemp12) & 4095)))))&8191]));
			fVec1[0] = fTemp13;
			fRec11[0] = (fSlow11 + (0.999f * fRec11[1]));
			float fTemp14 = (fRec11[0] * (((fSlow15 * fVec1[0]) + (fSlow14 * (fVec1[0] + fVec1[1]))) + (fSlow13 * faustpower<2>(fVec1[0]))));
			float fTemp15 = cosf(fTemp14);
			float fTemp16 = sinf(fTemp14);
			float fTemp17 = (0 - fTemp16);
			float fTemp18 = ((fRec12[1] * fTemp17) + (fVec1[0] * fTemp15));
			float fTemp19 = ((fTemp17 * fRec13[1]) + (fTemp15 * fTemp18));
			float fTemp20 = ((fTemp17 * fRec14[1]) + (fTemp15 * fTemp19));
			float fTemp21 = ((fTemp17 * fRec15[1]) + (fTemp15 * fTemp20));
			float fTemp22 = ((fTemp17 * fRec16[1]) + (fTemp15 * fTemp21));
			fRec17[0] = ((fTemp17 * fRec17[1]) + (fTemp15 * fTemp22));
			fRec16[0] = ((fTemp16 * fTemp22) + (fTemp15 * fRec17[1]));
			fRec15[0] = ((fTemp16 * fTemp21) + (fTemp15 * fRec16[1]));
			fRec14[0] = ((fTemp16 * fTemp20) + (fTemp15 * fRec15[1]));
			fRec13[0] = ((fTemp16 * fTemp19) + (fTemp15 * fRec14[1]));
			fRec12[0] = ((fTemp16 * fTemp18) + (fTemp15 * fRec13[1]));
			fRec20[0] = (fSlow17 + (0.999f * fRec20[1]));
			float fTemp23 = (fRec19[1] + (fConst6 * (fSlow19 + (iSlow18 * fRec20[0]))));
			fRec19[0] = (fTemp23 - floorf(fTemp23));
			float fTemp24 = (3.141592653589793f * (fRec11[0] * ftbl0[int((65536.0f * fRec19[0]))]));
			float fTemp25 = cosf(fTemp24);
			float fTemp26 = sinf(fTemp24);
			float fTemp27 = (0 - fTemp26);
			float fTemp28 = ((fRec21[1] * fTemp27) + (fVec1[0] * fTemp25));
			float fTemp29 = ((fTemp27 * fRec22[1]) + (fTemp25 * fTemp28));
			float fTemp30 = ((fTemp27 * fRec23[1]) + (fTemp25 * fTemp29));
			float fTemp31 = ((fTemp27 * fRec24[1]) + (fTemp25 * fTemp30));
			float fTemp32 = ((fTemp27 * fRec25[1]) + (fTemp25 * fTemp31));
			fRec26[0] = ((fTemp27 * fRec26[1]) + (fTemp25 * fTemp32));
			fRec25[0] = ((fTemp26 * fTemp32) + (fTemp25 * fRec26[1]));
			fRec24[0] = ((fTemp26 * fTemp31) + (fTemp25 * fRec25[1]));
			fRec23[0] = ((fTemp26 * fTemp30) + (fTemp25 * fRec24[1]));
			fRec22[0] = ((fTemp26 * fTemp29) + (fTemp25 * fRec23[1]));
			fRec21[0] = ((fTemp26 * fTemp28) + (fTemp25 * fRec22[1]));
			float fTemp33 = ((iSlow20 * ((fVec1[0] * fTemp26) + (fRec21[1] * fTemp25))) + (iSlow16 * ((fRec11[0] * ((fVec1[0] * fTemp16) + (fRec12[1] * fTemp15))) + ((1 - fRec11[0]) * fVec1[0]))));
			fVec2[0] = fTemp33;
			fRec9[0] = (((fSlow22 * fVec2[0]) + (fSlow21 * fVec2[1])) - (fSlow9 * fRec9[1]));
			fRec0[IOTA&8191] = ((fRec9[0] * (fSlow0 + (iSlow1 * fRec7[0]))) + fRec1[0]);
			float fTemp34 = fRec0[(IOTA-0)&8191];
			fRec27[0] = (fTemp34 - ((fConst7 * fRec27[1]) + (0.994009f * fRec27[2])));
			float fTemp35 = ((1.5f * ((0.0029954999999999843f * fRec27[0]) - (0.0029954999999999843f * fRec27[2]))) + (0.5f * fTemp34));
			fVec3[IOTA&4095] = fTemp35;
			fRec28[0] = ((0.999f * fRec28[1]) + fSlow23);
			float fTemp36 = (1 - fRec28[0]);
			fRec40[0] = ((fConst11 * fRec40[1]) + (fConst10 * (fRec33[1] + fRec33[2])));
			fRec39[0] = ((fSlow35 * fRec39[1]) + (fSlow34 * (fRec33[1] + (fSlow28 * fRec40[0]))));
			fVec4[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec39[0]));
			fVec5[IOTA&4095] = (fSlow25 * (fRec28[0] * fVec3[IOTA&4095]));
			float fTemp37 = (0.3f * fVec5[(IOTA-iConst19)&4095]);
			float fTemp38 = ((fTemp37 + fVec4[(IOTA-iConst18)&8191]) - (0.6f * fRec37[1]));
			fVec6[IOTA&2047] = fTemp38;
			fRec37[0] = fVec6[(IOTA-iConst20)&2047];
			float 	fRec38 = (0.6f * fVec6[IOTA&2047]);
			fRec44[0] = ((fConst11 * fRec44[1]) + (fConst10 * (fRec29[1] + fRec29[2])));
			fRec43[0] = ((fSlow44 * fRec43[1]) + (fSlow43 * (fRec29[1] + (fSlow37 * fRec44[0]))));
			fVec7[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec43[0]));
			float fTemp39 = ((fVec7[(IOTA-iConst26)&8191] + fTemp37) - (0.6f * fRec41[1]));
			fVec8[IOTA&1023] = fTemp39;
			fRec41[0] = fVec8[(IOTA-iConst27)&1023];
			float 	fRec42 = (0.6f * fVec8[IOTA&1023]);
			float fTemp40 = (fRec42 + fRec38);
			fRec48[0] = ((fConst11 * fRec48[1]) + (fConst10 * (fRec31[1] + fRec31[2])));
			fRec47[0] = ((fSlow53 * fRec47[1]) + (fSlow52 * (fRec31[1] + (fSlow46 * fRec48[0]))));
			fVec9[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec47[0]));
			float fTemp41 = (fVec9[(IOTA-iConst33)&8191] - (fTemp37 + (0.6f * fRec45[1])));
			fVec10[IOTA&2047] = fTemp41;
			fRec45[0] = fVec10[(IOTA-iConst34)&2047];
			float 	fRec46 = (0.6f * fVec10[IOTA&2047]);
			fRec52[0] = ((fConst11 * fRec52[1]) + (fConst10 * (fRec35[1] + fRec35[2])));
			fRec51[0] = ((fSlow62 * fRec51[1]) + (fSlow61 * (fRec35[1] + (fSlow55 * fRec52[0]))));
			fVec11[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec51[0]));
			float fTemp42 = (fVec11[(IOTA-iConst40)&8191] - (fTemp37 + (0.6f * fRec49[1])));
			fVec12[IOTA&1023] = fTemp42;
			fRec49[0] = fVec12[(IOTA-iConst41)&1023];
			float 	fRec50 = (0.6f * fVec12[IOTA&1023]);
			float fTemp43 = (fRec50 + (fRec46 + fTemp40));
			fRec56[0] = ((fConst11 * fRec56[1]) + (fConst10 * (fRec30[1] + fRec30[2])));
			fRec55[0] = ((fSlow71 * fRec55[1]) + (fSlow70 * (fRec30[1] + (fSlow64 * fRec56[0]))));
			fVec13[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec55[0]));
			float fTemp44 = fVec3[(IOTA-iSlow72)&4095];
			fVec14[IOTA&4095] = (fSlow73 * (fRec28[0] * fTemp44));
			float fTemp45 = (0.3f * fVec14[(IOTA-iConst19)&4095]);
			float fTemp46 = (fTemp45 + ((0.6f * fRec53[1]) + fVec13[(IOTA-iConst47)&16383]));
			fVec15[IOTA&2047] = fTemp46;
			fRec53[0] = fVec15[(IOTA-iConst49)&2047];
			float 	fRec54 = (0 - (0.6f * fVec15[IOTA&2047]));
			fRec60[0] = ((fConst11 * fRec60[1]) + (fConst10 * (fRec34[1] + fRec34[2])));
			fRec59[0] = ((fSlow82 * fRec59[1]) + (fSlow81 * (fRec34[1] + (fSlow75 * fRec60[0]))));
			fVec16[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec59[0]));
			float fTemp47 = (fVec16[(IOTA-iConst55)&8191] + (fTemp45 + (0.6f * fRec57[1])));
			fVec17[IOTA&2047] = fTemp47;
			fRec57[0] = fVec17[(IOTA-iConst56)&2047];
			float 	fRec58 = (0 - (0.6f * fVec17[IOTA&2047]));
			fRec64[0] = ((fConst11 * fRec64[1]) + (fConst10 * (fRec32[1] + fRec32[2])));
			fRec63[0] = ((fSlow91 * fRec63[1]) + (fSlow90 * (fRec32[1] + (fSlow84 * fRec64[0]))));
			fVec18[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec63[0]));
			float fTemp48 = (((0.6f * fRec61[1]) + fVec18[(IOTA-iConst62)&16383]) - fTemp45);
			fVec19[IOTA&2047] = fTemp48;
			fRec61[0] = fVec19[(IOTA-iConst63)&2047];
			float 	fRec62 = (0 - (0.6f * fVec19[IOTA&2047]));
			fRec68[0] = ((fConst11 * fRec68[1]) + (fConst10 * (fRec36[1] + fRec36[2])));
			fRec67[0] = ((fSlow100 * fRec67[1]) + (fSlow99 * (fRec36[1] + (fSlow93 * fRec68[0]))));
			fVec20[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec67[0]));
			float fTemp49 = (((0.6f * fRec65[1]) + fVec20[(IOTA-iConst69)&16383]) - fTemp45);
			fVec21[IOTA&1023] = fTemp49;
			fRec65[0] = fVec21[(IOTA-iConst70)&1023];
			float 	fRec66 = (0 - (0.6f * fVec21[IOTA&1023]));
			fRec29[0] = (fRec65[1] + (fRec61[1] + (fRec57[1] + (fRec53[1] + (fRec49[1] + (fRec45[1] + (fRec37[1] + (fRec41[1] + (fRec66 + (fRec62 + (fRec58 + (fRec54 + fTemp43))))))))))));
			fRec30[0] = (0 - ((fRec65[1] + (fRec61[1] + (fRec57[1] + (fRec53[1] + (fRec66 + (fRec62 + (fRec54 + fRec58))))))) - (fRec49[1] + (fRec45[1] + (fRec37[1] + (fRec41[1] + fTemp43))))));
			float fTemp50 = (fRec46 + fRec50);
			fRec31[0] = (0 - ((fRec65[1] + (fRec61[1] + (fRec49[1] + (fRec45[1] + (fRec66 + (fRec62 + fTemp50)))))) - (fRec57[1] + (fRec53[1] + (fRec37[1] + (fRec41[1] + (fRec58 + (fRec54 + fTemp40))))))));
			fRec32[0] = (0 - ((fRec57[1] + (fRec53[1] + (fRec49[1] + (fRec45[1] + (fRec58 + (fRec54 + fTemp50)))))) - (fRec65[1] + (fRec61[1] + (fRec37[1] + (fRec41[1] + (fRec66 + (fRec62 + fTemp40))))))));
			float fTemp51 = (fRec42 + fRec46);
			float fTemp52 = (fRec38 + fRec50);
			fRec33[0] = (0 - ((fRec65[1] + (fRec57[1] + (fRec49[1] + (fRec37[1] + (fRec66 + (fRec58 + fTemp52)))))) - (fRec61[1] + (fRec53[1] + (fRec45[1] + (fRec41[1] + (fRec62 + (fRec54 + fTemp51))))))));
			fRec34[0] = (0 - ((fRec61[1] + (fRec53[1] + (fRec49[1] + (fRec37[1] + (fRec62 + (fRec54 + fTemp52)))))) - (fRec65[1] + (fRec57[1] + (fRec45[1] + (fRec41[1] + (fRec66 + (fRec58 + fTemp51))))))));
			float fTemp53 = (fRec42 + fRec50);
			float fTemp54 = (fRec38 + fRec46);
			fRec35[0] = (0 - ((fRec61[1] + (fRec57[1] + (fRec45[1] + (fRec37[1] + (fRec62 + (fRec58 + fTemp54)))))) - (fRec65[1] + (fRec53[1] + (fRec49[1] + (fRec41[1] + (fRec66 + (fRec54 + fTemp53))))))));
			fRec36[0] = (0 - ((fRec65[1] + (fRec53[1] + (fRec45[1] + (fRec37[1] + (fRec66 + (fRec54 + fTemp54)))))) - (fRec61[1] + (fRec57[1] + (fRec49[1] + (fRec41[1] + (fRec62 + (fRec58 + fTemp53))))))));
			output0[i] = (FAUSTFLOAT)((0.37f * (fRec30[0] + fRec31[0])) + (fSlow25 * (fTemp36 * fVec3[IOTA&4095])));
			output1[i] = (FAUSTFLOAT)((0.37f * (fRec30[0] - fRec31[0])) + (fSlow73 * (fTemp36 * fTemp44)));
			// post processing
			fRec36[2] = fRec36[1]; fRec36[1] = fRec36[0];
			fRec35[2] = fRec35[1]; fRec35[1] = fRec35[0];
			fRec34[2] = fRec34[1]; fRec34[1] = fRec34[0];
			fRec33[2] = fRec33[1]; fRec33[1] = fRec33[0];
			fRec32[2] = fRec32[1]; fRec32[1] = fRec32[0];
			fRec31[2] = fRec31[1]; fRec31[1] = fRec31[0];
			fRec30[2] = fRec30[1]; fRec30[1] = fRec30[0];
			fRec29[2] = fRec29[1]; fRec29[1] = fRec29[0];
			fRec65[1] = fRec65[0];
			fRec67[1] = fRec67[0];
			fRec68[1] = fRec68[0];
			fRec61[1] = fRec61[0];
			fRec63[1] = fRec63[0];
			fRec64[1] = fRec64[0];
			fRec57[1] = fRec57[0];
			fRec59[1] = fRec59[0];
			fRec60[1] = fRec60[0];
			fRec53[1] = fRec53[0];
			fRec55[1] = fRec55[0];
			fRec56[1] = fRec56[0];
			fRec49[1] = fRec49[0];
			fRec51[1] = fRec51[0];
			fRec52[1] = fRec52[0];
			fRec45[1] = fRec45[0];
			fRec47[1] = fRec47[0];
			fRec48[1] = fRec48[0];
			fRec41[1] = fRec41[0];
			fRec43[1] = fRec43[0];
			fRec44[1] = fRec44[0];
			fRec37[1] = fRec37[0];
			fRec39[1] = fRec39[0];
			fRec40[1] = fRec40[0];
			fRec28[1] = fRec28[0];
			fRec27[2] = fRec27[1]; fRec27[1] = fRec27[0];
			IOTA = IOTA+1;
			fRec9[1] = fRec9[0];
			fVec2[1] = fVec2[0];
			fRec21[1] = fRec21[0];
			fRec22[1] = fRec22[0];
			fRec23[1] = fRec23[0];
			fRec24[1] = fRec24[0];
			fRec25[1] = fRec25[0];
			fRec26[1] = fRec26[0];
			fRec19[1] = fRec19[0];
			fRec20[1] = fRec20[0];
			fRec12[1] = fRec12[0];
			fRec13[1] = fRec13[0];
			fRec14[1] = fRec14[0];
			fRec15[1] = fRec15[0];
			fRec16[1] = fRec16[0];
			fRec17[1] = fRec17[0];
			fRec11[1] = fRec11[0];
			fVec1[1] = fVec1[0];
			fRec10[1] = fRec10[0];
			fRec7[1] = fRec7[0];
			iRec8[1] = iRec8[0];
			fRec1[1] = fRec1[0];
			fRec2[1] = fRec2[0];
			fRec6[1] = fRec6[0];
			fVec0[1] = fVec0[0];
			iRec5[1] = iRec5[0];
			fRec3[1] = fRec3[0];
			fRec4[1] = fRec4[0];
		}
	}
};


float 	mydsp::ftbl0[65536];
