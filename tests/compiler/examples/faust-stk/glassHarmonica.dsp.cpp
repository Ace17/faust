//-----------------------------------------------------
// name: "Glass Harmonica"
// author: "Romain Michon"
// copyright: "Romain Michon (rmichon@ccrma.stanford.edu)"
// version: "1.0"
//
// Code generated with Faust 0.9.70 (http://faust.grame.fr)
//-----------------------------------------------------
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif  

typedef long double quad;
/* link with  */
#include <math.h>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline float faustpower(float x)          { return powf(x,N); } 
template <int N> inline double faustpower(double x)        { return pow(x,N); }
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <>   inline int faustpower<0>(int x)            { return 1; }
template <>   inline int faustpower<1>(int x)            { return x; }
#endif

#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	class SIG0 {
	  private:
		int 	fSamplingFreq;
		int 	iRec27[2];
	  public:
		int getNumInputs() 	{ return 0; }
		int getNumOutputs() 	{ return 1; }
		void init(int samplingFreq) {
			fSamplingFreq = samplingFreq;
			for (int i=0; i<2; i++) iRec27[i] = 0;
		}
		void fill (int count, float output[]) {
			for (int i=0; i<count; i++) {
				iRec27[0] = (1 + iRec27[1]);
				output[i] = sinf((9.587379924285257e-05f * float((iRec27[0] - 1))));
				// post processing
				iRec27[1] = iRec27[0];
			}
		}
	};


	FAUSTFLOAT 	fentry0;
	FAUSTFLOAT 	fentry1;
	FAUSTFLOAT 	fbutton0;
	int 	iRec8[2];
	int 	iConst0;
	float 	fConst1;
	float 	fConst2;
	float 	fConst3;
	float 	fRec9[2];
	FAUSTFLOAT 	fslider0;
	FAUSTFLOAT 	fslider1;
	FAUSTFLOAT 	fslider2;
	int 	IOTA;
	float 	fVec0[4096];
	FAUSTFLOAT 	fentry2;
	float 	fConst4;
	float 	fConst5;
	float 	fConst6;
	float 	fConst7;
	float 	fRec7[3];
	float 	fConst8;
	float 	fConst9;
	float 	fConst10;
	float 	fRec6[2];
	float 	fRec0[2];
	float 	fVec1[4096];
	float 	fConst11;
	float 	fConst12;
	float 	fRec11[3];
	float 	fRec10[2];
	float 	fRec1[2];
	float 	fVec2[4096];
	float 	fConst13;
	float 	fConst14;
	float 	fRec13[3];
	float 	fRec12[2];
	float 	fRec2[2];
	float 	fVec3[2048];
	float 	fConst15;
	float 	fConst16;
	float 	fRec15[3];
	float 	fRec14[2];
	float 	fRec3[2];
	float 	fVec4[1024];
	float 	fConst17;
	float 	fConst18;
	float 	fRec17[3];
	float 	fRec16[2];
	float 	fRec4[2];
	float 	fRec19[3];
	float 	fRec5[2];
	float 	fVec5[2];
	FAUSTFLOAT 	fslider3;
	float 	fRec20[2];
	FAUSTFLOAT 	fentry3;
	float 	fRec26[2];
	float 	fRec25[2];
	float 	fRec24[2];
	float 	fRec23[2];
	float 	fRec22[2];
	float 	fRec21[2];
	static float 	ftbl0[65536];
	FAUSTFLOAT 	fslider4;
	float 	fRec29[2];
	float 	fConst19;
	float 	fConst20;
	float 	fRec28[2];
	float 	fRec35[2];
	float 	fRec34[2];
	float 	fRec33[2];
	float 	fRec32[2];
	float 	fRec31[2];
	float 	fRec30[2];
	float 	fVec6[4096];
	FAUSTFLOAT 	fslider5;
	float 	fRec36[2];
	FAUSTFLOAT 	fslider6;
	float 	fConst21;
	float 	fConst22;
	float 	fConst23;
	float 	fConst24;
	float 	fRec48[2];
	FAUSTFLOAT 	fslider7;
	float 	fConst25;
	float 	fConst26;
	float 	fConst27;
	float 	fConst28;
	float 	fConst29;
	float 	fRec47[2];
	float 	fVec7[8192];
	float 	fConst30;
	int 	iConst31;
	float 	fVec8[4096];
	int 	iConst32;
	float 	fVec9[2048];
	int 	iConst33;
	float 	fRec45[2];
	float 	fRec52[2];
	float 	fConst34;
	float 	fConst35;
	float 	fConst36;
	float 	fConst37;
	float 	fRec51[2];
	float 	fVec10[8192];
	float 	fConst38;
	int 	iConst39;
	float 	fVec11[1024];
	int 	iConst40;
	float 	fRec49[2];
	float 	fRec56[2];
	float 	fConst41;
	float 	fConst42;
	float 	fConst43;
	float 	fConst44;
	float 	fRec55[2];
	float 	fVec12[8192];
	float 	fConst45;
	int 	iConst46;
	float 	fVec13[2048];
	int 	iConst47;
	float 	fRec53[2];
	float 	fRec60[2];
	float 	fConst48;
	float 	fConst49;
	float 	fConst50;
	float 	fConst51;
	float 	fRec59[2];
	float 	fVec14[8192];
	float 	fConst52;
	int 	iConst53;
	float 	fVec15[1024];
	int 	iConst54;
	float 	fRec57[2];
	float 	fRec64[2];
	float 	fConst55;
	float 	fConst56;
	float 	fConst57;
	float 	fConst58;
	float 	fRec63[2];
	float 	fVec16[16384];
	float 	fConst59;
	int 	iConst60;
	FAUSTFLOAT 	fslider8;
	float 	fConst61;
	float 	fVec17[4096];
	float 	fVec18[2048];
	int 	iConst62;
	float 	fRec61[2];
	float 	fRec68[2];
	float 	fConst63;
	float 	fConst64;
	float 	fConst65;
	float 	fConst66;
	float 	fRec67[2];
	float 	fVec19[8192];
	float 	fConst67;
	int 	iConst68;
	float 	fVec20[2048];
	int 	iConst69;
	float 	fRec65[2];
	float 	fRec72[2];
	float 	fConst70;
	float 	fConst71;
	float 	fConst72;
	float 	fConst73;
	float 	fRec71[2];
	float 	fVec21[16384];
	float 	fConst74;
	int 	iConst75;
	float 	fVec22[2048];
	int 	iConst76;
	float 	fRec69[2];
	float 	fRec76[2];
	float 	fConst77;
	float 	fConst78;
	float 	fConst79;
	float 	fConst80;
	float 	fRec75[2];
	float 	fVec23[16384];
	float 	fConst81;
	int 	iConst82;
	float 	fVec24[1024];
	int 	iConst83;
	float 	fRec73[2];
	float 	fRec37[3];
	float 	fRec38[3];
	float 	fRec39[3];
	float 	fRec40[3];
	float 	fRec41[3];
	float 	fRec42[3];
	float 	fRec43[3];
	float 	fRec44[3];
  public:
	static void metadata(Meta* m) 	{ 
		m->declare("name", "Glass Harmonica");
		m->declare("description", "Nonlinear Banded Waveguide Modeled Glass Harmonica");
		m->declare("author", "Romain Michon");
		m->declare("copyright", "Romain Michon (rmichon@ccrma.stanford.edu)");
		m->declare("version", "1.0");
		m->declare("licence", "STK-4.3");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/version", "1.0");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/version", "1.0");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("instrument.lib/name", "Faust-STK Tools Library");
		m->declare("instrument.lib/author", "Romain Michon (rmichon@ccrma.stanford.edu)");
		m->declare("instrument.lib/copyright", "Romain Michon");
		m->declare("instrument.lib/version", "1.0");
		m->declare("instrument.lib/licence", "STK-4.3");
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/version", "1.29");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("effect.lib/name", "Faust Audio Effect Library");
		m->declare("effect.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/copyright", "Julius O. Smith III");
		m->declare("effect.lib/version", "1.33");
		m->declare("effect.lib/license", "STK-4.3");
		m->declare("effect.lib/exciter_name", "Harmonic Exciter");
		m->declare("effect.lib/exciter_author", "Priyanka Shekar (pshekar@ccrma.stanford.edu)");
		m->declare("effect.lib/exciter_copyright", "Copyright (c) 2013 Priyanka Shekar");
		m->declare("effect.lib/exciter_version", "1.0");
		m->declare("effect.lib/exciter_license", "MIT License (MIT)");
	}

	virtual int getNumInputs() 	{ return 0; }
	virtual int getNumOutputs() 	{ return 2; }
	static void classInit(int samplingFreq) {
		SIG0 sig0;
		sig0.init(samplingFreq);
		sig0.fill(65536,ftbl0);
	}
	virtual void instanceInit(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fentry0 = 0.8f;
		fentry1 = 0.0f;
		fbutton0 = 0.0;
		for (int i=0; i<2; i++) iRec8[i] = 0;
		iConst0 = min(192000, max(1, fSamplingFreq));
		fConst1 = (1 - (1.0f / powf(9e+04f,(1e+02f / float(iConst0)))));
		fConst2 = (1 - powf(9e+01f,(2e+02f / float(iConst0))));
		fConst3 = (5e+01f / float(iConst0));
		for (int i=0; i<2; i++) fRec9[i] = 0;
		fslider0 = 1.0f;
		fslider1 = 0.0f;
		fslider2 = 0.2f;
		IOTA = 0;
		for (int i=0; i<4096; i++) fVec0[i] = 0;
		fentry2 = 4.4e+02f;
		fConst4 = (1 - (100.53096491487338f / float(iConst0)));
		fConst5 = faustpower<2>(fConst4);
		fConst6 = (6.283185307179586f / float(iConst0));
		fConst7 = (0 - (2 * fConst4));
		for (int i=0; i<3; i++) fRec7[i] = 0;
		fConst8 = (0.5f * fConst5);
		fConst9 = (fConst8 - 0.5f);
		fConst10 = (0.5f - fConst8);
		for (int i=0; i<2; i++) fRec6[i] = 0;
		for (int i=0; i<2; i++) fRec0[i] = 0;
		for (int i=0; i<4096; i++) fVec1[i] = 0;
		fConst11 = (0.4310344827586207f * iConst0);
		fConst12 = (14.57698991265664f / float(iConst0));
		for (int i=0; i<3; i++) fRec11[i] = 0;
		for (int i=0; i<2; i++) fRec10[i] = 0;
		for (int i=0; i<2; i++) fRec1[i] = 0;
		for (int i=0; i<4096; i++) fVec2[i] = 0;
		fConst13 = (0.23529411764705882f * iConst0);
		fConst14 = (26.703537555513243f / float(iConst0));
		for (int i=0; i<3; i++) fRec13[i] = 0;
		for (int i=0; i<2; i++) fRec12[i] = 0;
		for (int i=0; i<2; i++) fRec2[i] = 0;
		for (int i=0; i<2048; i++) fVec3[i] = 0;
		fConst15 = (0.15082956259426847f * iConst0);
		fConst16 = (41.65751858660066f / float(iConst0));
		for (int i=0; i<3; i++) fRec15[i] = 0;
		for (int i=0; i<2; i++) fRec14[i] = 0;
		for (int i=0; i<2; i++) fRec3[i] = 0;
		for (int i=0; i<1024; i++) fVec4[i] = 0;
		fConst17 = (0.10660980810234541f * iConst0);
		fConst18 = (58.93627818134453f / float(iConst0));
		for (int i=0; i<3; i++) fRec17[i] = 0;
		for (int i=0; i<2; i++) fRec16[i] = 0;
		for (int i=0; i<2; i++) fRec4[i] = 0;
		for (int i=0; i<3; i++) fRec19[i] = 0;
		for (int i=0; i<2; i++) fRec5[i] = 0;
		for (int i=0; i<2; i++) fVec5[i] = 0;
		fslider3 = 0.0f;
		for (int i=0; i<2; i++) fRec20[i] = 0;
		fentry3 = 0.0f;
		for (int i=0; i<2; i++) fRec26[i] = 0;
		for (int i=0; i<2; i++) fRec25[i] = 0;
		for (int i=0; i<2; i++) fRec24[i] = 0;
		for (int i=0; i<2; i++) fRec23[i] = 0;
		for (int i=0; i<2; i++) fRec22[i] = 0;
		for (int i=0; i<2; i++) fRec21[i] = 0;
		fslider4 = 2.2e+02f;
		for (int i=0; i<2; i++) fRec29[i] = 0;
		fConst19 = float(iConst0);
		fConst20 = (1.0f / fConst19);
		for (int i=0; i<2; i++) fRec28[i] = 0;
		for (int i=0; i<2; i++) fRec35[i] = 0;
		for (int i=0; i<2; i++) fRec34[i] = 0;
		for (int i=0; i<2; i++) fRec33[i] = 0;
		for (int i=0; i<2; i++) fRec32[i] = 0;
		for (int i=0; i<2; i++) fRec31[i] = 0;
		for (int i=0; i<2; i++) fRec30[i] = 0;
		for (int i=0; i<4096; i++) fVec6[i] = 0;
		fslider5 = 0.137f;
		for (int i=0; i<2; i++) fRec36[i] = 0;
		fslider6 = 0.6f;
		fConst21 = (1.0f / tanf((628.3185307179587f / float(iConst0))));
		fConst22 = (1 + fConst21);
		fConst23 = (1.0f / fConst22);
		fConst24 = (0 - ((1 - fConst21) / fConst22));
		for (int i=0; i<2; i++) fRec48[i] = 0;
		fslider7 = 0.72f;
		fConst25 = floorf((0.5f + (0.174713f * iConst0)));
		fConst26 = ((0 - (6.907755278982138f * fConst25)) / float(iConst0));
		fConst27 = (0.5f * fConst26);
		fConst28 = (0.3333333333333333f * fConst26);
		fConst29 = cosf((37699.11184307752f / fConst19));
		for (int i=0; i<2; i++) fRec47[i] = 0;
		for (int i=0; i<8192; i++) fVec7[i] = 0;
		fConst30 = floorf((0.5f + (0.022904f * iConst0)));
		iConst31 = int((int((fConst25 - fConst30)) & 8191));
		for (int i=0; i<4096; i++) fVec8[i] = 0;
		iConst32 = int((int((0.02f * iConst0)) & 8191));
		for (int i=0; i<2048; i++) fVec9[i] = 0;
		iConst33 = int((int((fConst30 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec45[i] = 0;
		for (int i=0; i<2; i++) fRec52[i] = 0;
		fConst34 = floorf((0.5f + (0.153129f * iConst0)));
		fConst35 = ((0 - (6.907755278982138f * fConst34)) / float(iConst0));
		fConst36 = (0.5f * fConst35);
		fConst37 = (0.3333333333333333f * fConst35);
		for (int i=0; i<2; i++) fRec51[i] = 0;
		for (int i=0; i<8192; i++) fVec10[i] = 0;
		fConst38 = floorf((0.5f + (0.020346f * iConst0)));
		iConst39 = int((int((fConst34 - fConst38)) & 8191));
		for (int i=0; i<1024; i++) fVec11[i] = 0;
		iConst40 = int((int((fConst38 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec49[i] = 0;
		for (int i=0; i<2; i++) fRec56[i] = 0;
		fConst41 = floorf((0.5f + (0.127837f * iConst0)));
		fConst42 = ((0 - (6.907755278982138f * fConst41)) / float(iConst0));
		fConst43 = (0.5f * fConst42);
		fConst44 = (0.3333333333333333f * fConst42);
		for (int i=0; i<2; i++) fRec55[i] = 0;
		for (int i=0; i<8192; i++) fVec12[i] = 0;
		fConst45 = floorf((0.5f + (0.031604f * iConst0)));
		iConst46 = int((int((fConst41 - fConst45)) & 8191));
		for (int i=0; i<2048; i++) fVec13[i] = 0;
		iConst47 = int((int((fConst45 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec53[i] = 0;
		for (int i=0; i<2; i++) fRec60[i] = 0;
		fConst48 = floorf((0.5f + (0.125f * iConst0)));
		fConst49 = ((0 - (6.907755278982138f * fConst48)) / float(iConst0));
		fConst50 = (0.5f * fConst49);
		fConst51 = (0.3333333333333333f * fConst49);
		for (int i=0; i<2; i++) fRec59[i] = 0;
		for (int i=0; i<8192; i++) fVec14[i] = 0;
		fConst52 = floorf((0.5f + (0.013458f * iConst0)));
		iConst53 = int((int((fConst48 - fConst52)) & 8191));
		for (int i=0; i<1024; i++) fVec15[i] = 0;
		iConst54 = int((int((fConst52 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec57[i] = 0;
		for (int i=0; i<2; i++) fRec64[i] = 0;
		fConst55 = floorf((0.5f + (0.210389f * iConst0)));
		fConst56 = ((0 - (6.907755278982138f * fConst55)) / float(iConst0));
		fConst57 = (0.5f * fConst56);
		fConst58 = (0.3333333333333333f * fConst56);
		for (int i=0; i<2; i++) fRec63[i] = 0;
		for (int i=0; i<16384; i++) fVec16[i] = 0;
		fConst59 = floorf((0.5f + (0.024421f * iConst0)));
		iConst60 = int((int((fConst55 - fConst59)) & 16383));
		fslider8 = 0.5f;
		fConst61 = (0.5f * iConst0);
		for (int i=0; i<4096; i++) fVec17[i] = 0;
		for (int i=0; i<2048; i++) fVec18[i] = 0;
		iConst62 = int((int((fConst59 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec61[i] = 0;
		for (int i=0; i<2; i++) fRec68[i] = 0;
		fConst63 = floorf((0.5f + (0.192303f * iConst0)));
		fConst64 = ((0 - (6.907755278982138f * fConst63)) / float(iConst0));
		fConst65 = (0.5f * fConst64);
		fConst66 = (0.3333333333333333f * fConst64);
		for (int i=0; i<2; i++) fRec67[i] = 0;
		for (int i=0; i<8192; i++) fVec19[i] = 0;
		fConst67 = floorf((0.5f + (0.029291f * iConst0)));
		iConst68 = int((int((fConst63 - fConst67)) & 8191));
		for (int i=0; i<2048; i++) fVec20[i] = 0;
		iConst69 = int((int((fConst67 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec65[i] = 0;
		for (int i=0; i<2; i++) fRec72[i] = 0;
		fConst70 = floorf((0.5f + (0.256891f * iConst0)));
		fConst71 = ((0 - (6.907755278982138f * fConst70)) / float(iConst0));
		fConst72 = (0.5f * fConst71);
		fConst73 = (0.3333333333333333f * fConst71);
		for (int i=0; i<2; i++) fRec71[i] = 0;
		for (int i=0; i<16384; i++) fVec21[i] = 0;
		fConst74 = floorf((0.5f + (0.027333f * iConst0)));
		iConst75 = int((int((fConst70 - fConst74)) & 16383));
		for (int i=0; i<2048; i++) fVec22[i] = 0;
		iConst76 = int((int((fConst74 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec69[i] = 0;
		for (int i=0; i<2; i++) fRec76[i] = 0;
		fConst77 = floorf((0.5f + (0.219991f * iConst0)));
		fConst78 = ((0 - (6.907755278982138f * fConst77)) / float(iConst0));
		fConst79 = (0.5f * fConst78);
		fConst80 = (0.3333333333333333f * fConst78);
		for (int i=0; i<2; i++) fRec75[i] = 0;
		for (int i=0; i<16384; i++) fVec23[i] = 0;
		fConst81 = floorf((0.5f + (0.019123f * iConst0)));
		iConst82 = int((int((fConst77 - fConst81)) & 16383));
		for (int i=0; i<1024; i++) fVec24[i] = 0;
		iConst83 = int((int((fConst81 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec73[i] = 0;
		for (int i=0; i<3; i++) fRec37[i] = 0;
		for (int i=0; i<3; i++) fRec38[i] = 0;
		for (int i=0; i<3; i++) fRec39[i] = 0;
		for (int i=0; i<3; i++) fRec40[i] = 0;
		for (int i=0; i<3; i++) fRec41[i] = 0;
		for (int i=0; i<3; i++) fRec42[i] = 0;
		for (int i=0; i<3; i++) fRec43[i] = 0;
		for (int i=0; i<3; i++) fRec44[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void buildUserInterface(UI* interface) {
		interface->openVerticalBox("0x00");
		interface->openHorizontalBox("Basic_Parameters");
		interface->declare(&fentry2, "1", "");
		interface->declare(&fentry2, "tooltip", "Tone frequency");
		interface->declare(&fentry2, "unit", "Hz");
		interface->addNumEntry("freq", &fentry2, 4.4e+02f, 2e+01f, 2e+04f, 1.0f);
		interface->declare(&fentry0, "1", "");
		interface->declare(&fentry0, "tooltip", "Gain (value between 0 and 1)");
		interface->addNumEntry("gain", &fentry0, 0.8f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fbutton0, "1", "");
		interface->declare(&fbutton0, "tooltip", "noteOn = 1, noteOff = 0");
		interface->addButton("gate", &fbutton0);
		interface->closeBox();
		interface->openHorizontalBox("Physical_and_Nonlinearity");
		interface->openVerticalBox("Nonlinear_Filter_Parameters");
		interface->declare(&fslider4, "3", "");
		interface->declare(&fslider4, "tooltip", "Frequency of the sine wave for the modulation of theta (works if Modulation Type=3)");
		interface->declare(&fslider4, "unit", "Hz");
		interface->addHorizontalSlider("Modulation_Frequency", &fslider4, 2.2e+02f, 2e+01f, 1e+03f, 0.1f);
		interface->declare(&fentry3, "3", "");
		interface->declare(&fentry3, "tooltip", "0=theta is modulated by the incoming signal; 1=theta is modulated by the averaged incoming signal; 2=theta is modulated by the squared incoming signal; 3=theta is modulated by a sine wave of frequency freqMod; 4=theta is modulated by a sine wave of frequency freq;");
		interface->addNumEntry("Modulation_Type", &fentry3, 0.0f, 0.0f, 4.0f, 1.0f);
		interface->declare(&fslider3, "3", "");
		interface->declare(&fslider3, "tooltip", "Nonlinearity factor (value between 0 and 1)");
		interface->addHorizontalSlider("Nonlinearity", &fslider3, 0.0f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->openVerticalBox("Physical_Parameters");
		interface->declare(&fslider0, "2", "");
		interface->declare(&fslider0, "tooltip", "A value between 0 and 1");
		interface->addHorizontalSlider("Base_Gain", &fslider0, 1.0f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fslider2, "2", "");
		interface->declare(&fslider2, "tooltip", "Bow pressure on the instrument (Value between 0 and 1)");
		interface->addHorizontalSlider("Bow_Pressure", &fslider2, 0.2f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fentry1, "2", "");
		interface->declare(&fentry1, "tooltip", "0=Bow; 1=Strike");
		interface->addNumEntry("Excitation_Selector", &fentry1, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->declare(&fslider1, "2", "");
		interface->declare(&fslider1, "tooltip", "A value between 0 and 1");
		interface->addHorizontalSlider("Integration_Constant", &fslider1, 0.0f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->closeBox();
		interface->openVerticalBox("Reverb");
		interface->addHorizontalSlider("reverbGain", &fslider5, 0.137f, 0.0f, 1.0f, 0.01f);
		interface->addHorizontalSlider("roomSize", &fslider7, 0.72f, 0.01f, 2.0f, 0.01f);
		interface->closeBox();
		interface->openVerticalBox("Spat");
		interface->addHorizontalSlider("pan angle", &fslider6, 0.6f, 0.0f, 1.0f, 0.01f);
		interface->addHorizontalSlider("spatial width", &fslider8, 0.5f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0 = float(fentry0);
		float 	fSlow1 = float(fentry1);
		float 	fSlow2 = float(fbutton0);
		float 	fSlow3 = (0.2f * ((fSlow2 * fSlow1) * fSlow0));
		int 	iSlow4 = (fSlow2 > 0);
		int 	iSlow5 = (fSlow2 <= 0);
		float 	fSlow6 = (0.03f + (0.1f * fSlow0));
		float 	fSlow7 = (0.8999999999999999f + (0.1f * float(fslider0)));
		float 	fSlow8 = float(fslider1);
		float 	fSlow9 = (10 - (9 * float(fslider2)));
		float 	fSlow10 = (0.16666666666666666f * (0 - (fSlow1 - 1)));
		float 	fSlow11 = float(fentry2);
		int 	iSlow12 = int((int((float(iConst0) / fSlow11)) & 4095));
		float 	fSlow13 = (fConst7 * cosf((fConst6 * fSlow11)));
		int 	iSlow14 = int((int((fConst11 / fSlow11)) & 4095));
		float 	fSlow15 = (fConst7 * cosf((fConst12 * fSlow11)));
		int 	iSlow16 = int((int((fConst13 / fSlow11)) & 4095));
		float 	fSlow17 = (fConst7 * cosf((fConst14 * fSlow11)));
		int 	iSlow18 = int((int((fConst15 / fSlow11)) & 4095));
		float 	fSlow19 = (fConst7 * cosf((fConst16 * fSlow11)));
		int 	iSlow20 = int((int((fConst17 / fSlow11)) & 4095));
		float 	fSlow21 = (fConst7 * cosf((fConst18 * fSlow11)));
		float 	fSlow22 = (0.0010000000000000009f * float(fslider3));
		float 	fSlow23 = float(fentry3);
		float 	fSlow24 = (50.26548245743669f * (fSlow23 == 2));
		float 	fSlow25 = (6.283185307179586f * (fSlow23 == 1));
		float 	fSlow26 = (12.566370614359172f * (fSlow23 == 0));
		int 	iSlow27 = (fSlow23 < 3);
		float 	fSlow28 = (0.0010000000000000009f * float(fslider4));
		int 	iSlow29 = (fSlow23 != 4);
		float 	fSlow30 = (fSlow11 * (fSlow23 == 4));
		int 	iSlow31 = (fSlow23 >= 3);
		float 	fSlow32 = (0.0010000000000000009f * float(fslider5));
		float 	fSlow33 = float(fslider6);
		float 	fSlow34 = (1.0f - fSlow33);
		float 	fSlow35 = float(fslider7);
		float 	fSlow36 = expf((fConst27 / fSlow35));
		float 	fSlow37 = ((expf((fConst28 / fSlow35)) / fSlow36) - 1);
		float 	fSlow38 = faustpower<2>(fSlow36);
		float 	fSlow39 = (1.0f - fSlow38);
		float 	fSlow40 = (1.0f - (fConst29 * fSlow38));
		float 	fSlow41 = (fSlow40 / fSlow39);
		float 	fSlow42 = sqrtf(max((float)0, ((faustpower<2>(fSlow40) / faustpower<2>(fSlow39)) - 1.0f)));
		float 	fSlow43 = (fSlow36 * ((1.0f + fSlow42) - fSlow41));
		float 	fSlow44 = (fSlow41 - fSlow42);
		float 	fSlow45 = expf((fConst36 / fSlow35));
		float 	fSlow46 = ((expf((fConst37 / fSlow35)) / fSlow45) - 1);
		float 	fSlow47 = faustpower<2>(fSlow45);
		float 	fSlow48 = (1.0f - fSlow47);
		float 	fSlow49 = (1.0f - (fConst29 * fSlow47));
		float 	fSlow50 = (fSlow49 / fSlow48);
		float 	fSlow51 = sqrtf(max((float)0, ((faustpower<2>(fSlow49) / faustpower<2>(fSlow48)) - 1.0f)));
		float 	fSlow52 = (fSlow45 * ((1.0f + fSlow51) - fSlow50));
		float 	fSlow53 = (fSlow50 - fSlow51);
		float 	fSlow54 = expf((fConst43 / fSlow35));
		float 	fSlow55 = ((expf((fConst44 / fSlow35)) / fSlow54) - 1);
		float 	fSlow56 = faustpower<2>(fSlow54);
		float 	fSlow57 = (1.0f - fSlow56);
		float 	fSlow58 = (1.0f - (fConst29 * fSlow56));
		float 	fSlow59 = (fSlow58 / fSlow57);
		float 	fSlow60 = sqrtf(max((float)0, ((faustpower<2>(fSlow58) / faustpower<2>(fSlow57)) - 1.0f)));
		float 	fSlow61 = (fSlow54 * ((1.0f + fSlow60) - fSlow59));
		float 	fSlow62 = (fSlow59 - fSlow60);
		float 	fSlow63 = expf((fConst50 / fSlow35));
		float 	fSlow64 = ((expf((fConst51 / fSlow35)) / fSlow63) - 1);
		float 	fSlow65 = faustpower<2>(fSlow63);
		float 	fSlow66 = (1.0f - fSlow65);
		float 	fSlow67 = (1.0f - (fConst29 * fSlow65));
		float 	fSlow68 = (fSlow67 / fSlow66);
		float 	fSlow69 = sqrtf(max((float)0, ((faustpower<2>(fSlow67) / faustpower<2>(fSlow66)) - 1.0f)));
		float 	fSlow70 = (fSlow63 * ((1.0f + fSlow69) - fSlow68));
		float 	fSlow71 = (fSlow68 - fSlow69);
		float 	fSlow72 = expf((fConst57 / fSlow35));
		float 	fSlow73 = ((expf((fConst58 / fSlow35)) / fSlow72) - 1);
		float 	fSlow74 = faustpower<2>(fSlow72);
		float 	fSlow75 = (1.0f - fSlow74);
		float 	fSlow76 = (1.0f - (fConst29 * fSlow74));
		float 	fSlow77 = (fSlow76 / fSlow75);
		float 	fSlow78 = sqrtf(max((float)0, ((faustpower<2>(fSlow76) / faustpower<2>(fSlow75)) - 1.0f)));
		float 	fSlow79 = (fSlow72 * ((1.0f + fSlow78) - fSlow77));
		float 	fSlow80 = (fSlow77 - fSlow78);
		int 	iSlow81 = int((int((fConst61 * (float(fslider8) / fSlow11))) & 4095));
		float 	fSlow82 = expf((fConst65 / fSlow35));
		float 	fSlow83 = ((expf((fConst66 / fSlow35)) / fSlow82) - 1);
		float 	fSlow84 = faustpower<2>(fSlow82);
		float 	fSlow85 = (1.0f - fSlow84);
		float 	fSlow86 = (1.0f - (fConst29 * fSlow84));
		float 	fSlow87 = (fSlow86 / fSlow85);
		float 	fSlow88 = sqrtf(max((float)0, ((faustpower<2>(fSlow86) / faustpower<2>(fSlow85)) - 1.0f)));
		float 	fSlow89 = (fSlow82 * ((1.0f + fSlow88) - fSlow87));
		float 	fSlow90 = (fSlow87 - fSlow88);
		float 	fSlow91 = expf((fConst72 / fSlow35));
		float 	fSlow92 = ((expf((fConst73 / fSlow35)) / fSlow91) - 1);
		float 	fSlow93 = faustpower<2>(fSlow91);
		float 	fSlow94 = (1.0f - fSlow93);
		float 	fSlow95 = (1.0f - (fConst29 * fSlow93));
		float 	fSlow96 = (fSlow95 / fSlow94);
		float 	fSlow97 = sqrtf(max((float)0, ((faustpower<2>(fSlow95) / faustpower<2>(fSlow94)) - 1.0f)));
		float 	fSlow98 = (fSlow91 * ((1.0f + fSlow97) - fSlow96));
		float 	fSlow99 = (fSlow96 - fSlow97);
		float 	fSlow100 = expf((fConst79 / fSlow35));
		float 	fSlow101 = ((expf((fConst80 / fSlow35)) / fSlow100) - 1);
		float 	fSlow102 = faustpower<2>(fSlow100);
		float 	fSlow103 = (1.0f - fSlow102);
		float 	fSlow104 = (1.0f - (fConst29 * fSlow102));
		float 	fSlow105 = (fSlow104 / fSlow103);
		float 	fSlow106 = sqrtf(max((float)0, ((faustpower<2>(fSlow104) / faustpower<2>(fSlow103)) - 1.0f)));
		float 	fSlow107 = (fSlow100 * ((1.0f + fSlow106) - fSlow105));
		float 	fSlow108 = (fSlow105 - fSlow106);
		FAUSTFLOAT* output0 = output[0];
		FAUSTFLOAT* output1 = output[1];
		for (int i=0; i<count; i++) {
			iRec8[0] = (iSlow4 & (iRec8[1] | (fRec9[1] >= 1)));
			int iTemp0 = (iSlow5 & (fRec9[1] > 0));
			fRec9[0] = (((fConst3 * (((iRec8[1] == 0) & iSlow4) & (fRec9[1] < 1))) + (fRec9[1] * ((1 - (fConst2 * (iRec8[1] & (fRec9[1] > 90)))) - (fConst1 * iTemp0)))) * ((iTemp0 == 0) | (fRec9[1] >= 1e-06f)));
			float fTemp1 = (0 - ((fSlow8 + (fSlow7 * (((fRec0[1] + fRec2[1]) + fRec4[1]) + ((fRec1[1] + fRec3[1]) + fRec5[1])))) - (fSlow6 * fRec9[0])));
			float fTemp2 = faustpower<4>((0.75f + fabsf((fSlow9 * fTemp1))));
			float fTemp3 = (1.0f / fTemp2);
			float fTemp4 = (fSlow10 * (fTemp1 * ((fTemp3 > 1) + (float((fTemp3 <= 1)) / fTemp2))));
			fVec0[IOTA&4095] = ((fRec6[1] + fTemp4) + fSlow3);
			fRec7[0] = (0 - (((fSlow13 * fRec7[1]) + (fConst5 * fRec7[2])) - (0.999f * fVec0[(IOTA-iSlow12)&4095])));
			fRec6[0] = ((fConst10 * fRec7[0]) + (fConst9 * fRec7[2]));
			fRec0[0] = fRec6[0];
			fVec1[IOTA&4095] = (fSlow3 + (fTemp4 + fRec10[1]));
			fRec11[0] = (0 - (((fSlow15 * fRec11[1]) + (fConst5 * fRec11[2])) - (0.998001f * fVec1[(IOTA-iSlow14)&4095])));
			fRec10[0] = ((fConst10 * fRec11[0]) + (fConst9 * fRec11[2]));
			fRec1[0] = fRec10[0];
			fVec2[IOTA&4095] = (fSlow3 + (fTemp4 + fRec12[1]));
			fRec13[0] = (0 - (((fSlow17 * fRec13[1]) + (fConst5 * fRec13[2])) - (0.997002999f * fVec2[(IOTA-iSlow16)&4095])));
			fRec12[0] = ((fConst10 * fRec13[0]) + (fConst9 * fRec13[2]));
			fRec2[0] = fRec12[0];
			fVec3[IOTA&2047] = (fSlow3 + (fTemp4 + fRec14[1]));
			fRec15[0] = (0 - (((fSlow19 * fRec15[1]) + (fConst5 * fRec15[2])) - (0.996005996001f * fVec3[(IOTA-iSlow18)&2047])));
			fRec14[0] = ((fConst10 * fRec15[0]) + (fConst9 * fRec15[2]));
			fRec3[0] = fRec14[0];
			fVec4[IOTA&1023] = (fSlow3 + (fTemp4 + fRec16[1]));
			fRec17[0] = (0 - (((fSlow21 * fRec17[1]) + (fConst5 * fRec17[2])) - (0.995009990004999f * fVec4[(IOTA-iSlow20)&1023])));
			fRec16[0] = ((fConst10 * fRec17[0]) + (fConst9 * fRec17[2]));
			fRec4[0] = fRec16[0];
			fRec19[0] = (0 - ((fConst7 * fRec19[1]) + (fConst5 * fRec19[2])));
			float 	fRec18 = ((fConst10 * fRec19[0]) + (fConst9 * fRec19[2]));
			fRec5[0] = fRec18;
			float fTemp5 = (fRec5[0] + (fRec3[0] + (((fRec0[0] + fRec2[0]) + fRec4[0]) + fRec1[0])));
			fVec5[0] = fTemp5;
			fRec20[0] = (fSlow22 + (0.999f * fRec20[1]));
			float fTemp6 = (fRec20[0] * (((fSlow26 * fVec5[0]) + (fSlow25 * (fVec5[0] + fVec5[1]))) + (fSlow24 * faustpower<2>(fVec5[0]))));
			float fTemp7 = cosf(fTemp6);
			float fTemp8 = sinf(fTemp6);
			float fTemp9 = (0 - fTemp8);
			float fTemp10 = ((fRec21[1] * fTemp9) + (4 * (fVec5[0] * fTemp7)));
			float fTemp11 = ((fTemp9 * fRec22[1]) + (fTemp7 * fTemp10));
			float fTemp12 = ((fTemp9 * fRec23[1]) + (fTemp7 * fTemp11));
			float fTemp13 = ((fTemp9 * fRec24[1]) + (fTemp7 * fTemp12));
			float fTemp14 = ((fTemp9 * fRec25[1]) + (fTemp7 * fTemp13));
			fRec26[0] = ((fTemp9 * fRec26[1]) + (fTemp7 * fTemp14));
			fRec25[0] = ((fTemp8 * fTemp14) + (fTemp7 * fRec26[1]));
			fRec24[0] = ((fTemp8 * fTemp13) + (fTemp7 * fRec25[1]));
			fRec23[0] = ((fTemp8 * fTemp12) + (fTemp7 * fRec24[1]));
			fRec22[0] = ((fTemp8 * fTemp11) + (fTemp7 * fRec23[1]));
			fRec21[0] = ((fTemp8 * fTemp10) + (fTemp7 * fRec22[1]));
			fRec29[0] = (fSlow28 + (0.999f * fRec29[1]));
			float fTemp15 = (fRec28[1] + (fConst20 * (fSlow30 + (iSlow29 * fRec29[0]))));
			fRec28[0] = (fTemp15 - floorf(fTemp15));
			float fTemp16 = (3.141592653589793f * (fRec20[0] * ftbl0[int((65536.0f * fRec28[0]))]));
			float fTemp17 = cosf(fTemp16);
			float fTemp18 = sinf(fTemp16);
			float fTemp19 = (0 - fTemp18);
			float fTemp20 = ((fRec30[1] * fTemp19) + (4 * (fVec5[0] * fTemp17)));
			float fTemp21 = ((fTemp19 * fRec31[1]) + (fTemp17 * fTemp20));
			float fTemp22 = ((fTemp19 * fRec32[1]) + (fTemp17 * fTemp21));
			float fTemp23 = ((fTemp19 * fRec33[1]) + (fTemp17 * fTemp22));
			float fTemp24 = ((fTemp19 * fRec34[1]) + (fTemp17 * fTemp23));
			fRec35[0] = ((fTemp19 * fRec35[1]) + (fTemp17 * fTemp24));
			fRec34[0] = ((fTemp18 * fTemp24) + (fTemp17 * fRec35[1]));
			fRec33[0] = ((fTemp18 * fTemp23) + (fTemp17 * fRec34[1]));
			fRec32[0] = ((fTemp18 * fTemp22) + (fTemp17 * fRec33[1]));
			fRec31[0] = ((fTemp18 * fTemp21) + (fTemp17 * fRec32[1]));
			fRec30[0] = ((fTemp18 * fTemp20) + (fTemp17 * fRec31[1]));
			float fTemp25 = ((iSlow31 * ((4 * (fVec5[0] * fTemp18)) + (fRec30[1] * fTemp17))) + (iSlow27 * ((fRec20[0] * ((4 * (fVec5[0] * fTemp8)) + (fRec21[1] * fTemp7))) + (4 * ((1 - fRec20[0]) * fVec5[0])))));
			fVec6[IOTA&4095] = fTemp25;
			fRec36[0] = ((0.999f * fRec36[1]) + fSlow32);
			float fTemp26 = (1 - fRec36[0]);
			fRec48[0] = ((fConst24 * fRec48[1]) + (fConst23 * (fRec41[1] + fRec41[2])));
			fRec47[0] = ((fSlow44 * fRec47[1]) + (fSlow43 * (fRec41[1] + (fSlow37 * fRec48[0]))));
			fVec7[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec47[0]));
			fVec8[IOTA&4095] = (fSlow34 * (fRec36[0] * fVec6[IOTA&4095]));
			float fTemp27 = (0.3f * fVec8[(IOTA-iConst32)&4095]);
			float fTemp28 = ((fTemp27 + fVec7[(IOTA-iConst31)&8191]) - (0.6f * fRec45[1]));
			fVec9[IOTA&2047] = fTemp28;
			fRec45[0] = fVec9[(IOTA-iConst33)&2047];
			float 	fRec46 = (0.6f * fVec9[IOTA&2047]);
			fRec52[0] = ((fConst24 * fRec52[1]) + (fConst23 * (fRec37[1] + fRec37[2])));
			fRec51[0] = ((fSlow53 * fRec51[1]) + (fSlow52 * (fRec37[1] + (fSlow46 * fRec52[0]))));
			fVec10[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec51[0]));
			float fTemp29 = ((fVec10[(IOTA-iConst39)&8191] + fTemp27) - (0.6f * fRec49[1]));
			fVec11[IOTA&1023] = fTemp29;
			fRec49[0] = fVec11[(IOTA-iConst40)&1023];
			float 	fRec50 = (0.6f * fVec11[IOTA&1023]);
			float fTemp30 = (fRec50 + fRec46);
			fRec56[0] = ((fConst24 * fRec56[1]) + (fConst23 * (fRec39[1] + fRec39[2])));
			fRec55[0] = ((fSlow62 * fRec55[1]) + (fSlow61 * (fRec39[1] + (fSlow55 * fRec56[0]))));
			fVec12[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec55[0]));
			float fTemp31 = (fVec12[(IOTA-iConst46)&8191] - (fTemp27 + (0.6f * fRec53[1])));
			fVec13[IOTA&2047] = fTemp31;
			fRec53[0] = fVec13[(IOTA-iConst47)&2047];
			float 	fRec54 = (0.6f * fVec13[IOTA&2047]);
			fRec60[0] = ((fConst24 * fRec60[1]) + (fConst23 * (fRec43[1] + fRec43[2])));
			fRec59[0] = ((fSlow71 * fRec59[1]) + (fSlow70 * (fRec43[1] + (fSlow64 * fRec60[0]))));
			fVec14[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec59[0]));
			float fTemp32 = (fVec14[(IOTA-iConst53)&8191] - (fTemp27 + (0.6f * fRec57[1])));
			fVec15[IOTA&1023] = fTemp32;
			fRec57[0] = fVec15[(IOTA-iConst54)&1023];
			float 	fRec58 = (0.6f * fVec15[IOTA&1023]);
			float fTemp33 = (fRec58 + (fRec54 + fTemp30));
			fRec64[0] = ((fConst24 * fRec64[1]) + (fConst23 * (fRec38[1] + fRec38[2])));
			fRec63[0] = ((fSlow80 * fRec63[1]) + (fSlow79 * (fRec38[1] + (fSlow73 * fRec64[0]))));
			fVec16[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec63[0]));
			float fTemp34 = fVec6[(IOTA-iSlow81)&4095];
			fVec17[IOTA&4095] = (fSlow33 * (fRec36[0] * fTemp34));
			float fTemp35 = (0.3f * fVec17[(IOTA-iConst32)&4095]);
			float fTemp36 = (fTemp35 + ((0.6f * fRec61[1]) + fVec16[(IOTA-iConst60)&16383]));
			fVec18[IOTA&2047] = fTemp36;
			fRec61[0] = fVec18[(IOTA-iConst62)&2047];
			float 	fRec62 = (0 - (0.6f * fVec18[IOTA&2047]));
			fRec68[0] = ((fConst24 * fRec68[1]) + (fConst23 * (fRec42[1] + fRec42[2])));
			fRec67[0] = ((fSlow90 * fRec67[1]) + (fSlow89 * (fRec42[1] + (fSlow83 * fRec68[0]))));
			fVec19[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec67[0]));
			float fTemp37 = (fVec19[(IOTA-iConst68)&8191] + (fTemp35 + (0.6f * fRec65[1])));
			fVec20[IOTA&2047] = fTemp37;
			fRec65[0] = fVec20[(IOTA-iConst69)&2047];
			float 	fRec66 = (0 - (0.6f * fVec20[IOTA&2047]));
			fRec72[0] = ((fConst24 * fRec72[1]) + (fConst23 * (fRec40[1] + fRec40[2])));
			fRec71[0] = ((fSlow99 * fRec71[1]) + (fSlow98 * (fRec40[1] + (fSlow92 * fRec72[0]))));
			fVec21[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec71[0]));
			float fTemp38 = (((0.6f * fRec69[1]) + fVec21[(IOTA-iConst75)&16383]) - fTemp35);
			fVec22[IOTA&2047] = fTemp38;
			fRec69[0] = fVec22[(IOTA-iConst76)&2047];
			float 	fRec70 = (0 - (0.6f * fVec22[IOTA&2047]));
			fRec76[0] = ((fConst24 * fRec76[1]) + (fConst23 * (fRec44[1] + fRec44[2])));
			fRec75[0] = ((fSlow108 * fRec75[1]) + (fSlow107 * (fRec44[1] + (fSlow101 * fRec76[0]))));
			fVec23[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec75[0]));
			float fTemp39 = (((0.6f * fRec73[1]) + fVec23[(IOTA-iConst82)&16383]) - fTemp35);
			fVec24[IOTA&1023] = fTemp39;
			fRec73[0] = fVec24[(IOTA-iConst83)&1023];
			float 	fRec74 = (0 - (0.6f * fVec24[IOTA&1023]));
			fRec37[0] = (fRec73[1] + (fRec69[1] + (fRec65[1] + (fRec61[1] + (fRec57[1] + (fRec53[1] + (fRec45[1] + (fRec49[1] + (fRec74 + (fRec70 + (fRec66 + (fRec62 + fTemp33))))))))))));
			fRec38[0] = (0 - ((fRec73[1] + (fRec69[1] + (fRec65[1] + (fRec61[1] + (fRec74 + (fRec70 + (fRec62 + fRec66))))))) - (fRec57[1] + (fRec53[1] + (fRec45[1] + (fRec49[1] + fTemp33))))));
			float fTemp40 = (fRec54 + fRec58);
			fRec39[0] = (0 - ((fRec73[1] + (fRec69[1] + (fRec57[1] + (fRec53[1] + (fRec74 + (fRec70 + fTemp40)))))) - (fRec65[1] + (fRec61[1] + (fRec45[1] + (fRec49[1] + (fRec66 + (fRec62 + fTemp30))))))));
			fRec40[0] = (0 - ((fRec65[1] + (fRec61[1] + (fRec57[1] + (fRec53[1] + (fRec66 + (fRec62 + fTemp40)))))) - (fRec73[1] + (fRec69[1] + (fRec45[1] + (fRec49[1] + (fRec74 + (fRec70 + fTemp30))))))));
			float fTemp41 = (fRec50 + fRec54);
			float fTemp42 = (fRec46 + fRec58);
			fRec41[0] = (0 - ((fRec73[1] + (fRec65[1] + (fRec57[1] + (fRec45[1] + (fRec74 + (fRec66 + fTemp42)))))) - (fRec69[1] + (fRec61[1] + (fRec53[1] + (fRec49[1] + (fRec70 + (fRec62 + fTemp41))))))));
			fRec42[0] = (0 - ((fRec69[1] + (fRec61[1] + (fRec57[1] + (fRec45[1] + (fRec70 + (fRec62 + fTemp42)))))) - (fRec73[1] + (fRec65[1] + (fRec53[1] + (fRec49[1] + (fRec74 + (fRec66 + fTemp41))))))));
			float fTemp43 = (fRec50 + fRec58);
			float fTemp44 = (fRec46 + fRec54);
			fRec43[0] = (0 - ((fRec69[1] + (fRec65[1] + (fRec53[1] + (fRec45[1] + (fRec70 + (fRec66 + fTemp44)))))) - (fRec73[1] + (fRec61[1] + (fRec57[1] + (fRec49[1] + (fRec74 + (fRec62 + fTemp43))))))));
			fRec44[0] = (0 - ((fRec73[1] + (fRec61[1] + (fRec53[1] + (fRec45[1] + (fRec74 + (fRec62 + fTemp44)))))) - (fRec69[1] + (fRec65[1] + (fRec57[1] + (fRec49[1] + (fRec70 + (fRec66 + fTemp43))))))));
			output0[i] = (FAUSTFLOAT)((0.37f * (fRec38[0] + fRec39[0])) + (fSlow34 * (fTemp26 * fVec6[IOTA&4095])));
			output1[i] = (FAUSTFLOAT)((0.37f * (fRec38[0] - fRec39[0])) + (fSlow33 * (fTemp26 * fTemp34)));
			// post processing
			fRec44[2] = fRec44[1]; fRec44[1] = fRec44[0];
			fRec43[2] = fRec43[1]; fRec43[1] = fRec43[0];
			fRec42[2] = fRec42[1]; fRec42[1] = fRec42[0];
			fRec41[2] = fRec41[1]; fRec41[1] = fRec41[0];
			fRec40[2] = fRec40[1]; fRec40[1] = fRec40[0];
			fRec39[2] = fRec39[1]; fRec39[1] = fRec39[0];
			fRec38[2] = fRec38[1]; fRec38[1] = fRec38[0];
			fRec37[2] = fRec37[1]; fRec37[1] = fRec37[0];
			fRec73[1] = fRec73[0];
			fRec75[1] = fRec75[0];
			fRec76[1] = fRec76[0];
			fRec69[1] = fRec69[0];
			fRec71[1] = fRec71[0];
			fRec72[1] = fRec72[0];
			fRec65[1] = fRec65[0];
			fRec67[1] = fRec67[0];
			fRec68[1] = fRec68[0];
			fRec61[1] = fRec61[0];
			fRec63[1] = fRec63[0];
			fRec64[1] = fRec64[0];
			fRec57[1] = fRec57[0];
			fRec59[1] = fRec59[0];
			fRec60[1] = fRec60[0];
			fRec53[1] = fRec53[0];
			fRec55[1] = fRec55[0];
			fRec56[1] = fRec56[0];
			fRec49[1] = fRec49[0];
			fRec51[1] = fRec51[0];
			fRec52[1] = fRec52[0];
			fRec45[1] = fRec45[0];
			fRec47[1] = fRec47[0];
			fRec48[1] = fRec48[0];
			fRec36[1] = fRec36[0];
			fRec30[1] = fRec30[0];
			fRec31[1] = fRec31[0];
			fRec32[1] = fRec32[0];
			fRec33[1] = fRec33[0];
			fRec34[1] = fRec34[0];
			fRec35[1] = fRec35[0];
			fRec28[1] = fRec28[0];
			fRec29[1] = fRec29[0];
			fRec21[1] = fRec21[0];
			fRec22[1] = fRec22[0];
			fRec23[1] = fRec23[0];
			fRec24[1] = fRec24[0];
			fRec25[1] = fRec25[0];
			fRec26[1] = fRec26[0];
			fRec20[1] = fRec20[0];
			fVec5[1] = fVec5[0];
			fRec5[1] = fRec5[0];
			fRec19[2] = fRec19[1]; fRec19[1] = fRec19[0];
			fRec4[1] = fRec4[0];
			fRec16[1] = fRec16[0];
			fRec17[2] = fRec17[1]; fRec17[1] = fRec17[0];
			fRec3[1] = fRec3[0];
			fRec14[1] = fRec14[0];
			fRec15[2] = fRec15[1]; fRec15[1] = fRec15[0];
			fRec2[1] = fRec2[0];
			fRec12[1] = fRec12[0];
			fRec13[2] = fRec13[1]; fRec13[1] = fRec13[0];
			fRec1[1] = fRec1[0];
			fRec10[1] = fRec10[0];
			fRec11[2] = fRec11[1]; fRec11[1] = fRec11[0];
			fRec0[1] = fRec0[0];
			fRec6[1] = fRec6[0];
			fRec7[2] = fRec7[1]; fRec7[1] = fRec7[0];
			IOTA = IOTA+1;
			fRec9[1] = fRec9[0];
			iRec8[1] = iRec8[0];
		}
	}
};


float 	mydsp::ftbl0[65536];
