//-----------------------------------------------------
// name: "Harpsichord"
// author: "Romain Michon (rmichon@ccrma.stanford.edu)"
// copyright: "Romain Michon"
// version: "1.0"
//
// Code generated with Faust 0.9.70 (http://faust.grame.fr)
//-----------------------------------------------------
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif  

typedef long double quad;
/* link with : "" */
#include <harpsichord.h>
#include <math.h>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline float faustpower(float x)          { return powf(x,N); } 
template <int N> inline double faustpower(double x)        { return pow(x,N); }
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <>   inline int faustpower<0>(int x)            { return 1; }
template <>   inline int faustpower<1>(int x)            { return x; }
#endif

#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	class SIG0 {
	  private:
		int 	fSamplingFreq;
		int 	iRec13[2];
	  public:
		int getNumInputs() 	{ return 0; }
		int getNumOutputs() 	{ return 1; }
		void init(int samplingFreq) {
			fSamplingFreq = samplingFreq;
			for (int i=0; i<2; i++) iRec13[i] = 0;
		}
		void fill (int count, float output[]) {
			for (int i=0; i<count; i++) {
				iRec13[0] = (1 + iRec13[1]);
				output[i] = sinf((9.587379924285257e-05f * float((iRec13[0] - 1))));
				// post processing
				iRec13[1] = iRec13[0];
			}
		}
	};


	FAUSTFLOAT 	fslider0;
	float 	fRec0[2];
	int 	iRec3[2];
	FAUSTFLOAT 	fbutton0;
	float 	fRec5[2];
	FAUSTFLOAT 	fentry0;
	FAUSTFLOAT 	fentry1;
	int 	iConst0;
	float 	fConst1;
	float 	fConst2;
	float 	fRec4[2];
	FAUSTFLOAT 	fslider1;
	float 	fRec6[2];
	FAUSTFLOAT 	fentry2;
	float 	fRec12[2];
	float 	fRec11[2];
	float 	fRec10[2];
	float 	fRec9[2];
	float 	fRec8[2];
	float 	fRec7[2];
	static float 	ftbl0[65536];
	FAUSTFLOAT 	fslider2;
	float 	fRec15[2];
	float 	fConst3;
	float 	fRec14[2];
	float 	fRec21[2];
	float 	fRec20[2];
	float 	fRec19[2];
	float 	fRec18[2];
	float 	fRec17[2];
	float 	fRec16[2];
	float 	fRec22[2];
	int 	IOTA;
	float 	fVec0[4096];
	float 	fRec2[3];
	float 	fRec1[4096];
	FAUSTFLOAT 	fslider3;
	float 	fConst4;
	float 	fConst5;
	float 	fConst6;
	float 	fConst7;
	float 	fRec34[2];
	FAUSTFLOAT 	fslider4;
	float 	fConst8;
	float 	fConst9;
	float 	fConst10;
	float 	fConst11;
	float 	fConst12;
	float 	fRec33[2];
	float 	fVec1[8192];
	float 	fConst13;
	int 	iConst14;
	float 	fVec2[4096];
	int 	iConst15;
	float 	fVec3[2048];
	int 	iConst16;
	float 	fRec31[2];
	float 	fRec38[2];
	float 	fConst17;
	float 	fConst18;
	float 	fConst19;
	float 	fConst20;
	float 	fRec37[2];
	float 	fVec4[8192];
	float 	fConst21;
	int 	iConst22;
	float 	fVec5[1024];
	int 	iConst23;
	float 	fRec35[2];
	float 	fRec42[2];
	float 	fConst24;
	float 	fConst25;
	float 	fConst26;
	float 	fConst27;
	float 	fRec41[2];
	float 	fVec6[8192];
	float 	fConst28;
	int 	iConst29;
	float 	fVec7[2048];
	int 	iConst30;
	float 	fRec39[2];
	float 	fRec46[2];
	float 	fConst31;
	float 	fConst32;
	float 	fConst33;
	float 	fConst34;
	float 	fRec45[2];
	float 	fVec8[8192];
	float 	fConst35;
	int 	iConst36;
	float 	fVec9[1024];
	int 	iConst37;
	float 	fRec43[2];
	float 	fRec50[2];
	float 	fConst38;
	float 	fConst39;
	float 	fConst40;
	float 	fConst41;
	float 	fRec49[2];
	float 	fVec10[16384];
	float 	fConst42;
	int 	iConst43;
	FAUSTFLOAT 	fslider5;
	float 	fConst44;
	float 	fVec11[4096];
	float 	fVec12[2048];
	int 	iConst45;
	float 	fRec47[2];
	float 	fRec54[2];
	float 	fConst46;
	float 	fConst47;
	float 	fConst48;
	float 	fConst49;
	float 	fRec53[2];
	float 	fVec13[8192];
	float 	fConst50;
	int 	iConst51;
	float 	fVec14[2048];
	int 	iConst52;
	float 	fRec51[2];
	float 	fRec58[2];
	float 	fConst53;
	float 	fConst54;
	float 	fConst55;
	float 	fConst56;
	float 	fRec57[2];
	float 	fVec15[16384];
	float 	fConst57;
	int 	iConst58;
	float 	fVec16[2048];
	int 	iConst59;
	float 	fRec55[2];
	float 	fRec62[2];
	float 	fConst60;
	float 	fConst61;
	float 	fConst62;
	float 	fConst63;
	float 	fRec61[2];
	float 	fVec17[16384];
	float 	fConst64;
	int 	iConst65;
	float 	fVec18[1024];
	int 	iConst66;
	float 	fRec59[2];
	float 	fRec23[3];
	float 	fRec24[3];
	float 	fRec25[3];
	float 	fRec26[3];
	float 	fRec27[3];
	float 	fRec28[3];
	float 	fRec29[3];
	float 	fRec30[3];
  public:
	static void metadata(Meta* m) 	{ 
		m->declare("name", "Harpsichord");
		m->declare("description", "Nonlinear WaveGuide Commuted Harpsichord");
		m->declare("author", "Romain Michon (rmichon@ccrma.stanford.edu)");
		m->declare("copyright", "Romain Michon");
		m->declare("version", "1.0");
		m->declare("licence", "STK-4.3");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/version", "1.0");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/version", "1.0");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("instrument.lib/name", "Faust-STK Tools Library");
		m->declare("instrument.lib/author", "Romain Michon (rmichon@ccrma.stanford.edu)");
		m->declare("instrument.lib/copyright", "Romain Michon");
		m->declare("instrument.lib/version", "1.0");
		m->declare("instrument.lib/licence", "STK-4.3");
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/version", "1.29");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("effect.lib/name", "Faust Audio Effect Library");
		m->declare("effect.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/copyright", "Julius O. Smith III");
		m->declare("effect.lib/version", "1.33");
		m->declare("effect.lib/license", "STK-4.3");
		m->declare("effect.lib/exciter_name", "Harmonic Exciter");
		m->declare("effect.lib/exciter_author", "Priyanka Shekar (pshekar@ccrma.stanford.edu)");
		m->declare("effect.lib/exciter_copyright", "Copyright (c) 2013 Priyanka Shekar");
		m->declare("effect.lib/exciter_version", "1.0");
		m->declare("effect.lib/exciter_license", "MIT License (MIT)");
	}

	virtual int getNumInputs() 	{ return 0; }
	virtual int getNumOutputs() 	{ return 2; }
	static void classInit(int samplingFreq) {
		SIG0 sig0;
		sig0.init(samplingFreq);
		sig0.fill(65536,ftbl0);
	}
	virtual void instanceInit(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fslider0 = 0.137f;
		for (int i=0; i<2; i++) fRec0[i] = 0;
		for (int i=0; i<2; i++) iRec3[i] = 0;
		fbutton0 = 0.0;
		for (int i=0; i<2; i++) fRec5[i] = 0;
		fentry0 = 4.4e+02f;
		fentry1 = 0.8f;
		iConst0 = min(192000, max(1, fSamplingFreq));
		fConst1 = float(iConst0);
		fConst2 = (float(7) / fConst1);
		for (int i=0; i<2; i++) fRec4[i] = 0;
		fslider1 = 0.0f;
		for (int i=0; i<2; i++) fRec6[i] = 0;
		fentry2 = 0.0f;
		for (int i=0; i<2; i++) fRec12[i] = 0;
		for (int i=0; i<2; i++) fRec11[i] = 0;
		for (int i=0; i<2; i++) fRec10[i] = 0;
		for (int i=0; i<2; i++) fRec9[i] = 0;
		for (int i=0; i<2; i++) fRec8[i] = 0;
		for (int i=0; i<2; i++) fRec7[i] = 0;
		fslider2 = 2.2e+02f;
		for (int i=0; i<2; i++) fRec15[i] = 0;
		fConst3 = (1.0f / fConst1);
		for (int i=0; i<2; i++) fRec14[i] = 0;
		for (int i=0; i<2; i++) fRec21[i] = 0;
		for (int i=0; i<2; i++) fRec20[i] = 0;
		for (int i=0; i<2; i++) fRec19[i] = 0;
		for (int i=0; i<2; i++) fRec18[i] = 0;
		for (int i=0; i<2; i++) fRec17[i] = 0;
		for (int i=0; i<2; i++) fRec16[i] = 0;
		for (int i=0; i<2; i++) fRec22[i] = 0;
		IOTA = 0;
		for (int i=0; i<4096; i++) fVec0[i] = 0;
		for (int i=0; i<3; i++) fRec2[i] = 0;
		for (int i=0; i<4096; i++) fRec1[i] = 0;
		fslider3 = 0.6f;
		fConst4 = (1.0f / tanf((628.3185307179587f / float(iConst0))));
		fConst5 = (1 + fConst4);
		fConst6 = (1.0f / fConst5);
		fConst7 = (0 - ((1 - fConst4) / fConst5));
		for (int i=0; i<2; i++) fRec34[i] = 0;
		fslider4 = 0.72f;
		fConst8 = floorf((0.5f + (0.174713f * iConst0)));
		fConst9 = ((0 - (6.907755278982138f * fConst8)) / float(iConst0));
		fConst10 = (0.5f * fConst9);
		fConst11 = (0.3333333333333333f * fConst9);
		fConst12 = cosf((37699.11184307752f / fConst1));
		for (int i=0; i<2; i++) fRec33[i] = 0;
		for (int i=0; i<8192; i++) fVec1[i] = 0;
		fConst13 = floorf((0.5f + (0.022904f * iConst0)));
		iConst14 = int((int((fConst8 - fConst13)) & 8191));
		for (int i=0; i<4096; i++) fVec2[i] = 0;
		iConst15 = int((int((0.02f * iConst0)) & 8191));
		for (int i=0; i<2048; i++) fVec3[i] = 0;
		iConst16 = int((int((fConst13 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec31[i] = 0;
		for (int i=0; i<2; i++) fRec38[i] = 0;
		fConst17 = floorf((0.5f + (0.153129f * iConst0)));
		fConst18 = ((0 - (6.907755278982138f * fConst17)) / float(iConst0));
		fConst19 = (0.5f * fConst18);
		fConst20 = (0.3333333333333333f * fConst18);
		for (int i=0; i<2; i++) fRec37[i] = 0;
		for (int i=0; i<8192; i++) fVec4[i] = 0;
		fConst21 = floorf((0.5f + (0.020346f * iConst0)));
		iConst22 = int((int((fConst17 - fConst21)) & 8191));
		for (int i=0; i<1024; i++) fVec5[i] = 0;
		iConst23 = int((int((fConst21 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec35[i] = 0;
		for (int i=0; i<2; i++) fRec42[i] = 0;
		fConst24 = floorf((0.5f + (0.127837f * iConst0)));
		fConst25 = ((0 - (6.907755278982138f * fConst24)) / float(iConst0));
		fConst26 = (0.5f * fConst25);
		fConst27 = (0.3333333333333333f * fConst25);
		for (int i=0; i<2; i++) fRec41[i] = 0;
		for (int i=0; i<8192; i++) fVec6[i] = 0;
		fConst28 = floorf((0.5f + (0.031604f * iConst0)));
		iConst29 = int((int((fConst24 - fConst28)) & 8191));
		for (int i=0; i<2048; i++) fVec7[i] = 0;
		iConst30 = int((int((fConst28 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec39[i] = 0;
		for (int i=0; i<2; i++) fRec46[i] = 0;
		fConst31 = floorf((0.5f + (0.125f * iConst0)));
		fConst32 = ((0 - (6.907755278982138f * fConst31)) / float(iConst0));
		fConst33 = (0.5f * fConst32);
		fConst34 = (0.3333333333333333f * fConst32);
		for (int i=0; i<2; i++) fRec45[i] = 0;
		for (int i=0; i<8192; i++) fVec8[i] = 0;
		fConst35 = floorf((0.5f + (0.013458f * iConst0)));
		iConst36 = int((int((fConst31 - fConst35)) & 8191));
		for (int i=0; i<1024; i++) fVec9[i] = 0;
		iConst37 = int((int((fConst35 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec43[i] = 0;
		for (int i=0; i<2; i++) fRec50[i] = 0;
		fConst38 = floorf((0.5f + (0.210389f * iConst0)));
		fConst39 = ((0 - (6.907755278982138f * fConst38)) / float(iConst0));
		fConst40 = (0.5f * fConst39);
		fConst41 = (0.3333333333333333f * fConst39);
		for (int i=0; i<2; i++) fRec49[i] = 0;
		for (int i=0; i<16384; i++) fVec10[i] = 0;
		fConst42 = floorf((0.5f + (0.024421f * iConst0)));
		iConst43 = int((int((fConst38 - fConst42)) & 16383));
		fslider5 = 0.5f;
		fConst44 = (0.5f * iConst0);
		for (int i=0; i<4096; i++) fVec11[i] = 0;
		for (int i=0; i<2048; i++) fVec12[i] = 0;
		iConst45 = int((int((fConst42 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec47[i] = 0;
		for (int i=0; i<2; i++) fRec54[i] = 0;
		fConst46 = floorf((0.5f + (0.192303f * iConst0)));
		fConst47 = ((0 - (6.907755278982138f * fConst46)) / float(iConst0));
		fConst48 = (0.5f * fConst47);
		fConst49 = (0.3333333333333333f * fConst47);
		for (int i=0; i<2; i++) fRec53[i] = 0;
		for (int i=0; i<8192; i++) fVec13[i] = 0;
		fConst50 = floorf((0.5f + (0.029291f * iConst0)));
		iConst51 = int((int((fConst46 - fConst50)) & 8191));
		for (int i=0; i<2048; i++) fVec14[i] = 0;
		iConst52 = int((int((fConst50 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec51[i] = 0;
		for (int i=0; i<2; i++) fRec58[i] = 0;
		fConst53 = floorf((0.5f + (0.256891f * iConst0)));
		fConst54 = ((0 - (6.907755278982138f * fConst53)) / float(iConst0));
		fConst55 = (0.5f * fConst54);
		fConst56 = (0.3333333333333333f * fConst54);
		for (int i=0; i<2; i++) fRec57[i] = 0;
		for (int i=0; i<16384; i++) fVec15[i] = 0;
		fConst57 = floorf((0.5f + (0.027333f * iConst0)));
		iConst58 = int((int((fConst53 - fConst57)) & 16383));
		for (int i=0; i<2048; i++) fVec16[i] = 0;
		iConst59 = int((int((fConst57 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec55[i] = 0;
		for (int i=0; i<2; i++) fRec62[i] = 0;
		fConst60 = floorf((0.5f + (0.219991f * iConst0)));
		fConst61 = ((0 - (6.907755278982138f * fConst60)) / float(iConst0));
		fConst62 = (0.5f * fConst61);
		fConst63 = (0.3333333333333333f * fConst61);
		for (int i=0; i<2; i++) fRec61[i] = 0;
		for (int i=0; i<16384; i++) fVec17[i] = 0;
		fConst64 = floorf((0.5f + (0.019123f * iConst0)));
		iConst65 = int((int((fConst60 - fConst64)) & 16383));
		for (int i=0; i<1024; i++) fVec18[i] = 0;
		iConst66 = int((int((fConst64 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec59[i] = 0;
		for (int i=0; i<3; i++) fRec23[i] = 0;
		for (int i=0; i<3; i++) fRec24[i] = 0;
		for (int i=0; i<3; i++) fRec25[i] = 0;
		for (int i=0; i<3; i++) fRec26[i] = 0;
		for (int i=0; i<3; i++) fRec27[i] = 0;
		for (int i=0; i<3; i++) fRec28[i] = 0;
		for (int i=0; i<3; i++) fRec29[i] = 0;
		for (int i=0; i<3; i++) fRec30[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void buildUserInterface(UI* interface) {
		interface->openVerticalBox("0x00");
		interface->openHorizontalBox("Basic_Parameters");
		interface->declare(&fentry0, "1", "");
		interface->declare(&fentry0, "tooltip", "Tone frequency");
		interface->declare(&fentry0, "unit", "Hz");
		interface->addNumEntry("freq", &fentry0, 4.4e+02f, 2e+01f, 2e+04f, 1.0f);
		interface->declare(&fentry1, "1", "");
		interface->declare(&fentry1, "tooltip", "Gain (value between 0 and 1)");
		interface->addNumEntry("gain", &fentry1, 0.8f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fbutton0, "1", "");
		interface->declare(&fbutton0, "tooltip", "noteOn = 1, noteOff = 0");
		interface->addButton("gate", &fbutton0);
		interface->closeBox();
		interface->openHorizontalBox("Physical_and_Nonlinearity");
		interface->openVerticalBox("Nonlinear_Filter_Parameters");
		interface->declare(&fslider2, "2", "");
		interface->declare(&fslider2, "tooltip", "Frequency of the sine wave for the modulation of theta (works if Modulation Type=3)");
		interface->declare(&fslider2, "unit", "Hz");
		interface->addHorizontalSlider("Modulation_Frequency", &fslider2, 2.2e+02f, 2e+01f, 1e+03f, 0.1f);
		interface->declare(&fentry2, "2", "");
		interface->declare(&fentry2, "tooltip", "0=theta is modulated by the incoming signal; 1=theta is modulated by the averaged incoming signal; 2=theta is modulated by the squared incoming signal; 3=theta is modulated by a sine wave of frequency freqMod; 4=theta is modulated by a sine wave of frequency freq;");
		interface->addNumEntry("Modulation_Type", &fentry2, 0.0f, 0.0f, 4.0f, 1.0f);
		interface->declare(&fslider1, "2", "");
		interface->declare(&fslider1, "tooltip", "Nonlinearity factor (value between 0 and 1)");
		interface->addHorizontalSlider("Nonlinearity", &fslider1, 0.0f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->closeBox();
		interface->openVerticalBox("Reverb");
		interface->addHorizontalSlider("reverbGain", &fslider0, 0.137f, 0.0f, 1.0f, 0.01f);
		interface->addHorizontalSlider("roomSize", &fslider4, 0.72f, 0.01f, 2.0f, 0.01f);
		interface->closeBox();
		interface->openVerticalBox("Spat");
		interface->addHorizontalSlider("pan angle", &fslider3, 0.6f, 0.0f, 1.0f, 0.01f);
		interface->addHorizontalSlider("spatial width", &fslider5, 0.5f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0 = (0.0010000000000000009f * float(fslider0));
		float 	fSlow1 = float(fbutton0);
		int 	iSlow2 = (fSlow1 < 1);
		float 	fSlow3 = float(fentry0);
		int 	iSlow4 = int(((17.31234049066756f * (logf(fSlow3) - 6.0867747269123065f)) + 69.5f));
		float 	fSlow5 = expf((0 - (fConst2 / (float(fentry1) * getValueDryTapAmpT60(iSlow4)))));
		int 	iSlow6 = (fSlow1 > 0);
		float 	fSlow7 = (0.0010000000000000009f * float(fslider1));
		float 	fSlow8 = float(fentry2);
		float 	fSlow9 = (3.141592653589793f * (fSlow8 == 2));
		float 	fSlow10 = (1.5707963267948966f * (fSlow8 == 1));
		float 	fSlow11 = (3.141592653589793f * (fSlow8 == 0));
		int 	iSlow12 = (fSlow8 < 3);
		float 	fSlow13 = (0.0010000000000000009f * float(fslider2));
		int 	iSlow14 = (fSlow8 != 4);
		float 	fSlow15 = (fSlow3 * (fSlow8 == 4));
		int 	iSlow16 = (fSlow8 >= 3);
		float 	fSlow17 = (0.0010000000000000009f * ((0.9996f * fSlow1) + (0.9f * (iSlow2 * getValueReleaseLoopGain(iSlow4)))));
		int 	iSlow18 = int((int((float(iConst0) / fSlow3)) & 4095));
		float 	fSlow19 = getValueLoopFiltera2(iSlow4);
		float 	fSlow20 = getValueLoopFiltera1(iSlow4);
		float 	fSlow21 = getValueLoopFilterb2(iSlow4);
		float 	fSlow22 = getValueLoopFilterb1(iSlow4);
		float 	fSlow23 = getValueLoopFilterb0(iSlow4);
		float 	fSlow24 = float(fslider3);
		float 	fSlow25 = (1.0f - fSlow24);
		float 	fSlow26 = float(fslider4);
		float 	fSlow27 = expf((fConst10 / fSlow26));
		float 	fSlow28 = ((expf((fConst11 / fSlow26)) / fSlow27) - 1);
		float 	fSlow29 = faustpower<2>(fSlow27);
		float 	fSlow30 = (1.0f - fSlow29);
		float 	fSlow31 = (1.0f - (fConst12 * fSlow29));
		float 	fSlow32 = (fSlow31 / fSlow30);
		float 	fSlow33 = sqrtf(max((float)0, ((faustpower<2>(fSlow31) / faustpower<2>(fSlow30)) - 1.0f)));
		float 	fSlow34 = (fSlow27 * ((1.0f + fSlow33) - fSlow32));
		float 	fSlow35 = (fSlow32 - fSlow33);
		float 	fSlow36 = expf((fConst19 / fSlow26));
		float 	fSlow37 = ((expf((fConst20 / fSlow26)) / fSlow36) - 1);
		float 	fSlow38 = faustpower<2>(fSlow36);
		float 	fSlow39 = (1.0f - fSlow38);
		float 	fSlow40 = (1.0f - (fConst12 * fSlow38));
		float 	fSlow41 = (fSlow40 / fSlow39);
		float 	fSlow42 = sqrtf(max((float)0, ((faustpower<2>(fSlow40) / faustpower<2>(fSlow39)) - 1.0f)));
		float 	fSlow43 = (fSlow36 * ((1.0f + fSlow42) - fSlow41));
		float 	fSlow44 = (fSlow41 - fSlow42);
		float 	fSlow45 = expf((fConst26 / fSlow26));
		float 	fSlow46 = ((expf((fConst27 / fSlow26)) / fSlow45) - 1);
		float 	fSlow47 = faustpower<2>(fSlow45);
		float 	fSlow48 = (1.0f - fSlow47);
		float 	fSlow49 = (1.0f - (fConst12 * fSlow47));
		float 	fSlow50 = (fSlow49 / fSlow48);
		float 	fSlow51 = sqrtf(max((float)0, ((faustpower<2>(fSlow49) / faustpower<2>(fSlow48)) - 1.0f)));
		float 	fSlow52 = (fSlow45 * ((1.0f + fSlow51) - fSlow50));
		float 	fSlow53 = (fSlow50 - fSlow51);
		float 	fSlow54 = expf((fConst33 / fSlow26));
		float 	fSlow55 = ((expf((fConst34 / fSlow26)) / fSlow54) - 1);
		float 	fSlow56 = faustpower<2>(fSlow54);
		float 	fSlow57 = (1.0f - fSlow56);
		float 	fSlow58 = (1.0f - (fConst12 * fSlow56));
		float 	fSlow59 = (fSlow58 / fSlow57);
		float 	fSlow60 = sqrtf(max((float)0, ((faustpower<2>(fSlow58) / faustpower<2>(fSlow57)) - 1.0f)));
		float 	fSlow61 = (fSlow54 * ((1.0f + fSlow60) - fSlow59));
		float 	fSlow62 = (fSlow59 - fSlow60);
		float 	fSlow63 = expf((fConst40 / fSlow26));
		float 	fSlow64 = ((expf((fConst41 / fSlow26)) / fSlow63) - 1);
		float 	fSlow65 = faustpower<2>(fSlow63);
		float 	fSlow66 = (1.0f - fSlow65);
		float 	fSlow67 = (1.0f - (fConst12 * fSlow65));
		float 	fSlow68 = (fSlow67 / fSlow66);
		float 	fSlow69 = sqrtf(max((float)0, ((faustpower<2>(fSlow67) / faustpower<2>(fSlow66)) - 1.0f)));
		float 	fSlow70 = (fSlow63 * ((1.0f + fSlow69) - fSlow68));
		float 	fSlow71 = (fSlow68 - fSlow69);
		int 	iSlow72 = int((int((fConst44 * (float(fslider5) / fSlow3))) & 4095));
		float 	fSlow73 = expf((fConst48 / fSlow26));
		float 	fSlow74 = ((expf((fConst49 / fSlow26)) / fSlow73) - 1);
		float 	fSlow75 = faustpower<2>(fSlow73);
		float 	fSlow76 = (1.0f - fSlow75);
		float 	fSlow77 = (1.0f - (fConst12 * fSlow75));
		float 	fSlow78 = (fSlow77 / fSlow76);
		float 	fSlow79 = sqrtf(max((float)0, ((faustpower<2>(fSlow77) / faustpower<2>(fSlow76)) - 1.0f)));
		float 	fSlow80 = (fSlow73 * ((1.0f + fSlow79) - fSlow78));
		float 	fSlow81 = (fSlow78 - fSlow79);
		float 	fSlow82 = expf((fConst55 / fSlow26));
		float 	fSlow83 = ((expf((fConst56 / fSlow26)) / fSlow82) - 1);
		float 	fSlow84 = faustpower<2>(fSlow82);
		float 	fSlow85 = (1.0f - fSlow84);
		float 	fSlow86 = (1.0f - (fConst12 * fSlow84));
		float 	fSlow87 = (fSlow86 / fSlow85);
		float 	fSlow88 = sqrtf(max((float)0, ((faustpower<2>(fSlow86) / faustpower<2>(fSlow85)) - 1.0f)));
		float 	fSlow89 = (fSlow82 * ((1.0f + fSlow88) - fSlow87));
		float 	fSlow90 = (fSlow87 - fSlow88);
		float 	fSlow91 = expf((fConst62 / fSlow26));
		float 	fSlow92 = ((expf((fConst63 / fSlow26)) / fSlow91) - 1);
		float 	fSlow93 = faustpower<2>(fSlow91);
		float 	fSlow94 = (1.0f - fSlow93);
		float 	fSlow95 = (1.0f - (fConst12 * fSlow93));
		float 	fSlow96 = (fSlow95 / fSlow94);
		float 	fSlow97 = sqrtf(max((float)0, ((faustpower<2>(fSlow95) / faustpower<2>(fSlow94)) - 1.0f)));
		float 	fSlow98 = (fSlow91 * ((1.0f + fSlow97) - fSlow96));
		float 	fSlow99 = (fSlow96 - fSlow97);
		FAUSTFLOAT* output0 = output[0];
		FAUSTFLOAT* output1 = output[1];
		for (int i=0; i<count; i++) {
			fRec0[0] = ((0.999f * fRec0[1]) + fSlow0);
			float fTemp0 = (1 - fRec0[0]);
			iRec3[0] = (12345 + (1103515245 * iRec3[1]));
			fRec5[0] = (1 + (fSlow1 * fRec5[1]));
			float fTemp1 = (fRec5[0] - 1);
			int iTemp2 = ((fTemp1 < 2.0f) & iSlow6);
			float fTemp3 = ((0.0301973834223185f * iTemp2) + (fSlow5 * ((fTemp1 >= 2.0f) | iSlow2)));
			fRec4[0] = ((fRec4[1] * fTemp3) + (0.15f * (iTemp2 * (1 - fTemp3))));
			float fTemp4 = fRec1[(IOTA-1)&4095];
			fRec6[0] = (fSlow7 + (0.999f * fRec6[1]));
			float fTemp5 = (fRec6[0] * (((fSlow11 * fTemp4) + (fSlow10 * (fTemp4 + fRec1[(IOTA-2)&4095]))) + (fSlow9 * faustpower<2>(fTemp4))));
			float fTemp6 = cosf(fTemp5);
			float fTemp7 = sinf(fTemp5);
			float fTemp8 = (0 - fTemp7);
			float fTemp9 = ((fRec7[1] * fTemp8) + (fTemp4 * fTemp6));
			float fTemp10 = ((fTemp8 * fRec8[1]) + (fTemp6 * fTemp9));
			float fTemp11 = ((fTemp8 * fRec9[1]) + (fTemp6 * fTemp10));
			float fTemp12 = ((fTemp8 * fRec10[1]) + (fTemp6 * fTemp11));
			float fTemp13 = ((fTemp8 * fRec11[1]) + (fTemp6 * fTemp12));
			fRec12[0] = ((fTemp8 * fRec12[1]) + (fTemp6 * fTemp13));
			fRec11[0] = ((fTemp7 * fTemp13) + (fTemp6 * fRec12[1]));
			fRec10[0] = ((fTemp7 * fTemp12) + (fTemp6 * fRec11[1]));
			fRec9[0] = ((fTemp7 * fTemp11) + (fTemp6 * fRec10[1]));
			fRec8[0] = ((fTemp7 * fTemp10) + (fTemp6 * fRec9[1]));
			fRec7[0] = ((fTemp7 * fTemp9) + (fTemp6 * fRec8[1]));
			fRec15[0] = (fSlow13 + (0.999f * fRec15[1]));
			float fTemp14 = (fRec14[1] + (fConst3 * (fSlow15 + (iSlow14 * fRec15[0]))));
			fRec14[0] = (fTemp14 - floorf(fTemp14));
			float fTemp15 = (3.141592653589793f * (fRec6[0] * ftbl0[int((65536.0f * fRec14[0]))]));
			float fTemp16 = cosf(fTemp15);
			float fTemp17 = sinf(fTemp15);
			float fTemp18 = (0 - fTemp17);
			float fTemp19 = ((fRec16[1] * fTemp18) + (fTemp4 * fTemp16));
			float fTemp20 = ((fTemp18 * fRec17[1]) + (fTemp16 * fTemp19));
			float fTemp21 = ((fTemp18 * fRec18[1]) + (fTemp16 * fTemp20));
			float fTemp22 = ((fTemp18 * fRec19[1]) + (fTemp16 * fTemp21));
			float fTemp23 = ((fTemp18 * fRec20[1]) + (fTemp16 * fTemp22));
			fRec21[0] = ((fTemp18 * fRec21[1]) + (fTemp16 * fTemp23));
			fRec20[0] = ((fTemp17 * fTemp23) + (fTemp16 * fRec21[1]));
			fRec19[0] = ((fTemp17 * fTemp22) + (fTemp16 * fRec20[1]));
			fRec18[0] = ((fTemp17 * fTemp21) + (fTemp16 * fRec19[1]));
			fRec17[0] = ((fTemp17 * fTemp20) + (fTemp16 * fRec18[1]));
			fRec16[0] = ((fTemp17 * fTemp19) + (fTemp16 * fRec17[1]));
			fRec22[0] = ((0.999f * fRec22[1]) + fSlow17);
			fVec0[IOTA&4095] = ((fRec22[0] * ((iSlow16 * ((fTemp4 * fTemp17) + (fRec16[1] * fTemp16))) + (iSlow12 * ((fRec6[0] * ((fTemp4 * fTemp7) + (fRec7[1] * fTemp6))) + ((1 - fRec6[0]) * fTemp4))))) + (4.656612875245797e-10f * (fRec4[0] * iRec3[0])));
			fRec2[0] = (0 - (((fSlow20 * fRec2[1]) + (fSlow19 * fRec2[2])) - fVec0[(IOTA-iSlow18)&4095]));
			fRec1[IOTA&4095] = (((fSlow23 * fRec2[0]) + (fSlow22 * fRec2[1])) + (fSlow21 * fRec2[2]));
			float fTemp24 = fRec1[(IOTA-0)&4095];
			fRec34[0] = ((fConst7 * fRec34[1]) + (fConst6 * (fRec27[1] + fRec27[2])));
			fRec33[0] = ((fSlow35 * fRec33[1]) + (fSlow34 * (fRec27[1] + (fSlow28 * fRec34[0]))));
			fVec1[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec33[0]));
			fVec2[IOTA&4095] = (fSlow25 * (fTemp24 * fRec0[0]));
			float fTemp25 = (0.3f * fVec2[(IOTA-iConst15)&4095]);
			float fTemp26 = ((fTemp25 + fVec1[(IOTA-iConst14)&8191]) - (0.6f * fRec31[1]));
			fVec3[IOTA&2047] = fTemp26;
			fRec31[0] = fVec3[(IOTA-iConst16)&2047];
			float 	fRec32 = (0.6f * fVec3[IOTA&2047]);
			fRec38[0] = ((fConst7 * fRec38[1]) + (fConst6 * (fRec23[1] + fRec23[2])));
			fRec37[0] = ((fSlow44 * fRec37[1]) + (fSlow43 * (fRec23[1] + (fSlow37 * fRec38[0]))));
			fVec4[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec37[0]));
			float fTemp27 = ((fVec4[(IOTA-iConst22)&8191] + fTemp25) - (0.6f * fRec35[1]));
			fVec5[IOTA&1023] = fTemp27;
			fRec35[0] = fVec5[(IOTA-iConst23)&1023];
			float 	fRec36 = (0.6f * fVec5[IOTA&1023]);
			float fTemp28 = (fRec36 + fRec32);
			fRec42[0] = ((fConst7 * fRec42[1]) + (fConst6 * (fRec25[1] + fRec25[2])));
			fRec41[0] = ((fSlow53 * fRec41[1]) + (fSlow52 * (fRec25[1] + (fSlow46 * fRec42[0]))));
			fVec6[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec41[0]));
			float fTemp29 = (fVec6[(IOTA-iConst29)&8191] - (fTemp25 + (0.6f * fRec39[1])));
			fVec7[IOTA&2047] = fTemp29;
			fRec39[0] = fVec7[(IOTA-iConst30)&2047];
			float 	fRec40 = (0.6f * fVec7[IOTA&2047]);
			fRec46[0] = ((fConst7 * fRec46[1]) + (fConst6 * (fRec29[1] + fRec29[2])));
			fRec45[0] = ((fSlow62 * fRec45[1]) + (fSlow61 * (fRec29[1] + (fSlow55 * fRec46[0]))));
			fVec8[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec45[0]));
			float fTemp30 = (fVec8[(IOTA-iConst36)&8191] - (fTemp25 + (0.6f * fRec43[1])));
			fVec9[IOTA&1023] = fTemp30;
			fRec43[0] = fVec9[(IOTA-iConst37)&1023];
			float 	fRec44 = (0.6f * fVec9[IOTA&1023]);
			float fTemp31 = (fRec44 + (fRec40 + fTemp28));
			fRec50[0] = ((fConst7 * fRec50[1]) + (fConst6 * (fRec24[1] + fRec24[2])));
			fRec49[0] = ((fSlow71 * fRec49[1]) + (fSlow70 * (fRec24[1] + (fSlow64 * fRec50[0]))));
			fVec10[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec49[0]));
			float fTemp32 = fRec1[(IOTA-iSlow72)&4095];
			fVec11[IOTA&4095] = (fSlow24 * (fRec0[0] * fTemp32));
			float fTemp33 = (0.3f * fVec11[(IOTA-iConst15)&4095]);
			float fTemp34 = (fTemp33 + ((0.6f * fRec47[1]) + fVec10[(IOTA-iConst43)&16383]));
			fVec12[IOTA&2047] = fTemp34;
			fRec47[0] = fVec12[(IOTA-iConst45)&2047];
			float 	fRec48 = (0 - (0.6f * fVec12[IOTA&2047]));
			fRec54[0] = ((fConst7 * fRec54[1]) + (fConst6 * (fRec28[1] + fRec28[2])));
			fRec53[0] = ((fSlow81 * fRec53[1]) + (fSlow80 * (fRec28[1] + (fSlow74 * fRec54[0]))));
			fVec13[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec53[0]));
			float fTemp35 = (fVec13[(IOTA-iConst51)&8191] + (fTemp33 + (0.6f * fRec51[1])));
			fVec14[IOTA&2047] = fTemp35;
			fRec51[0] = fVec14[(IOTA-iConst52)&2047];
			float 	fRec52 = (0 - (0.6f * fVec14[IOTA&2047]));
			fRec58[0] = ((fConst7 * fRec58[1]) + (fConst6 * (fRec26[1] + fRec26[2])));
			fRec57[0] = ((fSlow90 * fRec57[1]) + (fSlow89 * (fRec26[1] + (fSlow83 * fRec58[0]))));
			fVec15[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec57[0]));
			float fTemp36 = (((0.6f * fRec55[1]) + fVec15[(IOTA-iConst58)&16383]) - fTemp33);
			fVec16[IOTA&2047] = fTemp36;
			fRec55[0] = fVec16[(IOTA-iConst59)&2047];
			float 	fRec56 = (0 - (0.6f * fVec16[IOTA&2047]));
			fRec62[0] = ((fConst7 * fRec62[1]) + (fConst6 * (fRec30[1] + fRec30[2])));
			fRec61[0] = ((fSlow99 * fRec61[1]) + (fSlow98 * (fRec30[1] + (fSlow92 * fRec62[0]))));
			fVec17[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec61[0]));
			float fTemp37 = (((0.6f * fRec59[1]) + fVec17[(IOTA-iConst65)&16383]) - fTemp33);
			fVec18[IOTA&1023] = fTemp37;
			fRec59[0] = fVec18[(IOTA-iConst66)&1023];
			float 	fRec60 = (0 - (0.6f * fVec18[IOTA&1023]));
			fRec23[0] = (fRec59[1] + (fRec55[1] + (fRec51[1] + (fRec47[1] + (fRec43[1] + (fRec39[1] + (fRec31[1] + (fRec35[1] + (fRec60 + (fRec56 + (fRec52 + (fRec48 + fTemp31))))))))))));
			fRec24[0] = (0 - ((fRec59[1] + (fRec55[1] + (fRec51[1] + (fRec47[1] + (fRec60 + (fRec56 + (fRec48 + fRec52))))))) - (fRec43[1] + (fRec39[1] + (fRec31[1] + (fRec35[1] + fTemp31))))));
			float fTemp38 = (fRec40 + fRec44);
			fRec25[0] = (0 - ((fRec59[1] + (fRec55[1] + (fRec43[1] + (fRec39[1] + (fRec60 + (fRec56 + fTemp38)))))) - (fRec51[1] + (fRec47[1] + (fRec31[1] + (fRec35[1] + (fRec52 + (fRec48 + fTemp28))))))));
			fRec26[0] = (0 - ((fRec51[1] + (fRec47[1] + (fRec43[1] + (fRec39[1] + (fRec52 + (fRec48 + fTemp38)))))) - (fRec59[1] + (fRec55[1] + (fRec31[1] + (fRec35[1] + (fRec60 + (fRec56 + fTemp28))))))));
			float fTemp39 = (fRec36 + fRec40);
			float fTemp40 = (fRec32 + fRec44);
			fRec27[0] = (0 - ((fRec59[1] + (fRec51[1] + (fRec43[1] + (fRec31[1] + (fRec60 + (fRec52 + fTemp40)))))) - (fRec55[1] + (fRec47[1] + (fRec39[1] + (fRec35[1] + (fRec56 + (fRec48 + fTemp39))))))));
			fRec28[0] = (0 - ((fRec55[1] + (fRec47[1] + (fRec43[1] + (fRec31[1] + (fRec56 + (fRec48 + fTemp40)))))) - (fRec59[1] + (fRec51[1] + (fRec39[1] + (fRec35[1] + (fRec60 + (fRec52 + fTemp39))))))));
			float fTemp41 = (fRec36 + fRec44);
			float fTemp42 = (fRec32 + fRec40);
			fRec29[0] = (0 - ((fRec55[1] + (fRec51[1] + (fRec39[1] + (fRec31[1] + (fRec56 + (fRec52 + fTemp42)))))) - (fRec59[1] + (fRec47[1] + (fRec43[1] + (fRec35[1] + (fRec60 + (fRec48 + fTemp41))))))));
			fRec30[0] = (0 - ((fRec59[1] + (fRec47[1] + (fRec39[1] + (fRec31[1] + (fRec60 + (fRec48 + fTemp42)))))) - (fRec55[1] + (fRec51[1] + (fRec43[1] + (fRec35[1] + (fRec56 + (fRec52 + fTemp41))))))));
			output0[i] = (FAUSTFLOAT)((0.37f * (fRec24[0] + fRec25[0])) + (fSlow25 * (fTemp24 * fTemp0)));
			output1[i] = (FAUSTFLOAT)((0.37f * (fRec24[0] - fRec25[0])) + (fSlow24 * (fTemp0 * fTemp32)));
			// post processing
			fRec30[2] = fRec30[1]; fRec30[1] = fRec30[0];
			fRec29[2] = fRec29[1]; fRec29[1] = fRec29[0];
			fRec28[2] = fRec28[1]; fRec28[1] = fRec28[0];
			fRec27[2] = fRec27[1]; fRec27[1] = fRec27[0];
			fRec26[2] = fRec26[1]; fRec26[1] = fRec26[0];
			fRec25[2] = fRec25[1]; fRec25[1] = fRec25[0];
			fRec24[2] = fRec24[1]; fRec24[1] = fRec24[0];
			fRec23[2] = fRec23[1]; fRec23[1] = fRec23[0];
			fRec59[1] = fRec59[0];
			fRec61[1] = fRec61[0];
			fRec62[1] = fRec62[0];
			fRec55[1] = fRec55[0];
			fRec57[1] = fRec57[0];
			fRec58[1] = fRec58[0];
			fRec51[1] = fRec51[0];
			fRec53[1] = fRec53[0];
			fRec54[1] = fRec54[0];
			fRec47[1] = fRec47[0];
			fRec49[1] = fRec49[0];
			fRec50[1] = fRec50[0];
			fRec43[1] = fRec43[0];
			fRec45[1] = fRec45[0];
			fRec46[1] = fRec46[0];
			fRec39[1] = fRec39[0];
			fRec41[1] = fRec41[0];
			fRec42[1] = fRec42[0];
			fRec35[1] = fRec35[0];
			fRec37[1] = fRec37[0];
			fRec38[1] = fRec38[0];
			fRec31[1] = fRec31[0];
			fRec33[1] = fRec33[0];
			fRec34[1] = fRec34[0];
			fRec2[2] = fRec2[1]; fRec2[1] = fRec2[0];
			IOTA = IOTA+1;
			fRec22[1] = fRec22[0];
			fRec16[1] = fRec16[0];
			fRec17[1] = fRec17[0];
			fRec18[1] = fRec18[0];
			fRec19[1] = fRec19[0];
			fRec20[1] = fRec20[0];
			fRec21[1] = fRec21[0];
			fRec14[1] = fRec14[0];
			fRec15[1] = fRec15[0];
			fRec7[1] = fRec7[0];
			fRec8[1] = fRec8[0];
			fRec9[1] = fRec9[0];
			fRec10[1] = fRec10[0];
			fRec11[1] = fRec11[0];
			fRec12[1] = fRec12[0];
			fRec6[1] = fRec6[0];
			fRec4[1] = fRec4[0];
			fRec5[1] = fRec5[0];
			iRec3[1] = iRec3[0];
			fRec0[1] = fRec0[0];
		}
	}
};


float 	mydsp::ftbl0[65536];
