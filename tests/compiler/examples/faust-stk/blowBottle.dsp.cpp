//-----------------------------------------------------
// name: "BlowBottle"
// author: "Romain Michon (rmichon@ccrma.stanford.edu)"
// copyright: "Romain Michon"
// version: "1.0"
//
// Code generated with Faust 0.9.70 (http://faust.grame.fr)
//-----------------------------------------------------
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif  

typedef long double quad;
/* link with  */
#include <math.h>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline float faustpower(float x)          { return powf(x,N); } 
template <int N> inline double faustpower(double x)        { return pow(x,N); }
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <>   inline int faustpower<0>(int x)            { return 1; }
template <>   inline int faustpower<1>(int x)            { return x; }
#endif

#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	class SIG0 {
	  private:
		int 	fSamplingFreq;
		int 	iRec16[2];
	  public:
		int getNumInputs() 	{ return 0; }
		int getNumOutputs() 	{ return 1; }
		void init(int samplingFreq) {
			fSamplingFreq = samplingFreq;
			for (int i=0; i<2; i++) iRec16[i] = 0;
		}
		void fill (int count, float output[]) {
			for (int i=0; i<count; i++) {
				iRec16[0] = (1 + iRec16[1]);
				output[i] = sinf((9.587379924285257e-05f * float((iRec16[0] - 1))));
				// post processing
				iRec16[1] = iRec16[0];
			}
		}
	};


	FAUSTFLOAT 	fslider0;
	float 	fRec0[2];
	FAUSTFLOAT 	fbutton0;
	int 	iRec1[2];
	FAUSTFLOAT 	fslider1;
	int 	iConst0;
	FAUSTFLOAT 	fslider2;
	FAUSTFLOAT 	fentry0;
	FAUSTFLOAT 	fslider3;
	float 	fRec2[2];
	FAUSTFLOAT 	fslider4;
	float 	fRec7[2];
	FAUSTFLOAT 	fentry1;
	int 	iRec8[2];
	FAUSTFLOAT 	fslider5;
	float 	fRec9[2];
	float 	fRec15[2];
	float 	fRec14[2];
	float 	fRec13[2];
	float 	fRec12[2];
	float 	fRec11[2];
	float 	fRec10[2];
	static float 	ftbl0[65536];
	FAUSTFLOAT 	fslider6;
	float 	fRec18[2];
	FAUSTFLOAT 	fentry2;
	float 	fConst1;
	float 	fConst2;
	float 	fRec17[2];
	float 	fRec24[2];
	float 	fRec23[2];
	float 	fRec22[2];
	float 	fRec21[2];
	float 	fRec20[2];
	float 	fRec19[2];
	FAUSTFLOAT 	fslider7;
	float 	fRec25[2];
	int 	iRec26[2];
	int 	iRec27[2];
	FAUSTFLOAT 	fslider8;
	FAUSTFLOAT 	fslider9;
	FAUSTFLOAT 	fslider10;
	float 	fRec28[2];
	FAUSTFLOAT 	fslider11;
	int 	iRec29[2];
	float 	fConst3;
	float 	fConst4;
	float 	fConst5;
	float 	fRec30[2];
	FAUSTFLOAT 	fslider12;
	int 	iRec31[2];
	FAUSTFLOAT 	fslider13;
	float 	fConst6;
	float 	fRec6[3];
	float 	fRec4[3];
	float 	fRec5[2];
	float 	fRec3[2];
	FAUSTFLOAT 	fslider14;
	float 	fConst7;
	float 	fConst8;
	float 	fConst9;
	float 	fConst10;
	float 	fRec43[2];
	FAUSTFLOAT 	fslider15;
	float 	fConst11;
	float 	fConst12;
	float 	fConst13;
	float 	fConst14;
	float 	fConst15;
	float 	fRec42[2];
	int 	IOTA;
	float 	fVec0[8192];
	float 	fConst16;
	int 	iConst17;
	float 	fVec1[4096];
	int 	iConst18;
	float 	fVec2[2048];
	int 	iConst19;
	float 	fRec40[2];
	float 	fRec47[2];
	float 	fConst20;
	float 	fConst21;
	float 	fConst22;
	float 	fConst23;
	float 	fRec46[2];
	float 	fVec3[8192];
	float 	fConst24;
	int 	iConst25;
	float 	fVec4[1024];
	int 	iConst26;
	float 	fRec44[2];
	float 	fRec51[2];
	float 	fConst27;
	float 	fConst28;
	float 	fConst29;
	float 	fConst30;
	float 	fRec50[2];
	float 	fVec5[8192];
	float 	fConst31;
	int 	iConst32;
	float 	fVec6[2048];
	int 	iConst33;
	float 	fRec48[2];
	float 	fRec55[2];
	float 	fConst34;
	float 	fConst35;
	float 	fConst36;
	float 	fConst37;
	float 	fRec54[2];
	float 	fVec7[8192];
	float 	fConst38;
	int 	iConst39;
	float 	fVec8[1024];
	int 	iConst40;
	float 	fRec52[2];
	float 	fRec59[2];
	float 	fConst41;
	float 	fConst42;
	float 	fConst43;
	float 	fConst44;
	float 	fRec58[2];
	float 	fVec9[16384];
	float 	fConst45;
	int 	iConst46;
	float 	fVec10[4096];
	FAUSTFLOAT 	fslider16;
	float 	fConst47;
	float 	fVec11[4096];
	float 	fVec12[2048];
	int 	iConst48;
	float 	fRec56[2];
	float 	fRec63[2];
	float 	fConst49;
	float 	fConst50;
	float 	fConst51;
	float 	fConst52;
	float 	fRec62[2];
	float 	fVec13[8192];
	float 	fConst53;
	int 	iConst54;
	float 	fVec14[2048];
	int 	iConst55;
	float 	fRec60[2];
	float 	fRec67[2];
	float 	fConst56;
	float 	fConst57;
	float 	fConst58;
	float 	fConst59;
	float 	fRec66[2];
	float 	fVec15[16384];
	float 	fConst60;
	int 	iConst61;
	float 	fVec16[2048];
	int 	iConst62;
	float 	fRec64[2];
	float 	fRec71[2];
	float 	fConst63;
	float 	fConst64;
	float 	fConst65;
	float 	fConst66;
	float 	fRec70[2];
	float 	fVec17[16384];
	float 	fConst67;
	int 	iConst68;
	float 	fVec18[1024];
	int 	iConst69;
	float 	fRec68[2];
	float 	fRec32[3];
	float 	fRec33[3];
	float 	fRec34[3];
	float 	fRec35[3];
	float 	fRec36[3];
	float 	fRec37[3];
	float 	fRec38[3];
	float 	fRec39[3];
  public:
	static void metadata(Meta* m) 	{ 
		m->declare("name", "BlowBottle");
		m->declare("description", "Blown Bottle Instrument");
		m->declare("author", "Romain Michon (rmichon@ccrma.stanford.edu)");
		m->declare("copyright", "Romain Michon");
		m->declare("version", "1.0");
		m->declare("licence", "STK-4.3");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/version", "1.0");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/version", "1.0");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("instrument.lib/name", "Faust-STK Tools Library");
		m->declare("instrument.lib/author", "Romain Michon (rmichon@ccrma.stanford.edu)");
		m->declare("instrument.lib/copyright", "Romain Michon");
		m->declare("instrument.lib/version", "1.0");
		m->declare("instrument.lib/licence", "STK-4.3");
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/version", "1.29");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("effect.lib/name", "Faust Audio Effect Library");
		m->declare("effect.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/copyright", "Julius O. Smith III");
		m->declare("effect.lib/version", "1.33");
		m->declare("effect.lib/license", "STK-4.3");
		m->declare("effect.lib/exciter_name", "Harmonic Exciter");
		m->declare("effect.lib/exciter_author", "Priyanka Shekar (pshekar@ccrma.stanford.edu)");
		m->declare("effect.lib/exciter_copyright", "Copyright (c) 2013 Priyanka Shekar");
		m->declare("effect.lib/exciter_version", "1.0");
		m->declare("effect.lib/exciter_license", "MIT License (MIT)");
	}

	virtual int getNumInputs() 	{ return 0; }
	virtual int getNumOutputs() 	{ return 2; }
	static void classInit(int samplingFreq) {
		SIG0 sig0;
		sig0.init(samplingFreq);
		sig0.fill(65536,ftbl0);
	}
	virtual void instanceInit(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fslider0 = 0.137f;
		for (int i=0; i<2; i++) fRec0[i] = 0;
		fbutton0 = 0.0;
		for (int i=0; i<2; i++) iRec1[i] = 0;
		fslider1 = 0.5f;
		iConst0 = min(192000, max(1, fSamplingFreq));
		fslider2 = 0.01f;
		fentry0 = 1.0f;
		fslider3 = 0.01f;
		for (int i=0; i<2; i++) fRec2[i] = 0;
		fslider4 = 0.0f;
		for (int i=0; i<2; i++) fRec7[i] = 0;
		fentry1 = 0.0f;
		for (int i=0; i<2; i++) iRec8[i] = 0;
		fslider5 = 0.1f;
		for (int i=0; i<2; i++) fRec9[i] = 0;
		for (int i=0; i<2; i++) fRec15[i] = 0;
		for (int i=0; i<2; i++) fRec14[i] = 0;
		for (int i=0; i<2; i++) fRec13[i] = 0;
		for (int i=0; i<2; i++) fRec12[i] = 0;
		for (int i=0; i<2; i++) fRec11[i] = 0;
		for (int i=0; i<2; i++) fRec10[i] = 0;
		fslider6 = 2.2e+02f;
		for (int i=0; i<2; i++) fRec18[i] = 0;
		fentry2 = 4.4e+02f;
		fConst1 = float(iConst0);
		fConst2 = (1.0f / fConst1);
		for (int i=0; i<2; i++) fRec17[i] = 0;
		for (int i=0; i<2; i++) fRec24[i] = 0;
		for (int i=0; i<2; i++) fRec23[i] = 0;
		for (int i=0; i<2; i++) fRec22[i] = 0;
		for (int i=0; i<2; i++) fRec21[i] = 0;
		for (int i=0; i<2; i++) fRec20[i] = 0;
		for (int i=0; i<2; i++) fRec19[i] = 0;
		fslider7 = 5.0f;
		for (int i=0; i<2; i++) fRec25[i] = 0;
		for (int i=0; i<2; i++) iRec26[i] = 0;
		for (int i=0; i<2; i++) iRec27[i] = 0;
		fslider8 = 0.01f;
		fslider9 = 0.05f;
		fslider10 = 0.5f;
		for (int i=0; i<2; i++) fRec28[i] = 0;
		fslider11 = 0.1f;
		for (int i=0; i<2; i++) iRec29[i] = 0;
		fConst3 = (0.2f * iConst0);
		fConst4 = (1 - powf(8e+01f,(1e+02f / float(iConst0))));
		fConst5 = (0.02f * iConst0);
		for (int i=0; i<2; i++) fRec30[i] = 0;
		fslider12 = 1.0f;
		for (int i=0; i<2; i++) iRec31[i] = 0;
		fslider13 = 0.5f;
		fConst6 = (6.283185307179586f / float(iConst0));
		for (int i=0; i<3; i++) fRec6[i] = 0;
		for (int i=0; i<3; i++) fRec4[i] = 0;
		for (int i=0; i<2; i++) fRec5[i] = 0;
		for (int i=0; i<2; i++) fRec3[i] = 0;
		fslider14 = 0.6f;
		fConst7 = (1.0f / tanf((628.3185307179587f / float(iConst0))));
		fConst8 = (1 + fConst7);
		fConst9 = (1.0f / fConst8);
		fConst10 = (0 - ((1 - fConst7) / fConst8));
		for (int i=0; i<2; i++) fRec43[i] = 0;
		fslider15 = 0.72f;
		fConst11 = floorf((0.5f + (0.174713f * iConst0)));
		fConst12 = ((0 - (6.907755278982138f * fConst11)) / float(iConst0));
		fConst13 = (0.5f * fConst12);
		fConst14 = (0.3333333333333333f * fConst12);
		fConst15 = cosf((37699.11184307752f / fConst1));
		for (int i=0; i<2; i++) fRec42[i] = 0;
		IOTA = 0;
		for (int i=0; i<8192; i++) fVec0[i] = 0;
		fConst16 = floorf((0.5f + (0.022904f * iConst0)));
		iConst17 = int((int((fConst11 - fConst16)) & 8191));
		for (int i=0; i<4096; i++) fVec1[i] = 0;
		iConst18 = int((int(fConst5) & 8191));
		for (int i=0; i<2048; i++) fVec2[i] = 0;
		iConst19 = int((int((fConst16 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec40[i] = 0;
		for (int i=0; i<2; i++) fRec47[i] = 0;
		fConst20 = floorf((0.5f + (0.153129f * iConst0)));
		fConst21 = ((0 - (6.907755278982138f * fConst20)) / float(iConst0));
		fConst22 = (0.5f * fConst21);
		fConst23 = (0.3333333333333333f * fConst21);
		for (int i=0; i<2; i++) fRec46[i] = 0;
		for (int i=0; i<8192; i++) fVec3[i] = 0;
		fConst24 = floorf((0.5f + (0.020346f * iConst0)));
		iConst25 = int((int((fConst20 - fConst24)) & 8191));
		for (int i=0; i<1024; i++) fVec4[i] = 0;
		iConst26 = int((int((fConst24 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec44[i] = 0;
		for (int i=0; i<2; i++) fRec51[i] = 0;
		fConst27 = floorf((0.5f + (0.127837f * iConst0)));
		fConst28 = ((0 - (6.907755278982138f * fConst27)) / float(iConst0));
		fConst29 = (0.5f * fConst28);
		fConst30 = (0.3333333333333333f * fConst28);
		for (int i=0; i<2; i++) fRec50[i] = 0;
		for (int i=0; i<8192; i++) fVec5[i] = 0;
		fConst31 = floorf((0.5f + (0.031604f * iConst0)));
		iConst32 = int((int((fConst27 - fConst31)) & 8191));
		for (int i=0; i<2048; i++) fVec6[i] = 0;
		iConst33 = int((int((fConst31 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec48[i] = 0;
		for (int i=0; i<2; i++) fRec55[i] = 0;
		fConst34 = floorf((0.5f + (0.125f * iConst0)));
		fConst35 = ((0 - (6.907755278982138f * fConst34)) / float(iConst0));
		fConst36 = (0.5f * fConst35);
		fConst37 = (0.3333333333333333f * fConst35);
		for (int i=0; i<2; i++) fRec54[i] = 0;
		for (int i=0; i<8192; i++) fVec7[i] = 0;
		fConst38 = floorf((0.5f + (0.013458f * iConst0)));
		iConst39 = int((int((fConst34 - fConst38)) & 8191));
		for (int i=0; i<1024; i++) fVec8[i] = 0;
		iConst40 = int((int((fConst38 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec52[i] = 0;
		for (int i=0; i<2; i++) fRec59[i] = 0;
		fConst41 = floorf((0.5f + (0.210389f * iConst0)));
		fConst42 = ((0 - (6.907755278982138f * fConst41)) / float(iConst0));
		fConst43 = (0.5f * fConst42);
		fConst44 = (0.3333333333333333f * fConst42);
		for (int i=0; i<2; i++) fRec58[i] = 0;
		for (int i=0; i<16384; i++) fVec9[i] = 0;
		fConst45 = floorf((0.5f + (0.024421f * iConst0)));
		iConst46 = int((int((fConst41 - fConst45)) & 16383));
		for (int i=0; i<4096; i++) fVec10[i] = 0;
		fslider16 = 0.5f;
		fConst47 = (0.5f * iConst0);
		for (int i=0; i<4096; i++) fVec11[i] = 0;
		for (int i=0; i<2048; i++) fVec12[i] = 0;
		iConst48 = int((int((fConst45 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec56[i] = 0;
		for (int i=0; i<2; i++) fRec63[i] = 0;
		fConst49 = floorf((0.5f + (0.192303f * iConst0)));
		fConst50 = ((0 - (6.907755278982138f * fConst49)) / float(iConst0));
		fConst51 = (0.5f * fConst50);
		fConst52 = (0.3333333333333333f * fConst50);
		for (int i=0; i<2; i++) fRec62[i] = 0;
		for (int i=0; i<8192; i++) fVec13[i] = 0;
		fConst53 = floorf((0.5f + (0.029291f * iConst0)));
		iConst54 = int((int((fConst49 - fConst53)) & 8191));
		for (int i=0; i<2048; i++) fVec14[i] = 0;
		iConst55 = int((int((fConst53 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec60[i] = 0;
		for (int i=0; i<2; i++) fRec67[i] = 0;
		fConst56 = floorf((0.5f + (0.256891f * iConst0)));
		fConst57 = ((0 - (6.907755278982138f * fConst56)) / float(iConst0));
		fConst58 = (0.5f * fConst57);
		fConst59 = (0.3333333333333333f * fConst57);
		for (int i=0; i<2; i++) fRec66[i] = 0;
		for (int i=0; i<16384; i++) fVec15[i] = 0;
		fConst60 = floorf((0.5f + (0.027333f * iConst0)));
		iConst61 = int((int((fConst56 - fConst60)) & 16383));
		for (int i=0; i<2048; i++) fVec16[i] = 0;
		iConst62 = int((int((fConst60 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec64[i] = 0;
		for (int i=0; i<2; i++) fRec71[i] = 0;
		fConst63 = floorf((0.5f + (0.219991f * iConst0)));
		fConst64 = ((0 - (6.907755278982138f * fConst63)) / float(iConst0));
		fConst65 = (0.5f * fConst64);
		fConst66 = (0.3333333333333333f * fConst64);
		for (int i=0; i<2; i++) fRec70[i] = 0;
		for (int i=0; i<16384; i++) fVec17[i] = 0;
		fConst67 = floorf((0.5f + (0.019123f * iConst0)));
		iConst68 = int((int((fConst63 - fConst67)) & 16383));
		for (int i=0; i<1024; i++) fVec18[i] = 0;
		iConst69 = int((int((fConst67 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec68[i] = 0;
		for (int i=0; i<3; i++) fRec32[i] = 0;
		for (int i=0; i<3; i++) fRec33[i] = 0;
		for (int i=0; i<3; i++) fRec34[i] = 0;
		for (int i=0; i<3; i++) fRec35[i] = 0;
		for (int i=0; i<3; i++) fRec36[i] = 0;
		for (int i=0; i<3; i++) fRec37[i] = 0;
		for (int i=0; i<3; i++) fRec38[i] = 0;
		for (int i=0; i<3; i++) fRec39[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void buildUserInterface(UI* interface) {
		interface->openVerticalBox("0x00");
		interface->openHorizontalBox("Basic_Parameters");
		interface->declare(&fentry2, "1", "");
		interface->declare(&fentry2, "tooltip", "Tone frequency");
		interface->declare(&fentry2, "unit", "Hz");
		interface->addNumEntry("freq", &fentry2, 4.4e+02f, 2e+01f, 2e+04f, 1.0f);
		interface->declare(&fentry0, "1", "");
		interface->declare(&fentry0, "tooltip", "Gain (value between 0 and 1)");
		interface->addNumEntry("gain", &fentry0, 1.0f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fbutton0, "1", "");
		interface->declare(&fbutton0, "tooltip", "noteOn = 1, noteOff = 0");
		interface->addButton("gate", &fbutton0);
		interface->closeBox();
		interface->openHorizontalBox("Envelopes_and_Vibrato");
		interface->openVerticalBox("Envelope_Parameters");
		interface->declare(&fslider3, "5", "");
		interface->declare(&fslider3, "tooltip", "Envelope attack duration");
		interface->declare(&fslider3, "unit", "s");
		interface->addHorizontalSlider("Envelope_Attack", &fslider3, 0.01f, 0.0f, 2.0f, 0.01f);
		interface->declare(&fslider2, "5", "");
		interface->declare(&fslider2, "tooltip", "Envelope decay duration");
		interface->declare(&fslider2, "unit", "s");
		interface->addHorizontalSlider("Envelope_Decay", &fslider2, 0.01f, 0.0f, 2.0f, 0.01f);
		interface->declare(&fslider1, "5", "");
		interface->declare(&fslider1, "tooltip", "Envelope release duration");
		interface->declare(&fslider1, "unit", "s");
		interface->addHorizontalSlider("Envelope_Release", &fslider1, 0.5f, 0.0f, 2.0f, 0.01f);
		interface->closeBox();
		interface->openVerticalBox("Vibrato_Parameters");
		interface->declare(&fslider10, "4", "");
		interface->declare(&fslider10, "tooltip", "Vibrato attack duration");
		interface->declare(&fslider10, "unit", "s");
		interface->addHorizontalSlider("Vibrato_Attack", &fslider10, 0.5f, 0.0f, 2.0f, 0.01f);
		interface->declare(&fslider9, "4", "");
		interface->declare(&fslider9, "tooltip", "Vibrato silence duration before attack");
		interface->declare(&fslider9, "unit", "s");
		interface->addHorizontalSlider("Vibrato_Begin", &fslider9, 0.05f, 0.0f, 2.0f, 0.01f);
		interface->declare(&fslider7, "4", "");
		interface->declare(&fslider7, "unit", "Hz");
		interface->addHorizontalSlider("Vibrato_Freq", &fslider7, 5.0f, 1.0f, 15.0f, 0.1f);
		interface->declare(&fslider11, "4", "");
		interface->declare(&fslider11, "tooltip", "A value between 0 and 1");
		interface->addHorizontalSlider("Vibrato_Gain", &fslider11, 0.1f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fslider8, "4", "");
		interface->declare(&fslider8, "tooltip", "Vibrato release duration");
		interface->declare(&fslider8, "unit", "s");
		interface->addHorizontalSlider("Vibrato_Release", &fslider8, 0.01f, 0.0f, 2.0f, 0.01f);
		interface->closeBox();
		interface->closeBox();
		interface->openHorizontalBox("Physical_and_Nonlinearity");
		interface->openVerticalBox("Nonlinear_Filter_Parameters");
		interface->declare(&fslider6, "3", "");
		interface->declare(&fslider6, "tooltip", "Frequency of the sine wave for the modulation of theta (works if Modulation Type=3)");
		interface->declare(&fslider6, "unit", "Hz");
		interface->addHorizontalSlider("Modulation_Frequency", &fslider6, 2.2e+02f, 2e+01f, 1e+03f, 0.1f);
		interface->declare(&fentry1, "3", "");
		interface->declare(&fentry1, "tooltip", "0=theta is modulated by the incoming signal; 1=theta is modulated by the averaged incoming signal; 2=theta is modulated by the squared incoming signal; 3=theta is modulated by a sine wave of frequency freqMod; 4=theta is modulated by a sine wave of frequency freq;");
		interface->addNumEntry("Modulation_Type", &fentry1, 0.0f, 0.0f, 4.0f, 1.0f);
		interface->declare(&fslider4, "3", "");
		interface->declare(&fslider4, "tooltip", "Nonlinearity factor (value between 0 and 1)");
		interface->addHorizontalSlider("Nonlinearity", &fslider4, 0.0f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fslider5, "3", "");
		interface->declare(&fslider5, "Attack duration of the nonlinearity", "");
		interface->declare(&fslider5, "unit", "s");
		interface->addHorizontalSlider("Nonlinearity_Attack", &fslider5, 0.1f, 0.0f, 2.0f, 0.01f);
		interface->closeBox();
		interface->openVerticalBox("Physical_Parameters");
		interface->declare(&fslider13, "2", "");
		interface->declare(&fslider13, "tooltip", "Breath noise gain (value between 0 and 1)");
		interface->addHorizontalSlider("Noise_Gain", &fslider13, 0.5f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fslider12, "2", "");
		interface->declare(&fslider12, "tooltip", "Breath pressure (value bewteen 0 and 1)");
		interface->addHorizontalSlider("Pressure", &fslider12, 1.0f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->closeBox();
		interface->openVerticalBox("Reverb");
		interface->addHorizontalSlider("reverbGain", &fslider0, 0.137f, 0.0f, 1.0f, 0.01f);
		interface->addHorizontalSlider("roomSize", &fslider15, 0.72f, 0.01f, 2.0f, 0.01f);
		interface->closeBox();
		interface->openVerticalBox("Spat");
		interface->addHorizontalSlider("pan angle", &fslider14, 0.6f, 0.0f, 1.0f, 0.01f);
		interface->addHorizontalSlider("spatial width", &fslider16, 0.5f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0 = (0.0010000000000000009f * float(fslider0));
		float 	fSlow1 = float(fbutton0);
		int 	iSlow2 = (fSlow1 > 0);
		int 	iSlow3 = (fSlow1 <= 0);
		float 	fSlow4 = float(fslider1);
		float 	fSlow5 = (1.0f / ((fSlow4 == 0.0f) + (iConst0 * fSlow4)));
		float 	fSlow6 = (1 - (1.0f / powf(8e+04f,fSlow5)));
		float 	fSlow7 = float(fslider2);
		float 	fSlow8 = (1 - powf(8e+01f,(1.0f / ((fSlow7 == 0.0f) + (iConst0 * fSlow7)))));
		float 	fSlow9 = float(fentry0);
		float 	fSlow10 = (float(fslider3) * fSlow9);
		float 	fSlow11 = (1.0f / ((iConst0 * fSlow10) + (fSlow10 == 0.0f)));
		float 	fSlow12 = (0.0010000000000000009f * float(fslider4));
		float 	fSlow13 = float(fentry1);
		float 	fSlow14 = (3.141592653589793f * (fSlow13 == 2));
		float 	fSlow15 = (1.5707963267948966f * (fSlow13 == 1));
		float 	fSlow16 = (3.141592653589793f * (fSlow13 == 0));
		float 	fSlow17 = (1 - (1.0f / powf(1e+05f,fSlow5)));
		float 	fSlow18 = float(fslider5);
		float 	fSlow19 = (1.0f / ((fSlow18 == 0.0f) + (iConst0 * fSlow18)));
		int 	iSlow20 = (fSlow13 < 3);
		float 	fSlow21 = (0.0010000000000000009f * float(fslider6));
		int 	iSlow22 = (fSlow13 != 4);
		float 	fSlow23 = float(fentry2);
		float 	fSlow24 = (fSlow23 * (fSlow13 == 4));
		int 	iSlow25 = (fSlow13 >= 3);
		float 	fSlow26 = (fConst2 * float(fslider7));
		float 	fSlow27 = float(fslider8);
		float 	fSlow28 = (1 - (1.0f / powf(1e+05f,(1.0f / ((fSlow27 == 0.0f) + (iConst0 * fSlow27))))));
		float 	fSlow29 = float(fslider9);
		float 	fSlow30 = (iConst0 * fSlow29);
		float 	fSlow31 = ((fSlow29 == 0.0f) + fSlow30);
		float 	fSlow32 = float(fslider10);
		float 	fSlow33 = (1.0f / ((fSlow32 == 0.0f) + (iConst0 * fSlow32)));
		float 	fSlow34 = float(fslider11);
		float 	fSlow35 = (1 - (1.0f / powf(8e+04f,(1.0f / ((fConst3 * fSlow9) + ((0.2f * fSlow9) == 0.0f))))));
		float 	fSlow36 = (1.0f / ((fConst5 * fSlow9) + ((0.02f * fSlow9) == 0.0f)));
		float 	fSlow37 = float(fslider12);
		float 	fSlow38 = (9.313225750491594e-10f * float(fslider13));
		float 	fSlow39 = (0 - (1.998f * cosf((fConst6 * fSlow23))));
		float 	fSlow40 = float(fslider14);
		float 	fSlow41 = (0.5f * (fSlow9 * (1.0f - fSlow40)));
		float 	fSlow42 = float(fslider15);
		float 	fSlow43 = expf((fConst13 / fSlow42));
		float 	fSlow44 = ((expf((fConst14 / fSlow42)) / fSlow43) - 1);
		float 	fSlow45 = faustpower<2>(fSlow43);
		float 	fSlow46 = (1.0f - fSlow45);
		float 	fSlow47 = (1.0f - (fConst15 * fSlow45));
		float 	fSlow48 = (fSlow47 / fSlow46);
		float 	fSlow49 = sqrtf(max((float)0, ((faustpower<2>(fSlow47) / faustpower<2>(fSlow46)) - 1.0f)));
		float 	fSlow50 = (fSlow43 * ((1.0f + fSlow49) - fSlow48));
		float 	fSlow51 = (fSlow48 - fSlow49);
		float 	fSlow52 = expf((fConst22 / fSlow42));
		float 	fSlow53 = ((expf((fConst23 / fSlow42)) / fSlow52) - 1);
		float 	fSlow54 = faustpower<2>(fSlow52);
		float 	fSlow55 = (1.0f - fSlow54);
		float 	fSlow56 = (1.0f - (fConst15 * fSlow54));
		float 	fSlow57 = (fSlow56 / fSlow55);
		float 	fSlow58 = sqrtf(max((float)0, ((faustpower<2>(fSlow56) / faustpower<2>(fSlow55)) - 1.0f)));
		float 	fSlow59 = (fSlow52 * ((1.0f + fSlow58) - fSlow57));
		float 	fSlow60 = (fSlow57 - fSlow58);
		float 	fSlow61 = expf((fConst29 / fSlow42));
		float 	fSlow62 = ((expf((fConst30 / fSlow42)) / fSlow61) - 1);
		float 	fSlow63 = faustpower<2>(fSlow61);
		float 	fSlow64 = (1.0f - fSlow63);
		float 	fSlow65 = (1.0f - (fConst15 * fSlow63));
		float 	fSlow66 = (fSlow65 / fSlow64);
		float 	fSlow67 = sqrtf(max((float)0, ((faustpower<2>(fSlow65) / faustpower<2>(fSlow64)) - 1.0f)));
		float 	fSlow68 = (fSlow61 * ((1.0f + fSlow67) - fSlow66));
		float 	fSlow69 = (fSlow66 - fSlow67);
		float 	fSlow70 = expf((fConst36 / fSlow42));
		float 	fSlow71 = ((expf((fConst37 / fSlow42)) / fSlow70) - 1);
		float 	fSlow72 = faustpower<2>(fSlow70);
		float 	fSlow73 = (1.0f - fSlow72);
		float 	fSlow74 = (1.0f - (fConst15 * fSlow72));
		float 	fSlow75 = (fSlow74 / fSlow73);
		float 	fSlow76 = sqrtf(max((float)0, ((faustpower<2>(fSlow74) / faustpower<2>(fSlow73)) - 1.0f)));
		float 	fSlow77 = (fSlow70 * ((1.0f + fSlow76) - fSlow75));
		float 	fSlow78 = (fSlow75 - fSlow76);
		float 	fSlow79 = expf((fConst43 / fSlow42));
		float 	fSlow80 = ((expf((fConst44 / fSlow42)) / fSlow79) - 1);
		float 	fSlow81 = faustpower<2>(fSlow79);
		float 	fSlow82 = (1.0f - fSlow81);
		float 	fSlow83 = (1.0f - (fConst15 * fSlow81));
		float 	fSlow84 = (fSlow83 / fSlow82);
		float 	fSlow85 = sqrtf(max((float)0, ((faustpower<2>(fSlow83) / faustpower<2>(fSlow82)) - 1.0f)));
		float 	fSlow86 = (fSlow79 * ((1.0f + fSlow85) - fSlow84));
		float 	fSlow87 = (fSlow84 - fSlow85);
		float 	fSlow88 = (0.5f * fSlow9);
		int 	iSlow89 = int((int((fConst47 * (float(fslider16) / fSlow23))) & 4095));
		float 	fSlow90 = expf((fConst51 / fSlow42));
		float 	fSlow91 = ((expf((fConst52 / fSlow42)) / fSlow90) - 1);
		float 	fSlow92 = faustpower<2>(fSlow90);
		float 	fSlow93 = (1.0f - fSlow92);
		float 	fSlow94 = (1.0f - (fConst15 * fSlow92));
		float 	fSlow95 = (fSlow94 / fSlow93);
		float 	fSlow96 = sqrtf(max((float)0, ((faustpower<2>(fSlow94) / faustpower<2>(fSlow93)) - 1.0f)));
		float 	fSlow97 = (fSlow90 * ((1.0f + fSlow96) - fSlow95));
		float 	fSlow98 = (fSlow95 - fSlow96);
		float 	fSlow99 = expf((fConst58 / fSlow42));
		float 	fSlow100 = ((expf((fConst59 / fSlow42)) / fSlow99) - 1);
		float 	fSlow101 = faustpower<2>(fSlow99);
		float 	fSlow102 = (1.0f - fSlow101);
		float 	fSlow103 = (1.0f - (fConst15 * fSlow101));
		float 	fSlow104 = (fSlow103 / fSlow102);
		float 	fSlow105 = sqrtf(max((float)0, ((faustpower<2>(fSlow103) / faustpower<2>(fSlow102)) - 1.0f)));
		float 	fSlow106 = (fSlow99 * ((1.0f + fSlow105) - fSlow104));
		float 	fSlow107 = (fSlow104 - fSlow105);
		float 	fSlow108 = expf((fConst65 / fSlow42));
		float 	fSlow109 = ((expf((fConst66 / fSlow42)) / fSlow108) - 1);
		float 	fSlow110 = faustpower<2>(fSlow108);
		float 	fSlow111 = (1.0f - fSlow110);
		float 	fSlow112 = (1.0f - (fConst15 * fSlow110));
		float 	fSlow113 = (fSlow112 / fSlow111);
		float 	fSlow114 = sqrtf(max((float)0, ((faustpower<2>(fSlow112) / faustpower<2>(fSlow111)) - 1.0f)));
		float 	fSlow115 = (fSlow108 * ((1.0f + fSlow114) - fSlow113));
		float 	fSlow116 = (fSlow113 - fSlow114);
		FAUSTFLOAT* output0 = output[0];
		FAUSTFLOAT* output1 = output[1];
		for (int i=0; i<count; i++) {
			fRec0[0] = ((0.999f * fRec0[1]) + fSlow0);
			float fTemp0 = (1 - fRec0[0]);
			iRec1[0] = (iSlow2 & (iRec1[1] | (fRec2[1] >= 1)));
			int iTemp1 = (iSlow3 & (fRec2[1] > 0));
			fRec2[0] = (((fSlow11 * (((iRec1[1] == 0) & iSlow2) & (fRec2[1] < 1))) + (fRec2[1] * ((1 - (fSlow8 * (iRec1[1] & (fRec2[1] > 80)))) - (fSlow6 * iTemp1)))) * ((iTemp1 == 0) | (fRec2[1] >= 1e-06f)));
			fRec7[0] = (fSlow12 + (0.999f * fRec7[1]));
			iRec8[0] = (iSlow2 & (iRec8[1] | (fRec9[1] >= 1)));
			int iTemp2 = (iSlow3 & (fRec9[1] > 0));
			fRec9[0] = (((fSlow19 * (((iRec8[1] == 0) & iSlow2) & (fRec9[1] < 1))) + (fRec9[1] * (1 - (fSlow17 * iTemp2)))) * ((iTemp2 == 0) | (fRec9[1] >= 1e-06f)));
			float fTemp3 = (fRec7[0] * fRec9[0]);
			float fTemp4 = (fTemp3 * (((fSlow16 * fRec4[1]) + (fSlow15 * (fRec4[1] + fRec4[2]))) + (fSlow14 * faustpower<2>(fRec4[1]))));
			float fTemp5 = cosf(fTemp4);
			float fTemp6 = sinf(fTemp4);
			float fTemp7 = (0 - fTemp6);
			float fTemp8 = ((fRec10[1] * fTemp7) + (fRec4[1] * fTemp5));
			float fTemp9 = ((fTemp7 * fRec11[1]) + (fTemp5 * fTemp8));
			float fTemp10 = ((fTemp7 * fRec12[1]) + (fTemp5 * fTemp9));
			float fTemp11 = ((fTemp7 * fRec13[1]) + (fTemp5 * fTemp10));
			float fTemp12 = ((fTemp7 * fRec14[1]) + (fTemp5 * fTemp11));
			fRec15[0] = ((fTemp7 * fRec15[1]) + (fTemp5 * fTemp12));
			fRec14[0] = ((fTemp6 * fTemp12) + (fTemp5 * fRec15[1]));
			fRec13[0] = ((fTemp6 * fTemp11) + (fTemp5 * fRec14[1]));
			fRec12[0] = ((fTemp6 * fTemp10) + (fTemp5 * fRec13[1]));
			fRec11[0] = ((fTemp6 * fTemp9) + (fTemp5 * fRec12[1]));
			fRec10[0] = ((fTemp6 * fTemp8) + (fTemp5 * fRec11[1]));
			fRec18[0] = (fSlow21 + (0.999f * fRec18[1]));
			float fTemp13 = (fRec17[1] + (fConst2 * (fSlow24 + (iSlow22 * fRec18[0]))));
			fRec17[0] = (fTemp13 - floorf(fTemp13));
			float fTemp14 = (3.141592653589793f * (fTemp3 * ftbl0[int((65536.0f * fRec17[0]))]));
			float fTemp15 = cosf(fTemp14);
			float fTemp16 = sinf(fTemp14);
			float fTemp17 = (0 - fTemp16);
			float fTemp18 = ((fRec19[1] * fTemp17) + (fRec4[1] * fTemp15));
			float fTemp19 = ((fTemp17 * fRec20[1]) + (fTemp15 * fTemp18));
			float fTemp20 = ((fTemp17 * fRec21[1]) + (fTemp15 * fTemp19));
			float fTemp21 = ((fTemp17 * fRec22[1]) + (fTemp15 * fTemp20));
			float fTemp22 = ((fTemp17 * fRec23[1]) + (fTemp15 * fTemp21));
			fRec24[0] = ((fTemp17 * fRec24[1]) + (fTemp15 * fTemp22));
			fRec23[0] = ((fTemp16 * fTemp22) + (fTemp15 * fRec24[1]));
			fRec22[0] = ((fTemp16 * fTemp21) + (fTemp15 * fRec23[1]));
			fRec21[0] = ((fTemp16 * fTemp20) + (fTemp15 * fRec22[1]));
			fRec20[0] = ((fTemp16 * fTemp19) + (fTemp15 * fRec21[1]));
			fRec19[0] = ((fTemp16 * fTemp18) + (fTemp15 * fRec20[1]));
			float fTemp23 = ((iSlow25 * ((fRec4[1] * fTemp16) + (fRec19[1] * fTemp15))) + (iSlow20 * ((fRec7[0] * ((fRec4[1] * fTemp6) + (fRec10[1] * fTemp5))) + ((1 - fRec7[0]) * fRec4[1]))));
			float fTemp24 = (fRec25[1] + fSlow26);
			fRec25[0] = (fTemp24 - floorf(fTemp24));
			iRec26[0] = (iSlow2 & (iRec26[1] | (fRec28[1] >= 1)));
			iRec27[0] = (iSlow2 * (1 + iRec27[1]));
			int iTemp25 = (iSlow3 & (fRec28[1] > 0));
			fRec28[0] = (((fSlow33 * (((((iRec26[1] == 0) & iSlow2) & (fRec28[1] < 1)) & (iRec27[1] > fSlow30)) * (1 - (iRec27[1] < fSlow31)))) + (fRec28[1] * (1 - (fSlow28 * iTemp25)))) * ((iTemp25 == 0) | (fRec28[1] >= 1e-06f)));
			iRec29[0] = (iSlow2 & (iRec29[1] | (fRec30[1] >= 1)));
			int iTemp26 = (iSlow3 & (fRec30[1] > 0));
			fRec30[0] = (((fSlow36 * (((iRec29[1] == 0) & iSlow2) & (fRec30[1] < 1))) + (fRec30[1] * ((1 - (fConst4 * (iRec29[1] & (fRec30[1] > 80)))) - (fSlow35 * iTemp26)))) * ((iTemp26 == 0) | (fRec30[1] >= 1e-06f)));
			float fTemp27 = ((fSlow37 * fRec30[0]) + (fSlow34 * (fRec28[0] * faustpower<2>(ftbl0[int((65536.0f * fRec25[0]))]))));
			iRec31[0] = (12345 + (1103515245 * iRec31[1]));
			float fTemp28 = (0 - (fTemp27 - fTemp23));
			float fTemp29 = (fTemp28 * (faustpower<2>(fTemp28) - 1));
			float fTemp30 = ((fTemp29 > 1) + (fTemp29 * (fTemp29 <= 1)));
			fRec6[0] = (0 - (((0.998001f * fRec6[2]) + ((fTemp28 * ((fTemp30 * (fTemp30 >= -1)) - (fTemp30 < -1))) + (fSlow39 * fRec6[1]))) - (fTemp27 + (fSlow38 * ((iRec31[0] * fTemp27) * (0 - (fTemp27 - (1 + fTemp23))))))));
			fRec4[0] = ((0.0009994999999999865f * fRec6[0]) - (0.0009994999999999865f * fRec6[2]));
			fRec5[0] = fTemp28;
			fRec3[0] = ((fRec5[0] + (0.995f * fRec3[1])) - fRec5[1]);
			float fTemp31 = (fRec3[0] * fRec2[0]);
			fRec43[0] = ((fConst10 * fRec43[1]) + (fConst9 * (fRec36[1] + fRec36[2])));
			fRec42[0] = ((fSlow51 * fRec42[1]) + (fSlow50 * (fRec36[1] + (fSlow44 * fRec43[0]))));
			fVec0[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec42[0]));
			fVec1[IOTA&4095] = (fSlow41 * (fTemp31 * fRec0[0]));
			float fTemp32 = (0.3f * fVec1[(IOTA-iConst18)&4095]);
			float fTemp33 = ((fTemp32 + fVec0[(IOTA-iConst17)&8191]) - (0.6f * fRec40[1]));
			fVec2[IOTA&2047] = fTemp33;
			fRec40[0] = fVec2[(IOTA-iConst19)&2047];
			float 	fRec41 = (0.6f * fVec2[IOTA&2047]);
			fRec47[0] = ((fConst10 * fRec47[1]) + (fConst9 * (fRec32[1] + fRec32[2])));
			fRec46[0] = ((fSlow60 * fRec46[1]) + (fSlow59 * (fRec32[1] + (fSlow53 * fRec47[0]))));
			fVec3[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec46[0]));
			float fTemp34 = ((fVec3[(IOTA-iConst25)&8191] + fTemp32) - (0.6f * fRec44[1]));
			fVec4[IOTA&1023] = fTemp34;
			fRec44[0] = fVec4[(IOTA-iConst26)&1023];
			float 	fRec45 = (0.6f * fVec4[IOTA&1023]);
			float fTemp35 = (fRec45 + fRec41);
			fRec51[0] = ((fConst10 * fRec51[1]) + (fConst9 * (fRec34[1] + fRec34[2])));
			fRec50[0] = ((fSlow69 * fRec50[1]) + (fSlow68 * (fRec34[1] + (fSlow62 * fRec51[0]))));
			fVec5[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec50[0]));
			float fTemp36 = (fVec5[(IOTA-iConst32)&8191] - (fTemp32 + (0.6f * fRec48[1])));
			fVec6[IOTA&2047] = fTemp36;
			fRec48[0] = fVec6[(IOTA-iConst33)&2047];
			float 	fRec49 = (0.6f * fVec6[IOTA&2047]);
			fRec55[0] = ((fConst10 * fRec55[1]) + (fConst9 * (fRec38[1] + fRec38[2])));
			fRec54[0] = ((fSlow78 * fRec54[1]) + (fSlow77 * (fRec38[1] + (fSlow71 * fRec55[0]))));
			fVec7[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec54[0]));
			float fTemp37 = (fVec7[(IOTA-iConst39)&8191] - (fTemp32 + (0.6f * fRec52[1])));
			fVec8[IOTA&1023] = fTemp37;
			fRec52[0] = fVec8[(IOTA-iConst40)&1023];
			float 	fRec53 = (0.6f * fVec8[IOTA&1023]);
			float fTemp38 = (fRec53 + (fRec49 + fTemp35));
			fRec59[0] = ((fConst10 * fRec59[1]) + (fConst9 * (fRec33[1] + fRec33[2])));
			fRec58[0] = ((fSlow87 * fRec58[1]) + (fSlow86 * (fRec33[1] + (fSlow80 * fRec59[0]))));
			fVec9[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec58[0]));
			fVec10[IOTA&4095] = (fSlow88 * fTemp31);
			float fTemp39 = fVec10[(IOTA-iSlow89)&4095];
			fVec11[IOTA&4095] = (fSlow40 * (fRec0[0] * fTemp39));
			float fTemp40 = (0.3f * fVec11[(IOTA-iConst18)&4095]);
			float fTemp41 = (fTemp40 + ((0.6f * fRec56[1]) + fVec9[(IOTA-iConst46)&16383]));
			fVec12[IOTA&2047] = fTemp41;
			fRec56[0] = fVec12[(IOTA-iConst48)&2047];
			float 	fRec57 = (0 - (0.6f * fVec12[IOTA&2047]));
			fRec63[0] = ((fConst10 * fRec63[1]) + (fConst9 * (fRec37[1] + fRec37[2])));
			fRec62[0] = ((fSlow98 * fRec62[1]) + (fSlow97 * (fRec37[1] + (fSlow91 * fRec63[0]))));
			fVec13[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec62[0]));
			float fTemp42 = (fVec13[(IOTA-iConst54)&8191] + (fTemp40 + (0.6f * fRec60[1])));
			fVec14[IOTA&2047] = fTemp42;
			fRec60[0] = fVec14[(IOTA-iConst55)&2047];
			float 	fRec61 = (0 - (0.6f * fVec14[IOTA&2047]));
			fRec67[0] = ((fConst10 * fRec67[1]) + (fConst9 * (fRec35[1] + fRec35[2])));
			fRec66[0] = ((fSlow107 * fRec66[1]) + (fSlow106 * (fRec35[1] + (fSlow100 * fRec67[0]))));
			fVec15[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec66[0]));
			float fTemp43 = (((0.6f * fRec64[1]) + fVec15[(IOTA-iConst61)&16383]) - fTemp40);
			fVec16[IOTA&2047] = fTemp43;
			fRec64[0] = fVec16[(IOTA-iConst62)&2047];
			float 	fRec65 = (0 - (0.6f * fVec16[IOTA&2047]));
			fRec71[0] = ((fConst10 * fRec71[1]) + (fConst9 * (fRec39[1] + fRec39[2])));
			fRec70[0] = ((fSlow116 * fRec70[1]) + (fSlow115 * (fRec39[1] + (fSlow109 * fRec71[0]))));
			fVec17[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec70[0]));
			float fTemp44 = (((0.6f * fRec68[1]) + fVec17[(IOTA-iConst68)&16383]) - fTemp40);
			fVec18[IOTA&1023] = fTemp44;
			fRec68[0] = fVec18[(IOTA-iConst69)&1023];
			float 	fRec69 = (0 - (0.6f * fVec18[IOTA&1023]));
			fRec32[0] = (fRec68[1] + (fRec64[1] + (fRec60[1] + (fRec56[1] + (fRec52[1] + (fRec48[1] + (fRec40[1] + (fRec44[1] + (fRec69 + (fRec65 + (fRec61 + (fRec57 + fTemp38))))))))))));
			fRec33[0] = (0 - ((fRec68[1] + (fRec64[1] + (fRec60[1] + (fRec56[1] + (fRec69 + (fRec65 + (fRec57 + fRec61))))))) - (fRec52[1] + (fRec48[1] + (fRec40[1] + (fRec44[1] + fTemp38))))));
			float fTemp45 = (fRec49 + fRec53);
			fRec34[0] = (0 - ((fRec68[1] + (fRec64[1] + (fRec52[1] + (fRec48[1] + (fRec69 + (fRec65 + fTemp45)))))) - (fRec60[1] + (fRec56[1] + (fRec40[1] + (fRec44[1] + (fRec61 + (fRec57 + fTemp35))))))));
			fRec35[0] = (0 - ((fRec60[1] + (fRec56[1] + (fRec52[1] + (fRec48[1] + (fRec61 + (fRec57 + fTemp45)))))) - (fRec68[1] + (fRec64[1] + (fRec40[1] + (fRec44[1] + (fRec69 + (fRec65 + fTemp35))))))));
			float fTemp46 = (fRec45 + fRec49);
			float fTemp47 = (fRec41 + fRec53);
			fRec36[0] = (0 - ((fRec68[1] + (fRec60[1] + (fRec52[1] + (fRec40[1] + (fRec69 + (fRec61 + fTemp47)))))) - (fRec64[1] + (fRec56[1] + (fRec48[1] + (fRec44[1] + (fRec65 + (fRec57 + fTemp46))))))));
			fRec37[0] = (0 - ((fRec64[1] + (fRec56[1] + (fRec52[1] + (fRec40[1] + (fRec65 + (fRec57 + fTemp47)))))) - (fRec68[1] + (fRec60[1] + (fRec48[1] + (fRec44[1] + (fRec69 + (fRec61 + fTemp46))))))));
			float fTemp48 = (fRec45 + fRec53);
			float fTemp49 = (fRec41 + fRec49);
			fRec38[0] = (0 - ((fRec64[1] + (fRec60[1] + (fRec48[1] + (fRec40[1] + (fRec65 + (fRec61 + fTemp49)))))) - (fRec68[1] + (fRec56[1] + (fRec52[1] + (fRec44[1] + (fRec69 + (fRec57 + fTemp48))))))));
			fRec39[0] = (0 - ((fRec68[1] + (fRec56[1] + (fRec48[1] + (fRec40[1] + (fRec69 + (fRec57 + fTemp49)))))) - (fRec64[1] + (fRec60[1] + (fRec52[1] + (fRec44[1] + (fRec65 + (fRec61 + fTemp48))))))));
			output0[i] = (FAUSTFLOAT)((0.37f * (fRec33[0] + fRec34[0])) + (fSlow41 * (fTemp31 * fTemp0)));
			output1[i] = (FAUSTFLOAT)((0.37f * (fRec33[0] - fRec34[0])) + (fSlow40 * (fTemp0 * fTemp39)));
			// post processing
			fRec39[2] = fRec39[1]; fRec39[1] = fRec39[0];
			fRec38[2] = fRec38[1]; fRec38[1] = fRec38[0];
			fRec37[2] = fRec37[1]; fRec37[1] = fRec37[0];
			fRec36[2] = fRec36[1]; fRec36[1] = fRec36[0];
			fRec35[2] = fRec35[1]; fRec35[1] = fRec35[0];
			fRec34[2] = fRec34[1]; fRec34[1] = fRec34[0];
			fRec33[2] = fRec33[1]; fRec33[1] = fRec33[0];
			fRec32[2] = fRec32[1]; fRec32[1] = fRec32[0];
			fRec68[1] = fRec68[0];
			fRec70[1] = fRec70[0];
			fRec71[1] = fRec71[0];
			fRec64[1] = fRec64[0];
			fRec66[1] = fRec66[0];
			fRec67[1] = fRec67[0];
			fRec60[1] = fRec60[0];
			fRec62[1] = fRec62[0];
			fRec63[1] = fRec63[0];
			fRec56[1] = fRec56[0];
			fRec58[1] = fRec58[0];
			fRec59[1] = fRec59[0];
			fRec52[1] = fRec52[0];
			fRec54[1] = fRec54[0];
			fRec55[1] = fRec55[0];
			fRec48[1] = fRec48[0];
			fRec50[1] = fRec50[0];
			fRec51[1] = fRec51[0];
			fRec44[1] = fRec44[0];
			fRec46[1] = fRec46[0];
			fRec47[1] = fRec47[0];
			fRec40[1] = fRec40[0];
			IOTA = IOTA+1;
			fRec42[1] = fRec42[0];
			fRec43[1] = fRec43[0];
			fRec3[1] = fRec3[0];
			fRec5[1] = fRec5[0];
			fRec4[2] = fRec4[1]; fRec4[1] = fRec4[0];
			fRec6[2] = fRec6[1]; fRec6[1] = fRec6[0];
			iRec31[1] = iRec31[0];
			fRec30[1] = fRec30[0];
			iRec29[1] = iRec29[0];
			fRec28[1] = fRec28[0];
			iRec27[1] = iRec27[0];
			iRec26[1] = iRec26[0];
			fRec25[1] = fRec25[0];
			fRec19[1] = fRec19[0];
			fRec20[1] = fRec20[0];
			fRec21[1] = fRec21[0];
			fRec22[1] = fRec22[0];
			fRec23[1] = fRec23[0];
			fRec24[1] = fRec24[0];
			fRec17[1] = fRec17[0];
			fRec18[1] = fRec18[0];
			fRec10[1] = fRec10[0];
			fRec11[1] = fRec11[0];
			fRec12[1] = fRec12[0];
			fRec13[1] = fRec13[0];
			fRec14[1] = fRec14[0];
			fRec15[1] = fRec15[0];
			fRec9[1] = fRec9[0];
			iRec8[1] = iRec8[0];
			fRec7[1] = fRec7[0];
			fRec2[1] = fRec2[0];
			iRec1[1] = iRec1[0];
			fRec0[1] = fRec0[0];
		}
	}
};


float 	mydsp::ftbl0[65536];
