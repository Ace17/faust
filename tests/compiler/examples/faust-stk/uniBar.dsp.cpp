//-----------------------------------------------------
// name: "UniBar"
// author: "Romain Michon"
// copyright: "Romain Michon (rmichon@ccrma.stanford.edu)"
// version: "1.0"
//
// Code generated with Faust 0.9.70 (http://faust.grame.fr)
//-----------------------------------------------------
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif  

typedef long double quad;
/* link with  */
#include <math.h>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline float faustpower(float x)          { return powf(x,N); } 
template <int N> inline double faustpower(double x)        { return pow(x,N); }
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <>   inline int faustpower<0>(int x)            { return 1; }
template <>   inline int faustpower<1>(int x)            { return x; }
#endif

#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	FAUSTFLOAT 	fbutton0;
	int 	iRec6[2];
	int 	iConst0;
	float 	fConst1;
	float 	fConst2;
	float 	fConst3;
	float 	fRec7[2];
	FAUSTFLOAT 	fentry0;
	FAUSTFLOAT 	fslider0;
	FAUSTFLOAT 	fslider1;
	FAUSTFLOAT 	fslider2;
	FAUSTFLOAT 	fentry1;
	int 	IOTA;
	float 	fVec0[4096];
	FAUSTFLOAT 	fentry2;
	float 	fConst4;
	float 	fConst5;
	float 	fConst6;
	float 	fConst7;
	float 	fRec5[3];
	float 	fConst8;
	float 	fConst9;
	float 	fConst10;
	float 	fRec4[2];
	float 	fRec0[2];
	float 	fVec1[4096];
	float 	fConst11;
	float 	fConst12;
	float 	fRec9[3];
	float 	fRec8[2];
	float 	fRec1[2];
	float 	fVec2[2048];
	float 	fConst13;
	float 	fConst14;
	float 	fRec11[3];
	float 	fRec10[2];
	float 	fRec2[2];
	float 	fVec3[2048];
	float 	fConst15;
	float 	fConst16;
	float 	fRec13[3];
	float 	fRec12[2];
	float 	fRec3[2];
	float 	fVec4[4096];
	FAUSTFLOAT 	fslider3;
	float 	fRec14[2];
	FAUSTFLOAT 	fslider4;
	float 	fConst17;
	float 	fConst18;
	float 	fConst19;
	float 	fConst20;
	float 	fRec26[2];
	FAUSTFLOAT 	fslider5;
	float 	fConst21;
	float 	fConst22;
	float 	fConst23;
	float 	fConst24;
	float 	fConst25;
	float 	fRec25[2];
	float 	fVec5[8192];
	float 	fConst26;
	int 	iConst27;
	float 	fVec6[4096];
	int 	iConst28;
	float 	fVec7[2048];
	int 	iConst29;
	float 	fRec23[2];
	float 	fRec30[2];
	float 	fConst30;
	float 	fConst31;
	float 	fConst32;
	float 	fConst33;
	float 	fRec29[2];
	float 	fVec8[8192];
	float 	fConst34;
	int 	iConst35;
	float 	fVec9[1024];
	int 	iConst36;
	float 	fRec27[2];
	float 	fRec34[2];
	float 	fConst37;
	float 	fConst38;
	float 	fConst39;
	float 	fConst40;
	float 	fRec33[2];
	float 	fVec10[8192];
	float 	fConst41;
	int 	iConst42;
	float 	fVec11[2048];
	int 	iConst43;
	float 	fRec31[2];
	float 	fRec38[2];
	float 	fConst44;
	float 	fConst45;
	float 	fConst46;
	float 	fConst47;
	float 	fRec37[2];
	float 	fVec12[8192];
	float 	fConst48;
	int 	iConst49;
	float 	fVec13[1024];
	int 	iConst50;
	float 	fRec35[2];
	float 	fRec42[2];
	float 	fConst51;
	float 	fConst52;
	float 	fConst53;
	float 	fConst54;
	float 	fRec41[2];
	float 	fVec14[16384];
	float 	fConst55;
	int 	iConst56;
	FAUSTFLOAT 	fslider6;
	float 	fConst57;
	float 	fVec15[4096];
	float 	fVec16[2048];
	int 	iConst58;
	float 	fRec39[2];
	float 	fRec46[2];
	float 	fConst59;
	float 	fConst60;
	float 	fConst61;
	float 	fConst62;
	float 	fRec45[2];
	float 	fVec17[8192];
	float 	fConst63;
	int 	iConst64;
	float 	fVec18[2048];
	int 	iConst65;
	float 	fRec43[2];
	float 	fRec50[2];
	float 	fConst66;
	float 	fConst67;
	float 	fConst68;
	float 	fConst69;
	float 	fRec49[2];
	float 	fVec19[16384];
	float 	fConst70;
	int 	iConst71;
	float 	fVec20[2048];
	int 	iConst72;
	float 	fRec47[2];
	float 	fRec54[2];
	float 	fConst73;
	float 	fConst74;
	float 	fConst75;
	float 	fConst76;
	float 	fRec53[2];
	float 	fVec21[16384];
	float 	fConst77;
	int 	iConst78;
	float 	fVec22[1024];
	int 	iConst79;
	float 	fRec51[2];
	float 	fRec15[3];
	float 	fRec16[3];
	float 	fRec17[3];
	float 	fRec18[3];
	float 	fRec19[3];
	float 	fRec20[3];
	float 	fRec21[3];
	float 	fRec22[3];
  public:
	static void metadata(Meta* m) 	{ 
		m->declare("name", "UniBar");
		m->declare("description", "Nonlinear Banded Waveguide Models");
		m->declare("author", "Romain Michon");
		m->declare("copyright", "Romain Michon (rmichon@ccrma.stanford.edu)");
		m->declare("version", "1.0");
		m->declare("licence", "STK-4.3");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/version", "1.0");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/version", "1.0");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("instrument.lib/name", "Faust-STK Tools Library");
		m->declare("instrument.lib/author", "Romain Michon (rmichon@ccrma.stanford.edu)");
		m->declare("instrument.lib/copyright", "Romain Michon");
		m->declare("instrument.lib/version", "1.0");
		m->declare("instrument.lib/licence", "STK-4.3");
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/version", "1.29");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("effect.lib/name", "Faust Audio Effect Library");
		m->declare("effect.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/copyright", "Julius O. Smith III");
		m->declare("effect.lib/version", "1.33");
		m->declare("effect.lib/license", "STK-4.3");
		m->declare("effect.lib/exciter_name", "Harmonic Exciter");
		m->declare("effect.lib/exciter_author", "Priyanka Shekar (pshekar@ccrma.stanford.edu)");
		m->declare("effect.lib/exciter_copyright", "Copyright (c) 2013 Priyanka Shekar");
		m->declare("effect.lib/exciter_version", "1.0");
		m->declare("effect.lib/exciter_license", "MIT License (MIT)");
	}

	virtual int getNumInputs() 	{ return 0; }
	virtual int getNumOutputs() 	{ return 2; }
	static void classInit(int samplingFreq) {
	}
	virtual void instanceInit(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fbutton0 = 0.0;
		for (int i=0; i<2; i++) iRec6[i] = 0;
		iConst0 = min(192000, max(1, fSamplingFreq));
		fConst1 = (1 - (1.0f / powf(9e+04f,(1e+02f / float(iConst0)))));
		fConst2 = (1 - powf(9e+01f,(2e+02f / float(iConst0))));
		fConst3 = (5e+01f / float(iConst0));
		for (int i=0; i<2; i++) fRec7[i] = 0;
		fentry0 = 0.8f;
		fslider0 = 1.0f;
		fslider1 = 0.0f;
		fslider2 = 0.2f;
		fentry1 = 0.0f;
		IOTA = 0;
		for (int i=0; i<4096; i++) fVec0[i] = 0;
		fentry2 = 4.4e+02f;
		fConst4 = (1 - (100.53096491487338f / float(iConst0)));
		fConst5 = faustpower<2>(fConst4);
		fConst6 = (6.283185307179586f / float(iConst0));
		fConst7 = (0 - (2 * fConst4));
		for (int i=0; i<3; i++) fRec5[i] = 0;
		fConst8 = (0.5f * fConst5);
		fConst9 = (fConst8 - 0.5f);
		fConst10 = (0.5f - fConst8);
		for (int i=0; i<2; i++) fRec4[i] = 0;
		for (int i=0; i<2; i++) fRec0[i] = 0;
		for (int i=0; i<4096; i++) fVec1[i] = 0;
		fConst11 = (0.362844702467344f * iConst0);
		fConst12 = (17.31645870658694f / float(iConst0));
		for (int i=0; i<3; i++) fRec9[i] = 0;
		for (int i=0; i<2; i++) fRec8[i] = 0;
		for (int i=0; i<2; i++) fRec1[i] = 0;
		for (int i=0; i<2048; i++) fVec2[i] = 0;
		fConst13 = (0.1850481125092524f * iConst0);
		fConst14 = (33.95433339999848f / float(iConst0));
		for (int i=0; i<3; i++) fRec11[i] = 0;
		for (int i=0; i<2; i++) fRec10[i] = 0;
		for (int i=0; i<2; i++) fRec2[i] = 0;
		for (int i=0; i<2048; i++) fVec3[i] = 0;
		fConst15 = (0.1119444755401321f * iConst0);
		fConst16 = (56.127694349035245f / float(iConst0));
		for (int i=0; i<3; i++) fRec13[i] = 0;
		for (int i=0; i<2; i++) fRec12[i] = 0;
		for (int i=0; i<2; i++) fRec3[i] = 0;
		for (int i=0; i<4096; i++) fVec4[i] = 0;
		fslider3 = 0.137f;
		for (int i=0; i<2; i++) fRec14[i] = 0;
		fslider4 = 0.6f;
		fConst17 = (1.0f / tanf((628.3185307179587f / float(iConst0))));
		fConst18 = (1 + fConst17);
		fConst19 = (1.0f / fConst18);
		fConst20 = (0 - ((1 - fConst17) / fConst18));
		for (int i=0; i<2; i++) fRec26[i] = 0;
		fslider5 = 0.72f;
		fConst21 = floorf((0.5f + (0.174713f * iConst0)));
		fConst22 = ((0 - (6.907755278982138f * fConst21)) / float(iConst0));
		fConst23 = (0.5f * fConst22);
		fConst24 = (0.3333333333333333f * fConst22);
		fConst25 = cosf((37699.11184307752f / float(iConst0)));
		for (int i=0; i<2; i++) fRec25[i] = 0;
		for (int i=0; i<8192; i++) fVec5[i] = 0;
		fConst26 = floorf((0.5f + (0.022904f * iConst0)));
		iConst27 = int((int((fConst21 - fConst26)) & 8191));
		for (int i=0; i<4096; i++) fVec6[i] = 0;
		iConst28 = int((int((0.02f * iConst0)) & 8191));
		for (int i=0; i<2048; i++) fVec7[i] = 0;
		iConst29 = int((int((fConst26 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec23[i] = 0;
		for (int i=0; i<2; i++) fRec30[i] = 0;
		fConst30 = floorf((0.5f + (0.153129f * iConst0)));
		fConst31 = ((0 - (6.907755278982138f * fConst30)) / float(iConst0));
		fConst32 = (0.5f * fConst31);
		fConst33 = (0.3333333333333333f * fConst31);
		for (int i=0; i<2; i++) fRec29[i] = 0;
		for (int i=0; i<8192; i++) fVec8[i] = 0;
		fConst34 = floorf((0.5f + (0.020346f * iConst0)));
		iConst35 = int((int((fConst30 - fConst34)) & 8191));
		for (int i=0; i<1024; i++) fVec9[i] = 0;
		iConst36 = int((int((fConst34 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec27[i] = 0;
		for (int i=0; i<2; i++) fRec34[i] = 0;
		fConst37 = floorf((0.5f + (0.127837f * iConst0)));
		fConst38 = ((0 - (6.907755278982138f * fConst37)) / float(iConst0));
		fConst39 = (0.5f * fConst38);
		fConst40 = (0.3333333333333333f * fConst38);
		for (int i=0; i<2; i++) fRec33[i] = 0;
		for (int i=0; i<8192; i++) fVec10[i] = 0;
		fConst41 = floorf((0.5f + (0.031604f * iConst0)));
		iConst42 = int((int((fConst37 - fConst41)) & 8191));
		for (int i=0; i<2048; i++) fVec11[i] = 0;
		iConst43 = int((int((fConst41 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec31[i] = 0;
		for (int i=0; i<2; i++) fRec38[i] = 0;
		fConst44 = floorf((0.5f + (0.125f * iConst0)));
		fConst45 = ((0 - (6.907755278982138f * fConst44)) / float(iConst0));
		fConst46 = (0.5f * fConst45);
		fConst47 = (0.3333333333333333f * fConst45);
		for (int i=0; i<2; i++) fRec37[i] = 0;
		for (int i=0; i<8192; i++) fVec12[i] = 0;
		fConst48 = floorf((0.5f + (0.013458f * iConst0)));
		iConst49 = int((int((fConst44 - fConst48)) & 8191));
		for (int i=0; i<1024; i++) fVec13[i] = 0;
		iConst50 = int((int((fConst48 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec35[i] = 0;
		for (int i=0; i<2; i++) fRec42[i] = 0;
		fConst51 = floorf((0.5f + (0.210389f * iConst0)));
		fConst52 = ((0 - (6.907755278982138f * fConst51)) / float(iConst0));
		fConst53 = (0.5f * fConst52);
		fConst54 = (0.3333333333333333f * fConst52);
		for (int i=0; i<2; i++) fRec41[i] = 0;
		for (int i=0; i<16384; i++) fVec14[i] = 0;
		fConst55 = floorf((0.5f + (0.024421f * iConst0)));
		iConst56 = int((int((fConst51 - fConst55)) & 16383));
		fslider6 = 0.5f;
		fConst57 = (0.5f * iConst0);
		for (int i=0; i<4096; i++) fVec15[i] = 0;
		for (int i=0; i<2048; i++) fVec16[i] = 0;
		iConst58 = int((int((fConst55 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec39[i] = 0;
		for (int i=0; i<2; i++) fRec46[i] = 0;
		fConst59 = floorf((0.5f + (0.192303f * iConst0)));
		fConst60 = ((0 - (6.907755278982138f * fConst59)) / float(iConst0));
		fConst61 = (0.5f * fConst60);
		fConst62 = (0.3333333333333333f * fConst60);
		for (int i=0; i<2; i++) fRec45[i] = 0;
		for (int i=0; i<8192; i++) fVec17[i] = 0;
		fConst63 = floorf((0.5f + (0.029291f * iConst0)));
		iConst64 = int((int((fConst59 - fConst63)) & 8191));
		for (int i=0; i<2048; i++) fVec18[i] = 0;
		iConst65 = int((int((fConst63 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec43[i] = 0;
		for (int i=0; i<2; i++) fRec50[i] = 0;
		fConst66 = floorf((0.5f + (0.256891f * iConst0)));
		fConst67 = ((0 - (6.907755278982138f * fConst66)) / float(iConst0));
		fConst68 = (0.5f * fConst67);
		fConst69 = (0.3333333333333333f * fConst67);
		for (int i=0; i<2; i++) fRec49[i] = 0;
		for (int i=0; i<16384; i++) fVec19[i] = 0;
		fConst70 = floorf((0.5f + (0.027333f * iConst0)));
		iConst71 = int((int((fConst66 - fConst70)) & 16383));
		for (int i=0; i<2048; i++) fVec20[i] = 0;
		iConst72 = int((int((fConst70 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec47[i] = 0;
		for (int i=0; i<2; i++) fRec54[i] = 0;
		fConst73 = floorf((0.5f + (0.219991f * iConst0)));
		fConst74 = ((0 - (6.907755278982138f * fConst73)) / float(iConst0));
		fConst75 = (0.5f * fConst74);
		fConst76 = (0.3333333333333333f * fConst74);
		for (int i=0; i<2; i++) fRec53[i] = 0;
		for (int i=0; i<16384; i++) fVec21[i] = 0;
		fConst77 = floorf((0.5f + (0.019123f * iConst0)));
		iConst78 = int((int((fConst73 - fConst77)) & 16383));
		for (int i=0; i<1024; i++) fVec22[i] = 0;
		iConst79 = int((int((fConst77 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec51[i] = 0;
		for (int i=0; i<3; i++) fRec15[i] = 0;
		for (int i=0; i<3; i++) fRec16[i] = 0;
		for (int i=0; i<3; i++) fRec17[i] = 0;
		for (int i=0; i<3; i++) fRec18[i] = 0;
		for (int i=0; i<3; i++) fRec19[i] = 0;
		for (int i=0; i<3; i++) fRec20[i] = 0;
		for (int i=0; i<3; i++) fRec21[i] = 0;
		for (int i=0; i<3; i++) fRec22[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void buildUserInterface(UI* interface) {
		interface->openVerticalBox("0x00");
		interface->openHorizontalBox("Basic_Parameters");
		interface->declare(&fentry2, "1", "");
		interface->declare(&fentry2, "tooltip", "Tone frequency");
		interface->declare(&fentry2, "unit", "Hz");
		interface->addNumEntry("freq", &fentry2, 4.4e+02f, 2e+01f, 2e+04f, 1.0f);
		interface->declare(&fentry0, "1", "");
		interface->declare(&fentry0, "tooltip", "Gain (value between 0 and 1)");
		interface->addNumEntry("gain", &fentry0, 0.8f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fbutton0, "1", "");
		interface->declare(&fbutton0, "tooltip", "noteOn = 1, noteOff = 0");
		interface->addButton("gate", &fbutton0);
		interface->closeBox();
		interface->openHorizontalBox("Physical_and_Nonlinearity");
		interface->openVerticalBox("Physical_Parameters");
		interface->declare(&fslider0, "2", "");
		interface->declare(&fslider0, "tooltip", "A value between 0 and 1");
		interface->addHorizontalSlider("Base_Gain", &fslider0, 1.0f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fslider2, "2", "");
		interface->declare(&fslider2, "tooltip", "Bow pressure on the instrument (Value between 0 and 1)");
		interface->addHorizontalSlider("Bow_Pressure", &fslider2, 0.2f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fentry1, "2", "");
		interface->declare(&fentry1, "tooltip", "0=Bow; 1=Strike");
		interface->addNumEntry("Excitation_Selector", &fentry1, 0.0f, 0.0f, 1.0f, 1.0f);
		interface->declare(&fslider1, "2", "");
		interface->declare(&fslider1, "tooltip", "A value between 0 and 1");
		interface->addHorizontalSlider("Integration_Constant", &fslider1, 0.0f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->closeBox();
		interface->openVerticalBox("Reverb");
		interface->addHorizontalSlider("reverbGain", &fslider3, 0.137f, 0.0f, 1.0f, 0.01f);
		interface->addHorizontalSlider("roomSize", &fslider5, 0.72f, 0.01f, 2.0f, 0.01f);
		interface->closeBox();
		interface->openVerticalBox("Spat");
		interface->addHorizontalSlider("pan angle", &fslider4, 0.6f, 0.0f, 1.0f, 0.01f);
		interface->addHorizontalSlider("spatial width", &fslider6, 0.5f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0 = float(fbutton0);
		int 	iSlow1 = (fSlow0 > 0);
		int 	iSlow2 = (fSlow0 <= 0);
		float 	fSlow3 = float(fentry0);
		float 	fSlow4 = (0.03f + (0.1f * fSlow3));
		float 	fSlow5 = (0.8999999999999999f + (0.1f * float(fslider0)));
		float 	fSlow6 = float(fslider1);
		float 	fSlow7 = (10 - (9 * float(fslider2)));
		float 	fSlow8 = float(fentry1);
		float 	fSlow9 = (0 - (fSlow8 - 1));
		float 	fSlow10 = (fSlow8 * fSlow3);
		float 	fSlow11 = float(fentry2);
		int 	iSlow12 = int((int((float(iConst0) / fSlow11)) & 4095));
		float 	fSlow13 = (fConst7 * cosf((fConst6 * fSlow11)));
		int 	iSlow14 = int((int((fConst11 / fSlow11)) & 4095));
		float 	fSlow15 = (fConst7 * cosf((fConst12 * fSlow11)));
		int 	iSlow16 = int((int((fConst13 / fSlow11)) & 4095));
		float 	fSlow17 = (fConst7 * cosf((fConst14 * fSlow11)));
		int 	iSlow18 = int((int((fConst15 / fSlow11)) & 4095));
		float 	fSlow19 = (fConst7 * cosf((fConst16 * fSlow11)));
		float 	fSlow20 = (0.0010000000000000009f * float(fslider3));
		float 	fSlow21 = float(fslider4);
		float 	fSlow22 = (14 * (1.0f - fSlow21));
		float 	fSlow23 = float(fslider5);
		float 	fSlow24 = expf((fConst23 / fSlow23));
		float 	fSlow25 = ((expf((fConst24 / fSlow23)) / fSlow24) - 1);
		float 	fSlow26 = faustpower<2>(fSlow24);
		float 	fSlow27 = (1.0f - fSlow26);
		float 	fSlow28 = (1.0f - (fConst25 * fSlow26));
		float 	fSlow29 = (fSlow28 / fSlow27);
		float 	fSlow30 = sqrtf(max((float)0, ((faustpower<2>(fSlow28) / faustpower<2>(fSlow27)) - 1.0f)));
		float 	fSlow31 = (fSlow24 * ((1.0f + fSlow30) - fSlow29));
		float 	fSlow32 = (fSlow29 - fSlow30);
		float 	fSlow33 = expf((fConst32 / fSlow23));
		float 	fSlow34 = ((expf((fConst33 / fSlow23)) / fSlow33) - 1);
		float 	fSlow35 = faustpower<2>(fSlow33);
		float 	fSlow36 = (1.0f - fSlow35);
		float 	fSlow37 = (1.0f - (fConst25 * fSlow35));
		float 	fSlow38 = (fSlow37 / fSlow36);
		float 	fSlow39 = sqrtf(max((float)0, ((faustpower<2>(fSlow37) / faustpower<2>(fSlow36)) - 1.0f)));
		float 	fSlow40 = (fSlow33 * ((1.0f + fSlow39) - fSlow38));
		float 	fSlow41 = (fSlow38 - fSlow39);
		float 	fSlow42 = expf((fConst39 / fSlow23));
		float 	fSlow43 = ((expf((fConst40 / fSlow23)) / fSlow42) - 1);
		float 	fSlow44 = faustpower<2>(fSlow42);
		float 	fSlow45 = (1.0f - fSlow44);
		float 	fSlow46 = (1.0f - (fConst25 * fSlow44));
		float 	fSlow47 = (fSlow46 / fSlow45);
		float 	fSlow48 = sqrtf(max((float)0, ((faustpower<2>(fSlow46) / faustpower<2>(fSlow45)) - 1.0f)));
		float 	fSlow49 = (fSlow42 * ((1.0f + fSlow48) - fSlow47));
		float 	fSlow50 = (fSlow47 - fSlow48);
		float 	fSlow51 = expf((fConst46 / fSlow23));
		float 	fSlow52 = ((expf((fConst47 / fSlow23)) / fSlow51) - 1);
		float 	fSlow53 = faustpower<2>(fSlow51);
		float 	fSlow54 = (1.0f - fSlow53);
		float 	fSlow55 = (1.0f - (fConst25 * fSlow53));
		float 	fSlow56 = (fSlow55 / fSlow54);
		float 	fSlow57 = sqrtf(max((float)0, ((faustpower<2>(fSlow55) / faustpower<2>(fSlow54)) - 1.0f)));
		float 	fSlow58 = (fSlow51 * ((1.0f + fSlow57) - fSlow56));
		float 	fSlow59 = (fSlow56 - fSlow57);
		float 	fSlow60 = expf((fConst53 / fSlow23));
		float 	fSlow61 = ((expf((fConst54 / fSlow23)) / fSlow60) - 1);
		float 	fSlow62 = faustpower<2>(fSlow60);
		float 	fSlow63 = (1.0f - fSlow62);
		float 	fSlow64 = (1.0f - (fConst25 * fSlow62));
		float 	fSlow65 = (fSlow64 / fSlow63);
		float 	fSlow66 = sqrtf(max((float)0, ((faustpower<2>(fSlow64) / faustpower<2>(fSlow63)) - 1.0f)));
		float 	fSlow67 = (fSlow60 * ((1.0f + fSlow66) - fSlow65));
		float 	fSlow68 = (fSlow65 - fSlow66);
		int 	iSlow69 = int((int((fConst57 * (float(fslider6) / fSlow11))) & 4095));
		float 	fSlow70 = (14 * fSlow21);
		float 	fSlow71 = expf((fConst61 / fSlow23));
		float 	fSlow72 = ((expf((fConst62 / fSlow23)) / fSlow71) - 1);
		float 	fSlow73 = faustpower<2>(fSlow71);
		float 	fSlow74 = (1.0f - fSlow73);
		float 	fSlow75 = (1.0f - (fConst25 * fSlow73));
		float 	fSlow76 = (fSlow75 / fSlow74);
		float 	fSlow77 = sqrtf(max((float)0, ((faustpower<2>(fSlow75) / faustpower<2>(fSlow74)) - 1.0f)));
		float 	fSlow78 = (fSlow71 * ((1.0f + fSlow77) - fSlow76));
		float 	fSlow79 = (fSlow76 - fSlow77);
		float 	fSlow80 = expf((fConst68 / fSlow23));
		float 	fSlow81 = ((expf((fConst69 / fSlow23)) / fSlow80) - 1);
		float 	fSlow82 = faustpower<2>(fSlow80);
		float 	fSlow83 = (1.0f - fSlow82);
		float 	fSlow84 = (1.0f - (fConst25 * fSlow82));
		float 	fSlow85 = (fSlow84 / fSlow83);
		float 	fSlow86 = sqrtf(max((float)0, ((faustpower<2>(fSlow84) / faustpower<2>(fSlow83)) - 1.0f)));
		float 	fSlow87 = (fSlow80 * ((1.0f + fSlow86) - fSlow85));
		float 	fSlow88 = (fSlow85 - fSlow86);
		float 	fSlow89 = expf((fConst75 / fSlow23));
		float 	fSlow90 = ((expf((fConst76 / fSlow23)) / fSlow89) - 1);
		float 	fSlow91 = faustpower<2>(fSlow89);
		float 	fSlow92 = (1.0f - fSlow91);
		float 	fSlow93 = (1.0f - (fConst25 * fSlow91));
		float 	fSlow94 = (fSlow93 / fSlow92);
		float 	fSlow95 = sqrtf(max((float)0, ((faustpower<2>(fSlow93) / faustpower<2>(fSlow92)) - 1.0f)));
		float 	fSlow96 = (fSlow89 * ((1.0f + fSlow95) - fSlow94));
		float 	fSlow97 = (fSlow94 - fSlow95);
		FAUSTFLOAT* output0 = output[0];
		FAUSTFLOAT* output1 = output[1];
		for (int i=0; i<count; i++) {
			iRec6[0] = (iSlow1 & (iRec6[1] | (fRec7[1] >= 1)));
			int iTemp0 = (iSlow2 & (fRec7[1] > 0));
			fRec7[0] = (((fConst3 * (((iRec6[1] == 0) & iSlow1) & (fRec7[1] < 1))) + (fRec7[1] * ((1 - (fConst2 * (iRec6[1] & (fRec7[1] > 90)))) - (fConst1 * iTemp0)))) * ((iTemp0 == 0) | (fRec7[1] >= 1e-06f)));
			float fTemp1 = (0 - ((fSlow6 + (fSlow5 * ((fRec0[1] + fRec2[1]) + (fRec1[1] + fRec3[1])))) - (fSlow4 * fRec7[0])));
			float fTemp2 = faustpower<4>((0.75f + fabsf((fSlow7 * fTemp1))));
			float fTemp3 = (1.0f / fTemp2);
			float fTemp4 = (fSlow9 * (fTemp1 * ((fTemp3 > 1) + (float((fTemp3 <= 1)) / fTemp2))));
			fVec0[IOTA&4095] = (fSlow10 + (fTemp4 + (4.0f * fRec4[1])));
			fRec5[0] = (0 - (((fSlow13 * fRec5[1]) + (fConst5 * fRec5[2])) - (0.225f * fVec0[(IOTA-iSlow12)&4095])));
			fRec4[0] = ((fConst10 * fRec5[0]) + (fConst9 * fRec5[2]));
			fRec0[0] = fRec4[0];
			fVec1[IOTA&4095] = (fSlow10 + (fTemp4 + (4.0f * fRec8[1])));
			fRec9[0] = (0 - (((fSlow15 * fRec9[1]) + (fConst5 * fRec9[2])) - (0.2025f * fVec1[(IOTA-iSlow14)&4095])));
			fRec8[0] = ((fConst10 * fRec9[0]) + (fConst9 * fRec9[2]));
			fRec1[0] = fRec8[0];
			fVec2[IOTA&2047] = (fSlow10 + (fTemp4 + (4.0f * fRec10[1])));
			fRec11[0] = (0 - (((fSlow17 * fRec11[1]) + (fConst5 * fRec11[2])) - (0.18225000000000002f * fVec2[(IOTA-iSlow16)&2047])));
			fRec10[0] = ((fConst10 * fRec11[0]) + (fConst9 * fRec11[2]));
			fRec2[0] = fRec10[0];
			fVec3[IOTA&2047] = (fSlow10 + (fTemp4 + (4.0f * fRec12[1])));
			fRec13[0] = (0 - (((fSlow19 * fRec13[1]) + (fConst5 * fRec13[2])) - (0.164025f * fVec3[(IOTA-iSlow18)&2047])));
			fRec12[0] = ((fConst10 * fRec13[0]) + (fConst9 * fRec13[2]));
			fRec3[0] = fRec12[0];
			float fTemp5 = (fRec3[0] + ((fRec0[0] + fRec2[0]) + fRec1[0]));
			fVec4[IOTA&4095] = fTemp5;
			fRec14[0] = ((0.999f * fRec14[1]) + fSlow20);
			float fTemp6 = (1 - fRec14[0]);
			fRec26[0] = ((fConst20 * fRec26[1]) + (fConst19 * (fRec19[1] + fRec19[2])));
			fRec25[0] = ((fSlow32 * fRec25[1]) + (fSlow31 * (fRec19[1] + (fSlow25 * fRec26[0]))));
			fVec5[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec25[0]));
			fVec6[IOTA&4095] = (fSlow22 * (fRec14[0] * fVec4[IOTA&4095]));
			float fTemp7 = (0.3f * fVec6[(IOTA-iConst28)&4095]);
			float fTemp8 = ((fTemp7 + fVec5[(IOTA-iConst27)&8191]) - (0.6f * fRec23[1]));
			fVec7[IOTA&2047] = fTemp8;
			fRec23[0] = fVec7[(IOTA-iConst29)&2047];
			float 	fRec24 = (0.6f * fVec7[IOTA&2047]);
			fRec30[0] = ((fConst20 * fRec30[1]) + (fConst19 * (fRec15[1] + fRec15[2])));
			fRec29[0] = ((fSlow41 * fRec29[1]) + (fSlow40 * (fRec15[1] + (fSlow34 * fRec30[0]))));
			fVec8[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec29[0]));
			float fTemp9 = ((fVec8[(IOTA-iConst35)&8191] + fTemp7) - (0.6f * fRec27[1]));
			fVec9[IOTA&1023] = fTemp9;
			fRec27[0] = fVec9[(IOTA-iConst36)&1023];
			float 	fRec28 = (0.6f * fVec9[IOTA&1023]);
			float fTemp10 = (fRec28 + fRec24);
			fRec34[0] = ((fConst20 * fRec34[1]) + (fConst19 * (fRec17[1] + fRec17[2])));
			fRec33[0] = ((fSlow50 * fRec33[1]) + (fSlow49 * (fRec17[1] + (fSlow43 * fRec34[0]))));
			fVec10[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec33[0]));
			float fTemp11 = (fVec10[(IOTA-iConst42)&8191] - (fTemp7 + (0.6f * fRec31[1])));
			fVec11[IOTA&2047] = fTemp11;
			fRec31[0] = fVec11[(IOTA-iConst43)&2047];
			float 	fRec32 = (0.6f * fVec11[IOTA&2047]);
			fRec38[0] = ((fConst20 * fRec38[1]) + (fConst19 * (fRec21[1] + fRec21[2])));
			fRec37[0] = ((fSlow59 * fRec37[1]) + (fSlow58 * (fRec21[1] + (fSlow52 * fRec38[0]))));
			fVec12[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec37[0]));
			float fTemp12 = (fVec12[(IOTA-iConst49)&8191] - (fTemp7 + (0.6f * fRec35[1])));
			fVec13[IOTA&1023] = fTemp12;
			fRec35[0] = fVec13[(IOTA-iConst50)&1023];
			float 	fRec36 = (0.6f * fVec13[IOTA&1023]);
			float fTemp13 = (fRec36 + (fRec32 + fTemp10));
			fRec42[0] = ((fConst20 * fRec42[1]) + (fConst19 * (fRec16[1] + fRec16[2])));
			fRec41[0] = ((fSlow68 * fRec41[1]) + (fSlow67 * (fRec16[1] + (fSlow61 * fRec42[0]))));
			fVec14[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec41[0]));
			float fTemp14 = fVec4[(IOTA-iSlow69)&4095];
			fVec15[IOTA&4095] = (fSlow70 * (fRec14[0] * fTemp14));
			float fTemp15 = (0.3f * fVec15[(IOTA-iConst28)&4095]);
			float fTemp16 = (fTemp15 + ((0.6f * fRec39[1]) + fVec14[(IOTA-iConst56)&16383]));
			fVec16[IOTA&2047] = fTemp16;
			fRec39[0] = fVec16[(IOTA-iConst58)&2047];
			float 	fRec40 = (0 - (0.6f * fVec16[IOTA&2047]));
			fRec46[0] = ((fConst20 * fRec46[1]) + (fConst19 * (fRec20[1] + fRec20[2])));
			fRec45[0] = ((fSlow79 * fRec45[1]) + (fSlow78 * (fRec20[1] + (fSlow72 * fRec46[0]))));
			fVec17[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec45[0]));
			float fTemp17 = (fVec17[(IOTA-iConst64)&8191] + (fTemp15 + (0.6f * fRec43[1])));
			fVec18[IOTA&2047] = fTemp17;
			fRec43[0] = fVec18[(IOTA-iConst65)&2047];
			float 	fRec44 = (0 - (0.6f * fVec18[IOTA&2047]));
			fRec50[0] = ((fConst20 * fRec50[1]) + (fConst19 * (fRec18[1] + fRec18[2])));
			fRec49[0] = ((fSlow88 * fRec49[1]) + (fSlow87 * (fRec18[1] + (fSlow81 * fRec50[0]))));
			fVec19[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec49[0]));
			float fTemp18 = (((0.6f * fRec47[1]) + fVec19[(IOTA-iConst71)&16383]) - fTemp15);
			fVec20[IOTA&2047] = fTemp18;
			fRec47[0] = fVec20[(IOTA-iConst72)&2047];
			float 	fRec48 = (0 - (0.6f * fVec20[IOTA&2047]));
			fRec54[0] = ((fConst20 * fRec54[1]) + (fConst19 * (fRec22[1] + fRec22[2])));
			fRec53[0] = ((fSlow97 * fRec53[1]) + (fSlow96 * (fRec22[1] + (fSlow90 * fRec54[0]))));
			fVec21[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec53[0]));
			float fTemp19 = (((0.6f * fRec51[1]) + fVec21[(IOTA-iConst78)&16383]) - fTemp15);
			fVec22[IOTA&1023] = fTemp19;
			fRec51[0] = fVec22[(IOTA-iConst79)&1023];
			float 	fRec52 = (0 - (0.6f * fVec22[IOTA&1023]));
			fRec15[0] = (fRec51[1] + (fRec47[1] + (fRec43[1] + (fRec39[1] + (fRec35[1] + (fRec31[1] + (fRec23[1] + (fRec27[1] + (fRec52 + (fRec48 + (fRec44 + (fRec40 + fTemp13))))))))))));
			fRec16[0] = (0 - ((fRec51[1] + (fRec47[1] + (fRec43[1] + (fRec39[1] + (fRec52 + (fRec48 + (fRec40 + fRec44))))))) - (fRec35[1] + (fRec31[1] + (fRec23[1] + (fRec27[1] + fTemp13))))));
			float fTemp20 = (fRec32 + fRec36);
			fRec17[0] = (0 - ((fRec51[1] + (fRec47[1] + (fRec35[1] + (fRec31[1] + (fRec52 + (fRec48 + fTemp20)))))) - (fRec43[1] + (fRec39[1] + (fRec23[1] + (fRec27[1] + (fRec44 + (fRec40 + fTemp10))))))));
			fRec18[0] = (0 - ((fRec43[1] + (fRec39[1] + (fRec35[1] + (fRec31[1] + (fRec44 + (fRec40 + fTemp20)))))) - (fRec51[1] + (fRec47[1] + (fRec23[1] + (fRec27[1] + (fRec52 + (fRec48 + fTemp10))))))));
			float fTemp21 = (fRec28 + fRec32);
			float fTemp22 = (fRec24 + fRec36);
			fRec19[0] = (0 - ((fRec51[1] + (fRec43[1] + (fRec35[1] + (fRec23[1] + (fRec52 + (fRec44 + fTemp22)))))) - (fRec47[1] + (fRec39[1] + (fRec31[1] + (fRec27[1] + (fRec48 + (fRec40 + fTemp21))))))));
			fRec20[0] = (0 - ((fRec47[1] + (fRec39[1] + (fRec35[1] + (fRec23[1] + (fRec48 + (fRec40 + fTemp22)))))) - (fRec51[1] + (fRec43[1] + (fRec31[1] + (fRec27[1] + (fRec52 + (fRec44 + fTemp21))))))));
			float fTemp23 = (fRec28 + fRec36);
			float fTemp24 = (fRec24 + fRec32);
			fRec21[0] = (0 - ((fRec47[1] + (fRec43[1] + (fRec31[1] + (fRec23[1] + (fRec48 + (fRec44 + fTemp24)))))) - (fRec51[1] + (fRec39[1] + (fRec35[1] + (fRec27[1] + (fRec52 + (fRec40 + fTemp23))))))));
			fRec22[0] = (0 - ((fRec51[1] + (fRec39[1] + (fRec31[1] + (fRec23[1] + (fRec52 + (fRec40 + fTemp24)))))) - (fRec47[1] + (fRec43[1] + (fRec35[1] + (fRec27[1] + (fRec48 + (fRec44 + fTemp23))))))));
			output0[i] = (FAUSTFLOAT)((0.37f * (fRec16[0] + fRec17[0])) + (fSlow22 * (fTemp6 * fVec4[IOTA&4095])));
			output1[i] = (FAUSTFLOAT)((0.37f * (fRec16[0] - fRec17[0])) + (fSlow70 * (fTemp6 * fTemp14)));
			// post processing
			fRec22[2] = fRec22[1]; fRec22[1] = fRec22[0];
			fRec21[2] = fRec21[1]; fRec21[1] = fRec21[0];
			fRec20[2] = fRec20[1]; fRec20[1] = fRec20[0];
			fRec19[2] = fRec19[1]; fRec19[1] = fRec19[0];
			fRec18[2] = fRec18[1]; fRec18[1] = fRec18[0];
			fRec17[2] = fRec17[1]; fRec17[1] = fRec17[0];
			fRec16[2] = fRec16[1]; fRec16[1] = fRec16[0];
			fRec15[2] = fRec15[1]; fRec15[1] = fRec15[0];
			fRec51[1] = fRec51[0];
			fRec53[1] = fRec53[0];
			fRec54[1] = fRec54[0];
			fRec47[1] = fRec47[0];
			fRec49[1] = fRec49[0];
			fRec50[1] = fRec50[0];
			fRec43[1] = fRec43[0];
			fRec45[1] = fRec45[0];
			fRec46[1] = fRec46[0];
			fRec39[1] = fRec39[0];
			fRec41[1] = fRec41[0];
			fRec42[1] = fRec42[0];
			fRec35[1] = fRec35[0];
			fRec37[1] = fRec37[0];
			fRec38[1] = fRec38[0];
			fRec31[1] = fRec31[0];
			fRec33[1] = fRec33[0];
			fRec34[1] = fRec34[0];
			fRec27[1] = fRec27[0];
			fRec29[1] = fRec29[0];
			fRec30[1] = fRec30[0];
			fRec23[1] = fRec23[0];
			fRec25[1] = fRec25[0];
			fRec26[1] = fRec26[0];
			fRec14[1] = fRec14[0];
			fRec3[1] = fRec3[0];
			fRec12[1] = fRec12[0];
			fRec13[2] = fRec13[1]; fRec13[1] = fRec13[0];
			fRec2[1] = fRec2[0];
			fRec10[1] = fRec10[0];
			fRec11[2] = fRec11[1]; fRec11[1] = fRec11[0];
			fRec1[1] = fRec1[0];
			fRec8[1] = fRec8[0];
			fRec9[2] = fRec9[1]; fRec9[1] = fRec9[0];
			fRec0[1] = fRec0[0];
			fRec4[1] = fRec4[0];
			fRec5[2] = fRec5[1]; fRec5[1] = fRec5[0];
			IOTA = IOTA+1;
			fRec7[1] = fRec7[0];
			iRec6[1] = iRec6[0];
		}
	}
};


