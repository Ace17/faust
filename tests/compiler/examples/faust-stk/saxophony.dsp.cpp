//-----------------------------------------------------
// name: "Saxophone"
// author: "Romain Michon"
// copyright: "Romain Michon (rmichon@ccrma.stanford.edu)"
// version: "1.0"
//
// Code generated with Faust 0.9.70 (http://faust.grame.fr)
//-----------------------------------------------------
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif  

typedef long double quad;
/* link with  */
#include <math.h>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline float faustpower(float x)          { return powf(x,N); } 
template <int N> inline double faustpower(double x)        { return pow(x,N); }
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <>   inline int faustpower<0>(int x)            { return 1; }
template <>   inline int faustpower<1>(int x)            { return x; }
#endif

#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	class SIG0 {
	  private:
		int 	fSamplingFreq;
		int 	iRec24[2];
	  public:
		int getNumInputs() 	{ return 0; }
		int getNumOutputs() 	{ return 1; }
		void init(int samplingFreq) {
			fSamplingFreq = samplingFreq;
			for (int i=0; i<2; i++) iRec24[i] = 0;
		}
		void fill (int count, float output[]) {
			for (int i=0; i<count; i++) {
				iRec24[0] = (1 + iRec24[1]);
				output[i] = sinf((9.587379924285257e-05f * float((iRec24[0] - 1))));
				// post processing
				iRec24[1] = iRec24[0];
			}
		}
	};


	int 	iConst0;
	float 	fConst1;
	float 	fConst2;
	float 	fConst3;
	float 	fConst4;
	float 	fRec11[2];
	FAUSTFLOAT 	fslider0;
	float 	fConst5;
	float 	fConst6;
	float 	fConst7;
	float 	fConst8;
	float 	fConst9;
	float 	fConst10;
	float 	fRec10[2];
	int 	IOTA;
	float 	fVec0[8192];
	float 	fConst11;
	int 	iConst12;
	FAUSTFLOAT 	fslider1;
	float 	fRec12[2];
	FAUSTFLOAT 	fslider2;
	FAUSTFLOAT 	fentry0;
	float 	fVec1[2];
	FAUSTFLOAT 	fslider3;
	float 	fRec15[2];
	FAUSTFLOAT 	fentry1;
	FAUSTFLOAT 	fbutton0;
	int 	iRec16[2];
	FAUSTFLOAT 	fslider4;
	FAUSTFLOAT 	fslider5;
	float 	fRec17[2];
	float 	fRec23[2];
	float 	fRec22[2];
	float 	fRec21[2];
	float 	fRec20[2];
	float 	fRec19[2];
	float 	fRec18[2];
	static float 	ftbl0[65536];
	FAUSTFLOAT 	fslider6;
	float 	fRec26[2];
	float 	fConst13;
	float 	fRec25[2];
	float 	fRec32[2];
	float 	fRec31[2];
	float 	fRec30[2];
	float 	fRec29[2];
	float 	fRec28[2];
	float 	fRec27[2];
	float 	fVec2[2];
	float 	fVec3[4096];
	FAUSTFLOAT 	fslider7;
	float 	fRec33[2];
	FAUSTFLOAT 	fslider8;
	int 	iRec34[2];
	FAUSTFLOAT 	fslider9;
	int 	iRec35[2];
	FAUSTFLOAT 	fslider10;
	FAUSTFLOAT 	fslider11;
	float 	fRec36[2];
	FAUSTFLOAT 	fslider12;
	float 	fRec13[8192];
	FAUSTFLOAT 	fslider13;
	FAUSTFLOAT 	fentry2;
	float 	fVec4[4096];
	int 	iConst14;
	float 	fVec5[2048];
	int 	iConst15;
	float 	fRec8[2];
	float 	fRec40[2];
	float 	fConst16;
	float 	fConst17;
	float 	fConst18;
	float 	fConst19;
	float 	fRec39[2];
	float 	fVec6[8192];
	float 	fConst20;
	int 	iConst21;
	float 	fVec7[1024];
	int 	iConst22;
	float 	fRec37[2];
	float 	fRec44[2];
	float 	fConst23;
	float 	fConst24;
	float 	fConst25;
	float 	fConst26;
	float 	fRec43[2];
	float 	fVec8[8192];
	float 	fConst27;
	int 	iConst28;
	float 	fVec9[2048];
	int 	iConst29;
	float 	fRec41[2];
	float 	fRec48[2];
	float 	fConst30;
	float 	fConst31;
	float 	fConst32;
	float 	fConst33;
	float 	fRec47[2];
	float 	fVec10[8192];
	float 	fConst34;
	int 	iConst35;
	float 	fVec11[1024];
	int 	iConst36;
	float 	fRec45[2];
	float 	fRec52[2];
	float 	fConst37;
	float 	fConst38;
	float 	fConst39;
	float 	fConst40;
	float 	fRec51[2];
	float 	fVec12[16384];
	float 	fConst41;
	int 	iConst42;
	float 	fVec13[4096];
	FAUSTFLOAT 	fslider14;
	float 	fConst43;
	float 	fVec14[4096];
	float 	fVec15[2048];
	int 	iConst44;
	float 	fRec49[2];
	float 	fRec56[2];
	float 	fConst45;
	float 	fConst46;
	float 	fConst47;
	float 	fConst48;
	float 	fRec55[2];
	float 	fVec16[8192];
	float 	fConst49;
	int 	iConst50;
	float 	fVec17[2048];
	int 	iConst51;
	float 	fRec53[2];
	float 	fRec60[2];
	float 	fConst52;
	float 	fConst53;
	float 	fConst54;
	float 	fConst55;
	float 	fRec59[2];
	float 	fVec18[16384];
	float 	fConst56;
	int 	iConst57;
	float 	fVec19[2048];
	int 	iConst58;
	float 	fRec57[2];
	float 	fRec64[2];
	float 	fConst59;
	float 	fConst60;
	float 	fConst61;
	float 	fConst62;
	float 	fRec63[2];
	float 	fVec20[16384];
	float 	fConst63;
	int 	iConst64;
	float 	fVec21[1024];
	int 	iConst65;
	float 	fRec61[2];
	float 	fRec0[3];
	float 	fRec1[3];
	float 	fRec2[3];
	float 	fRec3[3];
	float 	fRec4[3];
	float 	fRec5[3];
	float 	fRec6[3];
	float 	fRec7[3];
  public:
	static void metadata(Meta* m) 	{ 
		m->declare("name", "Saxophone");
		m->declare("description", "Nonlinear WaveGuide Saxophone");
		m->declare("author", "Romain Michon");
		m->declare("copyright", "Romain Michon (rmichon@ccrma.stanford.edu)");
		m->declare("version", "1.0");
		m->declare("licence", "STK-4.3");
		m->declare("reference", "https://ccrma.stanford.edu/~jos/pasp/Woodwinds.html");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/version", "1.0");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/version", "1.0");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("instrument.lib/name", "Faust-STK Tools Library");
		m->declare("instrument.lib/author", "Romain Michon (rmichon@ccrma.stanford.edu)");
		m->declare("instrument.lib/copyright", "Romain Michon");
		m->declare("instrument.lib/version", "1.0");
		m->declare("instrument.lib/licence", "STK-4.3");
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/version", "1.29");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("effect.lib/name", "Faust Audio Effect Library");
		m->declare("effect.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/copyright", "Julius O. Smith III");
		m->declare("effect.lib/version", "1.33");
		m->declare("effect.lib/license", "STK-4.3");
		m->declare("effect.lib/exciter_name", "Harmonic Exciter");
		m->declare("effect.lib/exciter_author", "Priyanka Shekar (pshekar@ccrma.stanford.edu)");
		m->declare("effect.lib/exciter_copyright", "Copyright (c) 2013 Priyanka Shekar");
		m->declare("effect.lib/exciter_version", "1.0");
		m->declare("effect.lib/exciter_license", "MIT License (MIT)");
	}

	virtual int getNumInputs() 	{ return 0; }
	virtual int getNumOutputs() 	{ return 2; }
	static void classInit(int samplingFreq) {
		SIG0 sig0;
		sig0.init(samplingFreq);
		sig0.fill(65536,ftbl0);
	}
	virtual void instanceInit(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		iConst0 = min(192000, max(1, fSamplingFreq));
		fConst1 = (1.0f / tanf((628.3185307179587f / float(iConst0))));
		fConst2 = (1 + fConst1);
		fConst3 = (1.0f / fConst2);
		fConst4 = (0 - ((1 - fConst1) / fConst2));
		for (int i=0; i<2; i++) fRec11[i] = 0;
		fslider0 = 0.72f;
		fConst5 = floorf((0.5f + (0.174713f * iConst0)));
		fConst6 = ((0 - (6.907755278982138f * fConst5)) / float(iConst0));
		fConst7 = (0.5f * fConst6);
		fConst8 = (0.3333333333333333f * fConst6);
		fConst9 = float(iConst0);
		fConst10 = cosf((37699.11184307752f / fConst9));
		for (int i=0; i<2; i++) fRec10[i] = 0;
		IOTA = 0;
		for (int i=0; i<8192; i++) fVec0[i] = 0;
		fConst11 = floorf((0.5f + (0.022904f * iConst0)));
		iConst12 = int((int((fConst5 - fConst11)) & 8191));
		fslider1 = 0.137f;
		for (int i=0; i<2; i++) fRec12[i] = 0;
		fslider2 = 0.5f;
		fentry0 = 4.4e+02f;
		for (int i=0; i<2; i++) fVec1[i] = 0;
		fslider3 = 0.0f;
		for (int i=0; i<2; i++) fRec15[i] = 0;
		fentry1 = 0.0f;
		fbutton0 = 0.0;
		for (int i=0; i<2; i++) iRec16[i] = 0;
		fslider4 = 0.01f;
		fslider5 = 0.1f;
		for (int i=0; i<2; i++) fRec17[i] = 0;
		for (int i=0; i<2; i++) fRec23[i] = 0;
		for (int i=0; i<2; i++) fRec22[i] = 0;
		for (int i=0; i<2; i++) fRec21[i] = 0;
		for (int i=0; i<2; i++) fRec20[i] = 0;
		for (int i=0; i<2; i++) fRec19[i] = 0;
		for (int i=0; i<2; i++) fRec18[i] = 0;
		fslider6 = 2.2e+02f;
		for (int i=0; i<2; i++) fRec26[i] = 0;
		fConst13 = (1.0f / fConst9);
		for (int i=0; i<2; i++) fRec25[i] = 0;
		for (int i=0; i<2; i++) fRec32[i] = 0;
		for (int i=0; i<2; i++) fRec31[i] = 0;
		for (int i=0; i<2; i++) fRec30[i] = 0;
		for (int i=0; i<2; i++) fRec29[i] = 0;
		for (int i=0; i<2; i++) fRec28[i] = 0;
		for (int i=0; i<2; i++) fRec27[i] = 0;
		for (int i=0; i<2; i++) fVec2[i] = 0;
		for (int i=0; i<4096; i++) fVec3[i] = 0;
		fslider7 = 6.0f;
		for (int i=0; i<2; i++) fRec33[i] = 0;
		fslider8 = 0.1f;
		for (int i=0; i<2; i++) iRec34[i] = 0;
		fslider9 = 0.05f;
		for (int i=0; i<2; i++) iRec35[i] = 0;
		fslider10 = 1.0f;
		fslider11 = 0.05f;
		for (int i=0; i<2; i++) fRec36[i] = 0;
		fslider12 = 0.3f;
		for (int i=0; i<8192; i++) fRec13[i] = 0;
		fslider13 = 0.6f;
		fentry2 = 1.0f;
		for (int i=0; i<4096; i++) fVec4[i] = 0;
		iConst14 = int((int((0.02f * iConst0)) & 8191));
		for (int i=0; i<2048; i++) fVec5[i] = 0;
		iConst15 = int((int((fConst11 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec8[i] = 0;
		for (int i=0; i<2; i++) fRec40[i] = 0;
		fConst16 = floorf((0.5f + (0.153129f * iConst0)));
		fConst17 = ((0 - (6.907755278982138f * fConst16)) / float(iConst0));
		fConst18 = (0.5f * fConst17);
		fConst19 = (0.3333333333333333f * fConst17);
		for (int i=0; i<2; i++) fRec39[i] = 0;
		for (int i=0; i<8192; i++) fVec6[i] = 0;
		fConst20 = floorf((0.5f + (0.020346f * iConst0)));
		iConst21 = int((int((fConst16 - fConst20)) & 8191));
		for (int i=0; i<1024; i++) fVec7[i] = 0;
		iConst22 = int((int((fConst20 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec37[i] = 0;
		for (int i=0; i<2; i++) fRec44[i] = 0;
		fConst23 = floorf((0.5f + (0.127837f * iConst0)));
		fConst24 = ((0 - (6.907755278982138f * fConst23)) / float(iConst0));
		fConst25 = (0.5f * fConst24);
		fConst26 = (0.3333333333333333f * fConst24);
		for (int i=0; i<2; i++) fRec43[i] = 0;
		for (int i=0; i<8192; i++) fVec8[i] = 0;
		fConst27 = floorf((0.5f + (0.031604f * iConst0)));
		iConst28 = int((int((fConst23 - fConst27)) & 8191));
		for (int i=0; i<2048; i++) fVec9[i] = 0;
		iConst29 = int((int((fConst27 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec41[i] = 0;
		for (int i=0; i<2; i++) fRec48[i] = 0;
		fConst30 = floorf((0.5f + (0.125f * iConst0)));
		fConst31 = ((0 - (6.907755278982138f * fConst30)) / float(iConst0));
		fConst32 = (0.5f * fConst31);
		fConst33 = (0.3333333333333333f * fConst31);
		for (int i=0; i<2; i++) fRec47[i] = 0;
		for (int i=0; i<8192; i++) fVec10[i] = 0;
		fConst34 = floorf((0.5f + (0.013458f * iConst0)));
		iConst35 = int((int((fConst30 - fConst34)) & 8191));
		for (int i=0; i<1024; i++) fVec11[i] = 0;
		iConst36 = int((int((fConst34 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec45[i] = 0;
		for (int i=0; i<2; i++) fRec52[i] = 0;
		fConst37 = floorf((0.5f + (0.210389f * iConst0)));
		fConst38 = ((0 - (6.907755278982138f * fConst37)) / float(iConst0));
		fConst39 = (0.5f * fConst38);
		fConst40 = (0.3333333333333333f * fConst38);
		for (int i=0; i<2; i++) fRec51[i] = 0;
		for (int i=0; i<16384; i++) fVec12[i] = 0;
		fConst41 = floorf((0.5f + (0.024421f * iConst0)));
		iConst42 = int((int((fConst37 - fConst41)) & 16383));
		for (int i=0; i<4096; i++) fVec13[i] = 0;
		fslider14 = 0.5f;
		fConst43 = (0.5f * iConst0);
		for (int i=0; i<4096; i++) fVec14[i] = 0;
		for (int i=0; i<2048; i++) fVec15[i] = 0;
		iConst44 = int((int((fConst41 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec49[i] = 0;
		for (int i=0; i<2; i++) fRec56[i] = 0;
		fConst45 = floorf((0.5f + (0.192303f * iConst0)));
		fConst46 = ((0 - (6.907755278982138f * fConst45)) / float(iConst0));
		fConst47 = (0.5f * fConst46);
		fConst48 = (0.3333333333333333f * fConst46);
		for (int i=0; i<2; i++) fRec55[i] = 0;
		for (int i=0; i<8192; i++) fVec16[i] = 0;
		fConst49 = floorf((0.5f + (0.029291f * iConst0)));
		iConst50 = int((int((fConst45 - fConst49)) & 8191));
		for (int i=0; i<2048; i++) fVec17[i] = 0;
		iConst51 = int((int((fConst49 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec53[i] = 0;
		for (int i=0; i<2; i++) fRec60[i] = 0;
		fConst52 = floorf((0.5f + (0.256891f * iConst0)));
		fConst53 = ((0 - (6.907755278982138f * fConst52)) / float(iConst0));
		fConst54 = (0.5f * fConst53);
		fConst55 = (0.3333333333333333f * fConst53);
		for (int i=0; i<2; i++) fRec59[i] = 0;
		for (int i=0; i<16384; i++) fVec18[i] = 0;
		fConst56 = floorf((0.5f + (0.027333f * iConst0)));
		iConst57 = int((int((fConst52 - fConst56)) & 16383));
		for (int i=0; i<2048; i++) fVec19[i] = 0;
		iConst58 = int((int((fConst56 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec57[i] = 0;
		for (int i=0; i<2; i++) fRec64[i] = 0;
		fConst59 = floorf((0.5f + (0.219991f * iConst0)));
		fConst60 = ((0 - (6.907755278982138f * fConst59)) / float(iConst0));
		fConst61 = (0.5f * fConst60);
		fConst62 = (0.3333333333333333f * fConst60);
		for (int i=0; i<2; i++) fRec63[i] = 0;
		for (int i=0; i<16384; i++) fVec20[i] = 0;
		fConst63 = floorf((0.5f + (0.019123f * iConst0)));
		iConst64 = int((int((fConst59 - fConst63)) & 16383));
		for (int i=0; i<1024; i++) fVec21[i] = 0;
		iConst65 = int((int((fConst63 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec61[i] = 0;
		for (int i=0; i<3; i++) fRec0[i] = 0;
		for (int i=0; i<3; i++) fRec1[i] = 0;
		for (int i=0; i<3; i++) fRec2[i] = 0;
		for (int i=0; i<3; i++) fRec3[i] = 0;
		for (int i=0; i<3; i++) fRec4[i] = 0;
		for (int i=0; i<3; i++) fRec5[i] = 0;
		for (int i=0; i<3; i++) fRec6[i] = 0;
		for (int i=0; i<3; i++) fRec7[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void buildUserInterface(UI* interface) {
		interface->openVerticalBox("0x00");
		interface->openHorizontalBox("Basic_Parameters");
		interface->declare(&fentry0, "1", "");
		interface->declare(&fentry0, "tooltip", "Tone frequency");
		interface->declare(&fentry0, "unit", "Hz");
		interface->addNumEntry("freq", &fentry0, 4.4e+02f, 2e+01f, 2e+04f, 1.0f);
		interface->declare(&fentry2, "1", "");
		interface->declare(&fentry2, "tooltip", "Gain (value between 0 and 1)");
		interface->addNumEntry("gain", &fentry2, 1.0f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fbutton0, "1", "");
		interface->declare(&fbutton0, "tooltip", "noteOn = 1, noteOff = 0");
		interface->addButton("gate", &fbutton0);
		interface->closeBox();
		interface->openHorizontalBox("Envelopes_and_Vibrato");
		interface->openVerticalBox("Envelope_Parameters");
		interface->declare(&fslider11, "5", "");
		interface->declare(&fslider11, "tooltip", "Envelope attack duration");
		interface->declare(&fslider11, "unit", "s");
		interface->addHorizontalSlider("Envelope_Attack", &fslider11, 0.05f, 0.0f, 2.0f, 0.01f);
		interface->declare(&fslider4, "5", "");
		interface->declare(&fslider4, "tooltip", "Envelope release duration");
		interface->declare(&fslider4, "unit", "s");
		interface->addHorizontalSlider("Envelope_Release", &fslider4, 0.01f, 0.0f, 2.0f, 0.01f);
		interface->closeBox();
		interface->openVerticalBox("Vibrato_Parameters");
		interface->declare(&fslider7, "4", "");
		interface->declare(&fslider7, "unit", "Hz");
		interface->addHorizontalSlider("Vibrato_Freq", &fslider7, 6.0f, 1.0f, 15.0f, 0.1f);
		interface->declare(&fslider8, "4", "");
		interface->declare(&fslider8, "tooltip", "A value between 0 and 1");
		interface->addHorizontalSlider("Vibrato_Gain", &fslider8, 0.1f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->closeBox();
		interface->openHorizontalBox("Physical_and_Nonlinearity");
		interface->openVerticalBox("Nonlinear_Filter_Parameters");
		interface->declare(&fslider6, "3", "");
		interface->declare(&fslider6, "tooltip", "Frequency of the sine wave for the modulation of theta (works if Modulation Type=3)");
		interface->declare(&fslider6, "unit", "Hz");
		interface->addHorizontalSlider("Modulation_Frequency", &fslider6, 2.2e+02f, 2e+01f, 1e+03f, 0.1f);
		interface->declare(&fentry1, "3", "");
		interface->declare(&fentry1, "tooltip", "0=theta is modulated by the incoming signal; 1=theta is modulated by the averaged incoming signal; 2=theta is modulated by the squared incoming signal; 3=theta is modulated by a sine wave of frequency freqMod; 4=theta is modulated by a sine wave of frequency freq;");
		interface->addNumEntry("Modulation_Type", &fentry1, 0.0f, 0.0f, 4.0f, 1.0f);
		interface->declare(&fslider3, "3", "");
		interface->declare(&fslider3, "tooltip", "Nonlinearity factor (value between 0 and 1)");
		interface->addHorizontalSlider("Nonlinearity", &fslider3, 0.0f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fslider5, "3", "");
		interface->declare(&fslider5, "Attack duration of the nonlinearity", "");
		interface->declare(&fslider5, "unit", "s");
		interface->addHorizontalSlider("Nonlinearity_Attack", &fslider5, 0.1f, 0.0f, 2.0f, 0.01f);
		interface->closeBox();
		interface->openVerticalBox("Physical_Parameters");
		interface->declare(&fslider2, "2", "");
		interface->declare(&fslider2, "tooltip", "A value between 0 and 1");
		interface->addHorizontalSlider("Blow_Position", &fslider2, 0.5f, 0.0f, 1.0f, 0.01f);
		interface->addHorizontalSlider("Noise_Gain", &fslider9, 0.05f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fslider10, "2", "");
		interface->declare(&fslider10, "tooltip", "Breath pressure (a value between 0 and 1)");
		interface->addHorizontalSlider("Pressure", &fslider10, 1.0f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fslider12, "2", "");
		interface->declare(&fslider12, "tooltip", "A value between 0 and 1");
		interface->addHorizontalSlider("Reed_Stiffness", &fslider12, 0.3f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->closeBox();
		interface->openVerticalBox("Reverb");
		interface->addHorizontalSlider("reverbGain", &fslider1, 0.137f, 0.0f, 1.0f, 0.01f);
		interface->addHorizontalSlider("roomSize", &fslider0, 0.72f, 0.01f, 2.0f, 0.01f);
		interface->closeBox();
		interface->openVerticalBox("Spat");
		interface->addHorizontalSlider("pan angle", &fslider13, 0.6f, 0.0f, 1.0f, 0.01f);
		interface->addHorizontalSlider("spatial width", &fslider14, 0.5f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0 = float(fslider0);
		float 	fSlow1 = expf((fConst7 / fSlow0));
		float 	fSlow2 = ((expf((fConst8 / fSlow0)) / fSlow1) - 1);
		float 	fSlow3 = faustpower<2>(fSlow1);
		float 	fSlow4 = (1.0f - fSlow3);
		float 	fSlow5 = (1.0f - (fConst10 * fSlow3));
		float 	fSlow6 = (fSlow5 / fSlow4);
		float 	fSlow7 = sqrtf(max((float)0, ((faustpower<2>(fSlow5) / faustpower<2>(fSlow4)) - 1.0f)));
		float 	fSlow8 = (fSlow1 * ((1.0f + fSlow7) - fSlow6));
		float 	fSlow9 = (fSlow6 - fSlow7);
		float 	fSlow10 = (0.0010000000000000009f * float(fslider1));
		float 	fSlow11 = float(fslider2);
		float 	fSlow12 = float(fentry0);
		float 	fSlow13 = ((float(iConst0) / fSlow12) - 3);
		float 	fSlow14 = (fSlow13 * (1 - fSlow11));
		int 	iSlow15 = int(fSlow14);
		int 	iSlow16 = (1 + iSlow15);
		int 	iSlow17 = int((1 + int((int(iSlow16) & 4095))));
		float 	fSlow18 = (fSlow14 - iSlow15);
		int 	iSlow19 = int((1 + int((iSlow15 & 4095))));
		float 	fSlow20 = (iSlow16 - fSlow14);
		float 	fSlow21 = (0.0010000000000000009f * float(fslider3));
		float 	fSlow22 = float(fentry1);
		float 	fSlow23 = (3.141592653589793f * (fSlow22 == 2));
		float 	fSlow24 = (1.5707963267948966f * (fSlow22 == 1));
		float 	fSlow25 = (3.141592653589793f * (fSlow22 == 0));
		float 	fSlow26 = float(fbutton0);
		int 	iSlow27 = (fSlow26 > 0);
		int 	iSlow28 = (fSlow26 <= 0);
		float 	fSlow29 = float(fslider4);
		float 	fSlow30 = (1 - (1.0f / powf(1e+05f,(1.0f / ((fSlow29 == 0.0f) + (iConst0 * fSlow29))))));
		float 	fSlow31 = float(fslider5);
		float 	fSlow32 = (1.0f / ((fSlow31 == 0.0f) + (iConst0 * fSlow31)));
		int 	iSlow33 = (fSlow22 < 3);
		float 	fSlow34 = (0.0010000000000000009f * float(fslider6));
		int 	iSlow35 = (fSlow22 != 4);
		float 	fSlow36 = (fSlow12 * (fSlow22 == 4));
		int 	iSlow37 = (fSlow22 >= 3);
		float 	fSlow38 = (fSlow13 * fSlow11);
		float 	fSlow39 = (1 + fSlow38);
		int 	iSlow40 = int(fSlow39);
		int 	iSlow41 = int((int((1 + iSlow40)) & 4095));
		float 	fSlow42 = (fSlow39 - iSlow40);
		int 	iSlow43 = int((iSlow40 & 4095));
		float 	fSlow44 = (iSlow40 - fSlow38);
		float 	fSlow45 = (fConst13 * float(fslider7));
		float 	fSlow46 = float(fslider8);
		float 	fSlow47 = (4.656612875245797e-10f * float(fslider9));
		float 	fSlow48 = float(fslider10);
		float 	fSlow49 = (fSlow29 * fSlow48);
		float 	fSlow50 = (1 - (1.0f / powf(1e+05f,(1.0f / ((iConst0 * fSlow49) + (fSlow49 == 0.0f))))));
		float 	fSlow51 = (float(fslider11) * fSlow48);
		float 	fSlow52 = (1.0f / ((iConst0 * fSlow51) + (fSlow51 == 0.0f)));
		float 	fSlow53 = (0.55f + (0.3f * fSlow48));
		float 	fSlow54 = (0.1f + (0.4f * float(fslider12)));
		float 	fSlow55 = float(fslider13);
		float 	fSlow56 = float(fentry2);
		float 	fSlow57 = (fSlow56 * (1.0f - fSlow55));
		float 	fSlow58 = expf((fConst18 / fSlow0));
		float 	fSlow59 = ((expf((fConst19 / fSlow0)) / fSlow58) - 1);
		float 	fSlow60 = faustpower<2>(fSlow58);
		float 	fSlow61 = (1.0f - fSlow60);
		float 	fSlow62 = (1.0f - (fConst10 * fSlow60));
		float 	fSlow63 = (fSlow62 / fSlow61);
		float 	fSlow64 = sqrtf(max((float)0, ((faustpower<2>(fSlow62) / faustpower<2>(fSlow61)) - 1.0f)));
		float 	fSlow65 = (fSlow58 * ((1.0f + fSlow64) - fSlow63));
		float 	fSlow66 = (fSlow63 - fSlow64);
		float 	fSlow67 = expf((fConst25 / fSlow0));
		float 	fSlow68 = ((expf((fConst26 / fSlow0)) / fSlow67) - 1);
		float 	fSlow69 = faustpower<2>(fSlow67);
		float 	fSlow70 = (1.0f - fSlow69);
		float 	fSlow71 = (1.0f - (fConst10 * fSlow69));
		float 	fSlow72 = (fSlow71 / fSlow70);
		float 	fSlow73 = sqrtf(max((float)0, ((faustpower<2>(fSlow71) / faustpower<2>(fSlow70)) - 1.0f)));
		float 	fSlow74 = (fSlow67 * ((1.0f + fSlow73) - fSlow72));
		float 	fSlow75 = (fSlow72 - fSlow73);
		float 	fSlow76 = expf((fConst32 / fSlow0));
		float 	fSlow77 = ((expf((fConst33 / fSlow0)) / fSlow76) - 1);
		float 	fSlow78 = faustpower<2>(fSlow76);
		float 	fSlow79 = (1.0f - fSlow78);
		float 	fSlow80 = (1.0f - (fConst10 * fSlow78));
		float 	fSlow81 = (fSlow80 / fSlow79);
		float 	fSlow82 = sqrtf(max((float)0, ((faustpower<2>(fSlow80) / faustpower<2>(fSlow79)) - 1.0f)));
		float 	fSlow83 = (fSlow76 * ((1.0f + fSlow82) - fSlow81));
		float 	fSlow84 = (fSlow81 - fSlow82);
		float 	fSlow85 = expf((fConst39 / fSlow0));
		float 	fSlow86 = ((expf((fConst40 / fSlow0)) / fSlow85) - 1);
		float 	fSlow87 = faustpower<2>(fSlow85);
		float 	fSlow88 = (1.0f - fSlow87);
		float 	fSlow89 = (1.0f - (fConst10 * fSlow87));
		float 	fSlow90 = (fSlow89 / fSlow88);
		float 	fSlow91 = sqrtf(max((float)0, ((faustpower<2>(fSlow89) / faustpower<2>(fSlow88)) - 1.0f)));
		float 	fSlow92 = (fSlow85 * ((1.0f + fSlow91) - fSlow90));
		float 	fSlow93 = (fSlow90 - fSlow91);
		int 	iSlow94 = int((int((fConst43 * (float(fslider14) / fSlow12))) & 4095));
		float 	fSlow95 = expf((fConst47 / fSlow0));
		float 	fSlow96 = ((expf((fConst48 / fSlow0)) / fSlow95) - 1);
		float 	fSlow97 = faustpower<2>(fSlow95);
		float 	fSlow98 = (1.0f - fSlow97);
		float 	fSlow99 = (1.0f - (fConst10 * fSlow97));
		float 	fSlow100 = (fSlow99 / fSlow98);
		float 	fSlow101 = sqrtf(max((float)0, ((faustpower<2>(fSlow99) / faustpower<2>(fSlow98)) - 1.0f)));
		float 	fSlow102 = (fSlow95 * ((1.0f + fSlow101) - fSlow100));
		float 	fSlow103 = (fSlow100 - fSlow101);
		float 	fSlow104 = expf((fConst54 / fSlow0));
		float 	fSlow105 = ((expf((fConst55 / fSlow0)) / fSlow104) - 1);
		float 	fSlow106 = faustpower<2>(fSlow104);
		float 	fSlow107 = (1.0f - fSlow106);
		float 	fSlow108 = (1.0f - (fConst10 * fSlow106));
		float 	fSlow109 = (fSlow108 / fSlow107);
		float 	fSlow110 = sqrtf(max((float)0, ((faustpower<2>(fSlow108) / faustpower<2>(fSlow107)) - 1.0f)));
		float 	fSlow111 = (fSlow104 * ((1.0f + fSlow110) - fSlow109));
		float 	fSlow112 = (fSlow109 - fSlow110);
		float 	fSlow113 = expf((fConst61 / fSlow0));
		float 	fSlow114 = ((expf((fConst62 / fSlow0)) / fSlow113) - 1);
		float 	fSlow115 = faustpower<2>(fSlow113);
		float 	fSlow116 = (1.0f - fSlow115);
		float 	fSlow117 = (1.0f - (fConst10 * fSlow115));
		float 	fSlow118 = (fSlow117 / fSlow116);
		float 	fSlow119 = sqrtf(max((float)0, ((faustpower<2>(fSlow117) / faustpower<2>(fSlow116)) - 1.0f)));
		float 	fSlow120 = (fSlow113 * ((1.0f + fSlow119) - fSlow118));
		float 	fSlow121 = (fSlow118 - fSlow119);
		FAUSTFLOAT* output0 = output[0];
		FAUSTFLOAT* output1 = output[1];
		for (int i=0; i<count; i++) {
			fRec11[0] = ((fConst4 * fRec11[1]) + (fConst3 * (fRec4[1] + fRec4[2])));
			fRec10[0] = ((fSlow9 * fRec10[1]) + (fSlow8 * (fRec4[1] + (fSlow2 * fRec11[0]))));
			fVec0[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec10[0]));
			fRec12[0] = ((0.999f * fRec12[1]) + fSlow10);
			float fTemp0 = ((fSlow20 * fRec13[(IOTA-iSlow19)&8191]) + (fSlow18 * fRec13[(IOTA-iSlow17)&8191]));
			fVec1[0] = fTemp0;
			fRec15[0] = (fSlow21 + (0.999f * fRec15[1]));
			iRec16[0] = (iSlow27 & (iRec16[1] | (fRec17[1] >= 1)));
			int iTemp1 = (iSlow28 & (fRec17[1] > 0));
			fRec17[0] = (((fSlow32 * (((iRec16[1] == 0) & iSlow27) & (fRec17[1] < 1))) + (fRec17[1] * (1 - (fSlow30 * iTemp1)))) * ((iTemp1 == 0) | (fRec17[1] >= 1e-06f)));
			float fTemp2 = (fRec15[0] * fRec17[0]);
			float fTemp3 = (fTemp2 * (((fSlow25 * fVec1[0]) + (fSlow24 * (fVec1[0] + fVec1[1]))) + (fSlow23 * faustpower<2>(fVec1[0]))));
			float fTemp4 = cosf(fTemp3);
			float fTemp5 = sinf(fTemp3);
			float fTemp6 = (0 - fTemp5);
			float fTemp7 = ((fRec18[1] * fTemp6) + (fVec1[0] * fTemp4));
			float fTemp8 = ((fTemp6 * fRec19[1]) + (fTemp4 * fTemp7));
			float fTemp9 = ((fTemp6 * fRec20[1]) + (fTemp4 * fTemp8));
			float fTemp10 = ((fTemp6 * fRec21[1]) + (fTemp4 * fTemp9));
			float fTemp11 = ((fTemp6 * fRec22[1]) + (fTemp4 * fTemp10));
			fRec23[0] = ((fTemp6 * fRec23[1]) + (fTemp4 * fTemp11));
			fRec22[0] = ((fTemp5 * fTemp11) + (fTemp4 * fRec23[1]));
			fRec21[0] = ((fTemp5 * fTemp10) + (fTemp4 * fRec22[1]));
			fRec20[0] = ((fTemp5 * fTemp9) + (fTemp4 * fRec21[1]));
			fRec19[0] = ((fTemp5 * fTemp8) + (fTemp4 * fRec20[1]));
			fRec18[0] = ((fTemp5 * fTemp7) + (fTemp4 * fRec19[1]));
			fRec26[0] = (fSlow34 + (0.999f * fRec26[1]));
			float fTemp12 = (fRec25[1] + (fConst13 * (fSlow36 + (iSlow35 * fRec26[0]))));
			fRec25[0] = (fTemp12 - floorf(fTemp12));
			float fTemp13 = (3.141592653589793f * (fTemp2 * ftbl0[int((65536.0f * fRec25[0]))]));
			float fTemp14 = cosf(fTemp13);
			float fTemp15 = sinf(fTemp13);
			float fTemp16 = (0 - fTemp15);
			float fTemp17 = ((fRec27[1] * fTemp16) + (fVec1[0] * fTemp14));
			float fTemp18 = ((fTemp16 * fRec28[1]) + (fTemp14 * fTemp17));
			float fTemp19 = ((fTemp16 * fRec29[1]) + (fTemp14 * fTemp18));
			float fTemp20 = ((fTemp16 * fRec30[1]) + (fTemp14 * fTemp19));
			float fTemp21 = ((fTemp16 * fRec31[1]) + (fTemp14 * fTemp20));
			fRec32[0] = ((fTemp16 * fRec32[1]) + (fTemp14 * fTemp21));
			fRec31[0] = ((fTemp15 * fTemp21) + (fTemp14 * fRec32[1]));
			fRec30[0] = ((fTemp15 * fTemp20) + (fTemp14 * fRec31[1]));
			fRec29[0] = ((fTemp15 * fTemp19) + (fTemp14 * fRec30[1]));
			fRec28[0] = ((fTemp15 * fTemp18) + (fTemp14 * fRec29[1]));
			fRec27[0] = ((fTemp15 * fTemp17) + (fTemp14 * fRec28[1]));
			float fTemp22 = (0 - (0.95f * ((iSlow37 * ((fVec1[0] * fTemp15) + (fRec27[1] * fTemp14))) + (iSlow33 * ((fRec15[0] * ((fVec1[0] * fTemp5) + (fRec18[1] * fTemp4))) + ((1 - fRec15[0]) * fVec1[0]))))));
			fVec2[0] = fTemp22;
			float fTemp23 = (fVec2[0] + fVec2[1]);
			fVec3[IOTA&4095] = fTemp23;
			float fTemp24 = (0.5f * fVec3[IOTA&4095]);
			float fTemp25 = (0.5f * ((fSlow44 * fVec3[(IOTA-iSlow43)&4095]) + (fSlow42 * fVec3[(IOTA-iSlow41)&4095])));
			float fTemp26 = (fRec33[1] + fSlow45);
			fRec33[0] = (fTemp26 - floorf(fTemp26));
			iRec34[0] = (12345 + (1103515245 * iRec34[1]));
			iRec35[0] = (iSlow27 & (iRec35[1] | (fRec36[1] >= 1)));
			int iTemp27 = (iSlow28 & (fRec36[1] > 0));
			fRec36[0] = (((fSlow52 * (((iRec35[1] == 0) & iSlow27) & (fRec36[1] < 1))) + (fRec36[1] * (1 - (fSlow50 * iTemp27)))) * ((iTemp27 == 0) | (fRec36[1] >= 1e-06f)));
			float fTemp28 = (fSlow53 * ((fRec36[0] * (1 + (fSlow47 * iRec34[0]))) * (1 + (fSlow46 * ftbl0[int((65536.0f * fRec33[0]))]))));
			float fTemp29 = ((fTemp28 + fTemp25) - fTemp24);
			float fTemp30 = (0.7f + (fSlow54 * fTemp29));
			float fTemp31 = ((fTemp30 > 1) + (fTemp30 * (fTemp30 <= 1)));
			fRec13[IOTA&8191] = (fTemp28 - (fTemp24 + (fTemp29 * ((fTemp31 * (fTemp31 >= -1)) - (fTemp31 < -1)))));
			float 	fRec14 = (fTemp24 - fTemp25);
			fVec4[IOTA&4095] = (fSlow57 * (fRec14 * fRec12[0]));
			float fTemp32 = (0.3f * fVec4[(IOTA-iConst14)&4095]);
			float fTemp33 = ((fTemp32 + fVec0[(IOTA-iConst12)&8191]) - (0.6f * fRec8[1]));
			fVec5[IOTA&2047] = fTemp33;
			fRec8[0] = fVec5[(IOTA-iConst15)&2047];
			float 	fRec9 = (0.6f * fVec5[IOTA&2047]);
			fRec40[0] = ((fConst4 * fRec40[1]) + (fConst3 * (fRec0[1] + fRec0[2])));
			fRec39[0] = ((fSlow66 * fRec39[1]) + (fSlow65 * (fRec0[1] + (fSlow59 * fRec40[0]))));
			fVec6[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec39[0]));
			float fTemp34 = ((fVec6[(IOTA-iConst21)&8191] + fTemp32) - (0.6f * fRec37[1]));
			fVec7[IOTA&1023] = fTemp34;
			fRec37[0] = fVec7[(IOTA-iConst22)&1023];
			float 	fRec38 = (0.6f * fVec7[IOTA&1023]);
			float fTemp35 = (fRec38 + fRec9);
			fRec44[0] = ((fConst4 * fRec44[1]) + (fConst3 * (fRec2[1] + fRec2[2])));
			fRec43[0] = ((fSlow75 * fRec43[1]) + (fSlow74 * (fRec2[1] + (fSlow68 * fRec44[0]))));
			fVec8[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec43[0]));
			float fTemp36 = (fVec8[(IOTA-iConst28)&8191] - (fTemp32 + (0.6f * fRec41[1])));
			fVec9[IOTA&2047] = fTemp36;
			fRec41[0] = fVec9[(IOTA-iConst29)&2047];
			float 	fRec42 = (0.6f * fVec9[IOTA&2047]);
			fRec48[0] = ((fConst4 * fRec48[1]) + (fConst3 * (fRec6[1] + fRec6[2])));
			fRec47[0] = ((fSlow84 * fRec47[1]) + (fSlow83 * (fRec6[1] + (fSlow77 * fRec48[0]))));
			fVec10[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec47[0]));
			float fTemp37 = (fVec10[(IOTA-iConst35)&8191] - (fTemp32 + (0.6f * fRec45[1])));
			fVec11[IOTA&1023] = fTemp37;
			fRec45[0] = fVec11[(IOTA-iConst36)&1023];
			float 	fRec46 = (0.6f * fVec11[IOTA&1023]);
			float fTemp38 = (fRec46 + (fRec42 + fTemp35));
			fRec52[0] = ((fConst4 * fRec52[1]) + (fConst3 * (fRec1[1] + fRec1[2])));
			fRec51[0] = ((fSlow93 * fRec51[1]) + (fSlow92 * (fRec1[1] + (fSlow86 * fRec52[0]))));
			fVec12[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec51[0]));
			fVec13[IOTA&4095] = (fSlow56 * fRec14);
			float fTemp39 = fVec13[(IOTA-iSlow94)&4095];
			fVec14[IOTA&4095] = (fSlow55 * (fRec12[0] * fTemp39));
			float fTemp40 = (0.3f * fVec14[(IOTA-iConst14)&4095]);
			float fTemp41 = (fTemp40 + ((0.6f * fRec49[1]) + fVec12[(IOTA-iConst42)&16383]));
			fVec15[IOTA&2047] = fTemp41;
			fRec49[0] = fVec15[(IOTA-iConst44)&2047];
			float 	fRec50 = (0 - (0.6f * fVec15[IOTA&2047]));
			fRec56[0] = ((fConst4 * fRec56[1]) + (fConst3 * (fRec5[1] + fRec5[2])));
			fRec55[0] = ((fSlow103 * fRec55[1]) + (fSlow102 * (fRec5[1] + (fSlow96 * fRec56[0]))));
			fVec16[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec55[0]));
			float fTemp42 = (fVec16[(IOTA-iConst50)&8191] + (fTemp40 + (0.6f * fRec53[1])));
			fVec17[IOTA&2047] = fTemp42;
			fRec53[0] = fVec17[(IOTA-iConst51)&2047];
			float 	fRec54 = (0 - (0.6f * fVec17[IOTA&2047]));
			fRec60[0] = ((fConst4 * fRec60[1]) + (fConst3 * (fRec3[1] + fRec3[2])));
			fRec59[0] = ((fSlow112 * fRec59[1]) + (fSlow111 * (fRec3[1] + (fSlow105 * fRec60[0]))));
			fVec18[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec59[0]));
			float fTemp43 = (((0.6f * fRec57[1]) + fVec18[(IOTA-iConst57)&16383]) - fTemp40);
			fVec19[IOTA&2047] = fTemp43;
			fRec57[0] = fVec19[(IOTA-iConst58)&2047];
			float 	fRec58 = (0 - (0.6f * fVec19[IOTA&2047]));
			fRec64[0] = ((fConst4 * fRec64[1]) + (fConst3 * (fRec7[1] + fRec7[2])));
			fRec63[0] = ((fSlow121 * fRec63[1]) + (fSlow120 * (fRec7[1] + (fSlow114 * fRec64[0]))));
			fVec20[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec63[0]));
			float fTemp44 = (((0.6f * fRec61[1]) + fVec20[(IOTA-iConst64)&16383]) - fTemp40);
			fVec21[IOTA&1023] = fTemp44;
			fRec61[0] = fVec21[(IOTA-iConst65)&1023];
			float 	fRec62 = (0 - (0.6f * fVec21[IOTA&1023]));
			fRec0[0] = (fRec61[1] + (fRec57[1] + (fRec53[1] + (fRec49[1] + (fRec45[1] + (fRec41[1] + (fRec8[1] + (fRec37[1] + (fRec62 + (fRec58 + (fRec54 + (fRec50 + fTemp38))))))))))));
			fRec1[0] = (0 - ((fRec61[1] + (fRec57[1] + (fRec53[1] + (fRec49[1] + (fRec62 + (fRec58 + (fRec50 + fRec54))))))) - (fRec45[1] + (fRec41[1] + (fRec8[1] + (fRec37[1] + fTemp38))))));
			float fTemp45 = (fRec42 + fRec46);
			fRec2[0] = (0 - ((fRec61[1] + (fRec57[1] + (fRec45[1] + (fRec41[1] + (fRec62 + (fRec58 + fTemp45)))))) - (fRec53[1] + (fRec49[1] + (fRec8[1] + (fRec37[1] + (fRec54 + (fRec50 + fTemp35))))))));
			fRec3[0] = (0 - ((fRec53[1] + (fRec49[1] + (fRec45[1] + (fRec41[1] + (fRec54 + (fRec50 + fTemp45)))))) - (fRec61[1] + (fRec57[1] + (fRec8[1] + (fRec37[1] + (fRec62 + (fRec58 + fTemp35))))))));
			float fTemp46 = (fRec38 + fRec42);
			float fTemp47 = (fRec9 + fRec46);
			fRec4[0] = (0 - ((fRec61[1] + (fRec53[1] + (fRec45[1] + (fRec8[1] + (fRec62 + (fRec54 + fTemp47)))))) - (fRec57[1] + (fRec49[1] + (fRec41[1] + (fRec37[1] + (fRec58 + (fRec50 + fTemp46))))))));
			fRec5[0] = (0 - ((fRec57[1] + (fRec49[1] + (fRec45[1] + (fRec8[1] + (fRec58 + (fRec50 + fTemp47)))))) - (fRec61[1] + (fRec53[1] + (fRec41[1] + (fRec37[1] + (fRec62 + (fRec54 + fTemp46))))))));
			float fTemp48 = (fRec38 + fRec46);
			float fTemp49 = (fRec9 + fRec42);
			fRec6[0] = (0 - ((fRec57[1] + (fRec53[1] + (fRec41[1] + (fRec8[1] + (fRec58 + (fRec54 + fTemp49)))))) - (fRec61[1] + (fRec49[1] + (fRec45[1] + (fRec37[1] + (fRec62 + (fRec50 + fTemp48))))))));
			fRec7[0] = (0 - ((fRec61[1] + (fRec49[1] + (fRec41[1] + (fRec8[1] + (fRec62 + (fRec50 + fTemp49)))))) - (fRec57[1] + (fRec53[1] + (fRec45[1] + (fRec37[1] + (fRec58 + (fRec54 + fTemp48))))))));
			float fTemp50 = (1 - fRec12[0]);
			output0[i] = (FAUSTFLOAT)((fSlow57 * (fRec14 * fTemp50)) + (0.37f * (fRec1[0] + fRec2[0])));
			output1[i] = (FAUSTFLOAT)((0.37f * (fRec1[0] - fRec2[0])) + (fSlow55 * (fTemp50 * fTemp39)));
			// post processing
			fRec7[2] = fRec7[1]; fRec7[1] = fRec7[0];
			fRec6[2] = fRec6[1]; fRec6[1] = fRec6[0];
			fRec5[2] = fRec5[1]; fRec5[1] = fRec5[0];
			fRec4[2] = fRec4[1]; fRec4[1] = fRec4[0];
			fRec3[2] = fRec3[1]; fRec3[1] = fRec3[0];
			fRec2[2] = fRec2[1]; fRec2[1] = fRec2[0];
			fRec1[2] = fRec1[1]; fRec1[1] = fRec1[0];
			fRec0[2] = fRec0[1]; fRec0[1] = fRec0[0];
			fRec61[1] = fRec61[0];
			fRec63[1] = fRec63[0];
			fRec64[1] = fRec64[0];
			fRec57[1] = fRec57[0];
			fRec59[1] = fRec59[0];
			fRec60[1] = fRec60[0];
			fRec53[1] = fRec53[0];
			fRec55[1] = fRec55[0];
			fRec56[1] = fRec56[0];
			fRec49[1] = fRec49[0];
			fRec51[1] = fRec51[0];
			fRec52[1] = fRec52[0];
			fRec45[1] = fRec45[0];
			fRec47[1] = fRec47[0];
			fRec48[1] = fRec48[0];
			fRec41[1] = fRec41[0];
			fRec43[1] = fRec43[0];
			fRec44[1] = fRec44[0];
			fRec37[1] = fRec37[0];
			fRec39[1] = fRec39[0];
			fRec40[1] = fRec40[0];
			fRec8[1] = fRec8[0];
			fRec36[1] = fRec36[0];
			iRec35[1] = iRec35[0];
			iRec34[1] = iRec34[0];
			fRec33[1] = fRec33[0];
			fVec2[1] = fVec2[0];
			fRec27[1] = fRec27[0];
			fRec28[1] = fRec28[0];
			fRec29[1] = fRec29[0];
			fRec30[1] = fRec30[0];
			fRec31[1] = fRec31[0];
			fRec32[1] = fRec32[0];
			fRec25[1] = fRec25[0];
			fRec26[1] = fRec26[0];
			fRec18[1] = fRec18[0];
			fRec19[1] = fRec19[0];
			fRec20[1] = fRec20[0];
			fRec21[1] = fRec21[0];
			fRec22[1] = fRec22[0];
			fRec23[1] = fRec23[0];
			fRec17[1] = fRec17[0];
			iRec16[1] = iRec16[0];
			fRec15[1] = fRec15[0];
			fVec1[1] = fVec1[0];
			fRec12[1] = fRec12[0];
			IOTA = IOTA+1;
			fRec10[1] = fRec10[0];
			fRec11[1] = fRec11[0];
		}
	}
};


float 	mydsp::ftbl0[65536];
