//-----------------------------------------------------
// name: "NLFfm"
// author: "Romain Michon"
// copyright: "Romain Michon (rmichon@ccrma.stanford.edu)"
// version: "1.0"
//
// Code generated with Faust 0.9.70 (http://faust.grame.fr)
//-----------------------------------------------------
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif  

typedef long double quad;
/* link with  */
#include <math.h>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline float faustpower(float x)          { return powf(x,N); } 
template <int N> inline double faustpower(double x)        { return pow(x,N); }
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <>   inline int faustpower<0>(int x)            { return 1; }
template <>   inline int faustpower<1>(int x)            { return x; }
#endif

#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	class SIG0 {
	  private:
		int 	fSamplingFreq;
		int 	iRec0[2];
	  public:
		int getNumInputs() 	{ return 0; }
		int getNumOutputs() 	{ return 1; }
		void init(int samplingFreq) {
			fSamplingFreq = samplingFreq;
			for (int i=0; i<2; i++) iRec0[i] = 0;
		}
		void fill (int count, float output[]) {
			for (int i=0; i<count; i++) {
				iRec0[0] = (1 + iRec0[1]);
				output[i] = sinf((9.587379924285257e-05f * float((iRec0[0] - 1))));
				// post processing
				iRec0[1] = iRec0[0];
			}
		}
	};


	static float 	ftbl0[65536];
	FAUSTFLOAT 	fslider0;
	int 	iConst0;
	float 	fConst1;
	float 	fConst2;
	float 	fRec1[2];
	FAUSTFLOAT 	fbutton0;
	int 	iRec2[2];
	int 	iRec3[2];
	FAUSTFLOAT 	fslider1;
	FAUSTFLOAT 	fslider2;
	float 	fConst3;
	float 	fConst4;
	float 	fRec4[2];
	FAUSTFLOAT 	fslider3;
	FAUSTFLOAT 	fentry0;
	float 	fRec5[2];
	FAUSTFLOAT 	fslider4;
	float 	fRec6[2];
	int 	iRec7[2];
	FAUSTFLOAT 	fslider5;
	FAUSTFLOAT 	fslider6;
	FAUSTFLOAT 	fslider7;
	float 	fRec8[2];
	FAUSTFLOAT 	fentry1;
	FAUSTFLOAT 	fentry2;
	float 	fVec0[2];
	int 	iRec9[2];
	FAUSTFLOAT 	fslider8;
	float 	fRec10[2];
	float 	fRec13[2];
	float 	fRec12[2];
	float 	fRec11[2];
	FAUSTFLOAT 	fslider9;
	float 	fRec15[2];
	float 	fRec14[2];
	float 	fRec18[2];
	float 	fRec17[2];
	float 	fRec16[2];
	int 	IOTA;
	float 	fVec1[4096];
	FAUSTFLOAT 	fslider10;
	float 	fRec19[2];
	FAUSTFLOAT 	fslider11;
	float 	fConst5;
	float 	fConst6;
	float 	fConst7;
	float 	fConst8;
	float 	fRec31[2];
	FAUSTFLOAT 	fslider12;
	float 	fConst9;
	float 	fConst10;
	float 	fConst11;
	float 	fConst12;
	float 	fConst13;
	float 	fRec30[2];
	float 	fVec2[8192];
	float 	fConst14;
	int 	iConst15;
	float 	fVec3[4096];
	int 	iConst16;
	float 	fVec4[2048];
	int 	iConst17;
	float 	fRec28[2];
	float 	fRec35[2];
	float 	fConst18;
	float 	fConst19;
	float 	fConst20;
	float 	fConst21;
	float 	fRec34[2];
	float 	fVec5[8192];
	float 	fConst22;
	int 	iConst23;
	float 	fVec6[1024];
	int 	iConst24;
	float 	fRec32[2];
	float 	fRec39[2];
	float 	fConst25;
	float 	fConst26;
	float 	fConst27;
	float 	fConst28;
	float 	fRec38[2];
	float 	fVec7[8192];
	float 	fConst29;
	int 	iConst30;
	float 	fVec8[2048];
	int 	iConst31;
	float 	fRec36[2];
	float 	fRec43[2];
	float 	fConst32;
	float 	fConst33;
	float 	fConst34;
	float 	fConst35;
	float 	fRec42[2];
	float 	fVec9[8192];
	float 	fConst36;
	int 	iConst37;
	float 	fVec10[1024];
	int 	iConst38;
	float 	fRec40[2];
	float 	fRec47[2];
	float 	fConst39;
	float 	fConst40;
	float 	fConst41;
	float 	fConst42;
	float 	fRec46[2];
	float 	fVec11[16384];
	float 	fConst43;
	int 	iConst44;
	FAUSTFLOAT 	fslider13;
	float 	fConst45;
	float 	fVec12[4096];
	float 	fVec13[2048];
	int 	iConst46;
	float 	fRec44[2];
	float 	fRec51[2];
	float 	fConst47;
	float 	fConst48;
	float 	fConst49;
	float 	fConst50;
	float 	fRec50[2];
	float 	fVec14[8192];
	float 	fConst51;
	int 	iConst52;
	float 	fVec15[2048];
	int 	iConst53;
	float 	fRec48[2];
	float 	fRec55[2];
	float 	fConst54;
	float 	fConst55;
	float 	fConst56;
	float 	fConst57;
	float 	fRec54[2];
	float 	fVec16[16384];
	float 	fConst58;
	int 	iConst59;
	float 	fVec17[2048];
	int 	iConst60;
	float 	fRec52[2];
	float 	fRec59[2];
	float 	fConst61;
	float 	fConst62;
	float 	fConst63;
	float 	fConst64;
	float 	fRec58[2];
	float 	fVec18[16384];
	float 	fConst65;
	int 	iConst66;
	float 	fVec19[1024];
	int 	iConst67;
	float 	fRec56[2];
	float 	fRec20[3];
	float 	fRec21[3];
	float 	fRec22[3];
	float 	fRec23[3];
	float 	fRec24[3];
	float 	fRec25[3];
	float 	fRec26[3];
	float 	fRec27[3];
  public:
	static void metadata(Meta* m) 	{ 
		m->declare("name", "NLFfm");
		m->declare("description", "FM synthesizer implemented with a nonlinear passive allpass filter");
		m->declare("author", "Romain Michon");
		m->declare("copyright", "Romain Michon (rmichon@ccrma.stanford.edu)");
		m->declare("version", "1.0");
		m->declare("instrument.lib/name", "Faust-STK Tools Library");
		m->declare("instrument.lib/author", "Romain Michon (rmichon@ccrma.stanford.edu)");
		m->declare("instrument.lib/copyright", "Romain Michon");
		m->declare("instrument.lib/version", "1.0");
		m->declare("instrument.lib/licence", "STK-4.3");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/version", "1.0");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/version", "1.29");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/version", "1.0");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("effect.lib/name", "Faust Audio Effect Library");
		m->declare("effect.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/copyright", "Julius O. Smith III");
		m->declare("effect.lib/version", "1.33");
		m->declare("effect.lib/license", "STK-4.3");
		m->declare("effect.lib/exciter_name", "Harmonic Exciter");
		m->declare("effect.lib/exciter_author", "Priyanka Shekar (pshekar@ccrma.stanford.edu)");
		m->declare("effect.lib/exciter_copyright", "Copyright (c) 2013 Priyanka Shekar");
		m->declare("effect.lib/exciter_version", "1.0");
		m->declare("effect.lib/exciter_license", "MIT License (MIT)");
	}

	virtual int getNumInputs() 	{ return 0; }
	virtual int getNumOutputs() 	{ return 2; }
	static void classInit(int samplingFreq) {
		SIG0 sig0;
		sig0.init(samplingFreq);
		sig0.fill(65536,ftbl0);
	}
	virtual void instanceInit(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fslider0 = 5.0f;
		iConst0 = min(192000, max(1, fSamplingFreq));
		fConst1 = float(iConst0);
		fConst2 = (1.0f / fConst1);
		for (int i=0; i<2; i++) fRec1[i] = 0;
		fbutton0 = 0.0;
		for (int i=0; i<2; i++) iRec2[i] = 0;
		for (int i=0; i<2; i++) iRec3[i] = 0;
		fslider1 = 0.01f;
		fslider2 = 0.5f;
		fConst3 = (0.2f * iConst0);
		fConst4 = (1.8f * iConst0);
		for (int i=0; i<2; i++) fRec4[i] = 0;
		fslider3 = 0.1f;
		fentry0 = 4.4e+02f;
		for (int i=0; i<2; i++) fRec5[i] = 0;
		fslider4 = 0.0f;
		for (int i=0; i<2; i++) fRec6[i] = 0;
		for (int i=0; i<2; i++) iRec7[i] = 0;
		fslider5 = 0.05f;
		fslider6 = 0.05f;
		fslider7 = 0.05f;
		for (int i=0; i<2; i++) fRec8[i] = 0;
		fentry1 = 0.8f;
		fentry2 = 0.0f;
		for (int i=0; i<2; i++) fVec0[i] = 0;
		for (int i=0; i<2; i++) iRec9[i] = 0;
		fslider8 = 0.1f;
		for (int i=0; i<2; i++) fRec10[i] = 0;
		for (int i=0; i<2; i++) fRec13[i] = 0;
		for (int i=0; i<2; i++) fRec12[i] = 0;
		for (int i=0; i<2; i++) fRec11[i] = 0;
		fslider9 = 2.2e+02f;
		for (int i=0; i<2; i++) fRec15[i] = 0;
		for (int i=0; i<2; i++) fRec14[i] = 0;
		for (int i=0; i<2; i++) fRec18[i] = 0;
		for (int i=0; i<2; i++) fRec17[i] = 0;
		for (int i=0; i<2; i++) fRec16[i] = 0;
		IOTA = 0;
		for (int i=0; i<4096; i++) fVec1[i] = 0;
		fslider10 = 0.137f;
		for (int i=0; i<2; i++) fRec19[i] = 0;
		fslider11 = 0.6f;
		fConst5 = (1.0f / tanf((628.3185307179587f / float(iConst0))));
		fConst6 = (1 + fConst5);
		fConst7 = (1.0f / fConst6);
		fConst8 = (0 - ((1 - fConst5) / fConst6));
		for (int i=0; i<2; i++) fRec31[i] = 0;
		fslider12 = 0.72f;
		fConst9 = floorf((0.5f + (0.174713f * iConst0)));
		fConst10 = ((0 - (6.907755278982138f * fConst9)) / float(iConst0));
		fConst11 = (0.5f * fConst10);
		fConst12 = (0.3333333333333333f * fConst10);
		fConst13 = cosf((37699.11184307752f / fConst1));
		for (int i=0; i<2; i++) fRec30[i] = 0;
		for (int i=0; i<8192; i++) fVec2[i] = 0;
		fConst14 = floorf((0.5f + (0.022904f * iConst0)));
		iConst15 = int((int((fConst9 - fConst14)) & 8191));
		for (int i=0; i<4096; i++) fVec3[i] = 0;
		iConst16 = int((int((0.02f * iConst0)) & 8191));
		for (int i=0; i<2048; i++) fVec4[i] = 0;
		iConst17 = int((int((fConst14 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec28[i] = 0;
		for (int i=0; i<2; i++) fRec35[i] = 0;
		fConst18 = floorf((0.5f + (0.153129f * iConst0)));
		fConst19 = ((0 - (6.907755278982138f * fConst18)) / float(iConst0));
		fConst20 = (0.5f * fConst19);
		fConst21 = (0.3333333333333333f * fConst19);
		for (int i=0; i<2; i++) fRec34[i] = 0;
		for (int i=0; i<8192; i++) fVec5[i] = 0;
		fConst22 = floorf((0.5f + (0.020346f * iConst0)));
		iConst23 = int((int((fConst18 - fConst22)) & 8191));
		for (int i=0; i<1024; i++) fVec6[i] = 0;
		iConst24 = int((int((fConst22 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec32[i] = 0;
		for (int i=0; i<2; i++) fRec39[i] = 0;
		fConst25 = floorf((0.5f + (0.127837f * iConst0)));
		fConst26 = ((0 - (6.907755278982138f * fConst25)) / float(iConst0));
		fConst27 = (0.5f * fConst26);
		fConst28 = (0.3333333333333333f * fConst26);
		for (int i=0; i<2; i++) fRec38[i] = 0;
		for (int i=0; i<8192; i++) fVec7[i] = 0;
		fConst29 = floorf((0.5f + (0.031604f * iConst0)));
		iConst30 = int((int((fConst25 - fConst29)) & 8191));
		for (int i=0; i<2048; i++) fVec8[i] = 0;
		iConst31 = int((int((fConst29 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec36[i] = 0;
		for (int i=0; i<2; i++) fRec43[i] = 0;
		fConst32 = floorf((0.5f + (0.125f * iConst0)));
		fConst33 = ((0 - (6.907755278982138f * fConst32)) / float(iConst0));
		fConst34 = (0.5f * fConst33);
		fConst35 = (0.3333333333333333f * fConst33);
		for (int i=0; i<2; i++) fRec42[i] = 0;
		for (int i=0; i<8192; i++) fVec9[i] = 0;
		fConst36 = floorf((0.5f + (0.013458f * iConst0)));
		iConst37 = int((int((fConst32 - fConst36)) & 8191));
		for (int i=0; i<1024; i++) fVec10[i] = 0;
		iConst38 = int((int((fConst36 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec40[i] = 0;
		for (int i=0; i<2; i++) fRec47[i] = 0;
		fConst39 = floorf((0.5f + (0.210389f * iConst0)));
		fConst40 = ((0 - (6.907755278982138f * fConst39)) / float(iConst0));
		fConst41 = (0.5f * fConst40);
		fConst42 = (0.3333333333333333f * fConst40);
		for (int i=0; i<2; i++) fRec46[i] = 0;
		for (int i=0; i<16384; i++) fVec11[i] = 0;
		fConst43 = floorf((0.5f + (0.024421f * iConst0)));
		iConst44 = int((int((fConst39 - fConst43)) & 16383));
		fslider13 = 0.5f;
		fConst45 = (0.5f * iConst0);
		for (int i=0; i<4096; i++) fVec12[i] = 0;
		for (int i=0; i<2048; i++) fVec13[i] = 0;
		iConst46 = int((int((fConst43 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec44[i] = 0;
		for (int i=0; i<2; i++) fRec51[i] = 0;
		fConst47 = floorf((0.5f + (0.192303f * iConst0)));
		fConst48 = ((0 - (6.907755278982138f * fConst47)) / float(iConst0));
		fConst49 = (0.5f * fConst48);
		fConst50 = (0.3333333333333333f * fConst48);
		for (int i=0; i<2; i++) fRec50[i] = 0;
		for (int i=0; i<8192; i++) fVec14[i] = 0;
		fConst51 = floorf((0.5f + (0.029291f * iConst0)));
		iConst52 = int((int((fConst47 - fConst51)) & 8191));
		for (int i=0; i<2048; i++) fVec15[i] = 0;
		iConst53 = int((int((fConst51 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec48[i] = 0;
		for (int i=0; i<2; i++) fRec55[i] = 0;
		fConst54 = floorf((0.5f + (0.256891f * iConst0)));
		fConst55 = ((0 - (6.907755278982138f * fConst54)) / float(iConst0));
		fConst56 = (0.5f * fConst55);
		fConst57 = (0.3333333333333333f * fConst55);
		for (int i=0; i<2; i++) fRec54[i] = 0;
		for (int i=0; i<16384; i++) fVec16[i] = 0;
		fConst58 = floorf((0.5f + (0.027333f * iConst0)));
		iConst59 = int((int((fConst54 - fConst58)) & 16383));
		for (int i=0; i<2048; i++) fVec17[i] = 0;
		iConst60 = int((int((fConst58 - 1)) & 2047));
		for (int i=0; i<2; i++) fRec52[i] = 0;
		for (int i=0; i<2; i++) fRec59[i] = 0;
		fConst61 = floorf((0.5f + (0.219991f * iConst0)));
		fConst62 = ((0 - (6.907755278982138f * fConst61)) / float(iConst0));
		fConst63 = (0.5f * fConst62);
		fConst64 = (0.3333333333333333f * fConst62);
		for (int i=0; i<2; i++) fRec58[i] = 0;
		for (int i=0; i<16384; i++) fVec18[i] = 0;
		fConst65 = floorf((0.5f + (0.019123f * iConst0)));
		iConst66 = int((int((fConst61 - fConst65)) & 16383));
		for (int i=0; i<1024; i++) fVec19[i] = 0;
		iConst67 = int((int((fConst65 - 1)) & 1023));
		for (int i=0; i<2; i++) fRec56[i] = 0;
		for (int i=0; i<3; i++) fRec20[i] = 0;
		for (int i=0; i<3; i++) fRec21[i] = 0;
		for (int i=0; i<3; i++) fRec22[i] = 0;
		for (int i=0; i<3; i++) fRec23[i] = 0;
		for (int i=0; i<3; i++) fRec24[i] = 0;
		for (int i=0; i<3; i++) fRec25[i] = 0;
		for (int i=0; i<3; i++) fRec26[i] = 0;
		for (int i=0; i<3; i++) fRec27[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void buildUserInterface(UI* interface) {
		interface->openVerticalBox("0x00");
		interface->openHorizontalBox("Basic_Parameters");
		interface->declare(&fentry0, "1", "");
		interface->declare(&fentry0, "tooltip", "Tone frequency");
		interface->declare(&fentry0, "unit", "Hz");
		interface->addNumEntry("freq", &fentry0, 4.4e+02f, 2e+01f, 2e+04f, 1.0f);
		interface->declare(&fentry1, "1", "");
		interface->declare(&fentry1, "tooltip", "Gain (value between 0 and 1)");
		interface->addNumEntry("gain", &fentry1, 0.8f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fbutton0, "1", "");
		interface->declare(&fbutton0, "tooltip", "noteOn = 1, noteOff = 0");
		interface->addButton("gate", &fbutton0);
		interface->closeBox();
		interface->openHorizontalBox("Envelopes_and_Vibrato");
		interface->openVerticalBox("Envelope_Parameters");
		interface->declare(&fslider7, "4", "");
		interface->declare(&fslider7, "tooltip", "Envelope attack duration");
		interface->declare(&fslider7, "unit", "s");
		interface->addHorizontalSlider("Envelope_Attack", &fslider7, 0.05f, 0.0f, 2.0f, 0.01f);
		interface->declare(&fslider6, "4", "");
		interface->declare(&fslider6, "tooltip", "Envelope decay duration");
		interface->declare(&fslider6, "unit", "s");
		interface->addHorizontalSlider("Envelope_Decay", &fslider6, 0.05f, 0.0f, 2.0f, 0.01f);
		interface->declare(&fslider5, "4", "");
		interface->declare(&fslider5, "tooltip", "Envelope release duration");
		interface->declare(&fslider5, "unit", "s");
		interface->addHorizontalSlider("Envelope_Release", &fslider5, 0.05f, 0.0f, 2.0f, 0.01f);
		interface->closeBox();
		interface->openVerticalBox("Vibrato_Parameters");
		interface->declare(&fslider2, "3", "");
		interface->declare(&fslider2, "tooltip", "Vibrato attack duration");
		interface->declare(&fslider2, "unit", "s");
		interface->addHorizontalSlider("Vibrato_Attack", &fslider2, 0.5f, 0.0f, 2.0f, 0.01f);
		interface->declare(&fslider0, "3", "");
		interface->declare(&fslider0, "unit", "Hz");
		interface->addHorizontalSlider("Vibrato_Freq", &fslider0, 5.0f, 1.0f, 15.0f, 0.1f);
		interface->declare(&fslider3, "3", "");
		interface->declare(&fslider3, "tooltip", "A value between 0 and 1");
		interface->addHorizontalSlider("Vibrato_Gain", &fslider3, 0.1f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fslider1, "3", "");
		interface->declare(&fslider1, "tooltip", "Vibrato release duration");
		interface->declare(&fslider1, "unit", "s");
		interface->addHorizontalSlider("Vibrato_Release", &fslider1, 0.01f, 0.0f, 2.0f, 0.01f);
		interface->closeBox();
		interface->closeBox();
		interface->openHorizontalBox("Physical_and_Nonlinearity");
		interface->openVerticalBox("Nonlinear_Filter_Parameters");
		interface->declare(&fslider9, "2", "");
		interface->declare(&fslider9, "tooltip", "Frequency of the sine wave for the modulation of theta (works if Modulation Type=3)");
		interface->declare(&fslider9, "unit", "Hz");
		interface->addHorizontalSlider("Modulation_Frequency", &fslider9, 2.2e+02f, 2e+01f, 1e+03f, 0.1f);
		interface->declare(&fentry2, "2", "");
		interface->declare(&fentry2, "tooltip", "0=theta is modulated by the incoming signal; 1=theta is modulated by the averaged incoming signal; 2=theta is modulated by the squared incoming signal; 3=theta is modulated by a sine wave of frequency freqMod; 4=theta is modulated by a sine wave of frequency freq;");
		interface->addNumEntry("Modulation_Type", &fentry2, 0.0f, 0.0f, 4.0f, 1.0f);
		interface->declare(&fslider4, "2", "");
		interface->declare(&fslider4, "tooltip", "Nonlinearity factor (value between 0 and 1)");
		interface->addHorizontalSlider("Nonlinearity", &fslider4, 0.0f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fslider8, "2", "");
		interface->declare(&fslider8, "Attack duration of the nonlinearity", "");
		interface->declare(&fslider8, "unit", "s");
		interface->addHorizontalSlider("Nonlinearity_Attack", &fslider8, 0.1f, 0.0f, 2.0f, 0.01f);
		interface->closeBox();
		interface->closeBox();
		interface->openVerticalBox("Reverb");
		interface->addHorizontalSlider("reverbGain", &fslider10, 0.137f, 0.0f, 1.0f, 0.01f);
		interface->addHorizontalSlider("roomSize", &fslider12, 0.72f, 0.01f, 2.0f, 0.01f);
		interface->closeBox();
		interface->openVerticalBox("Spat");
		interface->addHorizontalSlider("pan angle", &fslider11, 0.6f, 0.0f, 1.0f, 0.01f);
		interface->addHorizontalSlider("spatial width", &fslider13, 0.5f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0 = (fConst2 * float(fslider0));
		float 	fSlow1 = float(fbutton0);
		int 	iSlow2 = (fSlow1 > 0);
		int 	iSlow3 = (fSlow1 <= 0);
		float 	fSlow4 = float(fslider1);
		float 	fSlow5 = (1 - (1.0f / powf(1e+05f,(1.0f / ((fSlow4 == 0.0f) + (iConst0 * fSlow4))))));
		float 	fSlow6 = float(fslider2);
		float 	fSlow7 = (fConst3 * fSlow6);
		float 	fSlow8 = (fSlow7 + ((0.2f * fSlow6) == 0.0f));
		float 	fSlow9 = (1.0f / ((fConst4 * fSlow6) + ((1.8f * fSlow6) == 0.0f)));
		float 	fSlow10 = float(fslider3);
		float 	fSlow11 = float(fentry0);
		float 	fSlow12 = (fConst2 * fSlow11);
		float 	fSlow13 = (0.0010000000000000009f * float(fslider4));
		float 	fSlow14 = float(fslider5);
		float 	fSlow15 = (1.0f / ((fSlow14 == 0.0f) + (iConst0 * fSlow14)));
		float 	fSlow16 = (1 - (1.0f / powf(9e+04f,fSlow15)));
		float 	fSlow17 = float(fslider6);
		float 	fSlow18 = (1 - powf(9e+01f,(1.0f / ((fSlow17 == 0.0f) + (iConst0 * fSlow17)))));
		float 	fSlow19 = float(fslider7);
		float 	fSlow20 = (1.0f / ((fSlow19 == 0.0f) + (iConst0 * fSlow19)));
		float 	fSlow21 = float(fentry1);
		float 	fSlow22 = float(fentry2);
		float 	fSlow23 = (3.141592653589793f * (faustpower<2>(fSlow21) * (fSlow22 == 2)));
		float 	fSlow24 = (1.5707963267948966f * (fSlow22 == 1));
		float 	fSlow25 = (3.141592653589793f * (fSlow21 * (fSlow22 == 0)));
		float 	fSlow26 = (1 - (1.0f / powf(1e+05f,fSlow15)));
		float 	fSlow27 = float(fslider8);
		float 	fSlow28 = (1.0f / ((fSlow27 == 0.0f) + (iConst0 * fSlow27)));
		int 	iSlow29 = (fSlow22 < 3);
		float 	fSlow30 = (0.0010000000000000009f * float(fslider9));
		int 	iSlow31 = (fSlow22 != 4);
		float 	fSlow32 = (fSlow11 * (fSlow22 == 4));
		int 	iSlow33 = (fSlow22 >= 3);
		float 	fSlow34 = (0.0010000000000000009f * float(fslider10));
		float 	fSlow35 = float(fslider11);
		float 	fSlow36 = (1.0f - fSlow35);
		float 	fSlow37 = float(fslider12);
		float 	fSlow38 = expf((fConst11 / fSlow37));
		float 	fSlow39 = ((expf((fConst12 / fSlow37)) / fSlow38) - 1);
		float 	fSlow40 = faustpower<2>(fSlow38);
		float 	fSlow41 = (1.0f - fSlow40);
		float 	fSlow42 = (1.0f - (fConst13 * fSlow40));
		float 	fSlow43 = (fSlow42 / fSlow41);
		float 	fSlow44 = sqrtf(max((float)0, ((faustpower<2>(fSlow42) / faustpower<2>(fSlow41)) - 1.0f)));
		float 	fSlow45 = (fSlow38 * ((1.0f + fSlow44) - fSlow43));
		float 	fSlow46 = (fSlow43 - fSlow44);
		float 	fSlow47 = expf((fConst20 / fSlow37));
		float 	fSlow48 = ((expf((fConst21 / fSlow37)) / fSlow47) - 1);
		float 	fSlow49 = faustpower<2>(fSlow47);
		float 	fSlow50 = (1.0f - fSlow49);
		float 	fSlow51 = (1.0f - (fConst13 * fSlow49));
		float 	fSlow52 = (fSlow51 / fSlow50);
		float 	fSlow53 = sqrtf(max((float)0, ((faustpower<2>(fSlow51) / faustpower<2>(fSlow50)) - 1.0f)));
		float 	fSlow54 = (fSlow47 * ((1.0f + fSlow53) - fSlow52));
		float 	fSlow55 = (fSlow52 - fSlow53);
		float 	fSlow56 = expf((fConst27 / fSlow37));
		float 	fSlow57 = ((expf((fConst28 / fSlow37)) / fSlow56) - 1);
		float 	fSlow58 = faustpower<2>(fSlow56);
		float 	fSlow59 = (1.0f - fSlow58);
		float 	fSlow60 = (1.0f - (fConst13 * fSlow58));
		float 	fSlow61 = (fSlow60 / fSlow59);
		float 	fSlow62 = sqrtf(max((float)0, ((faustpower<2>(fSlow60) / faustpower<2>(fSlow59)) - 1.0f)));
		float 	fSlow63 = (fSlow56 * ((1.0f + fSlow62) - fSlow61));
		float 	fSlow64 = (fSlow61 - fSlow62);
		float 	fSlow65 = expf((fConst34 / fSlow37));
		float 	fSlow66 = ((expf((fConst35 / fSlow37)) / fSlow65) - 1);
		float 	fSlow67 = faustpower<2>(fSlow65);
		float 	fSlow68 = (1.0f - fSlow67);
		float 	fSlow69 = (1.0f - (fConst13 * fSlow67));
		float 	fSlow70 = (fSlow69 / fSlow68);
		float 	fSlow71 = sqrtf(max((float)0, ((faustpower<2>(fSlow69) / faustpower<2>(fSlow68)) - 1.0f)));
		float 	fSlow72 = (fSlow65 * ((1.0f + fSlow71) - fSlow70));
		float 	fSlow73 = (fSlow70 - fSlow71);
		float 	fSlow74 = expf((fConst41 / fSlow37));
		float 	fSlow75 = ((expf((fConst42 / fSlow37)) / fSlow74) - 1);
		float 	fSlow76 = faustpower<2>(fSlow74);
		float 	fSlow77 = (1.0f - fSlow76);
		float 	fSlow78 = (1.0f - (fConst13 * fSlow76));
		float 	fSlow79 = (fSlow78 / fSlow77);
		float 	fSlow80 = sqrtf(max((float)0, ((faustpower<2>(fSlow78) / faustpower<2>(fSlow77)) - 1.0f)));
		float 	fSlow81 = (fSlow74 * ((1.0f + fSlow80) - fSlow79));
		float 	fSlow82 = (fSlow79 - fSlow80);
		int 	iSlow83 = int((int((fConst45 * (float(fslider13) / fSlow11))) & 4095));
		float 	fSlow84 = expf((fConst49 / fSlow37));
		float 	fSlow85 = ((expf((fConst50 / fSlow37)) / fSlow84) - 1);
		float 	fSlow86 = faustpower<2>(fSlow84);
		float 	fSlow87 = (1.0f - fSlow86);
		float 	fSlow88 = (1.0f - (fConst13 * fSlow86));
		float 	fSlow89 = (fSlow88 / fSlow87);
		float 	fSlow90 = sqrtf(max((float)0, ((faustpower<2>(fSlow88) / faustpower<2>(fSlow87)) - 1.0f)));
		float 	fSlow91 = (fSlow84 * ((1.0f + fSlow90) - fSlow89));
		float 	fSlow92 = (fSlow89 - fSlow90);
		float 	fSlow93 = expf((fConst56 / fSlow37));
		float 	fSlow94 = ((expf((fConst57 / fSlow37)) / fSlow93) - 1);
		float 	fSlow95 = faustpower<2>(fSlow93);
		float 	fSlow96 = (1.0f - fSlow95);
		float 	fSlow97 = (1.0f - (fConst13 * fSlow95));
		float 	fSlow98 = (fSlow97 / fSlow96);
		float 	fSlow99 = sqrtf(max((float)0, ((faustpower<2>(fSlow97) / faustpower<2>(fSlow96)) - 1.0f)));
		float 	fSlow100 = (fSlow93 * ((1.0f + fSlow99) - fSlow98));
		float 	fSlow101 = (fSlow98 - fSlow99);
		float 	fSlow102 = expf((fConst63 / fSlow37));
		float 	fSlow103 = ((expf((fConst64 / fSlow37)) / fSlow102) - 1);
		float 	fSlow104 = faustpower<2>(fSlow102);
		float 	fSlow105 = (1.0f - fSlow104);
		float 	fSlow106 = (1.0f - (fConst13 * fSlow104));
		float 	fSlow107 = (fSlow106 / fSlow105);
		float 	fSlow108 = sqrtf(max((float)0, ((faustpower<2>(fSlow106) / faustpower<2>(fSlow105)) - 1.0f)));
		float 	fSlow109 = (fSlow102 * ((1.0f + fSlow108) - fSlow107));
		float 	fSlow110 = (fSlow107 - fSlow108);
		FAUSTFLOAT* output0 = output[0];
		FAUSTFLOAT* output1 = output[1];
		for (int i=0; i<count; i++) {
			float fTemp0 = (fRec1[1] + fSlow0);
			fRec1[0] = (fTemp0 - floorf(fTemp0));
			iRec2[0] = (iSlow2 & (iRec2[1] | (fRec4[1] >= 1)));
			iRec3[0] = (iSlow2 * (1 + iRec3[1]));
			int iTemp1 = (iSlow3 & (fRec4[1] > 0));
			fRec4[0] = (((fSlow9 * (((((iRec2[1] == 0) & iSlow2) & (fRec4[1] < 1)) & (iRec3[1] > fSlow7)) * (1 - (iRec3[1] < fSlow8)))) + (fRec4[1] * (1 - (fSlow5 * iTemp1)))) * ((iTemp1 == 0) | (fRec4[1] >= 1e-06f)));
			float fTemp2 = (1 + (fSlow10 * (fRec4[0] * ftbl0[int((65536.0f * fRec1[0]))])));
			float fTemp3 = (fRec5[1] + fSlow12);
			fRec5[0] = (fTemp3 - floorf(fTemp3));
			float fTemp4 = ftbl0[int((65536.0f * fRec5[0]))];
			fRec6[0] = (fSlow13 + (0.999f * fRec6[1]));
			iRec7[0] = (iSlow2 & (iRec7[1] | (fRec8[1] >= 1)));
			int iTemp5 = (iSlow3 & (fRec8[1] > 0));
			fRec8[0] = (((fSlow20 * (((iRec7[1] == 0) & iSlow2) & (fRec8[1] < 1))) + (fRec8[1] * ((1 - (fSlow18 * (iRec7[1] & (fRec8[1] > 90)))) - (fSlow16 * iTemp5)))) * ((iTemp5 == 0) | (fRec8[1] >= 1e-06f)));
			float fTemp6 = ((fRec8[0] * fTemp4) * fTemp2);
			float fTemp7 = (fSlow21 * fTemp6);
			fVec0[0] = fTemp7;
			iRec9[0] = (iSlow2 & (iRec9[1] | (fRec10[1] >= 1)));
			int iTemp8 = (iSlow3 & (fRec10[1] > 0));
			fRec10[0] = (((fSlow28 * (((iRec9[1] == 0) & iSlow2) & (fRec10[1] < 1))) + (fRec10[1] * (1 - (fSlow26 * iTemp8)))) * ((iTemp8 == 0) | (fRec10[1] >= 1e-06f)));
			float fTemp9 = (fRec6[0] * fRec10[0]);
			float fTemp10 = (fTemp9 * (((fSlow25 * fTemp6) + (fSlow24 * (fVec0[0] + fVec0[1]))) + (fSlow23 * ((faustpower<2>(fRec8[0]) * faustpower<2>(fTemp4)) * faustpower<2>(fTemp2)))));
			float fTemp11 = cosf(fTemp10);
			float fTemp12 = sinf(fTemp10);
			float fTemp13 = (0 - fTemp12);
			float fTemp14 = ((fRec11[1] * fTemp13) + (fSlow21 * (fTemp6 * fTemp11)));
			float fTemp15 = ((fTemp13 * fRec12[1]) + (fTemp11 * fTemp14));
			fRec13[0] = ((fTemp13 * fRec13[1]) + (fTemp11 * fTemp15));
			fRec12[0] = ((fTemp12 * fTemp15) + (fTemp11 * fRec13[1]));
			fRec11[0] = ((fTemp12 * fTemp14) + (fTemp11 * fRec12[1]));
			fRec15[0] = (fSlow30 + (0.999f * fRec15[1]));
			float fTemp16 = (fRec14[1] + (fConst2 * (fSlow32 + (iSlow31 * fRec15[0]))));
			fRec14[0] = (fTemp16 - floorf(fTemp16));
			float fTemp17 = (3.141592653589793f * (fTemp9 * ftbl0[int((65536.0f * fRec14[0]))]));
			float fTemp18 = cosf(fTemp17);
			float fTemp19 = sinf(fTemp17);
			float fTemp20 = (0 - fTemp19);
			float fTemp21 = ((fRec16[1] * fTemp20) + (fSlow21 * (fTemp6 * fTemp18)));
			float fTemp22 = ((fTemp20 * fRec17[1]) + (fTemp18 * fTemp21));
			fRec18[0] = ((fTemp20 * fRec18[1]) + (fTemp18 * fTemp22));
			fRec17[0] = ((fTemp19 * fTemp22) + (fTemp18 * fRec18[1]));
			fRec16[0] = ((fTemp19 * fTemp21) + (fTemp18 * fRec17[1]));
			float fTemp23 = ((iSlow33 * ((fSlow21 * (fTemp6 * fTemp19)) + (fRec16[1] * fTemp18))) + (iSlow29 * ((fRec6[0] * ((fSlow21 * (fTemp6 * fTemp12)) + (fRec11[1] * fTemp11))) + (fSlow21 * (((fRec8[0] * (1 - fRec6[0])) * fTemp4) * fTemp2)))));
			fVec1[IOTA&4095] = fTemp23;
			fRec19[0] = ((0.999f * fRec19[1]) + fSlow34);
			float fTemp24 = (1 - fRec19[0]);
			fRec31[0] = ((fConst8 * fRec31[1]) + (fConst7 * (fRec24[1] + fRec24[2])));
			fRec30[0] = ((fSlow46 * fRec30[1]) + (fSlow45 * (fRec24[1] + (fSlow39 * fRec31[0]))));
			fVec2[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec30[0]));
			fVec3[IOTA&4095] = (fSlow36 * (fRec19[0] * fVec1[IOTA&4095]));
			float fTemp25 = (0.3f * fVec3[(IOTA-iConst16)&4095]);
			float fTemp26 = ((fTemp25 + fVec2[(IOTA-iConst15)&8191]) - (0.6f * fRec28[1]));
			fVec4[IOTA&2047] = fTemp26;
			fRec28[0] = fVec4[(IOTA-iConst17)&2047];
			float 	fRec29 = (0.6f * fVec4[IOTA&2047]);
			fRec35[0] = ((fConst8 * fRec35[1]) + (fConst7 * (fRec20[1] + fRec20[2])));
			fRec34[0] = ((fSlow55 * fRec34[1]) + (fSlow54 * (fRec20[1] + (fSlow48 * fRec35[0]))));
			fVec5[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec34[0]));
			float fTemp27 = ((fVec5[(IOTA-iConst23)&8191] + fTemp25) - (0.6f * fRec32[1]));
			fVec6[IOTA&1023] = fTemp27;
			fRec32[0] = fVec6[(IOTA-iConst24)&1023];
			float 	fRec33 = (0.6f * fVec6[IOTA&1023]);
			float fTemp28 = (fRec33 + fRec29);
			fRec39[0] = ((fConst8 * fRec39[1]) + (fConst7 * (fRec22[1] + fRec22[2])));
			fRec38[0] = ((fSlow64 * fRec38[1]) + (fSlow63 * (fRec22[1] + (fSlow57 * fRec39[0]))));
			fVec7[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec38[0]));
			float fTemp29 = (fVec7[(IOTA-iConst30)&8191] - (fTemp25 + (0.6f * fRec36[1])));
			fVec8[IOTA&2047] = fTemp29;
			fRec36[0] = fVec8[(IOTA-iConst31)&2047];
			float 	fRec37 = (0.6f * fVec8[IOTA&2047]);
			fRec43[0] = ((fConst8 * fRec43[1]) + (fConst7 * (fRec26[1] + fRec26[2])));
			fRec42[0] = ((fSlow73 * fRec42[1]) + (fSlow72 * (fRec26[1] + (fSlow66 * fRec43[0]))));
			fVec9[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec42[0]));
			float fTemp30 = (fVec9[(IOTA-iConst37)&8191] - (fTemp25 + (0.6f * fRec40[1])));
			fVec10[IOTA&1023] = fTemp30;
			fRec40[0] = fVec10[(IOTA-iConst38)&1023];
			float 	fRec41 = (0.6f * fVec10[IOTA&1023]);
			float fTemp31 = (fRec41 + (fRec37 + fTemp28));
			fRec47[0] = ((fConst8 * fRec47[1]) + (fConst7 * (fRec21[1] + fRec21[2])));
			fRec46[0] = ((fSlow82 * fRec46[1]) + (fSlow81 * (fRec21[1] + (fSlow75 * fRec47[0]))));
			fVec11[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec46[0]));
			float fTemp32 = fVec1[(IOTA-iSlow83)&4095];
			fVec12[IOTA&4095] = (fSlow35 * (fRec19[0] * fTemp32));
			float fTemp33 = (0.3f * fVec12[(IOTA-iConst16)&4095]);
			float fTemp34 = (fTemp33 + ((0.6f * fRec44[1]) + fVec11[(IOTA-iConst44)&16383]));
			fVec13[IOTA&2047] = fTemp34;
			fRec44[0] = fVec13[(IOTA-iConst46)&2047];
			float 	fRec45 = (0 - (0.6f * fVec13[IOTA&2047]));
			fRec51[0] = ((fConst8 * fRec51[1]) + (fConst7 * (fRec25[1] + fRec25[2])));
			fRec50[0] = ((fSlow92 * fRec50[1]) + (fSlow91 * (fRec25[1] + (fSlow85 * fRec51[0]))));
			fVec14[IOTA&8191] = (1e-20f + (0.35355339059327373f * fRec50[0]));
			float fTemp35 = (fVec14[(IOTA-iConst52)&8191] + (fTemp33 + (0.6f * fRec48[1])));
			fVec15[IOTA&2047] = fTemp35;
			fRec48[0] = fVec15[(IOTA-iConst53)&2047];
			float 	fRec49 = (0 - (0.6f * fVec15[IOTA&2047]));
			fRec55[0] = ((fConst8 * fRec55[1]) + (fConst7 * (fRec23[1] + fRec23[2])));
			fRec54[0] = ((fSlow101 * fRec54[1]) + (fSlow100 * (fRec23[1] + (fSlow94 * fRec55[0]))));
			fVec16[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec54[0]));
			float fTemp36 = (((0.6f * fRec52[1]) + fVec16[(IOTA-iConst59)&16383]) - fTemp33);
			fVec17[IOTA&2047] = fTemp36;
			fRec52[0] = fVec17[(IOTA-iConst60)&2047];
			float 	fRec53 = (0 - (0.6f * fVec17[IOTA&2047]));
			fRec59[0] = ((fConst8 * fRec59[1]) + (fConst7 * (fRec27[1] + fRec27[2])));
			fRec58[0] = ((fSlow110 * fRec58[1]) + (fSlow109 * (fRec27[1] + (fSlow103 * fRec59[0]))));
			fVec18[IOTA&16383] = (1e-20f + (0.35355339059327373f * fRec58[0]));
			float fTemp37 = (((0.6f * fRec56[1]) + fVec18[(IOTA-iConst66)&16383]) - fTemp33);
			fVec19[IOTA&1023] = fTemp37;
			fRec56[0] = fVec19[(IOTA-iConst67)&1023];
			float 	fRec57 = (0 - (0.6f * fVec19[IOTA&1023]));
			fRec20[0] = (fRec56[1] + (fRec52[1] + (fRec48[1] + (fRec44[1] + (fRec40[1] + (fRec36[1] + (fRec28[1] + (fRec32[1] + (fRec57 + (fRec53 + (fRec49 + (fRec45 + fTemp31))))))))))));
			fRec21[0] = (0 - ((fRec56[1] + (fRec52[1] + (fRec48[1] + (fRec44[1] + (fRec57 + (fRec53 + (fRec45 + fRec49))))))) - (fRec40[1] + (fRec36[1] + (fRec28[1] + (fRec32[1] + fTemp31))))));
			float fTemp38 = (fRec37 + fRec41);
			fRec22[0] = (0 - ((fRec56[1] + (fRec52[1] + (fRec40[1] + (fRec36[1] + (fRec57 + (fRec53 + fTemp38)))))) - (fRec48[1] + (fRec44[1] + (fRec28[1] + (fRec32[1] + (fRec49 + (fRec45 + fTemp28))))))));
			fRec23[0] = (0 - ((fRec48[1] + (fRec44[1] + (fRec40[1] + (fRec36[1] + (fRec49 + (fRec45 + fTemp38)))))) - (fRec56[1] + (fRec52[1] + (fRec28[1] + (fRec32[1] + (fRec57 + (fRec53 + fTemp28))))))));
			float fTemp39 = (fRec33 + fRec37);
			float fTemp40 = (fRec29 + fRec41);
			fRec24[0] = (0 - ((fRec56[1] + (fRec48[1] + (fRec40[1] + (fRec28[1] + (fRec57 + (fRec49 + fTemp40)))))) - (fRec52[1] + (fRec44[1] + (fRec36[1] + (fRec32[1] + (fRec53 + (fRec45 + fTemp39))))))));
			fRec25[0] = (0 - ((fRec52[1] + (fRec44[1] + (fRec40[1] + (fRec28[1] + (fRec53 + (fRec45 + fTemp40)))))) - (fRec56[1] + (fRec48[1] + (fRec36[1] + (fRec32[1] + (fRec57 + (fRec49 + fTemp39))))))));
			float fTemp41 = (fRec33 + fRec41);
			float fTemp42 = (fRec29 + fRec37);
			fRec26[0] = (0 - ((fRec52[1] + (fRec48[1] + (fRec36[1] + (fRec28[1] + (fRec53 + (fRec49 + fTemp42)))))) - (fRec56[1] + (fRec44[1] + (fRec40[1] + (fRec32[1] + (fRec57 + (fRec45 + fTemp41))))))));
			fRec27[0] = (0 - ((fRec56[1] + (fRec44[1] + (fRec36[1] + (fRec28[1] + (fRec57 + (fRec45 + fTemp42)))))) - (fRec52[1] + (fRec48[1] + (fRec40[1] + (fRec32[1] + (fRec53 + (fRec49 + fTemp41))))))));
			output0[i] = (FAUSTFLOAT)((0.37f * (fRec21[0] + fRec22[0])) + (fSlow36 * (fTemp24 * fVec1[IOTA&4095])));
			output1[i] = (FAUSTFLOAT)((0.37f * (fRec21[0] - fRec22[0])) + (fSlow35 * (fTemp24 * fTemp32)));
			// post processing
			fRec27[2] = fRec27[1]; fRec27[1] = fRec27[0];
			fRec26[2] = fRec26[1]; fRec26[1] = fRec26[0];
			fRec25[2] = fRec25[1]; fRec25[1] = fRec25[0];
			fRec24[2] = fRec24[1]; fRec24[1] = fRec24[0];
			fRec23[2] = fRec23[1]; fRec23[1] = fRec23[0];
			fRec22[2] = fRec22[1]; fRec22[1] = fRec22[0];
			fRec21[2] = fRec21[1]; fRec21[1] = fRec21[0];
			fRec20[2] = fRec20[1]; fRec20[1] = fRec20[0];
			fRec56[1] = fRec56[0];
			fRec58[1] = fRec58[0];
			fRec59[1] = fRec59[0];
			fRec52[1] = fRec52[0];
			fRec54[1] = fRec54[0];
			fRec55[1] = fRec55[0];
			fRec48[1] = fRec48[0];
			fRec50[1] = fRec50[0];
			fRec51[1] = fRec51[0];
			fRec44[1] = fRec44[0];
			fRec46[1] = fRec46[0];
			fRec47[1] = fRec47[0];
			fRec40[1] = fRec40[0];
			fRec42[1] = fRec42[0];
			fRec43[1] = fRec43[0];
			fRec36[1] = fRec36[0];
			fRec38[1] = fRec38[0];
			fRec39[1] = fRec39[0];
			fRec32[1] = fRec32[0];
			fRec34[1] = fRec34[0];
			fRec35[1] = fRec35[0];
			fRec28[1] = fRec28[0];
			fRec30[1] = fRec30[0];
			fRec31[1] = fRec31[0];
			fRec19[1] = fRec19[0];
			IOTA = IOTA+1;
			fRec16[1] = fRec16[0];
			fRec17[1] = fRec17[0];
			fRec18[1] = fRec18[0];
			fRec14[1] = fRec14[0];
			fRec15[1] = fRec15[0];
			fRec11[1] = fRec11[0];
			fRec12[1] = fRec12[0];
			fRec13[1] = fRec13[0];
			fRec10[1] = fRec10[0];
			iRec9[1] = iRec9[0];
			fVec0[1] = fVec0[0];
			fRec8[1] = fRec8[0];
			iRec7[1] = iRec7[0];
			fRec6[1] = fRec6[0];
			fRec5[1] = fRec5[0];
			fRec4[1] = fRec4[0];
			iRec3[1] = iRec3[0];
			iRec2[1] = iRec2[0];
			fRec1[1] = fRec1[0];
		}
	}
};


float 	mydsp::ftbl0[65536];
