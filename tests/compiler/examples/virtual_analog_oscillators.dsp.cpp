//-----------------------------------------------------
//
// Code generated with Faust 0.9.70 (http://faust.grame.fr)
//-----------------------------------------------------
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif  

typedef long double quad;
/* link with  */
#include <math.h>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline float faustpower(float x)          { return powf(x,N); } 
template <int N> inline double faustpower(double x)        { return pow(x,N); }
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <>   inline int faustpower<0>(int x)            { return 1; }
template <>   inline int faustpower<1>(int x)            { return x; }
#endif

#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	int 	iVec0[3];
	int 	iConst0;
	float 	fConst1;
	float 	fConst2;
	float 	fConst3;
	float 	fConst4;
	float 	fConst5;
	float 	fConst6;
	float 	fConst7;
	float 	fConst8;
	float 	fConst9;
	float 	fConst10;
	float 	fConst11;
	float 	fConst12;
	float 	fConst13;
	float 	fConst14;
	float 	fConst15;
	float 	fConst16;
	float 	fConst17;
	float 	fConst18;
	float 	fConst19;
	float 	fConst20;
	float 	fConst21;
	float 	fConst22;
	float 	fConst23;
	float 	fConst24;
	float 	fConst25;
	float 	fConst26;
	float 	fConst27;
	float 	fConst28;
	float 	fConst29;
	float 	fConst30;
	float 	fConst31;
	float 	fConst32;
	float 	fConst33;
	float 	fConst34;
	float 	fConst35;
	float 	fConst36;
	float 	fConst37;
	float 	fConst38;
	float 	fConst39;
	float 	fConst40;
	float 	fConst41;
	float 	fConst42;
	float 	fConst43;
	float 	fConst44;
	float 	fConst45;
	float 	fConst46;
	float 	fConst47;
	float 	fConst48;
	float 	fConst49;
	float 	fConst50;
	float 	fConst51;
	float 	fConst52;
	float 	fConst53;
	float 	fConst54;
	float 	fConst55;
	float 	fConst56;
	float 	fConst57;
	float 	fConst58;
	float 	fConst59;
	float 	fConst60;
	float 	fConst61;
	float 	fConst62;
	float 	fConst63;
	float 	fConst64;
	float 	fConst65;
	float 	fConst66;
	float 	fConst67;
	float 	fConst68;
	float 	fConst69;
	float 	fConst70;
	float 	fConst71;
	float 	fConst72;
	float 	fConst73;
	float 	fConst74;
	float 	fConst75;
	float 	fConst76;
	float 	fConst77;
	float 	fConst78;
	float 	fConst79;
	float 	fConst80;
	float 	fConst81;
	float 	fConst82;
	float 	fConst83;
	float 	fConst84;
	float 	fConst85;
	float 	fConst86;
	float 	fConst87;
	float 	fConst88;
	float 	fConst89;
	float 	fConst90;
	float 	fConst91;
	float 	fConst92;
	float 	fConst93;
	float 	fConst94;
	float 	fConst95;
	float 	fConst96;
	float 	fConst97;
	float 	fConst98;
	float 	fConst99;
	float 	fConst100;
	float 	fConst101;
	float 	fConst102;
	float 	fConst103;
	float 	fConst104;
	float 	fConst105;
	float 	fConst106;
	float 	fConst107;
	float 	fConst108;
	float 	fConst109;
	float 	fConst110;
	float 	fConst111;
	float 	fConst112;
	float 	fConst113;
	float 	fConst114;
	float 	fConst115;
	float 	fConst116;
	float 	fConst117;
	float 	fConst118;
	float 	fConst119;
	float 	fConst120;
	float 	fConst121;
	float 	fConst122;
	float 	fConst123;
	float 	fConst124;
	float 	fConst125;
	float 	fConst126;
	float 	fConst127;
	float 	fConst128;
	float 	fConst129;
	float 	fConst130;
	float 	fConst131;
	float 	fConst132;
	float 	fConst133;
	float 	fConst134;
	float 	fConst135;
	float 	fConst136;
	float 	fConst137;
	float 	fConst138;
	float 	fConst139;
	float 	fConst140;
	float 	fConst141;
	float 	fConst142;
	float 	fConst143;
	float 	fConst144;
	float 	fConst145;
	float 	fConst146;
	float 	fConst147;
	float 	fConst148;
	float 	fConst149;
	float 	fConst150;
	float 	fConst151;
	float 	fConst152;
	float 	fConst153;
	float 	fConst154;
	float 	fConst155;
	float 	fConst156;
	float 	fConst157;
	float 	fConst158;
	float 	fConst159;
	float 	fConst160;
	float 	fConst161;
	float 	fConst162;
	float 	fConst163;
	float 	fConst164;
	float 	fConst165;
	float 	fConst166;
	float 	fConst167;
	float 	fConst168;
	float 	fConst169;
	float 	fConst170;
	float 	fConst171;
	float 	fConst172;
	float 	fConst173;
	float 	fConst174;
	float 	fConst175;
	float 	fConst176;
	float 	fConst177;
	float 	fConst178;
	float 	fConst179;
	float 	fConst180;
	float 	fConst181;
	float 	fConst182;
	FAUSTFLOAT 	fslider0;
	float 	fRec44[2];
	float 	fConst183;
	FAUSTFLOAT 	fslider1;
	int 	iRec50[2];
	float 	fRec49[4];
	FAUSTFLOAT 	fslider2;
	FAUSTFLOAT 	fslider3;
	float 	fConst184;
	FAUSTFLOAT 	fslider4;
	float 	fRec51[2];
	FAUSTFLOAT 	fslider5;
	float 	fConst185;
	float 	fConst186;
	float 	fRec52[2];
	float 	fVec1[2];
	int 	IOTA;
	float 	fVec2[4096];
	FAUSTFLOAT 	fslider6;
	float 	fRec53[2];
	float 	fVec3[2];
	FAUSTFLOAT 	fslider7;
	float 	fRec54[2];
	float 	fVec4[2];
	float 	fVec5[4096];
	float 	fRec55[2];
	float 	fVec6[2];
	float 	fVec7[4096];
	FAUSTFLOAT 	fcheckbox0;
	float 	fVec8[2];
	float 	fVec9[2];
	float 	fVec10[4096];
	float 	fVec11[2];
	float 	fVec12[2];
	float 	fVec13[4096];
	float 	fVec14[2];
	float 	fVec15[2];
	float 	fVec16[4096];
	FAUSTFLOAT 	fslider8;
	float 	fConst187;
	float 	fConst188;
	float 	fRec56[2];
	float 	fRec57[2];
	float 	fRec58[2];
	FAUSTFLOAT 	fslider9;
	float 	fConst189;
	FAUSTFLOAT 	fslider10;
	float 	fRec59[2];
	float 	fConst190;
	float 	fVec17[2];
	float 	fRec60[2];
	float 	fVec18[2];
	float 	fRec61[2];
	float 	fVec19[2];
	FAUSTFLOAT 	fslider11;
	FAUSTFLOAT 	fslider12;
	float 	fRec62[2];
	FAUSTFLOAT 	fslider13;
	FAUSTFLOAT 	fcheckbox1;
	float 	fRec48[2];
	float 	fRec47[2];
	float 	fRec46[2];
	float 	fRec45[2];
	float 	fRec43[2];
	float 	fConst191;
	float 	fRec64[3];
	float 	fRec63[3];
	float 	fRec70[2];
	float 	fRec68[2];
	float 	fRec67[2];
	float 	fRec65[2];
	FAUSTFLOAT 	fcheckbox2;
	FAUSTFLOAT 	fcheckbox3;
	FAUSTFLOAT 	fslider14;
	float 	fRec71[2];
	float 	fRec42[3];
	float 	fConst192;
	float 	fConst193;
	float 	fConst194;
	float 	fRec41[3];
	float 	fConst195;
	float 	fConst196;
	float 	fRec40[3];
	float 	fConst197;
	float 	fConst198;
	float 	fRec39[3];
	float 	fConst199;
	float 	fConst200;
	float 	fConst201;
	float 	fRec38[3];
	float 	fConst202;
	float 	fConst203;
	float 	fRec37[3];
	float 	fConst204;
	float 	fConst205;
	float 	fRec36[3];
	float 	fConst206;
	float 	fConst207;
	float 	fConst208;
	float 	fRec35[3];
	float 	fConst209;
	float 	fConst210;
	float 	fRec34[3];
	float 	fConst211;
	float 	fConst212;
	float 	fRec33[3];
	float 	fConst213;
	float 	fConst214;
	float 	fConst215;
	float 	fRec32[3];
	float 	fConst216;
	float 	fConst217;
	float 	fRec31[3];
	float 	fConst218;
	float 	fConst219;
	float 	fRec30[3];
	float 	fConst220;
	float 	fConst221;
	float 	fConst222;
	float 	fRec29[3];
	float 	fConst223;
	float 	fConst224;
	float 	fRec28[3];
	float 	fConst225;
	float 	fConst226;
	float 	fRec27[3];
	float 	fConst227;
	float 	fConst228;
	float 	fConst229;
	float 	fRec26[3];
	float 	fConst230;
	float 	fConst231;
	float 	fRec25[3];
	float 	fConst232;
	float 	fConst233;
	float 	fRec24[3];
	float 	fConst234;
	float 	fConst235;
	float 	fConst236;
	float 	fRec23[3];
	float 	fConst237;
	float 	fConst238;
	float 	fRec22[3];
	float 	fConst239;
	float 	fConst240;
	float 	fRec21[3];
	float 	fConst241;
	float 	fConst242;
	float 	fConst243;
	float 	fRec20[3];
	float 	fConst244;
	float 	fConst245;
	float 	fRec19[3];
	float 	fConst246;
	float 	fConst247;
	float 	fRec18[3];
	float 	fConst248;
	float 	fConst249;
	float 	fConst250;
	float 	fRec17[3];
	float 	fConst251;
	float 	fConst252;
	float 	fRec16[3];
	float 	fConst253;
	float 	fConst254;
	float 	fRec15[3];
	float 	fConst255;
	float 	fConst256;
	float 	fConst257;
	float 	fRec14[3];
	float 	fConst258;
	float 	fConst259;
	float 	fRec13[3];
	float 	fConst260;
	float 	fConst261;
	float 	fRec12[3];
	float 	fConst262;
	float 	fConst263;
	float 	fConst264;
	float 	fRec11[3];
	float 	fConst265;
	float 	fConst266;
	float 	fRec10[3];
	float 	fConst267;
	float 	fConst268;
	float 	fRec9[3];
	float 	fConst269;
	float 	fConst270;
	float 	fConst271;
	float 	fRec8[3];
	float 	fConst272;
	float 	fConst273;
	float 	fRec7[3];
	float 	fConst274;
	float 	fConst275;
	float 	fRec6[3];
	float 	fConst276;
	float 	fConst277;
	float 	fConst278;
	float 	fRec5[3];
	float 	fConst279;
	float 	fConst280;
	float 	fRec4[3];
	float 	fConst281;
	float 	fConst282;
	float 	fRec3[3];
	float 	fConst283;
	float 	fConst284;
	float 	fConst285;
	float 	fRec2[3];
	float 	fConst286;
	float 	fConst287;
	float 	fRec1[3];
	float 	fConst288;
	float 	fConst289;
	FAUSTFLOAT 	fslider15;
	float 	fConst290;
	float 	fRec0[2];
	FAUSTFLOAT 	fslider16;
	FAUSTFLOAT 	fbargraph0;
	float 	fConst291;
	float 	fConst292;
	float 	fConst293;
	float 	fConst294;
	float 	fConst295;
	float 	fConst296;
	float 	fConst297;
	float 	fConst298;
	float 	fConst299;
	float 	fRec75[3];
	float 	fConst300;
	float 	fConst301;
	float 	fConst302;
	float 	fRec74[3];
	float 	fConst303;
	float 	fConst304;
	float 	fConst305;
	float 	fRec73[3];
	float 	fConst306;
	float 	fConst307;
	float 	fConst308;
	float 	fRec72[2];
	FAUSTFLOAT 	fbargraph1;
	float 	fConst309;
	float 	fConst310;
	float 	fConst311;
	float 	fConst312;
	float 	fConst313;
	float 	fConst314;
	float 	fConst315;
	float 	fConst316;
	float 	fConst317;
	float 	fRec79[3];
	float 	fConst318;
	float 	fConst319;
	float 	fConst320;
	float 	fRec78[3];
	float 	fConst321;
	float 	fConst322;
	float 	fConst323;
	float 	fRec77[3];
	float 	fConst324;
	float 	fConst325;
	float 	fConst326;
	float 	fRec76[2];
	FAUSTFLOAT 	fbargraph2;
	float 	fConst327;
	float 	fConst328;
	float 	fConst329;
	float 	fConst330;
	float 	fConst331;
	float 	fConst332;
	float 	fConst333;
	float 	fConst334;
	float 	fConst335;
	float 	fRec83[3];
	float 	fConst336;
	float 	fConst337;
	float 	fConst338;
	float 	fRec82[3];
	float 	fConst339;
	float 	fConst340;
	float 	fConst341;
	float 	fRec81[3];
	float 	fConst342;
	float 	fConst343;
	float 	fConst344;
	float 	fRec80[2];
	FAUSTFLOAT 	fbargraph3;
	float 	fConst345;
	float 	fConst346;
	float 	fConst347;
	float 	fConst348;
	float 	fConst349;
	float 	fConst350;
	float 	fConst351;
	float 	fConst352;
	float 	fConst353;
	float 	fRec87[3];
	float 	fConst354;
	float 	fConst355;
	float 	fConst356;
	float 	fRec86[3];
	float 	fConst357;
	float 	fConst358;
	float 	fConst359;
	float 	fRec85[3];
	float 	fConst360;
	float 	fConst361;
	float 	fConst362;
	float 	fRec84[2];
	FAUSTFLOAT 	fbargraph4;
	float 	fConst363;
	float 	fConst364;
	float 	fConst365;
	float 	fConst366;
	float 	fConst367;
	float 	fConst368;
	float 	fConst369;
	float 	fConst370;
	float 	fConst371;
	float 	fRec91[3];
	float 	fConst372;
	float 	fConst373;
	float 	fConst374;
	float 	fRec90[3];
	float 	fConst375;
	float 	fConst376;
	float 	fConst377;
	float 	fRec89[3];
	float 	fConst378;
	float 	fConst379;
	float 	fConst380;
	float 	fRec88[2];
	FAUSTFLOAT 	fbargraph5;
	float 	fConst381;
	float 	fConst382;
	float 	fConst383;
	float 	fConst384;
	float 	fConst385;
	float 	fConst386;
	float 	fConst387;
	float 	fConst388;
	float 	fConst389;
	float 	fRec95[3];
	float 	fConst390;
	float 	fConst391;
	float 	fConst392;
	float 	fRec94[3];
	float 	fConst393;
	float 	fConst394;
	float 	fConst395;
	float 	fRec93[3];
	float 	fConst396;
	float 	fConst397;
	float 	fConst398;
	float 	fRec92[2];
	FAUSTFLOAT 	fbargraph6;
	float 	fConst399;
	float 	fConst400;
	float 	fConst401;
	float 	fConst402;
	float 	fConst403;
	float 	fConst404;
	float 	fConst405;
	float 	fConst406;
	float 	fConst407;
	float 	fRec99[3];
	float 	fConst408;
	float 	fConst409;
	float 	fConst410;
	float 	fRec98[3];
	float 	fConst411;
	float 	fConst412;
	float 	fConst413;
	float 	fRec97[3];
	float 	fConst414;
	float 	fConst415;
	float 	fConst416;
	float 	fRec96[2];
	FAUSTFLOAT 	fbargraph7;
	float 	fConst417;
	float 	fConst418;
	float 	fConst419;
	float 	fConst420;
	float 	fConst421;
	float 	fConst422;
	float 	fConst423;
	float 	fConst424;
	float 	fConst425;
	float 	fRec103[3];
	float 	fConst426;
	float 	fConst427;
	float 	fConst428;
	float 	fRec102[3];
	float 	fConst429;
	float 	fConst430;
	float 	fConst431;
	float 	fRec101[3];
	float 	fConst432;
	float 	fConst433;
	float 	fConst434;
	float 	fRec100[2];
	FAUSTFLOAT 	fbargraph8;
	float 	fConst435;
	float 	fConst436;
	float 	fConst437;
	float 	fConst438;
	float 	fConst439;
	float 	fConst440;
	float 	fConst441;
	float 	fConst442;
	float 	fConst443;
	float 	fRec107[3];
	float 	fConst444;
	float 	fConst445;
	float 	fConst446;
	float 	fRec106[3];
	float 	fConst447;
	float 	fConst448;
	float 	fConst449;
	float 	fRec105[3];
	float 	fConst450;
	float 	fConst451;
	float 	fConst452;
	float 	fRec104[2];
	FAUSTFLOAT 	fbargraph9;
	float 	fConst453;
	float 	fConst454;
	float 	fConst455;
	float 	fConst456;
	float 	fConst457;
	float 	fConst458;
	float 	fConst459;
	float 	fConst460;
	float 	fConst461;
	float 	fRec111[3];
	float 	fConst462;
	float 	fConst463;
	float 	fConst464;
	float 	fRec110[3];
	float 	fConst465;
	float 	fConst466;
	float 	fConst467;
	float 	fRec109[3];
	float 	fConst468;
	float 	fConst469;
	float 	fConst470;
	float 	fRec108[2];
	FAUSTFLOAT 	fbargraph10;
	float 	fConst471;
	float 	fConst472;
	float 	fConst473;
	float 	fConst474;
	float 	fConst475;
	float 	fConst476;
	float 	fConst477;
	float 	fConst478;
	float 	fConst479;
	float 	fRec115[3];
	float 	fConst480;
	float 	fConst481;
	float 	fConst482;
	float 	fRec114[3];
	float 	fConst483;
	float 	fConst484;
	float 	fConst485;
	float 	fRec113[3];
	float 	fConst486;
	float 	fConst487;
	float 	fConst488;
	float 	fRec112[2];
	FAUSTFLOAT 	fbargraph11;
	float 	fConst489;
	float 	fConst490;
	float 	fConst491;
	float 	fConst492;
	float 	fConst493;
	float 	fConst494;
	float 	fConst495;
	float 	fConst496;
	float 	fConst497;
	float 	fRec119[3];
	float 	fConst498;
	float 	fConst499;
	float 	fConst500;
	float 	fRec118[3];
	float 	fConst501;
	float 	fConst502;
	float 	fConst503;
	float 	fRec117[3];
	float 	fConst504;
	float 	fConst505;
	float 	fConst506;
	float 	fRec116[2];
	FAUSTFLOAT 	fbargraph12;
	float 	fConst507;
	float 	fConst508;
	float 	fConst509;
	float 	fConst510;
	float 	fConst511;
	float 	fConst512;
	float 	fConst513;
	float 	fConst514;
	float 	fConst515;
	float 	fRec123[3];
	float 	fConst516;
	float 	fConst517;
	float 	fConst518;
	float 	fRec122[3];
	float 	fConst519;
	float 	fConst520;
	float 	fConst521;
	float 	fRec121[3];
	float 	fConst522;
	float 	fConst523;
	float 	fConst524;
	float 	fRec120[2];
	FAUSTFLOAT 	fbargraph13;
	float 	fConst525;
	float 	fConst526;
	float 	fConst527;
	float 	fConst528;
	float 	fConst529;
	float 	fConst530;
	float 	fConst531;
	float 	fConst532;
	float 	fConst533;
	float 	fRec127[3];
	float 	fConst534;
	float 	fConst535;
	float 	fConst536;
	float 	fRec126[3];
	float 	fConst537;
	float 	fConst538;
	float 	fConst539;
	float 	fRec125[3];
	float 	fConst540;
	float 	fConst541;
	float 	fConst542;
	float 	fRec124[2];
	FAUSTFLOAT 	fbargraph14;
  public:
	static void metadata(Meta* m) 	{ 
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/version", "1.29");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/version", "1.0");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/version", "1.0");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("effect.lib/name", "Faust Audio Effect Library");
		m->declare("effect.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/copyright", "Julius O. Smith III");
		m->declare("effect.lib/version", "1.33");
		m->declare("effect.lib/license", "STK-4.3");
		m->declare("effect.lib/exciter_name", "Harmonic Exciter");
		m->declare("effect.lib/exciter_author", "Priyanka Shekar (pshekar@ccrma.stanford.edu)");
		m->declare("effect.lib/exciter_copyright", "Copyright (c) 2013 Priyanka Shekar");
		m->declare("effect.lib/exciter_version", "1.0");
		m->declare("effect.lib/exciter_license", "MIT License (MIT)");
		m->declare("oscillator.lib/name", "Faust Oscillator Library");
		m->declare("oscillator.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("oscillator.lib/copyright", "Julius O. Smith III");
		m->declare("oscillator.lib/version", "1.11");
		m->declare("oscillator.lib/license", "STK-4.3");
	}

	virtual int getNumInputs() 	{ return 1; }
	virtual int getNumOutputs() 	{ return 2; }
	static void classInit(int samplingFreq) {
	}
	virtual void instanceInit(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		for (int i=0; i<3; i++) iVec0[i] = 0;
		iConst0 = min(192000, max(1, fSamplingFreq));
		fConst1 = tanf((123.69245982665232f / float(iConst0)));
		fConst2 = faustpower<2>(fConst1);
		fConst3 = (1.0f / fConst2);
		fConst4 = (2 * (1.069358407707312f - fConst3));
		fConst5 = (1.0f / fConst1);
		fConst6 = (1.069358407707312f + ((fConst5 - 0.168404871113589f) / fConst1));
		fConst7 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst5) / fConst1)));
		fConst8 = (2 * (0.689621364484675f - fConst3));
		fConst9 = (0.689621364484675f + ((fConst5 - 0.512478641889141f) / fConst1));
		fConst10 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst5) / fConst1)));
		fConst11 = (2 * (0.24529150870616f - fConst3));
		fConst12 = (0.24529150870616f + ((fConst5 - 0.782413046821645f) / fConst1));
		fConst13 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst5) / fConst1)));
		fConst14 = tanf((196.34954084936206f / float(iConst0)));
		fConst15 = faustpower<2>(fConst14);
		fConst16 = (1.0f / fConst15);
		fConst17 = (2 * (1.069358407707312f - fConst16));
		fConst18 = (1.0f / fConst14);
		fConst19 = (1.069358407707312f + ((fConst18 - 0.168404871113589f) / fConst14));
		fConst20 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst18) / fConst14)));
		fConst21 = (2 * (0.689621364484675f - fConst16));
		fConst22 = (0.689621364484675f + ((fConst18 - 0.512478641889141f) / fConst14));
		fConst23 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst18) / fConst14)));
		fConst24 = (2 * (0.24529150870616f - fConst16));
		fConst25 = (0.24529150870616f + ((fConst18 - 0.782413046821645f) / fConst14));
		fConst26 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst18) / fConst14)));
		fConst27 = tanf((311.68546769775037f / float(iConst0)));
		fConst28 = faustpower<2>(fConst27);
		fConst29 = (1.0f / fConst28);
		fConst30 = (2 * (1.069358407707312f - fConst29));
		fConst31 = (1.0f / fConst27);
		fConst32 = (1.069358407707312f + ((fConst31 - 0.168404871113589f) / fConst27));
		fConst33 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst31) / fConst27)));
		fConst34 = (2 * (0.689621364484675f - fConst29));
		fConst35 = (0.689621364484675f + ((fConst31 - 0.512478641889141f) / fConst27));
		fConst36 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst31) / fConst27)));
		fConst37 = (2 * (0.24529150870616f - fConst29));
		fConst38 = (0.24529150870616f + ((fConst31 - 0.782413046821645f) / fConst27));
		fConst39 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst31) / fConst27)));
		fConst40 = tanf((494.769839306609f / float(iConst0)));
		fConst41 = faustpower<2>(fConst40);
		fConst42 = (1.0f / fConst41);
		fConst43 = (2 * (1.069358407707312f - fConst42));
		fConst44 = (1.0f / fConst40);
		fConst45 = (1.069358407707312f + ((fConst44 - 0.168404871113589f) / fConst40));
		fConst46 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst44) / fConst40)));
		fConst47 = (2 * (0.689621364484675f - fConst42));
		fConst48 = (0.689621364484675f + ((fConst44 - 0.512478641889141f) / fConst40));
		fConst49 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst44) / fConst40)));
		fConst50 = (2 * (0.24529150870616f - fConst42));
		fConst51 = (0.24529150870616f + ((fConst44 - 0.782413046821645f) / fConst40));
		fConst52 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst44) / fConst40)));
		fConst53 = tanf((785.3981633974482f / float(iConst0)));
		fConst54 = faustpower<2>(fConst53);
		fConst55 = (1.0f / fConst54);
		fConst56 = (2 * (1.069358407707312f - fConst55));
		fConst57 = (1.0f / fConst53);
		fConst58 = (1.069358407707312f + ((fConst57 - 0.168404871113589f) / fConst53));
		fConst59 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst57) / fConst53)));
		fConst60 = (2 * (0.689621364484675f - fConst55));
		fConst61 = (0.689621364484675f + ((fConst57 - 0.512478641889141f) / fConst53));
		fConst62 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst57) / fConst53)));
		fConst63 = (2 * (0.24529150870616f - fConst55));
		fConst64 = (0.24529150870616f + ((fConst57 - 0.782413046821645f) / fConst53));
		fConst65 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst57) / fConst53)));
		fConst66 = tanf((1246.7418707910015f / float(iConst0)));
		fConst67 = faustpower<2>(fConst66);
		fConst68 = (1.0f / fConst67);
		fConst69 = (2 * (1.069358407707312f - fConst68));
		fConst70 = (1.0f / fConst66);
		fConst71 = (1.069358407707312f + ((fConst70 - 0.168404871113589f) / fConst66));
		fConst72 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst70) / fConst66)));
		fConst73 = (2 * (0.689621364484675f - fConst68));
		fConst74 = (0.689621364484675f + ((fConst70 - 0.512478641889141f) / fConst66));
		fConst75 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst70) / fConst66)));
		fConst76 = (2 * (0.24529150870616f - fConst68));
		fConst77 = (0.24529150870616f + ((fConst70 - 0.782413046821645f) / fConst66));
		fConst78 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst70) / fConst66)));
		fConst79 = tanf((1979.079357226436f / float(iConst0)));
		fConst80 = faustpower<2>(fConst79);
		fConst81 = (1.0f / fConst80);
		fConst82 = (2 * (1.069358407707312f - fConst81));
		fConst83 = (1.0f / fConst79);
		fConst84 = (1.069358407707312f + ((fConst83 - 0.168404871113589f) / fConst79));
		fConst85 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst83) / fConst79)));
		fConst86 = (2 * (0.689621364484675f - fConst81));
		fConst87 = (0.689621364484675f + ((fConst83 - 0.512478641889141f) / fConst79));
		fConst88 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst83) / fConst79)));
		fConst89 = (2 * (0.24529150870616f - fConst81));
		fConst90 = (0.24529150870616f + ((fConst83 - 0.782413046821645f) / fConst79));
		fConst91 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst83) / fConst79)));
		fConst92 = tanf((3141.592653589793f / float(iConst0)));
		fConst93 = faustpower<2>(fConst92);
		fConst94 = (1.0f / fConst93);
		fConst95 = (2 * (1.069358407707312f - fConst94));
		fConst96 = (1.0f / fConst92);
		fConst97 = (1.069358407707312f + ((fConst96 - 0.168404871113589f) / fConst92));
		fConst98 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst96) / fConst92)));
		fConst99 = (2 * (0.689621364484675f - fConst94));
		fConst100 = (0.689621364484675f + ((fConst96 - 0.512478641889141f) / fConst92));
		fConst101 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst96) / fConst92)));
		fConst102 = (2 * (0.24529150870616f - fConst94));
		fConst103 = (0.24529150870616f + ((fConst96 - 0.782413046821645f) / fConst92));
		fConst104 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst96) / fConst92)));
		fConst105 = tanf((4986.967483164005f / float(iConst0)));
		fConst106 = faustpower<2>(fConst105);
		fConst107 = (1.0f / fConst106);
		fConst108 = (2 * (1.069358407707312f - fConst107));
		fConst109 = (1.0f / fConst105);
		fConst110 = (1.069358407707312f + ((fConst109 - 0.168404871113589f) / fConst105));
		fConst111 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst109) / fConst105)));
		fConst112 = (2 * (0.689621364484675f - fConst107));
		fConst113 = (0.689621364484675f + ((fConst109 - 0.512478641889141f) / fConst105));
		fConst114 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst109) / fConst105)));
		fConst115 = (2 * (0.24529150870616f - fConst107));
		fConst116 = (0.24529150870616f + ((fConst109 - 0.782413046821645f) / fConst105));
		fConst117 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst109) / fConst105)));
		fConst118 = tanf((7916.317428905746f / float(iConst0)));
		fConst119 = faustpower<2>(fConst118);
		fConst120 = (1.0f / fConst119);
		fConst121 = (2 * (1.069358407707312f - fConst120));
		fConst122 = (1.0f / fConst118);
		fConst123 = (1.069358407707312f + ((fConst122 - 0.168404871113589f) / fConst118));
		fConst124 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst122) / fConst118)));
		fConst125 = (2 * (0.689621364484675f - fConst120));
		fConst126 = (0.689621364484675f + ((fConst122 - 0.512478641889141f) / fConst118));
		fConst127 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst122) / fConst118)));
		fConst128 = (2 * (0.24529150870616f - fConst120));
		fConst129 = (0.24529150870616f + ((fConst122 - 0.782413046821645f) / fConst118));
		fConst130 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst122) / fConst118)));
		fConst131 = tanf((12566.370614359172f / float(iConst0)));
		fConst132 = faustpower<2>(fConst131);
		fConst133 = (1.0f / fConst132);
		fConst134 = (2 * (1.069358407707312f - fConst133));
		fConst135 = (1.0f / fConst131);
		fConst136 = (1.069358407707312f + ((fConst135 - 0.168404871113589f) / fConst131));
		fConst137 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst135) / fConst131)));
		fConst138 = (2 * (0.689621364484675f - fConst133));
		fConst139 = (0.689621364484675f + ((fConst135 - 0.512478641889141f) / fConst131));
		fConst140 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst135) / fConst131)));
		fConst141 = (2 * (0.24529150870616f - fConst133));
		fConst142 = (0.24529150870616f + ((fConst135 - 0.782413046821645f) / fConst131));
		fConst143 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst135) / fConst131)));
		fConst144 = tanf((19947.869932656024f / float(iConst0)));
		fConst145 = faustpower<2>(fConst144);
		fConst146 = (1.0f / fConst145);
		fConst147 = (2 * (1.069358407707312f - fConst146));
		fConst148 = (1.0f / fConst144);
		fConst149 = (1.069358407707312f + ((fConst148 - 0.168404871113589f) / fConst144));
		fConst150 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst148) / fConst144)));
		fConst151 = (2 * (0.689621364484675f - fConst146));
		fConst152 = (0.689621364484675f + ((fConst148 - 0.512478641889141f) / fConst144));
		fConst153 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst148) / fConst144)));
		fConst154 = (2 * (0.24529150870616f - fConst146));
		fConst155 = (0.24529150870616f + ((fConst148 - 0.782413046821645f) / fConst144));
		fConst156 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst148) / fConst144)));
		fConst157 = tanf((31665.269715622984f / float(iConst0)));
		fConst158 = faustpower<2>(fConst157);
		fConst159 = (1.0f / fConst158);
		fConst160 = (2 * (1.069358407707312f - fConst159));
		fConst161 = (1.0f / fConst157);
		fConst162 = (1.069358407707312f + ((fConst161 - 0.168404871113589f) / fConst157));
		fConst163 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst161) / fConst157)));
		fConst164 = (2 * (0.689621364484675f - fConst159));
		fConst165 = (0.689621364484675f + ((fConst161 - 0.512478641889141f) / fConst157));
		fConst166 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst161) / fConst157)));
		fConst167 = (2 * (0.24529150870616f - fConst159));
		fConst168 = (0.24529150870616f + ((fConst161 - 0.782413046821645f) / fConst157));
		fConst169 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst161) / fConst157)));
		fConst170 = tanf((50265.48245743669f / float(iConst0)));
		fConst171 = faustpower<2>(fConst170);
		fConst172 = (1.0f / fConst171);
		fConst173 = (2 * (1.069358407707312f - fConst172));
		fConst174 = (1.0f / fConst170);
		fConst175 = (1.069358407707312f + ((fConst174 - 0.168404871113589f) / fConst170));
		fConst176 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst174) / fConst170)));
		fConst177 = (2 * (0.689621364484675f - fConst172));
		fConst178 = (0.689621364484675f + ((fConst174 - 0.512478641889141f) / fConst170));
		fConst179 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst174) / fConst170)));
		fConst180 = (2 * (0.24529150870616f - fConst172));
		fConst181 = (0.24529150870616f + ((fConst174 - 0.782413046821645f) / fConst170));
		fConst182 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst174) / fConst170)));
		fslider0 = 25.0f;
		for (int i=0; i<2; i++) fRec44[i] = 0;
		fConst183 = (6.283185307179586f / float(iConst0));
		fslider1 = 0.9f;
		for (int i=0; i<2; i++) iRec50[i] = 0;
		for (int i=0; i<4; i++) fRec49[i] = 0;
		fslider2 = 0.0f;
		fslider3 = 0.1f;
		fConst184 = (1.0f / float(iConst0));
		fslider4 = 49.0f;
		for (int i=0; i<2; i++) fRec51[i] = 0;
		fslider5 = 0.1f;
		fConst185 = float(iConst0);
		fConst186 = (1.0f / fConst185);
		for (int i=0; i<2; i++) fRec52[i] = 0;
		for (int i=0; i<2; i++) fVec1[i] = 0;
		IOTA = 0;
		for (int i=0; i<4096; i++) fVec2[i] = 0;
		fslider6 = 0.5f;
		for (int i=0; i<2; i++) fRec53[i] = 0;
		for (int i=0; i<2; i++) fVec3[i] = 0;
		fslider7 = -0.1f;
		for (int i=0; i<2; i++) fRec54[i] = 0;
		for (int i=0; i<2; i++) fVec4[i] = 0;
		for (int i=0; i<4096; i++) fVec5[i] = 0;
		for (int i=0; i<2; i++) fRec55[i] = 0;
		for (int i=0; i<2; i++) fVec6[i] = 0;
		for (int i=0; i<4096; i++) fVec7[i] = 0;
		fcheckbox0 = 0.0;
		for (int i=0; i<2; i++) fVec8[i] = 0;
		for (int i=0; i<2; i++) fVec9[i] = 0;
		for (int i=0; i<4096; i++) fVec10[i] = 0;
		for (int i=0; i<2; i++) fVec11[i] = 0;
		for (int i=0; i<2; i++) fVec12[i] = 0;
		for (int i=0; i<4096; i++) fVec13[i] = 0;
		for (int i=0; i<2; i++) fVec14[i] = 0;
		for (int i=0; i<2; i++) fVec15[i] = 0;
		for (int i=0; i<4096; i++) fVec16[i] = 0;
		fslider8 = 0.0f;
		fConst187 = (0.3333333333333333f * fConst185);
		fConst188 = (0.5f * fConst185);
		for (int i=0; i<2; i++) fRec56[i] = 0;
		for (int i=0; i<2; i++) fRec57[i] = 0;
		for (int i=0; i<2; i++) fRec58[i] = 0;
		fslider9 = 0.0f;
		fConst189 = (1.3333333333333333f / float(iConst0));
		fslider10 = 0.0f;
		for (int i=0; i<2; i++) fRec59[i] = 0;
		fConst190 = (2.0f / fConst185);
		for (int i=0; i<2; i++) fVec17[i] = 0;
		for (int i=0; i<2; i++) fRec60[i] = 0;
		for (int i=0; i<2; i++) fVec18[i] = 0;
		for (int i=0; i<2; i++) fRec61[i] = 0;
		for (int i=0; i<2; i++) fVec19[i] = 0;
		fslider11 = 1.0f;
		fslider12 = -2e+01f;
		for (int i=0; i<2; i++) fRec62[i] = 0;
		fslider13 = 0.0f;
		fcheckbox1 = 0.0;
		for (int i=0; i<2; i++) fRec48[i] = 0;
		for (int i=0; i<2; i++) fRec47[i] = 0;
		for (int i=0; i<2; i++) fRec46[i] = 0;
		for (int i=0; i<2; i++) fRec45[i] = 0;
		for (int i=0; i<2; i++) fRec43[i] = 0;
		fConst191 = (3.141592653589793f / float(iConst0));
		for (int i=0; i<3; i++) fRec64[i] = 0;
		for (int i=0; i<3; i++) fRec63[i] = 0;
		for (int i=0; i<2; i++) fRec70[i] = 0;
		for (int i=0; i<2; i++) fRec68[i] = 0;
		for (int i=0; i<2; i++) fRec67[i] = 0;
		for (int i=0; i<2; i++) fRec65[i] = 0;
		fcheckbox2 = 0.0;
		fcheckbox3 = 0.0;
		fslider14 = 5.0f;
		for (int i=0; i<2; i++) fRec71[i] = 0;
		for (int i=0; i<3; i++) fRec42[i] = 0;
		fConst192 = (9.9999997055e-05f / fConst171);
		fConst193 = (0.000433227200555f + fConst192);
		fConst194 = (2 * (0.000433227200555f - fConst192));
		for (int i=0; i<3; i++) fRec41[i] = 0;
		fConst195 = (7.621731298870603f + fConst172);
		fConst196 = (2 * (7.621731298870603f - fConst172));
		for (int i=0; i<3; i++) fRec40[i] = 0;
		fConst197 = (53.53615295455673f + fConst172);
		fConst198 = (2 * (53.53615295455673f - fConst172));
		for (int i=0; i<3; i++) fRec39[i] = 0;
		fConst199 = (9.9999997055e-05f / fConst158);
		fConst200 = (0.000433227200555f + fConst199);
		fConst201 = (2 * (0.000433227200555f - fConst199));
		for (int i=0; i<3; i++) fRec38[i] = 0;
		fConst202 = (7.621731298870603f + fConst159);
		fConst203 = (2 * (7.621731298870603f - fConst159));
		for (int i=0; i<3; i++) fRec37[i] = 0;
		fConst204 = (53.53615295455673f + fConst159);
		fConst205 = (2 * (53.53615295455673f - fConst159));
		for (int i=0; i<3; i++) fRec36[i] = 0;
		fConst206 = (9.9999997055e-05f / fConst145);
		fConst207 = (0.000433227200555f + fConst206);
		fConst208 = (2 * (0.000433227200555f - fConst206));
		for (int i=0; i<3; i++) fRec35[i] = 0;
		fConst209 = (7.621731298870603f + fConst146);
		fConst210 = (2 * (7.621731298870603f - fConst146));
		for (int i=0; i<3; i++) fRec34[i] = 0;
		fConst211 = (53.53615295455673f + fConst146);
		fConst212 = (2 * (53.53615295455673f - fConst146));
		for (int i=0; i<3; i++) fRec33[i] = 0;
		fConst213 = (9.9999997055e-05f / fConst132);
		fConst214 = (0.000433227200555f + fConst213);
		fConst215 = (2 * (0.000433227200555f - fConst213));
		for (int i=0; i<3; i++) fRec32[i] = 0;
		fConst216 = (7.621731298870603f + fConst133);
		fConst217 = (2 * (7.621731298870603f - fConst133));
		for (int i=0; i<3; i++) fRec31[i] = 0;
		fConst218 = (53.53615295455673f + fConst133);
		fConst219 = (2 * (53.53615295455673f - fConst133));
		for (int i=0; i<3; i++) fRec30[i] = 0;
		fConst220 = (9.9999997055e-05f / fConst119);
		fConst221 = (0.000433227200555f + fConst220);
		fConst222 = (2 * (0.000433227200555f - fConst220));
		for (int i=0; i<3; i++) fRec29[i] = 0;
		fConst223 = (7.621731298870603f + fConst120);
		fConst224 = (2 * (7.621731298870603f - fConst120));
		for (int i=0; i<3; i++) fRec28[i] = 0;
		fConst225 = (53.53615295455673f + fConst120);
		fConst226 = (2 * (53.53615295455673f - fConst120));
		for (int i=0; i<3; i++) fRec27[i] = 0;
		fConst227 = (9.9999997055e-05f / fConst106);
		fConst228 = (0.000433227200555f + fConst227);
		fConst229 = (2 * (0.000433227200555f - fConst227));
		for (int i=0; i<3; i++) fRec26[i] = 0;
		fConst230 = (7.621731298870603f + fConst107);
		fConst231 = (2 * (7.621731298870603f - fConst107));
		for (int i=0; i<3; i++) fRec25[i] = 0;
		fConst232 = (53.53615295455673f + fConst107);
		fConst233 = (2 * (53.53615295455673f - fConst107));
		for (int i=0; i<3; i++) fRec24[i] = 0;
		fConst234 = (9.9999997055e-05f / fConst93);
		fConst235 = (0.000433227200555f + fConst234);
		fConst236 = (2 * (0.000433227200555f - fConst234));
		for (int i=0; i<3; i++) fRec23[i] = 0;
		fConst237 = (7.621731298870603f + fConst94);
		fConst238 = (2 * (7.621731298870603f - fConst94));
		for (int i=0; i<3; i++) fRec22[i] = 0;
		fConst239 = (53.53615295455673f + fConst94);
		fConst240 = (2 * (53.53615295455673f - fConst94));
		for (int i=0; i<3; i++) fRec21[i] = 0;
		fConst241 = (9.9999997055e-05f / fConst80);
		fConst242 = (0.000433227200555f + fConst241);
		fConst243 = (2 * (0.000433227200555f - fConst241));
		for (int i=0; i<3; i++) fRec20[i] = 0;
		fConst244 = (7.621731298870603f + fConst81);
		fConst245 = (2 * (7.621731298870603f - fConst81));
		for (int i=0; i<3; i++) fRec19[i] = 0;
		fConst246 = (53.53615295455673f + fConst81);
		fConst247 = (2 * (53.53615295455673f - fConst81));
		for (int i=0; i<3; i++) fRec18[i] = 0;
		fConst248 = (9.9999997055e-05f / fConst67);
		fConst249 = (0.000433227200555f + fConst248);
		fConst250 = (2 * (0.000433227200555f - fConst248));
		for (int i=0; i<3; i++) fRec17[i] = 0;
		fConst251 = (7.621731298870603f + fConst68);
		fConst252 = (2 * (7.621731298870603f - fConst68));
		for (int i=0; i<3; i++) fRec16[i] = 0;
		fConst253 = (53.53615295455673f + fConst68);
		fConst254 = (2 * (53.53615295455673f - fConst68));
		for (int i=0; i<3; i++) fRec15[i] = 0;
		fConst255 = (9.9999997055e-05f / fConst54);
		fConst256 = (0.000433227200555f + fConst255);
		fConst257 = (2 * (0.000433227200555f - fConst255));
		for (int i=0; i<3; i++) fRec14[i] = 0;
		fConst258 = (7.621731298870603f + fConst55);
		fConst259 = (2 * (7.621731298870603f - fConst55));
		for (int i=0; i<3; i++) fRec13[i] = 0;
		fConst260 = (53.53615295455673f + fConst55);
		fConst261 = (2 * (53.53615295455673f - fConst55));
		for (int i=0; i<3; i++) fRec12[i] = 0;
		fConst262 = (9.9999997055e-05f / fConst41);
		fConst263 = (0.000433227200555f + fConst262);
		fConst264 = (2 * (0.000433227200555f - fConst262));
		for (int i=0; i<3; i++) fRec11[i] = 0;
		fConst265 = (7.621731298870603f + fConst42);
		fConst266 = (2 * (7.621731298870603f - fConst42));
		for (int i=0; i<3; i++) fRec10[i] = 0;
		fConst267 = (53.53615295455673f + fConst42);
		fConst268 = (2 * (53.53615295455673f - fConst42));
		for (int i=0; i<3; i++) fRec9[i] = 0;
		fConst269 = (9.9999997055e-05f / fConst28);
		fConst270 = (0.000433227200555f + fConst269);
		fConst271 = (2 * (0.000433227200555f - fConst269));
		for (int i=0; i<3; i++) fRec8[i] = 0;
		fConst272 = (7.621731298870603f + fConst29);
		fConst273 = (2 * (7.621731298870603f - fConst29));
		for (int i=0; i<3; i++) fRec7[i] = 0;
		fConst274 = (53.53615295455673f + fConst29);
		fConst275 = (2 * (53.53615295455673f - fConst29));
		for (int i=0; i<3; i++) fRec6[i] = 0;
		fConst276 = (9.9999997055e-05f / fConst15);
		fConst277 = (0.000433227200555f + fConst276);
		fConst278 = (2 * (0.000433227200555f - fConst276));
		for (int i=0; i<3; i++) fRec5[i] = 0;
		fConst279 = (7.621731298870603f + fConst16);
		fConst280 = (2 * (7.621731298870603f - fConst16));
		for (int i=0; i<3; i++) fRec4[i] = 0;
		fConst281 = (53.53615295455673f + fConst16);
		fConst282 = (2 * (53.53615295455673f - fConst16));
		for (int i=0; i<3; i++) fRec3[i] = 0;
		fConst283 = (9.9999997055e-05f / fConst2);
		fConst284 = (0.000433227200555f + fConst283);
		fConst285 = (2 * (0.000433227200555f - fConst283));
		for (int i=0; i<3; i++) fRec2[i] = 0;
		fConst286 = (7.621731298870603f + fConst3);
		fConst287 = (2 * (7.621731298870603f - fConst3));
		for (int i=0; i<3; i++) fRec1[i] = 0;
		fConst288 = (53.53615295455673f + fConst3);
		fConst289 = (2 * (53.53615295455673f - fConst3));
		fslider15 = 1e+02f;
		fConst290 = (1e+03f / float(iConst0));
		for (int i=0; i<2; i++) fRec0[i] = 0;
		fslider16 = 5e+01f;
		fConst291 = (2 * (0.9351401670315425f - fConst3));
		fConst292 = (0.9351401670315425f + ((fConst5 - 0.157482159302087f) / fConst1));
		fConst293 = (1.0f / (0.9351401670315425f + ((fConst5 + 0.157482159302087f) / fConst1)));
		fConst294 = (2 * (1.450071084655647f - fConst3));
		fConst295 = (1.450071084655647f + ((fConst5 - 0.7431304601070396f) / fConst1));
		fConst296 = (1.0f / (1.450071084655647f + ((fConst5 + 0.7431304601070396f) / fConst1)));
		fConst297 = (2 * (4.076781969643807f - fConst3));
		fConst298 = (4.076781969643807f + ((fConst5 - 3.1897274020965583f) / fConst1));
		fConst299 = (1.0f / (4.076781969643807f + ((fConst5 + 3.1897274020965583f) / fConst1)));
		for (int i=0; i<3; i++) fRec75[i] = 0;
		fConst300 = (0.0017661728399818856f / fConst2);
		fConst301 = (0.00040767818495825777f + fConst300);
		fConst302 = (2 * (0.00040767818495825777f - fConst300));
		for (int i=0; i<3; i++) fRec74[i] = 0;
		fConst303 = (11.052052171507189f / fConst2);
		fConst304 = (1.450071084655647f + fConst303);
		fConst305 = (2 * (1.450071084655647f - fConst303));
		for (int i=0; i<3; i++) fRec73[i] = 0;
		fConst306 = (50.063807016150385f / fConst2);
		fConst307 = (0.9351401670315425f + fConst306);
		fConst308 = (2 * (0.9351401670315425f - fConst306));
		for (int i=0; i<2; i++) fRec72[i] = 0;
		fConst309 = (2 * (0.9351401670315425f - fConst16));
		fConst310 = (0.9351401670315425f + ((fConst18 - 0.157482159302087f) / fConst14));
		fConst311 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst18) / fConst14)));
		fConst312 = (2 * (1.450071084655647f - fConst16));
		fConst313 = (1.450071084655647f + ((fConst18 - 0.7431304601070396f) / fConst14));
		fConst314 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst18) / fConst14)));
		fConst315 = (2 * (4.076781969643807f - fConst16));
		fConst316 = (4.076781969643807f + ((fConst18 - 3.1897274020965583f) / fConst14));
		fConst317 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst18) / fConst14)));
		for (int i=0; i<3; i++) fRec79[i] = 0;
		fConst318 = (0.0017661728399818856f / fConst15);
		fConst319 = (0.00040767818495825777f + fConst318);
		fConst320 = (2 * (0.00040767818495825777f - fConst318));
		for (int i=0; i<3; i++) fRec78[i] = 0;
		fConst321 = (11.052052171507189f / fConst15);
		fConst322 = (1.450071084655647f + fConst321);
		fConst323 = (2 * (1.450071084655647f - fConst321));
		for (int i=0; i<3; i++) fRec77[i] = 0;
		fConst324 = (50.063807016150385f / fConst15);
		fConst325 = (0.9351401670315425f + fConst324);
		fConst326 = (2 * (0.9351401670315425f - fConst324));
		for (int i=0; i<2; i++) fRec76[i] = 0;
		fConst327 = (2 * (0.9351401670315425f - fConst29));
		fConst328 = (0.9351401670315425f + ((fConst31 - 0.157482159302087f) / fConst27));
		fConst329 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst31) / fConst27)));
		fConst330 = (2 * (1.450071084655647f - fConst29));
		fConst331 = (1.450071084655647f + ((fConst31 - 0.7431304601070396f) / fConst27));
		fConst332 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst31) / fConst27)));
		fConst333 = (2 * (4.076781969643807f - fConst29));
		fConst334 = (4.076781969643807f + ((fConst31 - 3.1897274020965583f) / fConst27));
		fConst335 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst31) / fConst27)));
		for (int i=0; i<3; i++) fRec83[i] = 0;
		fConst336 = (0.0017661728399818856f / fConst28);
		fConst337 = (0.00040767818495825777f + fConst336);
		fConst338 = (2 * (0.00040767818495825777f - fConst336));
		for (int i=0; i<3; i++) fRec82[i] = 0;
		fConst339 = (11.052052171507189f / fConst28);
		fConst340 = (1.450071084655647f + fConst339);
		fConst341 = (2 * (1.450071084655647f - fConst339));
		for (int i=0; i<3; i++) fRec81[i] = 0;
		fConst342 = (50.063807016150385f / fConst28);
		fConst343 = (0.9351401670315425f + fConst342);
		fConst344 = (2 * (0.9351401670315425f - fConst342));
		for (int i=0; i<2; i++) fRec80[i] = 0;
		fConst345 = (2 * (0.9351401670315425f - fConst42));
		fConst346 = (0.9351401670315425f + ((fConst44 - 0.157482159302087f) / fConst40));
		fConst347 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst44) / fConst40)));
		fConst348 = (2 * (1.450071084655647f - fConst42));
		fConst349 = (1.450071084655647f + ((fConst44 - 0.7431304601070396f) / fConst40));
		fConst350 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst44) / fConst40)));
		fConst351 = (2 * (4.076781969643807f - fConst42));
		fConst352 = (4.076781969643807f + ((fConst44 - 3.1897274020965583f) / fConst40));
		fConst353 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst44) / fConst40)));
		for (int i=0; i<3; i++) fRec87[i] = 0;
		fConst354 = (0.0017661728399818856f / fConst41);
		fConst355 = (0.00040767818495825777f + fConst354);
		fConst356 = (2 * (0.00040767818495825777f - fConst354));
		for (int i=0; i<3; i++) fRec86[i] = 0;
		fConst357 = (11.052052171507189f / fConst41);
		fConst358 = (1.450071084655647f + fConst357);
		fConst359 = (2 * (1.450071084655647f - fConst357));
		for (int i=0; i<3; i++) fRec85[i] = 0;
		fConst360 = (50.063807016150385f / fConst41);
		fConst361 = (0.9351401670315425f + fConst360);
		fConst362 = (2 * (0.9351401670315425f - fConst360));
		for (int i=0; i<2; i++) fRec84[i] = 0;
		fConst363 = (2 * (0.9351401670315425f - fConst55));
		fConst364 = (0.9351401670315425f + ((fConst57 - 0.157482159302087f) / fConst53));
		fConst365 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst57) / fConst53)));
		fConst366 = (2 * (1.450071084655647f - fConst55));
		fConst367 = (1.450071084655647f + ((fConst57 - 0.7431304601070396f) / fConst53));
		fConst368 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst57) / fConst53)));
		fConst369 = (2 * (4.076781969643807f - fConst55));
		fConst370 = (4.076781969643807f + ((fConst57 - 3.1897274020965583f) / fConst53));
		fConst371 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst57) / fConst53)));
		for (int i=0; i<3; i++) fRec91[i] = 0;
		fConst372 = (0.0017661728399818856f / fConst54);
		fConst373 = (0.00040767818495825777f + fConst372);
		fConst374 = (2 * (0.00040767818495825777f - fConst372));
		for (int i=0; i<3; i++) fRec90[i] = 0;
		fConst375 = (11.052052171507189f / fConst54);
		fConst376 = (1.450071084655647f + fConst375);
		fConst377 = (2 * (1.450071084655647f - fConst375));
		for (int i=0; i<3; i++) fRec89[i] = 0;
		fConst378 = (50.063807016150385f / fConst54);
		fConst379 = (0.9351401670315425f + fConst378);
		fConst380 = (2 * (0.9351401670315425f - fConst378));
		for (int i=0; i<2; i++) fRec88[i] = 0;
		fConst381 = (2 * (0.9351401670315425f - fConst68));
		fConst382 = (0.9351401670315425f + ((fConst70 - 0.157482159302087f) / fConst66));
		fConst383 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst70) / fConst66)));
		fConst384 = (2 * (1.450071084655647f - fConst68));
		fConst385 = (1.450071084655647f + ((fConst70 - 0.7431304601070396f) / fConst66));
		fConst386 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst70) / fConst66)));
		fConst387 = (2 * (4.076781969643807f - fConst68));
		fConst388 = (4.076781969643807f + ((fConst70 - 3.1897274020965583f) / fConst66));
		fConst389 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst70) / fConst66)));
		for (int i=0; i<3; i++) fRec95[i] = 0;
		fConst390 = (0.0017661728399818856f / fConst67);
		fConst391 = (0.00040767818495825777f + fConst390);
		fConst392 = (2 * (0.00040767818495825777f - fConst390));
		for (int i=0; i<3; i++) fRec94[i] = 0;
		fConst393 = (11.052052171507189f / fConst67);
		fConst394 = (1.450071084655647f + fConst393);
		fConst395 = (2 * (1.450071084655647f - fConst393));
		for (int i=0; i<3; i++) fRec93[i] = 0;
		fConst396 = (50.063807016150385f / fConst67);
		fConst397 = (0.9351401670315425f + fConst396);
		fConst398 = (2 * (0.9351401670315425f - fConst396));
		for (int i=0; i<2; i++) fRec92[i] = 0;
		fConst399 = (2 * (0.9351401670315425f - fConst81));
		fConst400 = (0.9351401670315425f + ((fConst83 - 0.157482159302087f) / fConst79));
		fConst401 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst83) / fConst79)));
		fConst402 = (2 * (1.450071084655647f - fConst81));
		fConst403 = (1.450071084655647f + ((fConst83 - 0.7431304601070396f) / fConst79));
		fConst404 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst83) / fConst79)));
		fConst405 = (2 * (4.076781969643807f - fConst81));
		fConst406 = (4.076781969643807f + ((fConst83 - 3.1897274020965583f) / fConst79));
		fConst407 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst83) / fConst79)));
		for (int i=0; i<3; i++) fRec99[i] = 0;
		fConst408 = (0.0017661728399818856f / fConst80);
		fConst409 = (0.00040767818495825777f + fConst408);
		fConst410 = (2 * (0.00040767818495825777f - fConst408));
		for (int i=0; i<3; i++) fRec98[i] = 0;
		fConst411 = (11.052052171507189f / fConst80);
		fConst412 = (1.450071084655647f + fConst411);
		fConst413 = (2 * (1.450071084655647f - fConst411));
		for (int i=0; i<3; i++) fRec97[i] = 0;
		fConst414 = (50.063807016150385f / fConst80);
		fConst415 = (0.9351401670315425f + fConst414);
		fConst416 = (2 * (0.9351401670315425f - fConst414));
		for (int i=0; i<2; i++) fRec96[i] = 0;
		fConst417 = (2 * (0.9351401670315425f - fConst94));
		fConst418 = (0.9351401670315425f + ((fConst96 - 0.157482159302087f) / fConst92));
		fConst419 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst96) / fConst92)));
		fConst420 = (2 * (1.450071084655647f - fConst94));
		fConst421 = (1.450071084655647f + ((fConst96 - 0.7431304601070396f) / fConst92));
		fConst422 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst96) / fConst92)));
		fConst423 = (2 * (4.076781969643807f - fConst94));
		fConst424 = (4.076781969643807f + ((fConst96 - 3.1897274020965583f) / fConst92));
		fConst425 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst96) / fConst92)));
		for (int i=0; i<3; i++) fRec103[i] = 0;
		fConst426 = (0.0017661728399818856f / fConst93);
		fConst427 = (0.00040767818495825777f + fConst426);
		fConst428 = (2 * (0.00040767818495825777f - fConst426));
		for (int i=0; i<3; i++) fRec102[i] = 0;
		fConst429 = (11.052052171507189f / fConst93);
		fConst430 = (1.450071084655647f + fConst429);
		fConst431 = (2 * (1.450071084655647f - fConst429));
		for (int i=0; i<3; i++) fRec101[i] = 0;
		fConst432 = (50.063807016150385f / fConst93);
		fConst433 = (0.9351401670315425f + fConst432);
		fConst434 = (2 * (0.9351401670315425f - fConst432));
		for (int i=0; i<2; i++) fRec100[i] = 0;
		fConst435 = (2 * (0.9351401670315425f - fConst107));
		fConst436 = (0.9351401670315425f + ((fConst109 - 0.157482159302087f) / fConst105));
		fConst437 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst109) / fConst105)));
		fConst438 = (2 * (1.450071084655647f - fConst107));
		fConst439 = (1.450071084655647f + ((fConst109 - 0.7431304601070396f) / fConst105));
		fConst440 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst109) / fConst105)));
		fConst441 = (2 * (4.076781969643807f - fConst107));
		fConst442 = (4.076781969643807f + ((fConst109 - 3.1897274020965583f) / fConst105));
		fConst443 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst109) / fConst105)));
		for (int i=0; i<3; i++) fRec107[i] = 0;
		fConst444 = (0.0017661728399818856f / fConst106);
		fConst445 = (0.00040767818495825777f + fConst444);
		fConst446 = (2 * (0.00040767818495825777f - fConst444));
		for (int i=0; i<3; i++) fRec106[i] = 0;
		fConst447 = (11.052052171507189f / fConst106);
		fConst448 = (1.450071084655647f + fConst447);
		fConst449 = (2 * (1.450071084655647f - fConst447));
		for (int i=0; i<3; i++) fRec105[i] = 0;
		fConst450 = (50.063807016150385f / fConst106);
		fConst451 = (0.9351401670315425f + fConst450);
		fConst452 = (2 * (0.9351401670315425f - fConst450));
		for (int i=0; i<2; i++) fRec104[i] = 0;
		fConst453 = (2 * (0.9351401670315425f - fConst120));
		fConst454 = (0.9351401670315425f + ((fConst122 - 0.157482159302087f) / fConst118));
		fConst455 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst122) / fConst118)));
		fConst456 = (2 * (1.450071084655647f - fConst120));
		fConst457 = (1.450071084655647f + ((fConst122 - 0.7431304601070396f) / fConst118));
		fConst458 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst122) / fConst118)));
		fConst459 = (2 * (4.076781969643807f - fConst120));
		fConst460 = (4.076781969643807f + ((fConst122 - 3.1897274020965583f) / fConst118));
		fConst461 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst122) / fConst118)));
		for (int i=0; i<3; i++) fRec111[i] = 0;
		fConst462 = (0.0017661728399818856f / fConst119);
		fConst463 = (0.00040767818495825777f + fConst462);
		fConst464 = (2 * (0.00040767818495825777f - fConst462));
		for (int i=0; i<3; i++) fRec110[i] = 0;
		fConst465 = (11.052052171507189f / fConst119);
		fConst466 = (1.450071084655647f + fConst465);
		fConst467 = (2 * (1.450071084655647f - fConst465));
		for (int i=0; i<3; i++) fRec109[i] = 0;
		fConst468 = (50.063807016150385f / fConst119);
		fConst469 = (0.9351401670315425f + fConst468);
		fConst470 = (2 * (0.9351401670315425f - fConst468));
		for (int i=0; i<2; i++) fRec108[i] = 0;
		fConst471 = (2 * (0.9351401670315425f - fConst133));
		fConst472 = (0.9351401670315425f + ((fConst135 - 0.157482159302087f) / fConst131));
		fConst473 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst135) / fConst131)));
		fConst474 = (2 * (1.450071084655647f - fConst133));
		fConst475 = (1.450071084655647f + ((fConst135 - 0.7431304601070396f) / fConst131));
		fConst476 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst135) / fConst131)));
		fConst477 = (2 * (4.076781969643807f - fConst133));
		fConst478 = (4.076781969643807f + ((fConst135 - 3.1897274020965583f) / fConst131));
		fConst479 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst135) / fConst131)));
		for (int i=0; i<3; i++) fRec115[i] = 0;
		fConst480 = (0.0017661728399818856f / fConst132);
		fConst481 = (0.00040767818495825777f + fConst480);
		fConst482 = (2 * (0.00040767818495825777f - fConst480));
		for (int i=0; i<3; i++) fRec114[i] = 0;
		fConst483 = (11.052052171507189f / fConst132);
		fConst484 = (1.450071084655647f + fConst483);
		fConst485 = (2 * (1.450071084655647f - fConst483));
		for (int i=0; i<3; i++) fRec113[i] = 0;
		fConst486 = (50.063807016150385f / fConst132);
		fConst487 = (0.9351401670315425f + fConst486);
		fConst488 = (2 * (0.9351401670315425f - fConst486));
		for (int i=0; i<2; i++) fRec112[i] = 0;
		fConst489 = (2 * (0.9351401670315425f - fConst146));
		fConst490 = (0.9351401670315425f + ((fConst148 - 0.157482159302087f) / fConst144));
		fConst491 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst148) / fConst144)));
		fConst492 = (2 * (1.450071084655647f - fConst146));
		fConst493 = (1.450071084655647f + ((fConst148 - 0.7431304601070396f) / fConst144));
		fConst494 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst148) / fConst144)));
		fConst495 = (2 * (4.076781969643807f - fConst146));
		fConst496 = (4.076781969643807f + ((fConst148 - 3.1897274020965583f) / fConst144));
		fConst497 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst148) / fConst144)));
		for (int i=0; i<3; i++) fRec119[i] = 0;
		fConst498 = (0.0017661728399818856f / fConst145);
		fConst499 = (0.00040767818495825777f + fConst498);
		fConst500 = (2 * (0.00040767818495825777f - fConst498));
		for (int i=0; i<3; i++) fRec118[i] = 0;
		fConst501 = (11.052052171507189f / fConst145);
		fConst502 = (1.450071084655647f + fConst501);
		fConst503 = (2 * (1.450071084655647f - fConst501));
		for (int i=0; i<3; i++) fRec117[i] = 0;
		fConst504 = (50.063807016150385f / fConst145);
		fConst505 = (0.9351401670315425f + fConst504);
		fConst506 = (2 * (0.9351401670315425f - fConst504));
		for (int i=0; i<2; i++) fRec116[i] = 0;
		fConst507 = (2 * (0.9351401670315425f - fConst159));
		fConst508 = (0.9351401670315425f + ((fConst161 - 0.157482159302087f) / fConst157));
		fConst509 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst161) / fConst157)));
		fConst510 = (2 * (1.450071084655647f - fConst159));
		fConst511 = (1.450071084655647f + ((fConst161 - 0.7431304601070396f) / fConst157));
		fConst512 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst161) / fConst157)));
		fConst513 = (2 * (4.076781969643807f - fConst159));
		fConst514 = (4.076781969643807f + ((fConst161 - 3.1897274020965583f) / fConst157));
		fConst515 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst161) / fConst157)));
		for (int i=0; i<3; i++) fRec123[i] = 0;
		fConst516 = (0.0017661728399818856f / fConst158);
		fConst517 = (0.00040767818495825777f + fConst516);
		fConst518 = (2 * (0.00040767818495825777f - fConst516));
		for (int i=0; i<3; i++) fRec122[i] = 0;
		fConst519 = (11.052052171507189f / fConst158);
		fConst520 = (1.450071084655647f + fConst519);
		fConst521 = (2 * (1.450071084655647f - fConst519));
		for (int i=0; i<3; i++) fRec121[i] = 0;
		fConst522 = (50.063807016150385f / fConst158);
		fConst523 = (0.9351401670315425f + fConst522);
		fConst524 = (2 * (0.9351401670315425f - fConst522));
		for (int i=0; i<2; i++) fRec120[i] = 0;
		fConst525 = (2 * (0.9351401670315425f - fConst172));
		fConst526 = (0.9351401670315425f + ((fConst174 - 0.157482159302087f) / fConst170));
		fConst527 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst174) / fConst170)));
		fConst528 = (2 * (1.450071084655647f - fConst172));
		fConst529 = (1.450071084655647f + ((fConst174 - 0.7431304601070396f) / fConst170));
		fConst530 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst174) / fConst170)));
		fConst531 = (2 * (4.076781969643807f - fConst172));
		fConst532 = (4.076781969643807f + ((fConst174 - 3.1897274020965583f) / fConst170));
		fConst533 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst174) / fConst170)));
		for (int i=0; i<3; i++) fRec127[i] = 0;
		fConst534 = (0.0017661728399818856f / fConst171);
		fConst535 = (0.00040767818495825777f + fConst534);
		fConst536 = (2 * (0.00040767818495825777f - fConst534));
		for (int i=0; i<3; i++) fRec126[i] = 0;
		fConst537 = (11.052052171507189f / fConst171);
		fConst538 = (1.450071084655647f + fConst537);
		fConst539 = (2 * (1.450071084655647f - fConst537));
		for (int i=0; i<3; i++) fRec125[i] = 0;
		fConst540 = (50.063807016150385f / fConst171);
		fConst541 = (0.9351401670315425f + fConst540);
		fConst542 = (2 * (0.9351401670315425f - fConst540));
		for (int i=0; i<2; i++) fRec124[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void buildUserInterface(UI* interface) {
		interface->openVerticalBox("0x00");
		interface->declare(0, "1", "");
		interface->openVerticalBox("0x00");
		interface->declare(0, "0", "");
		interface->declare(0, "tooltip", "See Faust's oscillator.lib for documentation and references");
		interface->openVerticalBox("VIRTUAL ANALOG OSCILLATORS");
		interface->declare(0, "0", "");
		interface->openHorizontalBox("Signal Levels");
		interface->declare(&fslider11, "0", "");
		interface->declare(&fslider11, "style", "vslider");
		interface->addVerticalSlider("Sawtooth", &fslider11, 1.0f, 0.0f, 1.0f, 0.01f);
		interface->declare(0, "1", "");
		interface->openVerticalBox("Pulse Train");
		interface->declare(&fcheckbox0, "0", "");
		interface->declare(&fcheckbox0, "tooltip", "When checked, use 3rd-order aliasing suppression (up from 2)      See if you can hear a difference with the freq high and swept");
		interface->addCheckButton("Order 3", &fcheckbox0);
		interface->declare(&fslider8, "1", "");
		interface->declare(&fslider8, "style", "vslider");
		interface->addVerticalSlider("0x00", &fslider8, 0.0f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fslider6, "2", "");
		interface->declare(&fslider6, "style", "knob");
		interface->addVerticalSlider("Duty Cycle", &fslider6, 0.5f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->declare(&fslider10, "2", "");
		interface->declare(&fslider10, "style", "vslider");
		interface->addVerticalSlider("Square", &fslider10, 0.0f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fslider9, "3", "");
		interface->declare(&fslider9, "style", "vslider");
		interface->addVerticalSlider("Triangle", &fslider9, 0.0f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fslider2, "4", "");
		interface->declare(&fslider2, "style", "vslider");
		interface->declare(&fslider2, "tooltip", "Pink Noise (or 1/f noise) is Constant-Q Noise, meaning that it has the same total power in every octave (uses only amplitude controls)");
		interface->addVerticalSlider("Pink Noise", &fslider2, 0.0f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fslider13, "5", "");
		interface->declare(&fslider13, "style", "vslider");
		interface->addVerticalSlider("Ext Input", &fslider13, 0.0f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->declare(0, "1", "");
		interface->openHorizontalBox("Signal Parameters");
		interface->declare(0, "0", "");
		interface->openVerticalBox("0x00");
		interface->declare(&fslider12, "1", "");
		interface->declare(&fslider12, "style", "hslider");
		interface->declare(&fslider12, "tooltip", "Sawtooth waveform amplitude");
		interface->declare(&fslider12, "unit", "dB");
		interface->addHorizontalSlider("Mix Amplitude", &fslider12, -2e+01f, -1.2e+02f, 1e+01f, 0.1f);
		interface->declare(&fslider4, "2", "");
		interface->declare(&fslider4, "style", "hslider");
		interface->declare(&fslider4, "tooltip", "Sawtooth frequency as a Piano Key (PK) number (A440 = key 49)");
		interface->declare(&fslider4, "unit", "PK");
		interface->addHorizontalSlider("Frequency", &fslider4, 49.0f, 1.0f, 88.0f, 0.01f);
		interface->closeBox();
		interface->declare(&fslider7, "3", "");
		interface->declare(&fslider7, "style", "knob");
		interface->declare(&fslider7, "tooltip", "Percentange frequency-shift up or down for second oscillator");
		interface->declare(&fslider7, "unit", "%%");
		interface->addVerticalSlider("Detuning 1", &fslider7, -0.1f, -1e+01f, 1e+01f, 0.01f);
		interface->declare(&fslider5, "4", "");
		interface->declare(&fslider5, "style", "knob");
		interface->declare(&fslider5, "tooltip", "Percentange frequency-shift up or down for third detuned oscillator");
		interface->declare(&fslider5, "unit", "%%");
		interface->addVerticalSlider("Detuning 2", &fslider5, 0.1f, -1e+01f, 1e+01f, 0.01f);
		interface->declare(&fslider3, "5", "");
		interface->declare(&fslider3, "scale", "log");
		interface->declare(&fslider3, "style", "knob");
		interface->declare(&fslider3, "tooltip", "Portamento (frequency-glide) time-constant in seconds");
		interface->declare(&fslider3, "unit", "sec");
		interface->addVerticalSlider("Portamento", &fslider3, 0.1f, 0.001f, 1e+01f, 0.001f);
		interface->closeBox();
		interface->closeBox();
		interface->closeBox();
		interface->declare(0, "2", "");
		interface->openVerticalBox("0x00");
		interface->declare(0, "tooltip", "See Faust's effect.lib for info and references");
		interface->openHorizontalBox("MOOG VCF (Voltage Controlled Filter)");
		interface->declare(0, "0", "");
		interface->openVerticalBox("0x00");
		interface->declare(0, "0", "");
		interface->openHorizontalBox("0x00");
		interface->declare(&fcheckbox1, "0", "");
		interface->declare(&fcheckbox1, "tooltip", "When this is checked, the Moog VCF has no effect");
		interface->addCheckButton("Bypass", &fcheckbox1);
		interface->declare(&fcheckbox3, "1", "");
		interface->declare(&fcheckbox3, "tooltip", "Select moog_vcf_2b (two-biquad) implementation, instead of the default moog_vcf (analog style) implementation");
		interface->addCheckButton("Use Biquads", &fcheckbox3);
		interface->declare(&fcheckbox2, "2", "");
		interface->declare(&fcheckbox2, "tooltip", "If using biquads, make them normalized ladders (moog_vcf_2bn)");
		interface->addCheckButton("Normalized Ladders", &fcheckbox2);
		interface->closeBox();
		interface->declare(&fslider14, "1", "");
		interface->declare(&fslider14, "tooltip", "output level in decibels");
		interface->declare(&fslider14, "unit", "dB");
		interface->addHorizontalSlider("VCF Output Level", &fslider14, 5.0f, -6e+01f, 2e+01f, 0.1f);
		interface->closeBox();
		interface->declare(&fslider0, "1", "");
		interface->declare(&fslider0, "style", "knob");
		interface->declare(&fslider0, "tooltip", "The VCF resonates at the corner frequency (specified in PianoKey (PK) units, with A440 = 49 PK).  The VCF response is flat below the corner frequency, and rolls off -24 dB per octave above.");
		interface->declare(&fslider0, "unit", "PK");
		interface->addHorizontalSlider("Corner Frequency", &fslider0, 25.0f, 1.0f, 88.0f, 0.01f);
		interface->declare(&fslider1, "2", "");
		interface->declare(&fslider1, "style", "knob");
		interface->declare(&fslider1, "tooltip", "Amount of resonance near VCF corner frequency (specified between 0 and 1)");
		interface->addHorizontalSlider("Corner Resonance", &fslider1, 0.9f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->closeBox();
		interface->declare(0, "3", "");
		interface->openVerticalBox("0x00");
		interface->declare(0, "0", "");
		interface->declare(0, "tooltip", "See Faust's filter.lib for documentation and references");
		interface->openHorizontalBox("CONSTANT-Q SPECTRUM ANALYZER (6E), 15 bands spanning LP, 9 octaves below 16000 Hz, HP");
		interface->declare(&fbargraph0, "0", "");
		interface->declare(&fbargraph0, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph0, "unit", "dB");
		interface->addVerticalBargraph("0x6312570", &fbargraph0, -5e+01f, 1e+01f);
		interface->declare(&fbargraph1, "1", "");
		interface->declare(&fbargraph1, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph1, "unit", "dB");
		interface->addVerticalBargraph("0x631c4c0", &fbargraph1, -5e+01f, 1e+01f);
		interface->declare(&fbargraph2, "2", "");
		interface->declare(&fbargraph2, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph2, "unit", "dB");
		interface->addVerticalBargraph("0x6325590", &fbargraph2, -5e+01f, 1e+01f);
		interface->declare(&fbargraph3, "3", "");
		interface->declare(&fbargraph3, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph3, "unit", "dB");
		interface->addVerticalBargraph("0x632e420", &fbargraph3, -5e+01f, 1e+01f);
		interface->declare(&fbargraph4, "4", "");
		interface->declare(&fbargraph4, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph4, "unit", "dB");
		interface->addVerticalBargraph("0x6337710", &fbargraph4, -5e+01f, 1e+01f);
		interface->declare(&fbargraph5, "5", "");
		interface->declare(&fbargraph5, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph5, "unit", "dB");
		interface->addVerticalBargraph("0x6340ce0", &fbargraph5, -5e+01f, 1e+01f);
		interface->declare(&fbargraph6, "6", "");
		interface->declare(&fbargraph6, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph6, "unit", "dB");
		interface->addVerticalBargraph("0x6349f30", &fbargraph6, -5e+01f, 1e+01f);
		interface->declare(&fbargraph7, "7", "");
		interface->declare(&fbargraph7, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph7, "unit", "dB");
		interface->addVerticalBargraph("0x63531c0", &fbargraph7, -5e+01f, 1e+01f);
		interface->declare(&fbargraph8, "8", "");
		interface->declare(&fbargraph8, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph8, "unit", "dB");
		interface->addVerticalBargraph("0x635ca70", &fbargraph8, -5e+01f, 1e+01f);
		interface->declare(&fbargraph9, "9", "");
		interface->declare(&fbargraph9, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph9, "unit", "dB");
		interface->addVerticalBargraph("0x63660f0", &fbargraph9, -5e+01f, 1e+01f);
		interface->declare(&fbargraph10, "10", "");
		interface->declare(&fbargraph10, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph10, "unit", "dB");
		interface->addVerticalBargraph("0x636f5b0", &fbargraph10, -5e+01f, 1e+01f);
		interface->declare(&fbargraph11, "11", "");
		interface->declare(&fbargraph11, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph11, "unit", "dB");
		interface->addVerticalBargraph("0x6378e40", &fbargraph11, -5e+01f, 1e+01f);
		interface->declare(&fbargraph12, "12", "");
		interface->declare(&fbargraph12, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph12, "unit", "dB");
		interface->addVerticalBargraph("0x6382900", &fbargraph12, -5e+01f, 1e+01f);
		interface->declare(&fbargraph13, "13", "");
		interface->declare(&fbargraph13, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph13, "unit", "dB");
		interface->addVerticalBargraph("0x638bf40", &fbargraph13, -5e+01f, 1e+01f);
		interface->declare(&fbargraph14, "14", "");
		interface->declare(&fbargraph14, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph14, "unit", "dB");
		interface->addVerticalBargraph("0x6395990", &fbargraph14, -5e+01f, 1e+01f);
		interface->closeBox();
		interface->declare(0, "1", "");
		interface->openHorizontalBox("SPECTRUM ANALYZER CONTROLS");
		interface->declare(&fslider15, "0", "");
		interface->declare(&fslider15, "scale", "log");
		interface->declare(&fslider15, "tooltip", "band-level averaging time in milliseconds");
		interface->declare(&fslider15, "unit", "ms");
		interface->addHorizontalSlider("Level Averaging Time", &fslider15, 1e+02f, 1.0f, 1e+04f, 1.0f);
		interface->declare(&fslider16, "1", "");
		interface->declare(&fslider16, "tooltip", "Level offset in decibels");
		interface->declare(&fslider16, "unit", "dB");
		interface->addHorizontalSlider("Level dB Offset", &fslider16, 5e+01f, 0.0f, 1e+02f, 1.0f);
		interface->closeBox();
		interface->closeBox();
		interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0 = (0.4400000000000004f * powf(2.0f,(0.08333333333333333f * (float(fslider0) - 49.0f))));
		float 	fSlow1 = float(fslider1);
		float 	fSlow2 = (0 - (4.0f * max((float)0, min(faustpower<4>(fSlow1), 0.999999f))));
		float 	fSlow3 = float(fslider2);
		float 	fSlow4 = expf((0 - (fConst184 / float(fslider3))));
		float 	fSlow5 = (4.4e+02f * (powf(2.0f,(0.08333333333333333f * (float(fslider4) - 49.0f))) * (1.0f - fSlow4)));
		float 	fSlow6 = (1 + (0.01f * float(fslider5)));
		float 	fSlow7 = (0.010000000000000009f * float(fslider6));
		float 	fSlow8 = (1 - (0.01f * float(fslider7)));
		float 	fSlow9 = float(fcheckbox0);
		float 	fSlow10 = (1 - fSlow9);
		float 	fSlow11 = (fConst185 * fSlow9);
		float 	fSlow12 = (fConst187 * float(fslider8));
		float 	fSlow13 = (fConst189 * float(fslider9));
		float 	fSlow14 = (fConst185 * float(fslider10));
		float 	fSlow15 = (fConst185 / fSlow6);
		float 	fSlow16 = (fConst190 * fSlow6);
		float 	fSlow17 = (1.0f / fSlow6);
		float 	fSlow18 = (fConst185 / fSlow8);
		float 	fSlow19 = (fConst190 * fSlow8);
		float 	fSlow20 = (1.0f / fSlow8);
		float 	fSlow21 = (iConst0 * float(fslider11));
		float 	fSlow22 = (0.0010000000000000009f * powf(10,(0.05f * float(fslider12))));
		float 	fSlow23 = float(fslider13);
		int 	iSlow24 = int(float(fcheckbox1));
		float 	fSlow25 = min(1.412799348810722f, (1.4142135623730951f * fSlow1));
		float 	fSlow26 = (1.4142135623730951f * fSlow25);
		float 	fSlow27 = (2 - fSlow26);
		float 	fSlow28 = (1 + (fSlow25 * (fSlow25 - 1.4142135623730951f)));
		float 	fSlow29 = (2 + fSlow26);
		float 	fSlow30 = (1 + (fSlow25 * (1.4142135623730951f + fSlow25)));
		float 	fSlow31 = (1.9980000000000002f * fSlow1);
		float 	fSlow32 = (2 - fSlow31);
		float 	fSlow33 = faustpower<2>((1.412799348810722f * fSlow1));
		float 	fSlow34 = ((1 + fSlow33) - fSlow31);
		float 	fSlow35 = (2 + fSlow31);
		float 	fSlow36 = (1 + (fSlow31 + fSlow33));
		int 	iSlow37 = int(float(fcheckbox2));
		int 	iSlow38 = int(float(fcheckbox3));
		float 	fSlow39 = (0.0010000000000000009f * powf(10,(0.05f * float(fslider14))));
		float 	fSlow40 = expf((0 - (fConst290 / float(fslider15))));
		float 	fSlow41 = (1.0f - fSlow40);
		float 	fSlow42 = float(fslider16);
		FAUSTFLOAT* input0 = input[0];
		FAUSTFLOAT* output0 = output[0];
		FAUSTFLOAT* output1 = output[1];
		for (int i=0; i<count; i++) {
			iVec0[0] = 1;
			fRec44[0] = ((0.999f * fRec44[1]) + fSlow0);
			float fTemp0 = (fConst183 * fRec44[0]);
			float fTemp1 = (1.0f - fTemp0);
			iRec50[0] = (12345 + (1103515245 * iRec50[1]));
			fRec49[0] = (((0.5221894f * fRec49[3]) + ((4.656612875245797e-10f * iRec50[0]) + (2.494956002f * fRec49[1]))) - (2.017265875f * fRec49[2]));
			fRec51[0] = ((fSlow4 * fRec51[1]) + fSlow5);
			float fTemp2 = max((fSlow6 * fRec51[0]), 23.44894968246214f);
			float fTemp3 = float(fTemp2);
			fRec52[0] = fmodf((fRec52[1] + (fConst186 * fTemp3)),1);
			float fTemp4 = (2 * fRec52[0]);
			float fTemp5 = (fTemp4 - 1);
			float fTemp6 = faustpower<2>(fTemp5);
			fVec1[0] = fTemp6;
			float fTemp7 = ((iVec0[1] * (fVec1[0] - fVec1[1])) / fTemp3);
			fVec2[IOTA&4095] = fTemp7;
			fRec53[0] = ((0.99f * fRec53[1]) + fSlow7);
			float fTemp8 = max((float)0, min((float)2047, (fConst185 * (fRec53[0] / fTemp2))));
			int iTemp9 = int(fTemp8);
			int iTemp10 = (1 + iTemp9);
			int iTemp11 = int(iTemp10);
			float fTemp12 = (fTemp8 - iTemp9);
			fVec3[0] = 0.25f;
			float fTemp13 = (iTemp10 - fTemp8);
			float fTemp14 = (0.25f * fVec2[IOTA&4095]);
			float fTemp15 = max((fSlow8 * fRec51[0]), 23.44894968246214f);
			float fTemp16 = float(fTemp15);
			fRec54[0] = fmodf((fRec54[1] + (fConst186 * fTemp16)),1);
			float fTemp17 = (2 * fRec54[0]);
			float fTemp18 = (fTemp17 - 1);
			float fTemp19 = faustpower<2>(fTemp18);
			fVec4[0] = fTemp19;
			float fTemp20 = ((iVec0[1] * (fVec4[0] - fVec4[1])) / fTemp16);
			fVec5[IOTA&4095] = fTemp20;
			float fTemp21 = max((float)0, min((float)2047, (fConst185 * (fRec53[0] / fTemp15))));
			int iTemp22 = int(fTemp21);
			int iTemp23 = (1 + iTemp22);
			int iTemp24 = int(iTemp23);
			float fTemp25 = (fTemp21 - iTemp22);
			float fTemp26 = (iTemp23 - fTemp21);
			float fTemp27 = (0.25f * fVec5[IOTA&4095]);
			float fTemp28 = max(fRec51[0], 23.44894968246214f);
			float fTemp29 = float(fTemp28);
			fRec55[0] = fmodf((fRec55[1] + (fConst186 * fTemp29)),1);
			float fTemp30 = (2 * fRec55[0]);
			float fTemp31 = (fTemp30 - 1);
			float fTemp32 = faustpower<2>(fTemp31);
			fVec6[0] = fTemp32;
			float fTemp33 = ((iVec0[1] * (fVec6[0] - fVec6[1])) / fTemp29);
			fVec7[IOTA&4095] = fTemp33;
			float fTemp34 = max((float)0, min((float)2047, (fConst185 * (fRec53[0] / fTemp28))));
			int iTemp35 = int(fTemp34);
			int iTemp36 = (1 + iTemp35);
			int iTemp37 = int(iTemp36);
			float fTemp38 = (fTemp34 - iTemp35);
			float fTemp39 = (iTemp36 - fTemp34);
			float fTemp40 = (0.25f * fVec7[IOTA&4095]);
			float fTemp41 = (1 + faustpower<3>(fTemp5));
			fVec8[0] = (fTemp41 - fTemp4);
			float fTemp42 = ((fTemp41 - (fTemp4 + fVec8[1])) / fTemp3);
			fVec9[0] = fTemp42;
			float fTemp43 = ((iVec0[2] * ((0.5f * fVec9[0]) - (0.5f * fVec9[1]))) / fTemp3);
			fVec10[IOTA&4095] = fTemp43;
			float fTemp44 = (1 + faustpower<3>(fTemp18));
			fVec11[0] = (fTemp44 - fTemp17);
			float fTemp45 = ((fTemp44 - (fTemp17 + fVec11[1])) / fTemp16);
			fVec12[0] = fTemp45;
			float fTemp46 = ((iVec0[2] * ((0.5f * fVec12[0]) - (0.5f * fVec12[1]))) / fTemp16);
			fVec13[IOTA&4095] = fTemp46;
			float fTemp47 = (1 + faustpower<3>(fTemp31));
			fVec14[0] = (fTemp47 - fTemp30);
			float fTemp48 = ((fTemp47 - (fTemp30 + fVec14[1])) / fTemp29);
			fVec15[0] = fTemp48;
			float fTemp49 = ((iVec0[2] * ((0.5f * fVec15[0]) - (0.5f * fVec15[1]))) / fTemp29);
			fVec16[IOTA&4095] = fTemp49;
			float fTemp50 = max((float)0, min((float)2047, (fConst188 / fTemp2)));
			int iTemp51 = int(fTemp50);
			int iTemp52 = (1 + iTemp51);
			float fTemp53 = ((fTemp14 - (0.25f * (fVec2[(IOTA-iTemp51)&4095] * (iTemp52 - fTemp50)))) - (0.25f * ((fTemp50 - iTemp51) * fVec2[(IOTA-int(iTemp52))&4095])));
			fRec56[0] = ((fConst185 * fTemp53) + (0.999f * fRec56[1]));
			float fTemp54 = max((float)0, min((float)2047, (fConst188 / fTemp15)));
			int iTemp55 = int(fTemp54);
			int iTemp56 = (1 + iTemp55);
			float fTemp57 = ((fTemp27 - (0.25f * (fVec5[(IOTA-iTemp55)&4095] * (iTemp56 - fTemp54)))) - (0.25f * ((fTemp54 - iTemp55) * fVec5[(IOTA-int(iTemp56))&4095])));
			fRec57[0] = ((fConst185 * fTemp57) + (0.999f * fRec57[1]));
			float fTemp58 = max((float)0, min((float)2047, (fConst188 / fTemp28)));
			int iTemp59 = int(fTemp58);
			int iTemp60 = (1 + iTemp59);
			float fTemp61 = ((fTemp40 - (0.25f * (fVec7[(IOTA-iTemp59)&4095] * (iTemp60 - fTemp58)))) - (0.25f * ((fTemp58 - iTemp59) * fVec7[(IOTA-int(iTemp60))&4095])));
			fRec58[0] = ((fConst185 * fTemp61) + (0.999f * fRec58[1]));
			fRec59[0] = fmodf((1.0f + fRec59[1]),(fSlow15 / fRec51[0]));
			float fTemp62 = faustpower<2>(((fSlow16 * (fRec51[0] * fRec59[0])) - 1.0f));
			fVec17[0] = fTemp62;
			fRec60[0] = fmodf((1.0f + fRec60[1]),(fSlow18 / fRec51[0]));
			float fTemp63 = faustpower<2>(((fSlow19 * (fRec51[0] * fRec60[0])) - 1.0f));
			fVec18[0] = fTemp63;
			fRec61[0] = fmodf((1.0f + fRec61[1]),(fConst185 / fRec51[0]));
			float fTemp64 = faustpower<2>(((fConst190 * (fRec51[0] * fRec61[0])) - 1.0f));
			fVec19[0] = fTemp64;
			fRec62[0] = ((0.999f * fRec62[1]) + fSlow22);
			float fTemp65 = ((fSlow23 * (float)input0[i]) + (fRec62[0] * ((((0.3333333333333333f * ((fSlow21 * ((fVec3[1] * (((fVec19[0] - fVec19[1]) + (fSlow20 * (fVec18[0] - fVec18[1]))) + (fSlow17 * (fVec17[0] - fVec17[1])))) / fRec51[0])) + (fSlow14 * ((fTemp61 + fTemp57) + fTemp53)))) + (fSlow13 * (fRec51[0] * ((fRec58[0] + (fSlow8 * fRec57[0])) + (fSlow6 * fRec56[0]))))) + (fSlow12 * ((fSlow11 * (((((0.08333333333333333f * fVec16[IOTA&4095]) - (0.08333333333333333f * (fVec16[(IOTA-iTemp35)&4095] * fTemp39))) - (0.08333333333333333f * (fTemp38 * fVec16[(IOTA-iTemp37)&4095]))) + (((0.08333333333333333f * fVec13[IOTA&4095]) - (0.08333333333333333f * (fVec13[(IOTA-iTemp22)&4095] * fTemp26))) - (0.08333333333333333f * (fTemp25 * fVec13[(IOTA-iTemp24)&4095])))) + (((0.08333333333333333f * fVec10[IOTA&4095]) - (0.08333333333333333f * (fVec10[(IOTA-iTemp9)&4095] * fTemp13))) - (0.08333333333333333f * (fTemp12 * fVec10[(IOTA-iTemp11)&4095]))))) + (fSlow10 * ((((fTemp40 - (0.25f * (fTemp39 * fVec7[(IOTA-iTemp35)&4095]))) - (0.25f * (fTemp38 * fVec7[(IOTA-iTemp37)&4095]))) + ((fTemp27 - (0.25f * (fTemp26 * fVec5[(IOTA-iTemp22)&4095]))) - (0.25f * (fTemp25 * fVec5[(IOTA-iTemp24)&4095])))) + ((fTemp14 - (0.25f * (fTemp13 * fVec2[(IOTA-iTemp9)&4095]))) - (0.25f * (fTemp12 * fVec2[(IOTA-iTemp11)&4095])))))))) + (fSlow3 * (((0.049922035f * fRec49[0]) + (0.050612699f * fRec49[2])) - ((0.095993537f * fRec49[1]) + (0.004408786f * fRec49[3])))))));
			float fTemp66 = ((iSlow24)?0:fTemp65);
			fRec48[0] = (fTemp66 + ((fTemp1 * fRec48[1]) + (fSlow2 * fRec43[1])));
			fRec47[0] = (fRec48[0] + (fTemp1 * fRec47[1]));
			fRec46[0] = (fRec47[0] + (fTemp1 * fRec46[1]));
			fRec45[0] = (fRec46[0] + (fRec45[1] * fTemp1));
			fRec43[0] = (fRec45[0] * powf(fTemp0,4.0f));
			float fTemp67 = tanf((fConst191 * max((float)20, min((float)10000, fRec44[0]))));
			float fTemp68 = (1.0f / fTemp67);
			float fTemp69 = (fSlow28 + ((fTemp68 + fSlow27) / fTemp67));
			float fTemp70 = (1.0f / faustpower<2>(fTemp67));
			float fTemp71 = (fSlow30 + ((fTemp68 + fSlow29) / fTemp67));
			fRec64[0] = (fTemp66 - (((fRec64[2] * (fSlow30 + ((fTemp68 - fSlow29) / fTemp67))) + (2 * (fRec64[1] * (fSlow30 - fTemp70)))) / fTemp71));
			fRec63[0] = (((fRec64[2] + (fRec64[0] + (2.0f * fRec64[1]))) / fTemp71) - (((fRec63[2] * (fSlow28 + ((fTemp68 - fSlow27) / fTemp67))) + (2 * (fRec63[1] * (fSlow28 - fTemp70)))) / fTemp69));
			float fTemp72 = tanf((fConst191 * max(fRec44[0], (float)20)));
			float fTemp73 = (1.0f / fTemp72);
			float fTemp74 = (fSlow34 + ((fTemp73 + fSlow32) / fTemp72));
			float fTemp75 = ((fSlow34 + ((fTemp73 - fSlow32) / fTemp72)) / fTemp74);
			float fTemp76 = (1.0f / faustpower<2>(fTemp72));
			float fTemp77 = (fSlow34 - fTemp76);
			float fTemp78 = max(-0.9999f, min(0.9999f, (2 * (fTemp77 / (fTemp74 * (1 + fTemp75))))));
			float fTemp79 = (1 - faustpower<2>(fTemp78));
			float fTemp80 = max(-0.9999f, min(0.9999f, fTemp75));
			float fTemp81 = (1 - faustpower<2>(fTemp80));
			float fTemp82 = sqrtf(fTemp81);
			float fTemp83 = (2.0f - (2.0f * (fTemp77 / fTemp74)));
			float fTemp84 = sqrtf(max((float)0, fTemp79));
			float fTemp85 = (fSlow36 + ((fSlow35 + fTemp73) / fTemp72));
			float fTemp86 = sqrtf(max((float)0, fTemp81));
			float fTemp87 = ((fSlow36 + ((fTemp73 - fSlow35) / fTemp72)) / fTemp85);
			float fTemp88 = (fSlow36 - fTemp76);
			float fTemp89 = max(-0.9999f, min(0.9999f, (2 * (fTemp88 / (fTemp85 * (1 + fTemp87))))));
			float fTemp90 = (1 - faustpower<2>(fTemp89));
			float fTemp91 = max(-0.9999f, min(0.9999f, fTemp87));
			float fTemp92 = (1 - faustpower<2>(fTemp91));
			float fTemp93 = sqrtf(fTemp92);
			float fTemp94 = (2.0f - (2.0f * (fTemp88 / fTemp85)));
			float fTemp95 = sqrtf(max((float)0, fTemp90));
			float fTemp96 = sqrtf(max((float)0, fTemp92));
			float fTemp97 = ((fRec68[1] * (0 - fTemp91)) + (fTemp66 * fTemp96));
			fRec70[0] = ((fRec70[1] * (0 - fTemp89)) + (fTemp97 * fTemp95));
			fRec68[0] = ((fTemp97 * fTemp89) + (fRec70[1] * fTemp95));
			float 	fRec69 = fRec70[0];
			float fTemp98 = ((((fTemp66 * fTemp91) + (fRec68[1] * fTemp96)) + ((fRec68[0] * fTemp94) / fTemp93)) + ((fRec69 * ((1.0f - fTemp87) - (fTemp89 * fTemp94))) / (fTemp93 * sqrtf(fTemp90))));
			float fTemp99 = ((fRec65[1] * (0 - fTemp80)) + ((fTemp98 * fTemp86) / fTemp85));
			fRec67[0] = ((fRec67[1] * (0 - fTemp78)) + (fTemp99 * fTemp84));
			fRec65[0] = ((fTemp99 * fTemp78) + (fRec67[1] * fTemp84));
			float 	fRec66 = fRec67[0];
			fRec71[0] = ((0.999f * fRec71[1]) + fSlow39);
			float fTemp100 = ((iSlow24)?fTemp65:(fRec71[0] * ((iSlow38)?((iSlow37)?((((((fTemp98 * fTemp80) / fTemp85) + (fRec65[1] * fTemp86)) + ((fRec65[0] * fTemp83) / fTemp82)) + ((fRec66 * ((1.0f - fTemp75) - (fTemp78 * fTemp83))) / (fTemp82 * sqrtf(fTemp79)))) / fTemp74):((fRec63[2] + (fRec63[0] + (2.0f * fRec63[1]))) / fTemp69)):fRec43[0])));
			fRec42[0] = (fTemp100 - (fConst182 * ((fConst181 * fRec42[2]) + (fConst180 * fRec42[1]))));
			fRec41[0] = ((fConst182 * (((fConst193 * fRec42[0]) + (fConst194 * fRec42[1])) + (fConst193 * fRec42[2]))) - (fConst179 * ((fConst178 * fRec41[2]) + (fConst177 * fRec41[1]))));
			fRec40[0] = ((fConst179 * (((fConst195 * fRec41[0]) + (fConst196 * fRec41[1])) + (fConst195 * fRec41[2]))) - (fConst176 * ((fConst175 * fRec40[2]) + (fConst173 * fRec40[1]))));
			float fTemp101 = (fConst176 * (((fConst197 * fRec40[0]) + (fConst198 * fRec40[1])) + (fConst197 * fRec40[2])));
			fRec39[0] = (fTemp101 - (fConst169 * ((fConst168 * fRec39[2]) + (fConst167 * fRec39[1]))));
			fRec38[0] = ((fConst169 * (((fConst200 * fRec39[0]) + (fConst201 * fRec39[1])) + (fConst200 * fRec39[2]))) - (fConst166 * ((fConst165 * fRec38[2]) + (fConst164 * fRec38[1]))));
			fRec37[0] = ((fConst166 * (((fConst202 * fRec38[0]) + (fConst203 * fRec38[1])) + (fConst202 * fRec38[2]))) - (fConst163 * ((fConst162 * fRec37[2]) + (fConst160 * fRec37[1]))));
			float fTemp102 = (fConst163 * (((fConst204 * fRec37[0]) + (fConst205 * fRec37[1])) + (fConst204 * fRec37[2])));
			fRec36[0] = (fTemp102 - (fConst156 * ((fConst155 * fRec36[2]) + (fConst154 * fRec36[1]))));
			fRec35[0] = ((fConst156 * (((fConst207 * fRec36[0]) + (fConst208 * fRec36[1])) + (fConst207 * fRec36[2]))) - (fConst153 * ((fConst152 * fRec35[2]) + (fConst151 * fRec35[1]))));
			fRec34[0] = ((fConst153 * (((fConst209 * fRec35[0]) + (fConst210 * fRec35[1])) + (fConst209 * fRec35[2]))) - (fConst150 * ((fConst149 * fRec34[2]) + (fConst147 * fRec34[1]))));
			float fTemp103 = (fConst150 * (((fConst211 * fRec34[0]) + (fConst212 * fRec34[1])) + (fConst211 * fRec34[2])));
			fRec33[0] = (fTemp103 - (fConst143 * ((fConst142 * fRec33[2]) + (fConst141 * fRec33[1]))));
			fRec32[0] = ((fConst143 * (((fConst214 * fRec33[0]) + (fConst215 * fRec33[1])) + (fConst214 * fRec33[2]))) - (fConst140 * ((fConst139 * fRec32[2]) + (fConst138 * fRec32[1]))));
			fRec31[0] = ((fConst140 * (((fConst216 * fRec32[0]) + (fConst217 * fRec32[1])) + (fConst216 * fRec32[2]))) - (fConst137 * ((fConst136 * fRec31[2]) + (fConst134 * fRec31[1]))));
			float fTemp104 = (fConst137 * (((fConst218 * fRec31[0]) + (fConst219 * fRec31[1])) + (fConst218 * fRec31[2])));
			fRec30[0] = (fTemp104 - (fConst130 * ((fConst129 * fRec30[2]) + (fConst128 * fRec30[1]))));
			fRec29[0] = ((fConst130 * (((fConst221 * fRec30[0]) + (fConst222 * fRec30[1])) + (fConst221 * fRec30[2]))) - (fConst127 * ((fConst126 * fRec29[2]) + (fConst125 * fRec29[1]))));
			fRec28[0] = ((fConst127 * (((fConst223 * fRec29[0]) + (fConst224 * fRec29[1])) + (fConst223 * fRec29[2]))) - (fConst124 * ((fConst123 * fRec28[2]) + (fConst121 * fRec28[1]))));
			float fTemp105 = (fConst124 * (((fConst225 * fRec28[0]) + (fConst226 * fRec28[1])) + (fConst225 * fRec28[2])));
			fRec27[0] = (fTemp105 - (fConst117 * ((fConst116 * fRec27[2]) + (fConst115 * fRec27[1]))));
			fRec26[0] = ((fConst117 * (((fConst228 * fRec27[0]) + (fConst229 * fRec27[1])) + (fConst228 * fRec27[2]))) - (fConst114 * ((fConst113 * fRec26[2]) + (fConst112 * fRec26[1]))));
			fRec25[0] = ((fConst114 * (((fConst230 * fRec26[0]) + (fConst231 * fRec26[1])) + (fConst230 * fRec26[2]))) - (fConst111 * ((fConst110 * fRec25[2]) + (fConst108 * fRec25[1]))));
			float fTemp106 = (fConst111 * (((fConst232 * fRec25[0]) + (fConst233 * fRec25[1])) + (fConst232 * fRec25[2])));
			fRec24[0] = (fTemp106 - (fConst104 * ((fConst103 * fRec24[2]) + (fConst102 * fRec24[1]))));
			fRec23[0] = ((fConst104 * (((fConst235 * fRec24[0]) + (fConst236 * fRec24[1])) + (fConst235 * fRec24[2]))) - (fConst101 * ((fConst100 * fRec23[2]) + (fConst99 * fRec23[1]))));
			fRec22[0] = ((fConst101 * (((fConst237 * fRec23[0]) + (fConst238 * fRec23[1])) + (fConst237 * fRec23[2]))) - (fConst98 * ((fConst97 * fRec22[2]) + (fConst95 * fRec22[1]))));
			float fTemp107 = (fConst98 * (((fConst239 * fRec22[0]) + (fConst240 * fRec22[1])) + (fConst239 * fRec22[2])));
			fRec21[0] = (fTemp107 - (fConst91 * ((fConst90 * fRec21[2]) + (fConst89 * fRec21[1]))));
			fRec20[0] = ((fConst91 * (((fConst242 * fRec21[0]) + (fConst243 * fRec21[1])) + (fConst242 * fRec21[2]))) - (fConst88 * ((fConst87 * fRec20[2]) + (fConst86 * fRec20[1]))));
			fRec19[0] = ((fConst88 * (((fConst244 * fRec20[0]) + (fConst245 * fRec20[1])) + (fConst244 * fRec20[2]))) - (fConst85 * ((fConst84 * fRec19[2]) + (fConst82 * fRec19[1]))));
			float fTemp108 = (fConst85 * (((fConst246 * fRec19[0]) + (fConst247 * fRec19[1])) + (fConst246 * fRec19[2])));
			fRec18[0] = (fTemp108 - (fConst78 * ((fConst77 * fRec18[2]) + (fConst76 * fRec18[1]))));
			fRec17[0] = ((fConst78 * (((fConst249 * fRec18[0]) + (fConst250 * fRec18[1])) + (fConst249 * fRec18[2]))) - (fConst75 * ((fConst74 * fRec17[2]) + (fConst73 * fRec17[1]))));
			fRec16[0] = ((fConst75 * (((fConst251 * fRec17[0]) + (fConst252 * fRec17[1])) + (fConst251 * fRec17[2]))) - (fConst72 * ((fConst71 * fRec16[2]) + (fConst69 * fRec16[1]))));
			float fTemp109 = (fConst72 * (((fConst253 * fRec16[0]) + (fConst254 * fRec16[1])) + (fConst253 * fRec16[2])));
			fRec15[0] = (fTemp109 - (fConst65 * ((fConst64 * fRec15[2]) + (fConst63 * fRec15[1]))));
			fRec14[0] = ((fConst65 * (((fConst256 * fRec15[0]) + (fConst257 * fRec15[1])) + (fConst256 * fRec15[2]))) - (fConst62 * ((fConst61 * fRec14[2]) + (fConst60 * fRec14[1]))));
			fRec13[0] = ((fConst62 * (((fConst258 * fRec14[0]) + (fConst259 * fRec14[1])) + (fConst258 * fRec14[2]))) - (fConst59 * ((fConst58 * fRec13[2]) + (fConst56 * fRec13[1]))));
			float fTemp110 = (fConst59 * (((fConst260 * fRec13[0]) + (fConst261 * fRec13[1])) + (fConst260 * fRec13[2])));
			fRec12[0] = (fTemp110 - (fConst52 * ((fConst51 * fRec12[2]) + (fConst50 * fRec12[1]))));
			fRec11[0] = ((fConst52 * (((fConst263 * fRec12[0]) + (fConst264 * fRec12[1])) + (fConst263 * fRec12[2]))) - (fConst49 * ((fConst48 * fRec11[2]) + (fConst47 * fRec11[1]))));
			fRec10[0] = ((fConst49 * (((fConst265 * fRec11[0]) + (fConst266 * fRec11[1])) + (fConst265 * fRec11[2]))) - (fConst46 * ((fConst45 * fRec10[2]) + (fConst43 * fRec10[1]))));
			float fTemp111 = (fConst46 * (((fConst267 * fRec10[0]) + (fConst268 * fRec10[1])) + (fConst267 * fRec10[2])));
			fRec9[0] = (fTemp111 - (fConst39 * ((fConst38 * fRec9[2]) + (fConst37 * fRec9[1]))));
			fRec8[0] = ((fConst39 * (((fConst270 * fRec9[0]) + (fConst271 * fRec9[1])) + (fConst270 * fRec9[2]))) - (fConst36 * ((fConst35 * fRec8[2]) + (fConst34 * fRec8[1]))));
			fRec7[0] = ((fConst36 * (((fConst272 * fRec8[0]) + (fConst273 * fRec8[1])) + (fConst272 * fRec8[2]))) - (fConst33 * ((fConst32 * fRec7[2]) + (fConst30 * fRec7[1]))));
			float fTemp112 = (fConst33 * (((fConst274 * fRec7[0]) + (fConst275 * fRec7[1])) + (fConst274 * fRec7[2])));
			fRec6[0] = (fTemp112 - (fConst26 * ((fConst25 * fRec6[2]) + (fConst24 * fRec6[1]))));
			fRec5[0] = ((fConst26 * (((fConst277 * fRec6[0]) + (fConst278 * fRec6[1])) + (fConst277 * fRec6[2]))) - (fConst23 * ((fConst22 * fRec5[2]) + (fConst21 * fRec5[1]))));
			fRec4[0] = ((fConst23 * (((fConst279 * fRec5[0]) + (fConst280 * fRec5[1])) + (fConst279 * fRec5[2]))) - (fConst20 * ((fConst19 * fRec4[2]) + (fConst17 * fRec4[1]))));
			float fTemp113 = (fConst20 * (((fConst281 * fRec4[0]) + (fConst282 * fRec4[1])) + (fConst281 * fRec4[2])));
			fRec3[0] = (fTemp113 - (fConst13 * ((fConst12 * fRec3[2]) + (fConst11 * fRec3[1]))));
			fRec2[0] = ((fConst13 * (((fConst284 * fRec3[0]) + (fConst285 * fRec3[1])) + (fConst284 * fRec3[2]))) - (fConst10 * ((fConst9 * fRec2[2]) + (fConst8 * fRec2[1]))));
			fRec1[0] = ((fConst10 * (((fConst286 * fRec2[0]) + (fConst287 * fRec2[1])) + (fConst286 * fRec2[2]))) - (fConst7 * ((fConst6 * fRec1[2]) + (fConst4 * fRec1[1]))));
			fRec0[0] = ((fSlow40 * fRec0[1]) + (fSlow41 * fabsf((fConst7 * (((fConst288 * fRec1[0]) + (fConst289 * fRec1[1])) + (fConst288 * fRec1[2]))))));
			fbargraph0 = (fSlow42 + (20 * log10f(fRec0[0])));
			fRec75[0] = (fTemp113 - (fConst299 * ((fConst298 * fRec75[2]) + (fConst297 * fRec75[1]))));
			fRec74[0] = ((fConst299 * (((fConst301 * fRec75[0]) + (fConst302 * fRec75[1])) + (fConst301 * fRec75[2]))) - (fConst296 * ((fConst295 * fRec74[2]) + (fConst294 * fRec74[1]))));
			fRec73[0] = ((fConst296 * (((fConst304 * fRec74[0]) + (fConst305 * fRec74[1])) + (fConst304 * fRec74[2]))) - (fConst293 * ((fConst292 * fRec73[2]) + (fConst291 * fRec73[1]))));
			fRec72[0] = ((fSlow40 * fRec72[1]) + (fSlow41 * fabsf((fConst293 * (((fConst307 * fRec73[0]) + (fConst308 * fRec73[1])) + (fConst307 * fRec73[2]))))));
			fbargraph1 = (fSlow42 + (20 * log10f(fRec72[0])));
			fRec79[0] = (fTemp112 - (fConst317 * ((fConst316 * fRec79[2]) + (fConst315 * fRec79[1]))));
			fRec78[0] = ((fConst317 * (((fConst319 * fRec79[0]) + (fConst320 * fRec79[1])) + (fConst319 * fRec79[2]))) - (fConst314 * ((fConst313 * fRec78[2]) + (fConst312 * fRec78[1]))));
			fRec77[0] = ((fConst314 * (((fConst322 * fRec78[0]) + (fConst323 * fRec78[1])) + (fConst322 * fRec78[2]))) - (fConst311 * ((fConst310 * fRec77[2]) + (fConst309 * fRec77[1]))));
			fRec76[0] = ((fSlow40 * fRec76[1]) + (fSlow41 * fabsf((fConst311 * (((fConst325 * fRec77[0]) + (fConst326 * fRec77[1])) + (fConst325 * fRec77[2]))))));
			fbargraph2 = (fSlow42 + (20 * log10f(fRec76[0])));
			fRec83[0] = (fTemp111 - (fConst335 * ((fConst334 * fRec83[2]) + (fConst333 * fRec83[1]))));
			fRec82[0] = ((fConst335 * (((fConst337 * fRec83[0]) + (fConst338 * fRec83[1])) + (fConst337 * fRec83[2]))) - (fConst332 * ((fConst331 * fRec82[2]) + (fConst330 * fRec82[1]))));
			fRec81[0] = ((fConst332 * (((fConst340 * fRec82[0]) + (fConst341 * fRec82[1])) + (fConst340 * fRec82[2]))) - (fConst329 * ((fConst328 * fRec81[2]) + (fConst327 * fRec81[1]))));
			fRec80[0] = ((fSlow40 * fRec80[1]) + (fSlow41 * fabsf((fConst329 * (((fConst343 * fRec81[0]) + (fConst344 * fRec81[1])) + (fConst343 * fRec81[2]))))));
			fbargraph3 = (fSlow42 + (20 * log10f(fRec80[0])));
			fRec87[0] = (fTemp110 - (fConst353 * ((fConst352 * fRec87[2]) + (fConst351 * fRec87[1]))));
			fRec86[0] = ((fConst353 * (((fConst355 * fRec87[0]) + (fConst356 * fRec87[1])) + (fConst355 * fRec87[2]))) - (fConst350 * ((fConst349 * fRec86[2]) + (fConst348 * fRec86[1]))));
			fRec85[0] = ((fConst350 * (((fConst358 * fRec86[0]) + (fConst359 * fRec86[1])) + (fConst358 * fRec86[2]))) - (fConst347 * ((fConst346 * fRec85[2]) + (fConst345 * fRec85[1]))));
			fRec84[0] = ((fSlow40 * fRec84[1]) + (fSlow41 * fabsf((fConst347 * (((fConst361 * fRec85[0]) + (fConst362 * fRec85[1])) + (fConst361 * fRec85[2]))))));
			fbargraph4 = (fSlow42 + (20 * log10f(fRec84[0])));
			fRec91[0] = (fTemp109 - (fConst371 * ((fConst370 * fRec91[2]) + (fConst369 * fRec91[1]))));
			fRec90[0] = ((fConst371 * (((fConst373 * fRec91[0]) + (fConst374 * fRec91[1])) + (fConst373 * fRec91[2]))) - (fConst368 * ((fConst367 * fRec90[2]) + (fConst366 * fRec90[1]))));
			fRec89[0] = ((fConst368 * (((fConst376 * fRec90[0]) + (fConst377 * fRec90[1])) + (fConst376 * fRec90[2]))) - (fConst365 * ((fConst364 * fRec89[2]) + (fConst363 * fRec89[1]))));
			fRec88[0] = ((fSlow40 * fRec88[1]) + (fSlow41 * fabsf((fConst365 * (((fConst379 * fRec89[0]) + (fConst380 * fRec89[1])) + (fConst379 * fRec89[2]))))));
			fbargraph5 = (fSlow42 + (20 * log10f(fRec88[0])));
			fRec95[0] = (fTemp108 - (fConst389 * ((fConst388 * fRec95[2]) + (fConst387 * fRec95[1]))));
			fRec94[0] = ((fConst389 * (((fConst391 * fRec95[0]) + (fConst392 * fRec95[1])) + (fConst391 * fRec95[2]))) - (fConst386 * ((fConst385 * fRec94[2]) + (fConst384 * fRec94[1]))));
			fRec93[0] = ((fConst386 * (((fConst394 * fRec94[0]) + (fConst395 * fRec94[1])) + (fConst394 * fRec94[2]))) - (fConst383 * ((fConst382 * fRec93[2]) + (fConst381 * fRec93[1]))));
			fRec92[0] = ((fSlow40 * fRec92[1]) + (fSlow41 * fabsf((fConst383 * (((fConst397 * fRec93[0]) + (fConst398 * fRec93[1])) + (fConst397 * fRec93[2]))))));
			fbargraph6 = (fSlow42 + (20 * log10f(fRec92[0])));
			fRec99[0] = (fTemp107 - (fConst407 * ((fConst406 * fRec99[2]) + (fConst405 * fRec99[1]))));
			fRec98[0] = ((fConst407 * (((fConst409 * fRec99[0]) + (fConst410 * fRec99[1])) + (fConst409 * fRec99[2]))) - (fConst404 * ((fConst403 * fRec98[2]) + (fConst402 * fRec98[1]))));
			fRec97[0] = ((fConst404 * (((fConst412 * fRec98[0]) + (fConst413 * fRec98[1])) + (fConst412 * fRec98[2]))) - (fConst401 * ((fConst400 * fRec97[2]) + (fConst399 * fRec97[1]))));
			fRec96[0] = ((fSlow40 * fRec96[1]) + (fSlow41 * fabsf((fConst401 * (((fConst415 * fRec97[0]) + (fConst416 * fRec97[1])) + (fConst415 * fRec97[2]))))));
			fbargraph7 = (fSlow42 + (20 * log10f(fRec96[0])));
			fRec103[0] = (fTemp106 - (fConst425 * ((fConst424 * fRec103[2]) + (fConst423 * fRec103[1]))));
			fRec102[0] = ((fConst425 * (((fConst427 * fRec103[0]) + (fConst428 * fRec103[1])) + (fConst427 * fRec103[2]))) - (fConst422 * ((fConst421 * fRec102[2]) + (fConst420 * fRec102[1]))));
			fRec101[0] = ((fConst422 * (((fConst430 * fRec102[0]) + (fConst431 * fRec102[1])) + (fConst430 * fRec102[2]))) - (fConst419 * ((fConst418 * fRec101[2]) + (fConst417 * fRec101[1]))));
			fRec100[0] = ((fSlow40 * fRec100[1]) + (fSlow41 * fabsf((fConst419 * (((fConst433 * fRec101[0]) + (fConst434 * fRec101[1])) + (fConst433 * fRec101[2]))))));
			fbargraph8 = (fSlow42 + (20 * log10f(fRec100[0])));
			fRec107[0] = (fTemp105 - (fConst443 * ((fConst442 * fRec107[2]) + (fConst441 * fRec107[1]))));
			fRec106[0] = ((fConst443 * (((fConst445 * fRec107[0]) + (fConst446 * fRec107[1])) + (fConst445 * fRec107[2]))) - (fConst440 * ((fConst439 * fRec106[2]) + (fConst438 * fRec106[1]))));
			fRec105[0] = ((fConst440 * (((fConst448 * fRec106[0]) + (fConst449 * fRec106[1])) + (fConst448 * fRec106[2]))) - (fConst437 * ((fConst436 * fRec105[2]) + (fConst435 * fRec105[1]))));
			fRec104[0] = ((fSlow40 * fRec104[1]) + (fSlow41 * fabsf((fConst437 * (((fConst451 * fRec105[0]) + (fConst452 * fRec105[1])) + (fConst451 * fRec105[2]))))));
			fbargraph9 = (fSlow42 + (20 * log10f(fRec104[0])));
			fRec111[0] = (fTemp104 - (fConst461 * ((fConst460 * fRec111[2]) + (fConst459 * fRec111[1]))));
			fRec110[0] = ((fConst461 * (((fConst463 * fRec111[0]) + (fConst464 * fRec111[1])) + (fConst463 * fRec111[2]))) - (fConst458 * ((fConst457 * fRec110[2]) + (fConst456 * fRec110[1]))));
			fRec109[0] = ((fConst458 * (((fConst466 * fRec110[0]) + (fConst467 * fRec110[1])) + (fConst466 * fRec110[2]))) - (fConst455 * ((fConst454 * fRec109[2]) + (fConst453 * fRec109[1]))));
			fRec108[0] = ((fSlow40 * fRec108[1]) + (fSlow41 * fabsf((fConst455 * (((fConst469 * fRec109[0]) + (fConst470 * fRec109[1])) + (fConst469 * fRec109[2]))))));
			fbargraph10 = (fSlow42 + (20 * log10f(fRec108[0])));
			fRec115[0] = (fTemp103 - (fConst479 * ((fConst478 * fRec115[2]) + (fConst477 * fRec115[1]))));
			fRec114[0] = ((fConst479 * (((fConst481 * fRec115[0]) + (fConst482 * fRec115[1])) + (fConst481 * fRec115[2]))) - (fConst476 * ((fConst475 * fRec114[2]) + (fConst474 * fRec114[1]))));
			fRec113[0] = ((fConst476 * (((fConst484 * fRec114[0]) + (fConst485 * fRec114[1])) + (fConst484 * fRec114[2]))) - (fConst473 * ((fConst472 * fRec113[2]) + (fConst471 * fRec113[1]))));
			fRec112[0] = ((fSlow40 * fRec112[1]) + (fSlow41 * fabsf((fConst473 * (((fConst487 * fRec113[0]) + (fConst488 * fRec113[1])) + (fConst487 * fRec113[2]))))));
			fbargraph11 = (fSlow42 + (20 * log10f(fRec112[0])));
			fRec119[0] = (fTemp102 - (fConst497 * ((fConst496 * fRec119[2]) + (fConst495 * fRec119[1]))));
			fRec118[0] = ((fConst497 * (((fConst499 * fRec119[0]) + (fConst500 * fRec119[1])) + (fConst499 * fRec119[2]))) - (fConst494 * ((fConst493 * fRec118[2]) + (fConst492 * fRec118[1]))));
			fRec117[0] = ((fConst494 * (((fConst502 * fRec118[0]) + (fConst503 * fRec118[1])) + (fConst502 * fRec118[2]))) - (fConst491 * ((fConst490 * fRec117[2]) + (fConst489 * fRec117[1]))));
			fRec116[0] = ((fSlow40 * fRec116[1]) + (fSlow41 * fabsf((fConst491 * (((fConst505 * fRec117[0]) + (fConst506 * fRec117[1])) + (fConst505 * fRec117[2]))))));
			fbargraph12 = (fSlow42 + (20 * log10f(fRec116[0])));
			fRec123[0] = (fTemp101 - (fConst515 * ((fConst514 * fRec123[2]) + (fConst513 * fRec123[1]))));
			fRec122[0] = ((fConst515 * (((fConst517 * fRec123[0]) + (fConst518 * fRec123[1])) + (fConst517 * fRec123[2]))) - (fConst512 * ((fConst511 * fRec122[2]) + (fConst510 * fRec122[1]))));
			fRec121[0] = ((fConst512 * (((fConst520 * fRec122[0]) + (fConst521 * fRec122[1])) + (fConst520 * fRec122[2]))) - (fConst509 * ((fConst508 * fRec121[2]) + (fConst507 * fRec121[1]))));
			fRec120[0] = ((fSlow40 * fRec120[1]) + (fSlow41 * fabsf((fConst509 * (((fConst523 * fRec121[0]) + (fConst524 * fRec121[1])) + (fConst523 * fRec121[2]))))));
			fbargraph13 = (fSlow42 + (20 * log10f(fRec120[0])));
			fRec127[0] = (fTemp100 - (fConst533 * ((fConst532 * fRec127[2]) + (fConst531 * fRec127[1]))));
			fRec126[0] = ((fConst533 * (((fConst535 * fRec127[0]) + (fConst536 * fRec127[1])) + (fConst535 * fRec127[2]))) - (fConst530 * ((fConst529 * fRec126[2]) + (fConst528 * fRec126[1]))));
			fRec125[0] = ((fConst530 * (((fConst538 * fRec126[0]) + (fConst539 * fRec126[1])) + (fConst538 * fRec126[2]))) - (fConst527 * ((fConst526 * fRec125[2]) + (fConst525 * fRec125[1]))));
			fRec124[0] = ((fSlow40 * fRec124[1]) + (fSlow41 * fabsf((fConst527 * (((fConst541 * fRec125[0]) + (fConst542 * fRec125[1])) + (fConst541 * fRec125[2]))))));
			fbargraph14 = (fSlow42 + (20 * log10f(fRec124[0])));
			float fTemp114 = fTemp100;
			output0[i] = (FAUSTFLOAT)fTemp114;
			output1[i] = (FAUSTFLOAT)fTemp114;
			// post processing
			fRec124[1] = fRec124[0];
			fRec125[2] = fRec125[1]; fRec125[1] = fRec125[0];
			fRec126[2] = fRec126[1]; fRec126[1] = fRec126[0];
			fRec127[2] = fRec127[1]; fRec127[1] = fRec127[0];
			fRec120[1] = fRec120[0];
			fRec121[2] = fRec121[1]; fRec121[1] = fRec121[0];
			fRec122[2] = fRec122[1]; fRec122[1] = fRec122[0];
			fRec123[2] = fRec123[1]; fRec123[1] = fRec123[0];
			fRec116[1] = fRec116[0];
			fRec117[2] = fRec117[1]; fRec117[1] = fRec117[0];
			fRec118[2] = fRec118[1]; fRec118[1] = fRec118[0];
			fRec119[2] = fRec119[1]; fRec119[1] = fRec119[0];
			fRec112[1] = fRec112[0];
			fRec113[2] = fRec113[1]; fRec113[1] = fRec113[0];
			fRec114[2] = fRec114[1]; fRec114[1] = fRec114[0];
			fRec115[2] = fRec115[1]; fRec115[1] = fRec115[0];
			fRec108[1] = fRec108[0];
			fRec109[2] = fRec109[1]; fRec109[1] = fRec109[0];
			fRec110[2] = fRec110[1]; fRec110[1] = fRec110[0];
			fRec111[2] = fRec111[1]; fRec111[1] = fRec111[0];
			fRec104[1] = fRec104[0];
			fRec105[2] = fRec105[1]; fRec105[1] = fRec105[0];
			fRec106[2] = fRec106[1]; fRec106[1] = fRec106[0];
			fRec107[2] = fRec107[1]; fRec107[1] = fRec107[0];
			fRec100[1] = fRec100[0];
			fRec101[2] = fRec101[1]; fRec101[1] = fRec101[0];
			fRec102[2] = fRec102[1]; fRec102[1] = fRec102[0];
			fRec103[2] = fRec103[1]; fRec103[1] = fRec103[0];
			fRec96[1] = fRec96[0];
			fRec97[2] = fRec97[1]; fRec97[1] = fRec97[0];
			fRec98[2] = fRec98[1]; fRec98[1] = fRec98[0];
			fRec99[2] = fRec99[1]; fRec99[1] = fRec99[0];
			fRec92[1] = fRec92[0];
			fRec93[2] = fRec93[1]; fRec93[1] = fRec93[0];
			fRec94[2] = fRec94[1]; fRec94[1] = fRec94[0];
			fRec95[2] = fRec95[1]; fRec95[1] = fRec95[0];
			fRec88[1] = fRec88[0];
			fRec89[2] = fRec89[1]; fRec89[1] = fRec89[0];
			fRec90[2] = fRec90[1]; fRec90[1] = fRec90[0];
			fRec91[2] = fRec91[1]; fRec91[1] = fRec91[0];
			fRec84[1] = fRec84[0];
			fRec85[2] = fRec85[1]; fRec85[1] = fRec85[0];
			fRec86[2] = fRec86[1]; fRec86[1] = fRec86[0];
			fRec87[2] = fRec87[1]; fRec87[1] = fRec87[0];
			fRec80[1] = fRec80[0];
			fRec81[2] = fRec81[1]; fRec81[1] = fRec81[0];
			fRec82[2] = fRec82[1]; fRec82[1] = fRec82[0];
			fRec83[2] = fRec83[1]; fRec83[1] = fRec83[0];
			fRec76[1] = fRec76[0];
			fRec77[2] = fRec77[1]; fRec77[1] = fRec77[0];
			fRec78[2] = fRec78[1]; fRec78[1] = fRec78[0];
			fRec79[2] = fRec79[1]; fRec79[1] = fRec79[0];
			fRec72[1] = fRec72[0];
			fRec73[2] = fRec73[1]; fRec73[1] = fRec73[0];
			fRec74[2] = fRec74[1]; fRec74[1] = fRec74[0];
			fRec75[2] = fRec75[1]; fRec75[1] = fRec75[0];
			fRec0[1] = fRec0[0];
			fRec1[2] = fRec1[1]; fRec1[1] = fRec1[0];
			fRec2[2] = fRec2[1]; fRec2[1] = fRec2[0];
			fRec3[2] = fRec3[1]; fRec3[1] = fRec3[0];
			fRec4[2] = fRec4[1]; fRec4[1] = fRec4[0];
			fRec5[2] = fRec5[1]; fRec5[1] = fRec5[0];
			fRec6[2] = fRec6[1]; fRec6[1] = fRec6[0];
			fRec7[2] = fRec7[1]; fRec7[1] = fRec7[0];
			fRec8[2] = fRec8[1]; fRec8[1] = fRec8[0];
			fRec9[2] = fRec9[1]; fRec9[1] = fRec9[0];
			fRec10[2] = fRec10[1]; fRec10[1] = fRec10[0];
			fRec11[2] = fRec11[1]; fRec11[1] = fRec11[0];
			fRec12[2] = fRec12[1]; fRec12[1] = fRec12[0];
			fRec13[2] = fRec13[1]; fRec13[1] = fRec13[0];
			fRec14[2] = fRec14[1]; fRec14[1] = fRec14[0];
			fRec15[2] = fRec15[1]; fRec15[1] = fRec15[0];
			fRec16[2] = fRec16[1]; fRec16[1] = fRec16[0];
			fRec17[2] = fRec17[1]; fRec17[1] = fRec17[0];
			fRec18[2] = fRec18[1]; fRec18[1] = fRec18[0];
			fRec19[2] = fRec19[1]; fRec19[1] = fRec19[0];
			fRec20[2] = fRec20[1]; fRec20[1] = fRec20[0];
			fRec21[2] = fRec21[1]; fRec21[1] = fRec21[0];
			fRec22[2] = fRec22[1]; fRec22[1] = fRec22[0];
			fRec23[2] = fRec23[1]; fRec23[1] = fRec23[0];
			fRec24[2] = fRec24[1]; fRec24[1] = fRec24[0];
			fRec25[2] = fRec25[1]; fRec25[1] = fRec25[0];
			fRec26[2] = fRec26[1]; fRec26[1] = fRec26[0];
			fRec27[2] = fRec27[1]; fRec27[1] = fRec27[0];
			fRec28[2] = fRec28[1]; fRec28[1] = fRec28[0];
			fRec29[2] = fRec29[1]; fRec29[1] = fRec29[0];
			fRec30[2] = fRec30[1]; fRec30[1] = fRec30[0];
			fRec31[2] = fRec31[1]; fRec31[1] = fRec31[0];
			fRec32[2] = fRec32[1]; fRec32[1] = fRec32[0];
			fRec33[2] = fRec33[1]; fRec33[1] = fRec33[0];
			fRec34[2] = fRec34[1]; fRec34[1] = fRec34[0];
			fRec35[2] = fRec35[1]; fRec35[1] = fRec35[0];
			fRec36[2] = fRec36[1]; fRec36[1] = fRec36[0];
			fRec37[2] = fRec37[1]; fRec37[1] = fRec37[0];
			fRec38[2] = fRec38[1]; fRec38[1] = fRec38[0];
			fRec39[2] = fRec39[1]; fRec39[1] = fRec39[0];
			fRec40[2] = fRec40[1]; fRec40[1] = fRec40[0];
			fRec41[2] = fRec41[1]; fRec41[1] = fRec41[0];
			fRec42[2] = fRec42[1]; fRec42[1] = fRec42[0];
			fRec71[1] = fRec71[0];
			fRec65[1] = fRec65[0];
			fRec67[1] = fRec67[0];
			fRec68[1] = fRec68[0];
			fRec70[1] = fRec70[0];
			fRec63[2] = fRec63[1]; fRec63[1] = fRec63[0];
			fRec64[2] = fRec64[1]; fRec64[1] = fRec64[0];
			fRec43[1] = fRec43[0];
			fRec45[1] = fRec45[0];
			fRec46[1] = fRec46[0];
			fRec47[1] = fRec47[0];
			fRec48[1] = fRec48[0];
			fRec62[1] = fRec62[0];
			fVec19[1] = fVec19[0];
			fRec61[1] = fRec61[0];
			fVec18[1] = fVec18[0];
			fRec60[1] = fRec60[0];
			fVec17[1] = fVec17[0];
			fRec59[1] = fRec59[0];
			fRec58[1] = fRec58[0];
			fRec57[1] = fRec57[0];
			fRec56[1] = fRec56[0];
			fVec15[1] = fVec15[0];
			fVec14[1] = fVec14[0];
			fVec12[1] = fVec12[0];
			fVec11[1] = fVec11[0];
			fVec9[1] = fVec9[0];
			fVec8[1] = fVec8[0];
			fVec6[1] = fVec6[0];
			fRec55[1] = fRec55[0];
			fVec4[1] = fVec4[0];
			fRec54[1] = fRec54[0];
			fVec3[1] = fVec3[0];
			fRec53[1] = fRec53[0];
			IOTA = IOTA+1;
			fVec1[1] = fVec1[0];
			fRec52[1] = fRec52[0];
			fRec51[1] = fRec51[0];
			for (int i=3; i>0; i--) fRec49[i] = fRec49[i-1];
			iRec50[1] = iRec50[0];
			fRec44[1] = fRec44[0];
			iVec0[2] = iVec0[1]; iVec0[1] = iVec0[0];
		}
	}
};


