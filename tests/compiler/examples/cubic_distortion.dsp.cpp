//-----------------------------------------------------
// name: "cubic_distortion"
//
// Code generated with Faust 0.9.70 (http://faust.grame.fr)
//-----------------------------------------------------
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif  

typedef long double quad;
/* link with  */
#include <math.h>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline float faustpower(float x)          { return powf(x,N); } 
template <int N> inline double faustpower(double x)        { return pow(x,N); }
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <>   inline int faustpower<0>(int x)            { return 1; }
template <>   inline int faustpower<1>(int x)            { return x; }
#endif

#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	int 	iVec0[2];
	int 	iConst0;
	float 	fConst1;
	float 	fConst2;
	float 	fConst3;
	float 	fConst4;
	float 	fConst5;
	float 	fConst6;
	float 	fConst7;
	float 	fConst8;
	float 	fConst9;
	float 	fConst10;
	float 	fConst11;
	float 	fConst12;
	float 	fConst13;
	float 	fConst14;
	float 	fConst15;
	float 	fConst16;
	float 	fConst17;
	float 	fConst18;
	float 	fConst19;
	float 	fConst20;
	float 	fConst21;
	float 	fConst22;
	float 	fConst23;
	float 	fConst24;
	float 	fConst25;
	float 	fConst26;
	float 	fConst27;
	float 	fConst28;
	float 	fConst29;
	float 	fConst30;
	float 	fConst31;
	float 	fConst32;
	float 	fConst33;
	float 	fConst34;
	float 	fConst35;
	float 	fConst36;
	float 	fConst37;
	float 	fConst38;
	float 	fConst39;
	float 	fConst40;
	float 	fConst41;
	float 	fConst42;
	float 	fConst43;
	float 	fConst44;
	float 	fConst45;
	float 	fConst46;
	float 	fConst47;
	float 	fConst48;
	float 	fConst49;
	float 	fConst50;
	float 	fConst51;
	float 	fConst52;
	float 	fConst53;
	float 	fConst54;
	float 	fConst55;
	float 	fConst56;
	float 	fConst57;
	float 	fConst58;
	float 	fConst59;
	float 	fConst60;
	float 	fConst61;
	float 	fConst62;
	float 	fConst63;
	float 	fConst64;
	float 	fConst65;
	float 	fConst66;
	float 	fConst67;
	float 	fConst68;
	float 	fConst69;
	float 	fConst70;
	float 	fConst71;
	float 	fConst72;
	float 	fConst73;
	float 	fConst74;
	float 	fConst75;
	float 	fConst76;
	float 	fConst77;
	float 	fConst78;
	float 	fConst79;
	float 	fConst80;
	float 	fConst81;
	float 	fConst82;
	float 	fConst83;
	float 	fConst84;
	float 	fConst85;
	float 	fConst86;
	float 	fConst87;
	float 	fConst88;
	float 	fConst89;
	float 	fConst90;
	float 	fConst91;
	float 	fConst92;
	float 	fConst93;
	float 	fConst94;
	float 	fConst95;
	float 	fConst96;
	float 	fConst97;
	float 	fConst98;
	float 	fConst99;
	float 	fConst100;
	float 	fConst101;
	float 	fConst102;
	float 	fConst103;
	float 	fConst104;
	float 	fConst105;
	float 	fConst106;
	float 	fConst107;
	float 	fConst108;
	float 	fConst109;
	float 	fConst110;
	float 	fConst111;
	float 	fConst112;
	float 	fConst113;
	float 	fConst114;
	float 	fConst115;
	float 	fConst116;
	float 	fConst117;
	float 	fConst118;
	float 	fConst119;
	float 	fConst120;
	float 	fConst121;
	float 	fConst122;
	float 	fConst123;
	float 	fConst124;
	float 	fConst125;
	float 	fConst126;
	float 	fConst127;
	float 	fConst128;
	float 	fConst129;
	float 	fConst130;
	float 	fConst131;
	float 	fConst132;
	float 	fConst133;
	float 	fConst134;
	float 	fConst135;
	float 	fConst136;
	float 	fConst137;
	float 	fConst138;
	float 	fConst139;
	float 	fConst140;
	float 	fConst141;
	float 	fConst142;
	float 	fConst143;
	float 	fConst144;
	float 	fConst145;
	float 	fConst146;
	float 	fConst147;
	float 	fConst148;
	float 	fConst149;
	float 	fConst150;
	float 	fConst151;
	float 	fConst152;
	float 	fConst153;
	float 	fConst154;
	float 	fConst155;
	float 	fConst156;
	float 	fConst157;
	float 	fConst158;
	float 	fConst159;
	float 	fConst160;
	float 	fConst161;
	float 	fConst162;
	float 	fConst163;
	float 	fConst164;
	float 	fConst165;
	float 	fConst166;
	float 	fConst167;
	float 	fConst168;
	float 	fConst169;
	float 	fConst170;
	float 	fConst171;
	float 	fConst172;
	float 	fConst173;
	float 	fConst174;
	float 	fConst175;
	float 	fConst176;
	float 	fConst177;
	float 	fConst178;
	float 	fConst179;
	float 	fConst180;
	float 	fConst181;
	float 	fConst182;
	FAUSTFLOAT 	fslider0;
	float 	fRec44[2];
	FAUSTFLOAT 	fslider1;
	float 	fRec45[2];
	FAUSTFLOAT 	fslider2;
	float 	fConst183;
	FAUSTFLOAT 	fslider3;
	float 	fRec48[2];
	float 	fConst184;
	float 	fRec46[2];
	float 	fRec47[2];
	FAUSTFLOAT 	fslider4;
	float 	fRec49[2];
	FAUSTFLOAT 	fcheckbox0;
	float 	fVec1[2];
	float 	fRec43[2];
	float 	fRec42[3];
	float 	fConst185;
	float 	fConst186;
	float 	fConst187;
	float 	fRec41[3];
	float 	fConst188;
	float 	fConst189;
	float 	fRec40[3];
	float 	fConst190;
	float 	fConst191;
	float 	fRec39[3];
	float 	fConst192;
	float 	fConst193;
	float 	fConst194;
	float 	fRec38[3];
	float 	fConst195;
	float 	fConst196;
	float 	fRec37[3];
	float 	fConst197;
	float 	fConst198;
	float 	fRec36[3];
	float 	fConst199;
	float 	fConst200;
	float 	fConst201;
	float 	fRec35[3];
	float 	fConst202;
	float 	fConst203;
	float 	fRec34[3];
	float 	fConst204;
	float 	fConst205;
	float 	fRec33[3];
	float 	fConst206;
	float 	fConst207;
	float 	fConst208;
	float 	fRec32[3];
	float 	fConst209;
	float 	fConst210;
	float 	fRec31[3];
	float 	fConst211;
	float 	fConst212;
	float 	fRec30[3];
	float 	fConst213;
	float 	fConst214;
	float 	fConst215;
	float 	fRec29[3];
	float 	fConst216;
	float 	fConst217;
	float 	fRec28[3];
	float 	fConst218;
	float 	fConst219;
	float 	fRec27[3];
	float 	fConst220;
	float 	fConst221;
	float 	fConst222;
	float 	fRec26[3];
	float 	fConst223;
	float 	fConst224;
	float 	fRec25[3];
	float 	fConst225;
	float 	fConst226;
	float 	fRec24[3];
	float 	fConst227;
	float 	fConst228;
	float 	fConst229;
	float 	fRec23[3];
	float 	fConst230;
	float 	fConst231;
	float 	fRec22[3];
	float 	fConst232;
	float 	fConst233;
	float 	fRec21[3];
	float 	fConst234;
	float 	fConst235;
	float 	fConst236;
	float 	fRec20[3];
	float 	fConst237;
	float 	fConst238;
	float 	fRec19[3];
	float 	fConst239;
	float 	fConst240;
	float 	fRec18[3];
	float 	fConst241;
	float 	fConst242;
	float 	fConst243;
	float 	fRec17[3];
	float 	fConst244;
	float 	fConst245;
	float 	fRec16[3];
	float 	fConst246;
	float 	fConst247;
	float 	fRec15[3];
	float 	fConst248;
	float 	fConst249;
	float 	fConst250;
	float 	fRec14[3];
	float 	fConst251;
	float 	fConst252;
	float 	fRec13[3];
	float 	fConst253;
	float 	fConst254;
	float 	fRec12[3];
	float 	fConst255;
	float 	fConst256;
	float 	fConst257;
	float 	fRec11[3];
	float 	fConst258;
	float 	fConst259;
	float 	fRec10[3];
	float 	fConst260;
	float 	fConst261;
	float 	fRec9[3];
	float 	fConst262;
	float 	fConst263;
	float 	fConst264;
	float 	fRec8[3];
	float 	fConst265;
	float 	fConst266;
	float 	fRec7[3];
	float 	fConst267;
	float 	fConst268;
	float 	fRec6[3];
	float 	fConst269;
	float 	fConst270;
	float 	fConst271;
	float 	fRec5[3];
	float 	fConst272;
	float 	fConst273;
	float 	fRec4[3];
	float 	fConst274;
	float 	fConst275;
	float 	fRec3[3];
	float 	fConst276;
	float 	fConst277;
	float 	fConst278;
	float 	fRec2[3];
	float 	fConst279;
	float 	fConst280;
	float 	fRec1[3];
	float 	fConst281;
	float 	fConst282;
	FAUSTFLOAT 	fslider5;
	float 	fConst283;
	float 	fRec0[2];
	FAUSTFLOAT 	fslider6;
	FAUSTFLOAT 	fbargraph0;
	float 	fConst284;
	float 	fConst285;
	float 	fConst286;
	float 	fConst287;
	float 	fConst288;
	float 	fConst289;
	float 	fConst290;
	float 	fConst291;
	float 	fConst292;
	float 	fRec53[3];
	float 	fConst293;
	float 	fConst294;
	float 	fConst295;
	float 	fRec52[3];
	float 	fConst296;
	float 	fConst297;
	float 	fConst298;
	float 	fRec51[3];
	float 	fConst299;
	float 	fConst300;
	float 	fConst301;
	float 	fRec50[2];
	FAUSTFLOAT 	fbargraph1;
	float 	fConst302;
	float 	fConst303;
	float 	fConst304;
	float 	fConst305;
	float 	fConst306;
	float 	fConst307;
	float 	fConst308;
	float 	fConst309;
	float 	fConst310;
	float 	fRec57[3];
	float 	fConst311;
	float 	fConst312;
	float 	fConst313;
	float 	fRec56[3];
	float 	fConst314;
	float 	fConst315;
	float 	fConst316;
	float 	fRec55[3];
	float 	fConst317;
	float 	fConst318;
	float 	fConst319;
	float 	fRec54[2];
	FAUSTFLOAT 	fbargraph2;
	float 	fConst320;
	float 	fConst321;
	float 	fConst322;
	float 	fConst323;
	float 	fConst324;
	float 	fConst325;
	float 	fConst326;
	float 	fConst327;
	float 	fConst328;
	float 	fRec61[3];
	float 	fConst329;
	float 	fConst330;
	float 	fConst331;
	float 	fRec60[3];
	float 	fConst332;
	float 	fConst333;
	float 	fConst334;
	float 	fRec59[3];
	float 	fConst335;
	float 	fConst336;
	float 	fConst337;
	float 	fRec58[2];
	FAUSTFLOAT 	fbargraph3;
	float 	fConst338;
	float 	fConst339;
	float 	fConst340;
	float 	fConst341;
	float 	fConst342;
	float 	fConst343;
	float 	fConst344;
	float 	fConst345;
	float 	fConst346;
	float 	fRec65[3];
	float 	fConst347;
	float 	fConst348;
	float 	fConst349;
	float 	fRec64[3];
	float 	fConst350;
	float 	fConst351;
	float 	fConst352;
	float 	fRec63[3];
	float 	fConst353;
	float 	fConst354;
	float 	fConst355;
	float 	fRec62[2];
	FAUSTFLOAT 	fbargraph4;
	float 	fConst356;
	float 	fConst357;
	float 	fConst358;
	float 	fConst359;
	float 	fConst360;
	float 	fConst361;
	float 	fConst362;
	float 	fConst363;
	float 	fConst364;
	float 	fRec69[3];
	float 	fConst365;
	float 	fConst366;
	float 	fConst367;
	float 	fRec68[3];
	float 	fConst368;
	float 	fConst369;
	float 	fConst370;
	float 	fRec67[3];
	float 	fConst371;
	float 	fConst372;
	float 	fConst373;
	float 	fRec66[2];
	FAUSTFLOAT 	fbargraph5;
	float 	fConst374;
	float 	fConst375;
	float 	fConst376;
	float 	fConst377;
	float 	fConst378;
	float 	fConst379;
	float 	fConst380;
	float 	fConst381;
	float 	fConst382;
	float 	fRec73[3];
	float 	fConst383;
	float 	fConst384;
	float 	fConst385;
	float 	fRec72[3];
	float 	fConst386;
	float 	fConst387;
	float 	fConst388;
	float 	fRec71[3];
	float 	fConst389;
	float 	fConst390;
	float 	fConst391;
	float 	fRec70[2];
	FAUSTFLOAT 	fbargraph6;
	float 	fConst392;
	float 	fConst393;
	float 	fConst394;
	float 	fConst395;
	float 	fConst396;
	float 	fConst397;
	float 	fConst398;
	float 	fConst399;
	float 	fConst400;
	float 	fRec77[3];
	float 	fConst401;
	float 	fConst402;
	float 	fConst403;
	float 	fRec76[3];
	float 	fConst404;
	float 	fConst405;
	float 	fConst406;
	float 	fRec75[3];
	float 	fConst407;
	float 	fConst408;
	float 	fConst409;
	float 	fRec74[2];
	FAUSTFLOAT 	fbargraph7;
	float 	fConst410;
	float 	fConst411;
	float 	fConst412;
	float 	fConst413;
	float 	fConst414;
	float 	fConst415;
	float 	fConst416;
	float 	fConst417;
	float 	fConst418;
	float 	fRec81[3];
	float 	fConst419;
	float 	fConst420;
	float 	fConst421;
	float 	fRec80[3];
	float 	fConst422;
	float 	fConst423;
	float 	fConst424;
	float 	fRec79[3];
	float 	fConst425;
	float 	fConst426;
	float 	fConst427;
	float 	fRec78[2];
	FAUSTFLOAT 	fbargraph8;
	float 	fConst428;
	float 	fConst429;
	float 	fConst430;
	float 	fConst431;
	float 	fConst432;
	float 	fConst433;
	float 	fConst434;
	float 	fConst435;
	float 	fConst436;
	float 	fRec85[3];
	float 	fConst437;
	float 	fConst438;
	float 	fConst439;
	float 	fRec84[3];
	float 	fConst440;
	float 	fConst441;
	float 	fConst442;
	float 	fRec83[3];
	float 	fConst443;
	float 	fConst444;
	float 	fConst445;
	float 	fRec82[2];
	FAUSTFLOAT 	fbargraph9;
	float 	fConst446;
	float 	fConst447;
	float 	fConst448;
	float 	fConst449;
	float 	fConst450;
	float 	fConst451;
	float 	fConst452;
	float 	fConst453;
	float 	fConst454;
	float 	fRec89[3];
	float 	fConst455;
	float 	fConst456;
	float 	fConst457;
	float 	fRec88[3];
	float 	fConst458;
	float 	fConst459;
	float 	fConst460;
	float 	fRec87[3];
	float 	fConst461;
	float 	fConst462;
	float 	fConst463;
	float 	fRec86[2];
	FAUSTFLOAT 	fbargraph10;
	float 	fConst464;
	float 	fConst465;
	float 	fConst466;
	float 	fConst467;
	float 	fConst468;
	float 	fConst469;
	float 	fConst470;
	float 	fConst471;
	float 	fConst472;
	float 	fRec93[3];
	float 	fConst473;
	float 	fConst474;
	float 	fConst475;
	float 	fRec92[3];
	float 	fConst476;
	float 	fConst477;
	float 	fConst478;
	float 	fRec91[3];
	float 	fConst479;
	float 	fConst480;
	float 	fConst481;
	float 	fRec90[2];
	FAUSTFLOAT 	fbargraph11;
	float 	fConst482;
	float 	fConst483;
	float 	fConst484;
	float 	fConst485;
	float 	fConst486;
	float 	fConst487;
	float 	fConst488;
	float 	fConst489;
	float 	fConst490;
	float 	fRec97[3];
	float 	fConst491;
	float 	fConst492;
	float 	fConst493;
	float 	fRec96[3];
	float 	fConst494;
	float 	fConst495;
	float 	fConst496;
	float 	fRec95[3];
	float 	fConst497;
	float 	fConst498;
	float 	fConst499;
	float 	fRec94[2];
	FAUSTFLOAT 	fbargraph12;
	float 	fConst500;
	float 	fConst501;
	float 	fConst502;
	float 	fConst503;
	float 	fConst504;
	float 	fConst505;
	float 	fConst506;
	float 	fConst507;
	float 	fConst508;
	float 	fRec101[3];
	float 	fConst509;
	float 	fConst510;
	float 	fConst511;
	float 	fRec100[3];
	float 	fConst512;
	float 	fConst513;
	float 	fConst514;
	float 	fRec99[3];
	float 	fConst515;
	float 	fConst516;
	float 	fConst517;
	float 	fRec98[2];
	FAUSTFLOAT 	fbargraph13;
	float 	fConst518;
	float 	fConst519;
	float 	fConst520;
	float 	fConst521;
	float 	fConst522;
	float 	fConst523;
	float 	fConst524;
	float 	fConst525;
	float 	fConst526;
	float 	fRec105[3];
	float 	fConst527;
	float 	fConst528;
	float 	fConst529;
	float 	fRec104[3];
	float 	fConst530;
	float 	fConst531;
	float 	fConst532;
	float 	fRec103[3];
	float 	fConst533;
	float 	fConst534;
	float 	fConst535;
	float 	fRec102[2];
	FAUSTFLOAT 	fbargraph14;
  public:
	static void metadata(Meta* m) 	{ 
		m->declare("name", "cubic_distortion");
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/version", "1.29");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/version", "1.0");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/version", "1.0");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("effect.lib/name", "Faust Audio Effect Library");
		m->declare("effect.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/copyright", "Julius O. Smith III");
		m->declare("effect.lib/version", "1.33");
		m->declare("effect.lib/license", "STK-4.3");
		m->declare("effect.lib/exciter_name", "Harmonic Exciter");
		m->declare("effect.lib/exciter_author", "Priyanka Shekar (pshekar@ccrma.stanford.edu)");
		m->declare("effect.lib/exciter_copyright", "Copyright (c) 2013 Priyanka Shekar");
		m->declare("effect.lib/exciter_version", "1.0");
		m->declare("effect.lib/exciter_license", "MIT License (MIT)");
		m->declare("oscillator.lib/name", "Faust Oscillator Library");
		m->declare("oscillator.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("oscillator.lib/copyright", "Julius O. Smith III");
		m->declare("oscillator.lib/version", "1.11");
		m->declare("oscillator.lib/license", "STK-4.3");
	}

	virtual int getNumInputs() 	{ return 0; }
	virtual int getNumOutputs() 	{ return 2; }
	static void classInit(int samplingFreq) {
	}
	virtual void instanceInit(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		for (int i=0; i<2; i++) iVec0[i] = 0;
		iConst0 = min(192000, max(1, fSamplingFreq));
		fConst1 = tanf((123.69245982665232f / float(iConst0)));
		fConst2 = faustpower<2>(fConst1);
		fConst3 = (1.0f / fConst2);
		fConst4 = (2 * (1.069358407707312f - fConst3));
		fConst5 = (1.0f / fConst1);
		fConst6 = (1.069358407707312f + ((fConst5 - 0.168404871113589f) / fConst1));
		fConst7 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst5) / fConst1)));
		fConst8 = (2 * (0.689621364484675f - fConst3));
		fConst9 = (0.689621364484675f + ((fConst5 - 0.512478641889141f) / fConst1));
		fConst10 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst5) / fConst1)));
		fConst11 = (2 * (0.24529150870616f - fConst3));
		fConst12 = (0.24529150870616f + ((fConst5 - 0.782413046821645f) / fConst1));
		fConst13 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst5) / fConst1)));
		fConst14 = tanf((196.34954084936206f / float(iConst0)));
		fConst15 = faustpower<2>(fConst14);
		fConst16 = (1.0f / fConst15);
		fConst17 = (2 * (1.069358407707312f - fConst16));
		fConst18 = (1.0f / fConst14);
		fConst19 = (1.069358407707312f + ((fConst18 - 0.168404871113589f) / fConst14));
		fConst20 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst18) / fConst14)));
		fConst21 = (2 * (0.689621364484675f - fConst16));
		fConst22 = (0.689621364484675f + ((fConst18 - 0.512478641889141f) / fConst14));
		fConst23 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst18) / fConst14)));
		fConst24 = (2 * (0.24529150870616f - fConst16));
		fConst25 = (0.24529150870616f + ((fConst18 - 0.782413046821645f) / fConst14));
		fConst26 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst18) / fConst14)));
		fConst27 = tanf((311.68546769775037f / float(iConst0)));
		fConst28 = faustpower<2>(fConst27);
		fConst29 = (1.0f / fConst28);
		fConst30 = (2 * (1.069358407707312f - fConst29));
		fConst31 = (1.0f / fConst27);
		fConst32 = (1.069358407707312f + ((fConst31 - 0.168404871113589f) / fConst27));
		fConst33 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst31) / fConst27)));
		fConst34 = (2 * (0.689621364484675f - fConst29));
		fConst35 = (0.689621364484675f + ((fConst31 - 0.512478641889141f) / fConst27));
		fConst36 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst31) / fConst27)));
		fConst37 = (2 * (0.24529150870616f - fConst29));
		fConst38 = (0.24529150870616f + ((fConst31 - 0.782413046821645f) / fConst27));
		fConst39 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst31) / fConst27)));
		fConst40 = tanf((494.769839306609f / float(iConst0)));
		fConst41 = faustpower<2>(fConst40);
		fConst42 = (1.0f / fConst41);
		fConst43 = (2 * (1.069358407707312f - fConst42));
		fConst44 = (1.0f / fConst40);
		fConst45 = (1.069358407707312f + ((fConst44 - 0.168404871113589f) / fConst40));
		fConst46 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst44) / fConst40)));
		fConst47 = (2 * (0.689621364484675f - fConst42));
		fConst48 = (0.689621364484675f + ((fConst44 - 0.512478641889141f) / fConst40));
		fConst49 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst44) / fConst40)));
		fConst50 = (2 * (0.24529150870616f - fConst42));
		fConst51 = (0.24529150870616f + ((fConst44 - 0.782413046821645f) / fConst40));
		fConst52 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst44) / fConst40)));
		fConst53 = tanf((785.3981633974482f / float(iConst0)));
		fConst54 = faustpower<2>(fConst53);
		fConst55 = (1.0f / fConst54);
		fConst56 = (2 * (1.069358407707312f - fConst55));
		fConst57 = (1.0f / fConst53);
		fConst58 = (1.069358407707312f + ((fConst57 - 0.168404871113589f) / fConst53));
		fConst59 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst57) / fConst53)));
		fConst60 = (2 * (0.689621364484675f - fConst55));
		fConst61 = (0.689621364484675f + ((fConst57 - 0.512478641889141f) / fConst53));
		fConst62 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst57) / fConst53)));
		fConst63 = (2 * (0.24529150870616f - fConst55));
		fConst64 = (0.24529150870616f + ((fConst57 - 0.782413046821645f) / fConst53));
		fConst65 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst57) / fConst53)));
		fConst66 = tanf((1246.7418707910015f / float(iConst0)));
		fConst67 = faustpower<2>(fConst66);
		fConst68 = (1.0f / fConst67);
		fConst69 = (2 * (1.069358407707312f - fConst68));
		fConst70 = (1.0f / fConst66);
		fConst71 = (1.069358407707312f + ((fConst70 - 0.168404871113589f) / fConst66));
		fConst72 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst70) / fConst66)));
		fConst73 = (2 * (0.689621364484675f - fConst68));
		fConst74 = (0.689621364484675f + ((fConst70 - 0.512478641889141f) / fConst66));
		fConst75 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst70) / fConst66)));
		fConst76 = (2 * (0.24529150870616f - fConst68));
		fConst77 = (0.24529150870616f + ((fConst70 - 0.782413046821645f) / fConst66));
		fConst78 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst70) / fConst66)));
		fConst79 = tanf((1979.079357226436f / float(iConst0)));
		fConst80 = faustpower<2>(fConst79);
		fConst81 = (1.0f / fConst80);
		fConst82 = (2 * (1.069358407707312f - fConst81));
		fConst83 = (1.0f / fConst79);
		fConst84 = (1.069358407707312f + ((fConst83 - 0.168404871113589f) / fConst79));
		fConst85 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst83) / fConst79)));
		fConst86 = (2 * (0.689621364484675f - fConst81));
		fConst87 = (0.689621364484675f + ((fConst83 - 0.512478641889141f) / fConst79));
		fConst88 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst83) / fConst79)));
		fConst89 = (2 * (0.24529150870616f - fConst81));
		fConst90 = (0.24529150870616f + ((fConst83 - 0.782413046821645f) / fConst79));
		fConst91 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst83) / fConst79)));
		fConst92 = tanf((3141.592653589793f / float(iConst0)));
		fConst93 = faustpower<2>(fConst92);
		fConst94 = (1.0f / fConst93);
		fConst95 = (2 * (1.069358407707312f - fConst94));
		fConst96 = (1.0f / fConst92);
		fConst97 = (1.069358407707312f + ((fConst96 - 0.168404871113589f) / fConst92));
		fConst98 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst96) / fConst92)));
		fConst99 = (2 * (0.689621364484675f - fConst94));
		fConst100 = (0.689621364484675f + ((fConst96 - 0.512478641889141f) / fConst92));
		fConst101 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst96) / fConst92)));
		fConst102 = (2 * (0.24529150870616f - fConst94));
		fConst103 = (0.24529150870616f + ((fConst96 - 0.782413046821645f) / fConst92));
		fConst104 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst96) / fConst92)));
		fConst105 = tanf((4986.967483164005f / float(iConst0)));
		fConst106 = faustpower<2>(fConst105);
		fConst107 = (1.0f / fConst106);
		fConst108 = (2 * (1.069358407707312f - fConst107));
		fConst109 = (1.0f / fConst105);
		fConst110 = (1.069358407707312f + ((fConst109 - 0.168404871113589f) / fConst105));
		fConst111 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst109) / fConst105)));
		fConst112 = (2 * (0.689621364484675f - fConst107));
		fConst113 = (0.689621364484675f + ((fConst109 - 0.512478641889141f) / fConst105));
		fConst114 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst109) / fConst105)));
		fConst115 = (2 * (0.24529150870616f - fConst107));
		fConst116 = (0.24529150870616f + ((fConst109 - 0.782413046821645f) / fConst105));
		fConst117 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst109) / fConst105)));
		fConst118 = tanf((7916.317428905746f / float(iConst0)));
		fConst119 = faustpower<2>(fConst118);
		fConst120 = (1.0f / fConst119);
		fConst121 = (2 * (1.069358407707312f - fConst120));
		fConst122 = (1.0f / fConst118);
		fConst123 = (1.069358407707312f + ((fConst122 - 0.168404871113589f) / fConst118));
		fConst124 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst122) / fConst118)));
		fConst125 = (2 * (0.689621364484675f - fConst120));
		fConst126 = (0.689621364484675f + ((fConst122 - 0.512478641889141f) / fConst118));
		fConst127 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst122) / fConst118)));
		fConst128 = (2 * (0.24529150870616f - fConst120));
		fConst129 = (0.24529150870616f + ((fConst122 - 0.782413046821645f) / fConst118));
		fConst130 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst122) / fConst118)));
		fConst131 = tanf((12566.370614359172f / float(iConst0)));
		fConst132 = faustpower<2>(fConst131);
		fConst133 = (1.0f / fConst132);
		fConst134 = (2 * (1.069358407707312f - fConst133));
		fConst135 = (1.0f / fConst131);
		fConst136 = (1.069358407707312f + ((fConst135 - 0.168404871113589f) / fConst131));
		fConst137 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst135) / fConst131)));
		fConst138 = (2 * (0.689621364484675f - fConst133));
		fConst139 = (0.689621364484675f + ((fConst135 - 0.512478641889141f) / fConst131));
		fConst140 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst135) / fConst131)));
		fConst141 = (2 * (0.24529150870616f - fConst133));
		fConst142 = (0.24529150870616f + ((fConst135 - 0.782413046821645f) / fConst131));
		fConst143 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst135) / fConst131)));
		fConst144 = tanf((19947.869932656024f / float(iConst0)));
		fConst145 = faustpower<2>(fConst144);
		fConst146 = (1.0f / fConst145);
		fConst147 = (2 * (1.069358407707312f - fConst146));
		fConst148 = (1.0f / fConst144);
		fConst149 = (1.069358407707312f + ((fConst148 - 0.168404871113589f) / fConst144));
		fConst150 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst148) / fConst144)));
		fConst151 = (2 * (0.689621364484675f - fConst146));
		fConst152 = (0.689621364484675f + ((fConst148 - 0.512478641889141f) / fConst144));
		fConst153 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst148) / fConst144)));
		fConst154 = (2 * (0.24529150870616f - fConst146));
		fConst155 = (0.24529150870616f + ((fConst148 - 0.782413046821645f) / fConst144));
		fConst156 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst148) / fConst144)));
		fConst157 = tanf((31665.269715622984f / float(iConst0)));
		fConst158 = faustpower<2>(fConst157);
		fConst159 = (1.0f / fConst158);
		fConst160 = (2 * (1.069358407707312f - fConst159));
		fConst161 = (1.0f / fConst157);
		fConst162 = (1.069358407707312f + ((fConst161 - 0.168404871113589f) / fConst157));
		fConst163 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst161) / fConst157)));
		fConst164 = (2 * (0.689621364484675f - fConst159));
		fConst165 = (0.689621364484675f + ((fConst161 - 0.512478641889141f) / fConst157));
		fConst166 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst161) / fConst157)));
		fConst167 = (2 * (0.24529150870616f - fConst159));
		fConst168 = (0.24529150870616f + ((fConst161 - 0.782413046821645f) / fConst157));
		fConst169 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst161) / fConst157)));
		fConst170 = tanf((50265.48245743669f / float(iConst0)));
		fConst171 = faustpower<2>(fConst170);
		fConst172 = (1.0f / fConst171);
		fConst173 = (2 * (1.069358407707312f - fConst172));
		fConst174 = (1.0f / fConst170);
		fConst175 = (1.069358407707312f + ((fConst174 - 0.168404871113589f) / fConst170));
		fConst176 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst174) / fConst170)));
		fConst177 = (2 * (0.689621364484675f - fConst172));
		fConst178 = (0.689621364484675f + ((fConst174 - 0.512478641889141f) / fConst170));
		fConst179 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst174) / fConst170)));
		fConst180 = (2 * (0.24529150870616f - fConst172));
		fConst181 = (0.24529150870616f + ((fConst174 - 0.782413046821645f) / fConst170));
		fConst182 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst174) / fConst170)));
		fslider0 = 0.0f;
		for (int i=0; i<2; i++) fRec44[i] = 0;
		fslider1 = 0.0f;
		for (int i=0; i<2; i++) fRec45[i] = 0;
		fslider2 = 0.1f;
		fConst183 = (1.0f / float(iConst0));
		fslider3 = 49.0f;
		for (int i=0; i<2; i++) fRec48[i] = 0;
		fConst184 = (6.283185307179586f / float(iConst0));
		for (int i=0; i<2; i++) fRec46[i] = 0;
		for (int i=0; i<2; i++) fRec47[i] = 0;
		fslider4 = -2e+01f;
		for (int i=0; i<2; i++) fRec49[i] = 0;
		fcheckbox0 = 0.0;
		for (int i=0; i<2; i++) fVec1[i] = 0;
		for (int i=0; i<2; i++) fRec43[i] = 0;
		for (int i=0; i<3; i++) fRec42[i] = 0;
		fConst185 = (9.9999997055e-05f / fConst171);
		fConst186 = (0.000433227200555f + fConst185);
		fConst187 = (2 * (0.000433227200555f - fConst185));
		for (int i=0; i<3; i++) fRec41[i] = 0;
		fConst188 = (7.621731298870603f + fConst172);
		fConst189 = (2 * (7.621731298870603f - fConst172));
		for (int i=0; i<3; i++) fRec40[i] = 0;
		fConst190 = (53.53615295455673f + fConst172);
		fConst191 = (2 * (53.53615295455673f - fConst172));
		for (int i=0; i<3; i++) fRec39[i] = 0;
		fConst192 = (9.9999997055e-05f / fConst158);
		fConst193 = (0.000433227200555f + fConst192);
		fConst194 = (2 * (0.000433227200555f - fConst192));
		for (int i=0; i<3; i++) fRec38[i] = 0;
		fConst195 = (7.621731298870603f + fConst159);
		fConst196 = (2 * (7.621731298870603f - fConst159));
		for (int i=0; i<3; i++) fRec37[i] = 0;
		fConst197 = (53.53615295455673f + fConst159);
		fConst198 = (2 * (53.53615295455673f - fConst159));
		for (int i=0; i<3; i++) fRec36[i] = 0;
		fConst199 = (9.9999997055e-05f / fConst145);
		fConst200 = (0.000433227200555f + fConst199);
		fConst201 = (2 * (0.000433227200555f - fConst199));
		for (int i=0; i<3; i++) fRec35[i] = 0;
		fConst202 = (7.621731298870603f + fConst146);
		fConst203 = (2 * (7.621731298870603f - fConst146));
		for (int i=0; i<3; i++) fRec34[i] = 0;
		fConst204 = (53.53615295455673f + fConst146);
		fConst205 = (2 * (53.53615295455673f - fConst146));
		for (int i=0; i<3; i++) fRec33[i] = 0;
		fConst206 = (9.9999997055e-05f / fConst132);
		fConst207 = (0.000433227200555f + fConst206);
		fConst208 = (2 * (0.000433227200555f - fConst206));
		for (int i=0; i<3; i++) fRec32[i] = 0;
		fConst209 = (7.621731298870603f + fConst133);
		fConst210 = (2 * (7.621731298870603f - fConst133));
		for (int i=0; i<3; i++) fRec31[i] = 0;
		fConst211 = (53.53615295455673f + fConst133);
		fConst212 = (2 * (53.53615295455673f - fConst133));
		for (int i=0; i<3; i++) fRec30[i] = 0;
		fConst213 = (9.9999997055e-05f / fConst119);
		fConst214 = (0.000433227200555f + fConst213);
		fConst215 = (2 * (0.000433227200555f - fConst213));
		for (int i=0; i<3; i++) fRec29[i] = 0;
		fConst216 = (7.621731298870603f + fConst120);
		fConst217 = (2 * (7.621731298870603f - fConst120));
		for (int i=0; i<3; i++) fRec28[i] = 0;
		fConst218 = (53.53615295455673f + fConst120);
		fConst219 = (2 * (53.53615295455673f - fConst120));
		for (int i=0; i<3; i++) fRec27[i] = 0;
		fConst220 = (9.9999997055e-05f / fConst106);
		fConst221 = (0.000433227200555f + fConst220);
		fConst222 = (2 * (0.000433227200555f - fConst220));
		for (int i=0; i<3; i++) fRec26[i] = 0;
		fConst223 = (7.621731298870603f + fConst107);
		fConst224 = (2 * (7.621731298870603f - fConst107));
		for (int i=0; i<3; i++) fRec25[i] = 0;
		fConst225 = (53.53615295455673f + fConst107);
		fConst226 = (2 * (53.53615295455673f - fConst107));
		for (int i=0; i<3; i++) fRec24[i] = 0;
		fConst227 = (9.9999997055e-05f / fConst93);
		fConst228 = (0.000433227200555f + fConst227);
		fConst229 = (2 * (0.000433227200555f - fConst227));
		for (int i=0; i<3; i++) fRec23[i] = 0;
		fConst230 = (7.621731298870603f + fConst94);
		fConst231 = (2 * (7.621731298870603f - fConst94));
		for (int i=0; i<3; i++) fRec22[i] = 0;
		fConst232 = (53.53615295455673f + fConst94);
		fConst233 = (2 * (53.53615295455673f - fConst94));
		for (int i=0; i<3; i++) fRec21[i] = 0;
		fConst234 = (9.9999997055e-05f / fConst80);
		fConst235 = (0.000433227200555f + fConst234);
		fConst236 = (2 * (0.000433227200555f - fConst234));
		for (int i=0; i<3; i++) fRec20[i] = 0;
		fConst237 = (7.621731298870603f + fConst81);
		fConst238 = (2 * (7.621731298870603f - fConst81));
		for (int i=0; i<3; i++) fRec19[i] = 0;
		fConst239 = (53.53615295455673f + fConst81);
		fConst240 = (2 * (53.53615295455673f - fConst81));
		for (int i=0; i<3; i++) fRec18[i] = 0;
		fConst241 = (9.9999997055e-05f / fConst67);
		fConst242 = (0.000433227200555f + fConst241);
		fConst243 = (2 * (0.000433227200555f - fConst241));
		for (int i=0; i<3; i++) fRec17[i] = 0;
		fConst244 = (7.621731298870603f + fConst68);
		fConst245 = (2 * (7.621731298870603f - fConst68));
		for (int i=0; i<3; i++) fRec16[i] = 0;
		fConst246 = (53.53615295455673f + fConst68);
		fConst247 = (2 * (53.53615295455673f - fConst68));
		for (int i=0; i<3; i++) fRec15[i] = 0;
		fConst248 = (9.9999997055e-05f / fConst54);
		fConst249 = (0.000433227200555f + fConst248);
		fConst250 = (2 * (0.000433227200555f - fConst248));
		for (int i=0; i<3; i++) fRec14[i] = 0;
		fConst251 = (7.621731298870603f + fConst55);
		fConst252 = (2 * (7.621731298870603f - fConst55));
		for (int i=0; i<3; i++) fRec13[i] = 0;
		fConst253 = (53.53615295455673f + fConst55);
		fConst254 = (2 * (53.53615295455673f - fConst55));
		for (int i=0; i<3; i++) fRec12[i] = 0;
		fConst255 = (9.9999997055e-05f / fConst41);
		fConst256 = (0.000433227200555f + fConst255);
		fConst257 = (2 * (0.000433227200555f - fConst255));
		for (int i=0; i<3; i++) fRec11[i] = 0;
		fConst258 = (7.621731298870603f + fConst42);
		fConst259 = (2 * (7.621731298870603f - fConst42));
		for (int i=0; i<3; i++) fRec10[i] = 0;
		fConst260 = (53.53615295455673f + fConst42);
		fConst261 = (2 * (53.53615295455673f - fConst42));
		for (int i=0; i<3; i++) fRec9[i] = 0;
		fConst262 = (9.9999997055e-05f / fConst28);
		fConst263 = (0.000433227200555f + fConst262);
		fConst264 = (2 * (0.000433227200555f - fConst262));
		for (int i=0; i<3; i++) fRec8[i] = 0;
		fConst265 = (7.621731298870603f + fConst29);
		fConst266 = (2 * (7.621731298870603f - fConst29));
		for (int i=0; i<3; i++) fRec7[i] = 0;
		fConst267 = (53.53615295455673f + fConst29);
		fConst268 = (2 * (53.53615295455673f - fConst29));
		for (int i=0; i<3; i++) fRec6[i] = 0;
		fConst269 = (9.9999997055e-05f / fConst15);
		fConst270 = (0.000433227200555f + fConst269);
		fConst271 = (2 * (0.000433227200555f - fConst269));
		for (int i=0; i<3; i++) fRec5[i] = 0;
		fConst272 = (7.621731298870603f + fConst16);
		fConst273 = (2 * (7.621731298870603f - fConst16));
		for (int i=0; i<3; i++) fRec4[i] = 0;
		fConst274 = (53.53615295455673f + fConst16);
		fConst275 = (2 * (53.53615295455673f - fConst16));
		for (int i=0; i<3; i++) fRec3[i] = 0;
		fConst276 = (9.9999997055e-05f / fConst2);
		fConst277 = (0.000433227200555f + fConst276);
		fConst278 = (2 * (0.000433227200555f - fConst276));
		for (int i=0; i<3; i++) fRec2[i] = 0;
		fConst279 = (7.621731298870603f + fConst3);
		fConst280 = (2 * (7.621731298870603f - fConst3));
		for (int i=0; i<3; i++) fRec1[i] = 0;
		fConst281 = (53.53615295455673f + fConst3);
		fConst282 = (2 * (53.53615295455673f - fConst3));
		fslider5 = 1e+02f;
		fConst283 = (1e+03f / float(iConst0));
		for (int i=0; i<2; i++) fRec0[i] = 0;
		fslider6 = 5e+01f;
		fConst284 = (2 * (0.9351401670315425f - fConst3));
		fConst285 = (0.9351401670315425f + ((fConst5 - 0.157482159302087f) / fConst1));
		fConst286 = (1.0f / (0.9351401670315425f + ((fConst5 + 0.157482159302087f) / fConst1)));
		fConst287 = (2 * (1.450071084655647f - fConst3));
		fConst288 = (1.450071084655647f + ((fConst5 - 0.7431304601070396f) / fConst1));
		fConst289 = (1.0f / (1.450071084655647f + ((fConst5 + 0.7431304601070396f) / fConst1)));
		fConst290 = (2 * (4.076781969643807f - fConst3));
		fConst291 = (4.076781969643807f + ((fConst5 - 3.1897274020965583f) / fConst1));
		fConst292 = (1.0f / (4.076781969643807f + ((fConst5 + 3.1897274020965583f) / fConst1)));
		for (int i=0; i<3; i++) fRec53[i] = 0;
		fConst293 = (0.0017661728399818856f / fConst2);
		fConst294 = (0.00040767818495825777f + fConst293);
		fConst295 = (2 * (0.00040767818495825777f - fConst293));
		for (int i=0; i<3; i++) fRec52[i] = 0;
		fConst296 = (11.052052171507189f / fConst2);
		fConst297 = (1.450071084655647f + fConst296);
		fConst298 = (2 * (1.450071084655647f - fConst296));
		for (int i=0; i<3; i++) fRec51[i] = 0;
		fConst299 = (50.063807016150385f / fConst2);
		fConst300 = (0.9351401670315425f + fConst299);
		fConst301 = (2 * (0.9351401670315425f - fConst299));
		for (int i=0; i<2; i++) fRec50[i] = 0;
		fConst302 = (2 * (0.9351401670315425f - fConst16));
		fConst303 = (0.9351401670315425f + ((fConst18 - 0.157482159302087f) / fConst14));
		fConst304 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst18) / fConst14)));
		fConst305 = (2 * (1.450071084655647f - fConst16));
		fConst306 = (1.450071084655647f + ((fConst18 - 0.7431304601070396f) / fConst14));
		fConst307 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst18) / fConst14)));
		fConst308 = (2 * (4.076781969643807f - fConst16));
		fConst309 = (4.076781969643807f + ((fConst18 - 3.1897274020965583f) / fConst14));
		fConst310 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst18) / fConst14)));
		for (int i=0; i<3; i++) fRec57[i] = 0;
		fConst311 = (0.0017661728399818856f / fConst15);
		fConst312 = (0.00040767818495825777f + fConst311);
		fConst313 = (2 * (0.00040767818495825777f - fConst311));
		for (int i=0; i<3; i++) fRec56[i] = 0;
		fConst314 = (11.052052171507189f / fConst15);
		fConst315 = (1.450071084655647f + fConst314);
		fConst316 = (2 * (1.450071084655647f - fConst314));
		for (int i=0; i<3; i++) fRec55[i] = 0;
		fConst317 = (50.063807016150385f / fConst15);
		fConst318 = (0.9351401670315425f + fConst317);
		fConst319 = (2 * (0.9351401670315425f - fConst317));
		for (int i=0; i<2; i++) fRec54[i] = 0;
		fConst320 = (2 * (0.9351401670315425f - fConst29));
		fConst321 = (0.9351401670315425f + ((fConst31 - 0.157482159302087f) / fConst27));
		fConst322 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst31) / fConst27)));
		fConst323 = (2 * (1.450071084655647f - fConst29));
		fConst324 = (1.450071084655647f + ((fConst31 - 0.7431304601070396f) / fConst27));
		fConst325 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst31) / fConst27)));
		fConst326 = (2 * (4.076781969643807f - fConst29));
		fConst327 = (4.076781969643807f + ((fConst31 - 3.1897274020965583f) / fConst27));
		fConst328 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst31) / fConst27)));
		for (int i=0; i<3; i++) fRec61[i] = 0;
		fConst329 = (0.0017661728399818856f / fConst28);
		fConst330 = (0.00040767818495825777f + fConst329);
		fConst331 = (2 * (0.00040767818495825777f - fConst329));
		for (int i=0; i<3; i++) fRec60[i] = 0;
		fConst332 = (11.052052171507189f / fConst28);
		fConst333 = (1.450071084655647f + fConst332);
		fConst334 = (2 * (1.450071084655647f - fConst332));
		for (int i=0; i<3; i++) fRec59[i] = 0;
		fConst335 = (50.063807016150385f / fConst28);
		fConst336 = (0.9351401670315425f + fConst335);
		fConst337 = (2 * (0.9351401670315425f - fConst335));
		for (int i=0; i<2; i++) fRec58[i] = 0;
		fConst338 = (2 * (0.9351401670315425f - fConst42));
		fConst339 = (0.9351401670315425f + ((fConst44 - 0.157482159302087f) / fConst40));
		fConst340 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst44) / fConst40)));
		fConst341 = (2 * (1.450071084655647f - fConst42));
		fConst342 = (1.450071084655647f + ((fConst44 - 0.7431304601070396f) / fConst40));
		fConst343 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst44) / fConst40)));
		fConst344 = (2 * (4.076781969643807f - fConst42));
		fConst345 = (4.076781969643807f + ((fConst44 - 3.1897274020965583f) / fConst40));
		fConst346 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst44) / fConst40)));
		for (int i=0; i<3; i++) fRec65[i] = 0;
		fConst347 = (0.0017661728399818856f / fConst41);
		fConst348 = (0.00040767818495825777f + fConst347);
		fConst349 = (2 * (0.00040767818495825777f - fConst347));
		for (int i=0; i<3; i++) fRec64[i] = 0;
		fConst350 = (11.052052171507189f / fConst41);
		fConst351 = (1.450071084655647f + fConst350);
		fConst352 = (2 * (1.450071084655647f - fConst350));
		for (int i=0; i<3; i++) fRec63[i] = 0;
		fConst353 = (50.063807016150385f / fConst41);
		fConst354 = (0.9351401670315425f + fConst353);
		fConst355 = (2 * (0.9351401670315425f - fConst353));
		for (int i=0; i<2; i++) fRec62[i] = 0;
		fConst356 = (2 * (0.9351401670315425f - fConst55));
		fConst357 = (0.9351401670315425f + ((fConst57 - 0.157482159302087f) / fConst53));
		fConst358 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst57) / fConst53)));
		fConst359 = (2 * (1.450071084655647f - fConst55));
		fConst360 = (1.450071084655647f + ((fConst57 - 0.7431304601070396f) / fConst53));
		fConst361 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst57) / fConst53)));
		fConst362 = (2 * (4.076781969643807f - fConst55));
		fConst363 = (4.076781969643807f + ((fConst57 - 3.1897274020965583f) / fConst53));
		fConst364 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst57) / fConst53)));
		for (int i=0; i<3; i++) fRec69[i] = 0;
		fConst365 = (0.0017661728399818856f / fConst54);
		fConst366 = (0.00040767818495825777f + fConst365);
		fConst367 = (2 * (0.00040767818495825777f - fConst365));
		for (int i=0; i<3; i++) fRec68[i] = 0;
		fConst368 = (11.052052171507189f / fConst54);
		fConst369 = (1.450071084655647f + fConst368);
		fConst370 = (2 * (1.450071084655647f - fConst368));
		for (int i=0; i<3; i++) fRec67[i] = 0;
		fConst371 = (50.063807016150385f / fConst54);
		fConst372 = (0.9351401670315425f + fConst371);
		fConst373 = (2 * (0.9351401670315425f - fConst371));
		for (int i=0; i<2; i++) fRec66[i] = 0;
		fConst374 = (2 * (0.9351401670315425f - fConst68));
		fConst375 = (0.9351401670315425f + ((fConst70 - 0.157482159302087f) / fConst66));
		fConst376 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst70) / fConst66)));
		fConst377 = (2 * (1.450071084655647f - fConst68));
		fConst378 = (1.450071084655647f + ((fConst70 - 0.7431304601070396f) / fConst66));
		fConst379 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst70) / fConst66)));
		fConst380 = (2 * (4.076781969643807f - fConst68));
		fConst381 = (4.076781969643807f + ((fConst70 - 3.1897274020965583f) / fConst66));
		fConst382 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst70) / fConst66)));
		for (int i=0; i<3; i++) fRec73[i] = 0;
		fConst383 = (0.0017661728399818856f / fConst67);
		fConst384 = (0.00040767818495825777f + fConst383);
		fConst385 = (2 * (0.00040767818495825777f - fConst383));
		for (int i=0; i<3; i++) fRec72[i] = 0;
		fConst386 = (11.052052171507189f / fConst67);
		fConst387 = (1.450071084655647f + fConst386);
		fConst388 = (2 * (1.450071084655647f - fConst386));
		for (int i=0; i<3; i++) fRec71[i] = 0;
		fConst389 = (50.063807016150385f / fConst67);
		fConst390 = (0.9351401670315425f + fConst389);
		fConst391 = (2 * (0.9351401670315425f - fConst389));
		for (int i=0; i<2; i++) fRec70[i] = 0;
		fConst392 = (2 * (0.9351401670315425f - fConst81));
		fConst393 = (0.9351401670315425f + ((fConst83 - 0.157482159302087f) / fConst79));
		fConst394 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst83) / fConst79)));
		fConst395 = (2 * (1.450071084655647f - fConst81));
		fConst396 = (1.450071084655647f + ((fConst83 - 0.7431304601070396f) / fConst79));
		fConst397 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst83) / fConst79)));
		fConst398 = (2 * (4.076781969643807f - fConst81));
		fConst399 = (4.076781969643807f + ((fConst83 - 3.1897274020965583f) / fConst79));
		fConst400 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst83) / fConst79)));
		for (int i=0; i<3; i++) fRec77[i] = 0;
		fConst401 = (0.0017661728399818856f / fConst80);
		fConst402 = (0.00040767818495825777f + fConst401);
		fConst403 = (2 * (0.00040767818495825777f - fConst401));
		for (int i=0; i<3; i++) fRec76[i] = 0;
		fConst404 = (11.052052171507189f / fConst80);
		fConst405 = (1.450071084655647f + fConst404);
		fConst406 = (2 * (1.450071084655647f - fConst404));
		for (int i=0; i<3; i++) fRec75[i] = 0;
		fConst407 = (50.063807016150385f / fConst80);
		fConst408 = (0.9351401670315425f + fConst407);
		fConst409 = (2 * (0.9351401670315425f - fConst407));
		for (int i=0; i<2; i++) fRec74[i] = 0;
		fConst410 = (2 * (0.9351401670315425f - fConst94));
		fConst411 = (0.9351401670315425f + ((fConst96 - 0.157482159302087f) / fConst92));
		fConst412 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst96) / fConst92)));
		fConst413 = (2 * (1.450071084655647f - fConst94));
		fConst414 = (1.450071084655647f + ((fConst96 - 0.7431304601070396f) / fConst92));
		fConst415 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst96) / fConst92)));
		fConst416 = (2 * (4.076781969643807f - fConst94));
		fConst417 = (4.076781969643807f + ((fConst96 - 3.1897274020965583f) / fConst92));
		fConst418 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst96) / fConst92)));
		for (int i=0; i<3; i++) fRec81[i] = 0;
		fConst419 = (0.0017661728399818856f / fConst93);
		fConst420 = (0.00040767818495825777f + fConst419);
		fConst421 = (2 * (0.00040767818495825777f - fConst419));
		for (int i=0; i<3; i++) fRec80[i] = 0;
		fConst422 = (11.052052171507189f / fConst93);
		fConst423 = (1.450071084655647f + fConst422);
		fConst424 = (2 * (1.450071084655647f - fConst422));
		for (int i=0; i<3; i++) fRec79[i] = 0;
		fConst425 = (50.063807016150385f / fConst93);
		fConst426 = (0.9351401670315425f + fConst425);
		fConst427 = (2 * (0.9351401670315425f - fConst425));
		for (int i=0; i<2; i++) fRec78[i] = 0;
		fConst428 = (2 * (0.9351401670315425f - fConst107));
		fConst429 = (0.9351401670315425f + ((fConst109 - 0.157482159302087f) / fConst105));
		fConst430 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst109) / fConst105)));
		fConst431 = (2 * (1.450071084655647f - fConst107));
		fConst432 = (1.450071084655647f + ((fConst109 - 0.7431304601070396f) / fConst105));
		fConst433 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst109) / fConst105)));
		fConst434 = (2 * (4.076781969643807f - fConst107));
		fConst435 = (4.076781969643807f + ((fConst109 - 3.1897274020965583f) / fConst105));
		fConst436 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst109) / fConst105)));
		for (int i=0; i<3; i++) fRec85[i] = 0;
		fConst437 = (0.0017661728399818856f / fConst106);
		fConst438 = (0.00040767818495825777f + fConst437);
		fConst439 = (2 * (0.00040767818495825777f - fConst437));
		for (int i=0; i<3; i++) fRec84[i] = 0;
		fConst440 = (11.052052171507189f / fConst106);
		fConst441 = (1.450071084655647f + fConst440);
		fConst442 = (2 * (1.450071084655647f - fConst440));
		for (int i=0; i<3; i++) fRec83[i] = 0;
		fConst443 = (50.063807016150385f / fConst106);
		fConst444 = (0.9351401670315425f + fConst443);
		fConst445 = (2 * (0.9351401670315425f - fConst443));
		for (int i=0; i<2; i++) fRec82[i] = 0;
		fConst446 = (2 * (0.9351401670315425f - fConst120));
		fConst447 = (0.9351401670315425f + ((fConst122 - 0.157482159302087f) / fConst118));
		fConst448 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst122) / fConst118)));
		fConst449 = (2 * (1.450071084655647f - fConst120));
		fConst450 = (1.450071084655647f + ((fConst122 - 0.7431304601070396f) / fConst118));
		fConst451 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst122) / fConst118)));
		fConst452 = (2 * (4.076781969643807f - fConst120));
		fConst453 = (4.076781969643807f + ((fConst122 - 3.1897274020965583f) / fConst118));
		fConst454 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst122) / fConst118)));
		for (int i=0; i<3; i++) fRec89[i] = 0;
		fConst455 = (0.0017661728399818856f / fConst119);
		fConst456 = (0.00040767818495825777f + fConst455);
		fConst457 = (2 * (0.00040767818495825777f - fConst455));
		for (int i=0; i<3; i++) fRec88[i] = 0;
		fConst458 = (11.052052171507189f / fConst119);
		fConst459 = (1.450071084655647f + fConst458);
		fConst460 = (2 * (1.450071084655647f - fConst458));
		for (int i=0; i<3; i++) fRec87[i] = 0;
		fConst461 = (50.063807016150385f / fConst119);
		fConst462 = (0.9351401670315425f + fConst461);
		fConst463 = (2 * (0.9351401670315425f - fConst461));
		for (int i=0; i<2; i++) fRec86[i] = 0;
		fConst464 = (2 * (0.9351401670315425f - fConst133));
		fConst465 = (0.9351401670315425f + ((fConst135 - 0.157482159302087f) / fConst131));
		fConst466 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst135) / fConst131)));
		fConst467 = (2 * (1.450071084655647f - fConst133));
		fConst468 = (1.450071084655647f + ((fConst135 - 0.7431304601070396f) / fConst131));
		fConst469 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst135) / fConst131)));
		fConst470 = (2 * (4.076781969643807f - fConst133));
		fConst471 = (4.076781969643807f + ((fConst135 - 3.1897274020965583f) / fConst131));
		fConst472 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst135) / fConst131)));
		for (int i=0; i<3; i++) fRec93[i] = 0;
		fConst473 = (0.0017661728399818856f / fConst132);
		fConst474 = (0.00040767818495825777f + fConst473);
		fConst475 = (2 * (0.00040767818495825777f - fConst473));
		for (int i=0; i<3; i++) fRec92[i] = 0;
		fConst476 = (11.052052171507189f / fConst132);
		fConst477 = (1.450071084655647f + fConst476);
		fConst478 = (2 * (1.450071084655647f - fConst476));
		for (int i=0; i<3; i++) fRec91[i] = 0;
		fConst479 = (50.063807016150385f / fConst132);
		fConst480 = (0.9351401670315425f + fConst479);
		fConst481 = (2 * (0.9351401670315425f - fConst479));
		for (int i=0; i<2; i++) fRec90[i] = 0;
		fConst482 = (2 * (0.9351401670315425f - fConst146));
		fConst483 = (0.9351401670315425f + ((fConst148 - 0.157482159302087f) / fConst144));
		fConst484 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst148) / fConst144)));
		fConst485 = (2 * (1.450071084655647f - fConst146));
		fConst486 = (1.450071084655647f + ((fConst148 - 0.7431304601070396f) / fConst144));
		fConst487 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst148) / fConst144)));
		fConst488 = (2 * (4.076781969643807f - fConst146));
		fConst489 = (4.076781969643807f + ((fConst148 - 3.1897274020965583f) / fConst144));
		fConst490 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst148) / fConst144)));
		for (int i=0; i<3; i++) fRec97[i] = 0;
		fConst491 = (0.0017661728399818856f / fConst145);
		fConst492 = (0.00040767818495825777f + fConst491);
		fConst493 = (2 * (0.00040767818495825777f - fConst491));
		for (int i=0; i<3; i++) fRec96[i] = 0;
		fConst494 = (11.052052171507189f / fConst145);
		fConst495 = (1.450071084655647f + fConst494);
		fConst496 = (2 * (1.450071084655647f - fConst494));
		for (int i=0; i<3; i++) fRec95[i] = 0;
		fConst497 = (50.063807016150385f / fConst145);
		fConst498 = (0.9351401670315425f + fConst497);
		fConst499 = (2 * (0.9351401670315425f - fConst497));
		for (int i=0; i<2; i++) fRec94[i] = 0;
		fConst500 = (2 * (0.9351401670315425f - fConst159));
		fConst501 = (0.9351401670315425f + ((fConst161 - 0.157482159302087f) / fConst157));
		fConst502 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst161) / fConst157)));
		fConst503 = (2 * (1.450071084655647f - fConst159));
		fConst504 = (1.450071084655647f + ((fConst161 - 0.7431304601070396f) / fConst157));
		fConst505 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst161) / fConst157)));
		fConst506 = (2 * (4.076781969643807f - fConst159));
		fConst507 = (4.076781969643807f + ((fConst161 - 3.1897274020965583f) / fConst157));
		fConst508 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst161) / fConst157)));
		for (int i=0; i<3; i++) fRec101[i] = 0;
		fConst509 = (0.0017661728399818856f / fConst158);
		fConst510 = (0.00040767818495825777f + fConst509);
		fConst511 = (2 * (0.00040767818495825777f - fConst509));
		for (int i=0; i<3; i++) fRec100[i] = 0;
		fConst512 = (11.052052171507189f / fConst158);
		fConst513 = (1.450071084655647f + fConst512);
		fConst514 = (2 * (1.450071084655647f - fConst512));
		for (int i=0; i<3; i++) fRec99[i] = 0;
		fConst515 = (50.063807016150385f / fConst158);
		fConst516 = (0.9351401670315425f + fConst515);
		fConst517 = (2 * (0.9351401670315425f - fConst515));
		for (int i=0; i<2; i++) fRec98[i] = 0;
		fConst518 = (2 * (0.9351401670315425f - fConst172));
		fConst519 = (0.9351401670315425f + ((fConst174 - 0.157482159302087f) / fConst170));
		fConst520 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst174) / fConst170)));
		fConst521 = (2 * (1.450071084655647f - fConst172));
		fConst522 = (1.450071084655647f + ((fConst174 - 0.7431304601070396f) / fConst170));
		fConst523 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst174) / fConst170)));
		fConst524 = (2 * (4.076781969643807f - fConst172));
		fConst525 = (4.076781969643807f + ((fConst174 - 3.1897274020965583f) / fConst170));
		fConst526 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst174) / fConst170)));
		for (int i=0; i<3; i++) fRec105[i] = 0;
		fConst527 = (0.0017661728399818856f / fConst171);
		fConst528 = (0.00040767818495825777f + fConst527);
		fConst529 = (2 * (0.00040767818495825777f - fConst527));
		for (int i=0; i<3; i++) fRec104[i] = 0;
		fConst530 = (11.052052171507189f / fConst171);
		fConst531 = (1.450071084655647f + fConst530);
		fConst532 = (2 * (1.450071084655647f - fConst530));
		for (int i=0; i<3; i++) fRec103[i] = 0;
		fConst533 = (50.063807016150385f / fConst171);
		fConst534 = (0.9351401670315425f + fConst533);
		fConst535 = (2 * (0.9351401670315425f - fConst533));
		for (int i=0; i<2; i++) fRec102[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void buildUserInterface(UI* interface) {
		interface->openVerticalBox("0x00");
		interface->declare(0, "1", "");
		interface->openVerticalBox("0x00");
		interface->declare(0, "0", "");
		interface->declare(0, "tooltip", "Sine oscillator based on 2D vector rotation");
		interface->openVerticalBox("SINE WAVE OSCILLATOR oscrs");
		interface->declare(&fslider4, "1", "");
		interface->declare(&fslider4, "tooltip", "Sawtooth waveform amplitude");
		interface->declare(&fslider4, "unit", "dB");
		interface->addHorizontalSlider("Amplitude", &fslider4, -2e+01f, -1.2e+02f, 1e+01f, 0.1f);
		interface->declare(&fslider3, "2", "");
		interface->declare(&fslider3, "tooltip", "Sine wave frequency as a Piano Key (PK) number (A440 = 49 PK)");
		interface->declare(&fslider3, "unit", "PK");
		interface->addHorizontalSlider("Frequency", &fslider3, 49.0f, 1.0f, 88.0f, 0.01f);
		interface->declare(&fslider2, "3", "");
		interface->declare(&fslider2, "scale", "log");
		interface->declare(&fslider2, "tooltip", "Portamento (frequency-glide) time-constant in seconds");
		interface->declare(&fslider2, "unit", "sec");
		interface->addHorizontalSlider("Portamento", &fslider2, 0.1f, 0.001f, 1e+01f, 0.001f);
		interface->closeBox();
		interface->closeBox();
		interface->declare(0, "2", "");
		interface->openVerticalBox("0x00");
		interface->declare(0, "tooltip", "Reference:          https://ccrma.stanford.edu/~jos/pasp/Cubic_Soft_Clipper.html");
		interface->openVerticalBox("CUBIC NONLINEARITY cubicnl");
		interface->declare(&fcheckbox0, "0", "");
		interface->declare(&fcheckbox0, "tooltip", "When this is checked, the nonlinearity has no effect");
		interface->addCheckButton("Bypass", &fcheckbox0);
		interface->declare(&fslider1, "1", "");
		interface->declare(&fslider1, "tooltip", "Amount of distortion");
		interface->addHorizontalSlider("Drive", &fslider1, 0.0f, 0.0f, 1.0f, 0.01f);
		interface->declare(&fslider0, "2", "");
		interface->declare(&fslider0, "tooltip", "Brings in even harmonics");
		interface->addHorizontalSlider("Offset", &fslider0, 0.0f, 0.0f, 1.0f, 0.01f);
		interface->closeBox();
		interface->closeBox();
		interface->declare(0, "3", "");
		interface->openVerticalBox("0x00");
		interface->declare(0, "0", "");
		interface->declare(0, "tooltip", "See Faust's filter.lib for documentation and references");
		interface->openHorizontalBox("CONSTANT-Q SPECTRUM ANALYZER (6E), 15 bands spanning LP, 9 octaves below 16000 Hz, HP");
		interface->declare(&fbargraph0, "0", "");
		interface->declare(&fbargraph0, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph0, "unit", "dB");
		interface->addVerticalBargraph("0x473b950", &fbargraph0, -5e+01f, 1e+01f);
		interface->declare(&fbargraph1, "1", "");
		interface->declare(&fbargraph1, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph1, "unit", "dB");
		interface->addVerticalBargraph("0x47456b0", &fbargraph1, -5e+01f, 1e+01f);
		interface->declare(&fbargraph2, "2", "");
		interface->declare(&fbargraph2, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph2, "unit", "dB");
		interface->addVerticalBargraph("0x474e970", &fbargraph2, -5e+01f, 1e+01f);
		interface->declare(&fbargraph3, "3", "");
		interface->declare(&fbargraph3, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph3, "unit", "dB");
		interface->addVerticalBargraph("0x4757810", &fbargraph3, -5e+01f, 1e+01f);
		interface->declare(&fbargraph4, "4", "");
		interface->declare(&fbargraph4, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph4, "unit", "dB");
		interface->addVerticalBargraph("0x4760b10", &fbargraph4, -5e+01f, 1e+01f);
		interface->declare(&fbargraph5, "5", "");
		interface->declare(&fbargraph5, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph5, "unit", "dB");
		interface->addVerticalBargraph("0x476a130", &fbargraph5, -5e+01f, 1e+01f);
		interface->declare(&fbargraph6, "6", "");
		interface->declare(&fbargraph6, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph6, "unit", "dB");
		interface->addVerticalBargraph("0x4773440", &fbargraph6, -5e+01f, 1e+01f);
		interface->declare(&fbargraph7, "7", "");
		interface->declare(&fbargraph7, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph7, "unit", "dB");
		interface->addVerticalBargraph("0x477c620", &fbargraph7, -5e+01f, 1e+01f);
		interface->declare(&fbargraph8, "8", "");
		interface->declare(&fbargraph8, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph8, "unit", "dB");
		interface->addVerticalBargraph("0x4785db0", &fbargraph8, -5e+01f, 1e+01f);
		interface->declare(&fbargraph9, "9", "");
		interface->declare(&fbargraph9, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph9, "unit", "dB");
		interface->addVerticalBargraph("0x478f350", &fbargraph9, -5e+01f, 1e+01f);
		interface->declare(&fbargraph10, "10", "");
		interface->declare(&fbargraph10, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph10, "unit", "dB");
		interface->addVerticalBargraph("0x4798650", &fbargraph10, -5e+01f, 1e+01f);
		interface->declare(&fbargraph11, "11", "");
		interface->declare(&fbargraph11, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph11, "unit", "dB");
		interface->addVerticalBargraph("0x47a1dd0", &fbargraph11, -5e+01f, 1e+01f);
		interface->declare(&fbargraph12, "12", "");
		interface->declare(&fbargraph12, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph12, "unit", "dB");
		interface->addVerticalBargraph("0x47ab830", &fbargraph12, -5e+01f, 1e+01f);
		interface->declare(&fbargraph13, "13", "");
		interface->declare(&fbargraph13, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph13, "unit", "dB");
		interface->addVerticalBargraph("0x47b5040", &fbargraph13, -5e+01f, 1e+01f);
		interface->declare(&fbargraph14, "14", "");
		interface->declare(&fbargraph14, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph14, "unit", "dB");
		interface->addVerticalBargraph("0x47be7d0", &fbargraph14, -5e+01f, 1e+01f);
		interface->closeBox();
		interface->declare(0, "1", "");
		interface->openHorizontalBox("SPECTRUM ANALYZER CONTROLS");
		interface->declare(&fslider5, "0", "");
		interface->declare(&fslider5, "scale", "log");
		interface->declare(&fslider5, "tooltip", "band-level averaging time in milliseconds");
		interface->declare(&fslider5, "unit", "ms");
		interface->addHorizontalSlider("Level Averaging Time", &fslider5, 1e+02f, 1.0f, 1e+04f, 1.0f);
		interface->declare(&fslider6, "1", "");
		interface->declare(&fslider6, "tooltip", "Level offset in decibels");
		interface->declare(&fslider6, "unit", "dB");
		interface->addHorizontalSlider("Level dB Offset", &fslider6, 5e+01f, 0.0f, 1e+02f, 1.0f);
		interface->closeBox();
		interface->closeBox();
		interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0 = (0.0010000000000000009f * float(fslider0));
		float 	fSlow1 = (0.0010000000000000009f * float(fslider1));
		float 	fSlow2 = expf((0 - (fConst183 / float(fslider2))));
		float 	fSlow3 = (4.4e+02f * (powf(2.0f,(0.08333333333333333f * (float(fslider3) - 49.0f))) * (1.0f - fSlow2)));
		float 	fSlow4 = (0.0010000000000000009f * powf(10,(0.05f * float(fslider4))));
		int 	iSlow5 = int(float(fcheckbox0));
		float 	fSlow6 = expf((0 - (fConst283 / float(fslider5))));
		float 	fSlow7 = (1.0f - fSlow6);
		float 	fSlow8 = float(fslider6);
		FAUSTFLOAT* output0 = output[0];
		FAUSTFLOAT* output1 = output[1];
		for (int i=0; i<count; i++) {
			iVec0[0] = 1;
			fRec44[0] = ((0.999f * fRec44[1]) + fSlow0);
			fRec45[0] = ((0.999f * fRec45[1]) + fSlow1);
			fRec48[0] = ((fSlow2 * fRec48[1]) + fSlow3);
			float fTemp0 = (fConst184 * fRec48[0]);
			float fTemp1 = cosf(fTemp0);
			float fTemp2 = sinf(fTemp0);
			fRec46[0] = ((fRec47[1] * fTemp2) + (fRec46[1] * fTemp1));
			fRec47[0] = ((1 + ((fRec47[1] * fTemp1) + (fRec46[1] * (0 - fTemp2)))) - iVec0[1]);
			fRec49[0] = ((0.999f * fRec49[1]) + fSlow4);
			float fTemp3 = (fRec49[0] * fRec46[0]);
			float fTemp4 = max((float)-1, min((float)1, ((((iSlow5)?0:fTemp3) * powf(1e+01f,(2 * fRec45[0]))) + fRec44[0])));
			float fTemp5 = (fTemp4 * (1 - (0.3333333333333333f * faustpower<2>(fTemp4))));
			fVec1[0] = fTemp5;
			fRec43[0] = (((0.995f * fRec43[1]) + fVec1[0]) - fVec1[1]);
			float fTemp6 = ((iSlow5)?fTemp3:fRec43[0]);
			fRec42[0] = (fTemp6 - (fConst182 * ((fConst181 * fRec42[2]) + (fConst180 * fRec42[1]))));
			fRec41[0] = ((fConst182 * (((fConst186 * fRec42[0]) + (fConst187 * fRec42[1])) + (fConst186 * fRec42[2]))) - (fConst179 * ((fConst178 * fRec41[2]) + (fConst177 * fRec41[1]))));
			fRec40[0] = ((fConst179 * (((fConst188 * fRec41[0]) + (fConst189 * fRec41[1])) + (fConst188 * fRec41[2]))) - (fConst176 * ((fConst175 * fRec40[2]) + (fConst173 * fRec40[1]))));
			float fTemp7 = (fConst176 * (((fConst190 * fRec40[0]) + (fConst191 * fRec40[1])) + (fConst190 * fRec40[2])));
			fRec39[0] = (fTemp7 - (fConst169 * ((fConst168 * fRec39[2]) + (fConst167 * fRec39[1]))));
			fRec38[0] = ((fConst169 * (((fConst193 * fRec39[0]) + (fConst194 * fRec39[1])) + (fConst193 * fRec39[2]))) - (fConst166 * ((fConst165 * fRec38[2]) + (fConst164 * fRec38[1]))));
			fRec37[0] = ((fConst166 * (((fConst195 * fRec38[0]) + (fConst196 * fRec38[1])) + (fConst195 * fRec38[2]))) - (fConst163 * ((fConst162 * fRec37[2]) + (fConst160 * fRec37[1]))));
			float fTemp8 = (fConst163 * (((fConst197 * fRec37[0]) + (fConst198 * fRec37[1])) + (fConst197 * fRec37[2])));
			fRec36[0] = (fTemp8 - (fConst156 * ((fConst155 * fRec36[2]) + (fConst154 * fRec36[1]))));
			fRec35[0] = ((fConst156 * (((fConst200 * fRec36[0]) + (fConst201 * fRec36[1])) + (fConst200 * fRec36[2]))) - (fConst153 * ((fConst152 * fRec35[2]) + (fConst151 * fRec35[1]))));
			fRec34[0] = ((fConst153 * (((fConst202 * fRec35[0]) + (fConst203 * fRec35[1])) + (fConst202 * fRec35[2]))) - (fConst150 * ((fConst149 * fRec34[2]) + (fConst147 * fRec34[1]))));
			float fTemp9 = (fConst150 * (((fConst204 * fRec34[0]) + (fConst205 * fRec34[1])) + (fConst204 * fRec34[2])));
			fRec33[0] = (fTemp9 - (fConst143 * ((fConst142 * fRec33[2]) + (fConst141 * fRec33[1]))));
			fRec32[0] = ((fConst143 * (((fConst207 * fRec33[0]) + (fConst208 * fRec33[1])) + (fConst207 * fRec33[2]))) - (fConst140 * ((fConst139 * fRec32[2]) + (fConst138 * fRec32[1]))));
			fRec31[0] = ((fConst140 * (((fConst209 * fRec32[0]) + (fConst210 * fRec32[1])) + (fConst209 * fRec32[2]))) - (fConst137 * ((fConst136 * fRec31[2]) + (fConst134 * fRec31[1]))));
			float fTemp10 = (fConst137 * (((fConst211 * fRec31[0]) + (fConst212 * fRec31[1])) + (fConst211 * fRec31[2])));
			fRec30[0] = (fTemp10 - (fConst130 * ((fConst129 * fRec30[2]) + (fConst128 * fRec30[1]))));
			fRec29[0] = ((fConst130 * (((fConst214 * fRec30[0]) + (fConst215 * fRec30[1])) + (fConst214 * fRec30[2]))) - (fConst127 * ((fConst126 * fRec29[2]) + (fConst125 * fRec29[1]))));
			fRec28[0] = ((fConst127 * (((fConst216 * fRec29[0]) + (fConst217 * fRec29[1])) + (fConst216 * fRec29[2]))) - (fConst124 * ((fConst123 * fRec28[2]) + (fConst121 * fRec28[1]))));
			float fTemp11 = (fConst124 * (((fConst218 * fRec28[0]) + (fConst219 * fRec28[1])) + (fConst218 * fRec28[2])));
			fRec27[0] = (fTemp11 - (fConst117 * ((fConst116 * fRec27[2]) + (fConst115 * fRec27[1]))));
			fRec26[0] = ((fConst117 * (((fConst221 * fRec27[0]) + (fConst222 * fRec27[1])) + (fConst221 * fRec27[2]))) - (fConst114 * ((fConst113 * fRec26[2]) + (fConst112 * fRec26[1]))));
			fRec25[0] = ((fConst114 * (((fConst223 * fRec26[0]) + (fConst224 * fRec26[1])) + (fConst223 * fRec26[2]))) - (fConst111 * ((fConst110 * fRec25[2]) + (fConst108 * fRec25[1]))));
			float fTemp12 = (fConst111 * (((fConst225 * fRec25[0]) + (fConst226 * fRec25[1])) + (fConst225 * fRec25[2])));
			fRec24[0] = (fTemp12 - (fConst104 * ((fConst103 * fRec24[2]) + (fConst102 * fRec24[1]))));
			fRec23[0] = ((fConst104 * (((fConst228 * fRec24[0]) + (fConst229 * fRec24[1])) + (fConst228 * fRec24[2]))) - (fConst101 * ((fConst100 * fRec23[2]) + (fConst99 * fRec23[1]))));
			fRec22[0] = ((fConst101 * (((fConst230 * fRec23[0]) + (fConst231 * fRec23[1])) + (fConst230 * fRec23[2]))) - (fConst98 * ((fConst97 * fRec22[2]) + (fConst95 * fRec22[1]))));
			float fTemp13 = (fConst98 * (((fConst232 * fRec22[0]) + (fConst233 * fRec22[1])) + (fConst232 * fRec22[2])));
			fRec21[0] = (fTemp13 - (fConst91 * ((fConst90 * fRec21[2]) + (fConst89 * fRec21[1]))));
			fRec20[0] = ((fConst91 * (((fConst235 * fRec21[0]) + (fConst236 * fRec21[1])) + (fConst235 * fRec21[2]))) - (fConst88 * ((fConst87 * fRec20[2]) + (fConst86 * fRec20[1]))));
			fRec19[0] = ((fConst88 * (((fConst237 * fRec20[0]) + (fConst238 * fRec20[1])) + (fConst237 * fRec20[2]))) - (fConst85 * ((fConst84 * fRec19[2]) + (fConst82 * fRec19[1]))));
			float fTemp14 = (fConst85 * (((fConst239 * fRec19[0]) + (fConst240 * fRec19[1])) + (fConst239 * fRec19[2])));
			fRec18[0] = (fTemp14 - (fConst78 * ((fConst77 * fRec18[2]) + (fConst76 * fRec18[1]))));
			fRec17[0] = ((fConst78 * (((fConst242 * fRec18[0]) + (fConst243 * fRec18[1])) + (fConst242 * fRec18[2]))) - (fConst75 * ((fConst74 * fRec17[2]) + (fConst73 * fRec17[1]))));
			fRec16[0] = ((fConst75 * (((fConst244 * fRec17[0]) + (fConst245 * fRec17[1])) + (fConst244 * fRec17[2]))) - (fConst72 * ((fConst71 * fRec16[2]) + (fConst69 * fRec16[1]))));
			float fTemp15 = (fConst72 * (((fConst246 * fRec16[0]) + (fConst247 * fRec16[1])) + (fConst246 * fRec16[2])));
			fRec15[0] = (fTemp15 - (fConst65 * ((fConst64 * fRec15[2]) + (fConst63 * fRec15[1]))));
			fRec14[0] = ((fConst65 * (((fConst249 * fRec15[0]) + (fConst250 * fRec15[1])) + (fConst249 * fRec15[2]))) - (fConst62 * ((fConst61 * fRec14[2]) + (fConst60 * fRec14[1]))));
			fRec13[0] = ((fConst62 * (((fConst251 * fRec14[0]) + (fConst252 * fRec14[1])) + (fConst251 * fRec14[2]))) - (fConst59 * ((fConst58 * fRec13[2]) + (fConst56 * fRec13[1]))));
			float fTemp16 = (fConst59 * (((fConst253 * fRec13[0]) + (fConst254 * fRec13[1])) + (fConst253 * fRec13[2])));
			fRec12[0] = (fTemp16 - (fConst52 * ((fConst51 * fRec12[2]) + (fConst50 * fRec12[1]))));
			fRec11[0] = ((fConst52 * (((fConst256 * fRec12[0]) + (fConst257 * fRec12[1])) + (fConst256 * fRec12[2]))) - (fConst49 * ((fConst48 * fRec11[2]) + (fConst47 * fRec11[1]))));
			fRec10[0] = ((fConst49 * (((fConst258 * fRec11[0]) + (fConst259 * fRec11[1])) + (fConst258 * fRec11[2]))) - (fConst46 * ((fConst45 * fRec10[2]) + (fConst43 * fRec10[1]))));
			float fTemp17 = (fConst46 * (((fConst260 * fRec10[0]) + (fConst261 * fRec10[1])) + (fConst260 * fRec10[2])));
			fRec9[0] = (fTemp17 - (fConst39 * ((fConst38 * fRec9[2]) + (fConst37 * fRec9[1]))));
			fRec8[0] = ((fConst39 * (((fConst263 * fRec9[0]) + (fConst264 * fRec9[1])) + (fConst263 * fRec9[2]))) - (fConst36 * ((fConst35 * fRec8[2]) + (fConst34 * fRec8[1]))));
			fRec7[0] = ((fConst36 * (((fConst265 * fRec8[0]) + (fConst266 * fRec8[1])) + (fConst265 * fRec8[2]))) - (fConst33 * ((fConst32 * fRec7[2]) + (fConst30 * fRec7[1]))));
			float fTemp18 = (fConst33 * (((fConst267 * fRec7[0]) + (fConst268 * fRec7[1])) + (fConst267 * fRec7[2])));
			fRec6[0] = (fTemp18 - (fConst26 * ((fConst25 * fRec6[2]) + (fConst24 * fRec6[1]))));
			fRec5[0] = ((fConst26 * (((fConst270 * fRec6[0]) + (fConst271 * fRec6[1])) + (fConst270 * fRec6[2]))) - (fConst23 * ((fConst22 * fRec5[2]) + (fConst21 * fRec5[1]))));
			fRec4[0] = ((fConst23 * (((fConst272 * fRec5[0]) + (fConst273 * fRec5[1])) + (fConst272 * fRec5[2]))) - (fConst20 * ((fConst19 * fRec4[2]) + (fConst17 * fRec4[1]))));
			float fTemp19 = (fConst20 * (((fConst274 * fRec4[0]) + (fConst275 * fRec4[1])) + (fConst274 * fRec4[2])));
			fRec3[0] = (fTemp19 - (fConst13 * ((fConst12 * fRec3[2]) + (fConst11 * fRec3[1]))));
			fRec2[0] = ((fConst13 * (((fConst277 * fRec3[0]) + (fConst278 * fRec3[1])) + (fConst277 * fRec3[2]))) - (fConst10 * ((fConst9 * fRec2[2]) + (fConst8 * fRec2[1]))));
			fRec1[0] = ((fConst10 * (((fConst279 * fRec2[0]) + (fConst280 * fRec2[1])) + (fConst279 * fRec2[2]))) - (fConst7 * ((fConst6 * fRec1[2]) + (fConst4 * fRec1[1]))));
			fRec0[0] = ((fSlow6 * fRec0[1]) + (fSlow7 * fabsf((fConst7 * (((fConst281 * fRec1[0]) + (fConst282 * fRec1[1])) + (fConst281 * fRec1[2]))))));
			fbargraph0 = (fSlow8 + (20 * log10f(fRec0[0])));
			fRec53[0] = (fTemp19 - (fConst292 * ((fConst291 * fRec53[2]) + (fConst290 * fRec53[1]))));
			fRec52[0] = ((fConst292 * (((fConst294 * fRec53[0]) + (fConst295 * fRec53[1])) + (fConst294 * fRec53[2]))) - (fConst289 * ((fConst288 * fRec52[2]) + (fConst287 * fRec52[1]))));
			fRec51[0] = ((fConst289 * (((fConst297 * fRec52[0]) + (fConst298 * fRec52[1])) + (fConst297 * fRec52[2]))) - (fConst286 * ((fConst285 * fRec51[2]) + (fConst284 * fRec51[1]))));
			fRec50[0] = ((fSlow6 * fRec50[1]) + (fSlow7 * fabsf((fConst286 * (((fConst300 * fRec51[0]) + (fConst301 * fRec51[1])) + (fConst300 * fRec51[2]))))));
			fbargraph1 = (fSlow8 + (20 * log10f(fRec50[0])));
			fRec57[0] = (fTemp18 - (fConst310 * ((fConst309 * fRec57[2]) + (fConst308 * fRec57[1]))));
			fRec56[0] = ((fConst310 * (((fConst312 * fRec57[0]) + (fConst313 * fRec57[1])) + (fConst312 * fRec57[2]))) - (fConst307 * ((fConst306 * fRec56[2]) + (fConst305 * fRec56[1]))));
			fRec55[0] = ((fConst307 * (((fConst315 * fRec56[0]) + (fConst316 * fRec56[1])) + (fConst315 * fRec56[2]))) - (fConst304 * ((fConst303 * fRec55[2]) + (fConst302 * fRec55[1]))));
			fRec54[0] = ((fSlow6 * fRec54[1]) + (fSlow7 * fabsf((fConst304 * (((fConst318 * fRec55[0]) + (fConst319 * fRec55[1])) + (fConst318 * fRec55[2]))))));
			fbargraph2 = (fSlow8 + (20 * log10f(fRec54[0])));
			fRec61[0] = (fTemp17 - (fConst328 * ((fConst327 * fRec61[2]) + (fConst326 * fRec61[1]))));
			fRec60[0] = ((fConst328 * (((fConst330 * fRec61[0]) + (fConst331 * fRec61[1])) + (fConst330 * fRec61[2]))) - (fConst325 * ((fConst324 * fRec60[2]) + (fConst323 * fRec60[1]))));
			fRec59[0] = ((fConst325 * (((fConst333 * fRec60[0]) + (fConst334 * fRec60[1])) + (fConst333 * fRec60[2]))) - (fConst322 * ((fConst321 * fRec59[2]) + (fConst320 * fRec59[1]))));
			fRec58[0] = ((fSlow6 * fRec58[1]) + (fSlow7 * fabsf((fConst322 * (((fConst336 * fRec59[0]) + (fConst337 * fRec59[1])) + (fConst336 * fRec59[2]))))));
			fbargraph3 = (fSlow8 + (20 * log10f(fRec58[0])));
			fRec65[0] = (fTemp16 - (fConst346 * ((fConst345 * fRec65[2]) + (fConst344 * fRec65[1]))));
			fRec64[0] = ((fConst346 * (((fConst348 * fRec65[0]) + (fConst349 * fRec65[1])) + (fConst348 * fRec65[2]))) - (fConst343 * ((fConst342 * fRec64[2]) + (fConst341 * fRec64[1]))));
			fRec63[0] = ((fConst343 * (((fConst351 * fRec64[0]) + (fConst352 * fRec64[1])) + (fConst351 * fRec64[2]))) - (fConst340 * ((fConst339 * fRec63[2]) + (fConst338 * fRec63[1]))));
			fRec62[0] = ((fSlow6 * fRec62[1]) + (fSlow7 * fabsf((fConst340 * (((fConst354 * fRec63[0]) + (fConst355 * fRec63[1])) + (fConst354 * fRec63[2]))))));
			fbargraph4 = (fSlow8 + (20 * log10f(fRec62[0])));
			fRec69[0] = (fTemp15 - (fConst364 * ((fConst363 * fRec69[2]) + (fConst362 * fRec69[1]))));
			fRec68[0] = ((fConst364 * (((fConst366 * fRec69[0]) + (fConst367 * fRec69[1])) + (fConst366 * fRec69[2]))) - (fConst361 * ((fConst360 * fRec68[2]) + (fConst359 * fRec68[1]))));
			fRec67[0] = ((fConst361 * (((fConst369 * fRec68[0]) + (fConst370 * fRec68[1])) + (fConst369 * fRec68[2]))) - (fConst358 * ((fConst357 * fRec67[2]) + (fConst356 * fRec67[1]))));
			fRec66[0] = ((fSlow6 * fRec66[1]) + (fSlow7 * fabsf((fConst358 * (((fConst372 * fRec67[0]) + (fConst373 * fRec67[1])) + (fConst372 * fRec67[2]))))));
			fbargraph5 = (fSlow8 + (20 * log10f(fRec66[0])));
			fRec73[0] = (fTemp14 - (fConst382 * ((fConst381 * fRec73[2]) + (fConst380 * fRec73[1]))));
			fRec72[0] = ((fConst382 * (((fConst384 * fRec73[0]) + (fConst385 * fRec73[1])) + (fConst384 * fRec73[2]))) - (fConst379 * ((fConst378 * fRec72[2]) + (fConst377 * fRec72[1]))));
			fRec71[0] = ((fConst379 * (((fConst387 * fRec72[0]) + (fConst388 * fRec72[1])) + (fConst387 * fRec72[2]))) - (fConst376 * ((fConst375 * fRec71[2]) + (fConst374 * fRec71[1]))));
			fRec70[0] = ((fSlow6 * fRec70[1]) + (fSlow7 * fabsf((fConst376 * (((fConst390 * fRec71[0]) + (fConst391 * fRec71[1])) + (fConst390 * fRec71[2]))))));
			fbargraph6 = (fSlow8 + (20 * log10f(fRec70[0])));
			fRec77[0] = (fTemp13 - (fConst400 * ((fConst399 * fRec77[2]) + (fConst398 * fRec77[1]))));
			fRec76[0] = ((fConst400 * (((fConst402 * fRec77[0]) + (fConst403 * fRec77[1])) + (fConst402 * fRec77[2]))) - (fConst397 * ((fConst396 * fRec76[2]) + (fConst395 * fRec76[1]))));
			fRec75[0] = ((fConst397 * (((fConst405 * fRec76[0]) + (fConst406 * fRec76[1])) + (fConst405 * fRec76[2]))) - (fConst394 * ((fConst393 * fRec75[2]) + (fConst392 * fRec75[1]))));
			fRec74[0] = ((fSlow6 * fRec74[1]) + (fSlow7 * fabsf((fConst394 * (((fConst408 * fRec75[0]) + (fConst409 * fRec75[1])) + (fConst408 * fRec75[2]))))));
			fbargraph7 = (fSlow8 + (20 * log10f(fRec74[0])));
			fRec81[0] = (fTemp12 - (fConst418 * ((fConst417 * fRec81[2]) + (fConst416 * fRec81[1]))));
			fRec80[0] = ((fConst418 * (((fConst420 * fRec81[0]) + (fConst421 * fRec81[1])) + (fConst420 * fRec81[2]))) - (fConst415 * ((fConst414 * fRec80[2]) + (fConst413 * fRec80[1]))));
			fRec79[0] = ((fConst415 * (((fConst423 * fRec80[0]) + (fConst424 * fRec80[1])) + (fConst423 * fRec80[2]))) - (fConst412 * ((fConst411 * fRec79[2]) + (fConst410 * fRec79[1]))));
			fRec78[0] = ((fSlow6 * fRec78[1]) + (fSlow7 * fabsf((fConst412 * (((fConst426 * fRec79[0]) + (fConst427 * fRec79[1])) + (fConst426 * fRec79[2]))))));
			fbargraph8 = (fSlow8 + (20 * log10f(fRec78[0])));
			fRec85[0] = (fTemp11 - (fConst436 * ((fConst435 * fRec85[2]) + (fConst434 * fRec85[1]))));
			fRec84[0] = ((fConst436 * (((fConst438 * fRec85[0]) + (fConst439 * fRec85[1])) + (fConst438 * fRec85[2]))) - (fConst433 * ((fConst432 * fRec84[2]) + (fConst431 * fRec84[1]))));
			fRec83[0] = ((fConst433 * (((fConst441 * fRec84[0]) + (fConst442 * fRec84[1])) + (fConst441 * fRec84[2]))) - (fConst430 * ((fConst429 * fRec83[2]) + (fConst428 * fRec83[1]))));
			fRec82[0] = ((fSlow6 * fRec82[1]) + (fSlow7 * fabsf((fConst430 * (((fConst444 * fRec83[0]) + (fConst445 * fRec83[1])) + (fConst444 * fRec83[2]))))));
			fbargraph9 = (fSlow8 + (20 * log10f(fRec82[0])));
			fRec89[0] = (fTemp10 - (fConst454 * ((fConst453 * fRec89[2]) + (fConst452 * fRec89[1]))));
			fRec88[0] = ((fConst454 * (((fConst456 * fRec89[0]) + (fConst457 * fRec89[1])) + (fConst456 * fRec89[2]))) - (fConst451 * ((fConst450 * fRec88[2]) + (fConst449 * fRec88[1]))));
			fRec87[0] = ((fConst451 * (((fConst459 * fRec88[0]) + (fConst460 * fRec88[1])) + (fConst459 * fRec88[2]))) - (fConst448 * ((fConst447 * fRec87[2]) + (fConst446 * fRec87[1]))));
			fRec86[0] = ((fSlow6 * fRec86[1]) + (fSlow7 * fabsf((fConst448 * (((fConst462 * fRec87[0]) + (fConst463 * fRec87[1])) + (fConst462 * fRec87[2]))))));
			fbargraph10 = (fSlow8 + (20 * log10f(fRec86[0])));
			fRec93[0] = (fTemp9 - (fConst472 * ((fConst471 * fRec93[2]) + (fConst470 * fRec93[1]))));
			fRec92[0] = ((fConst472 * (((fConst474 * fRec93[0]) + (fConst475 * fRec93[1])) + (fConst474 * fRec93[2]))) - (fConst469 * ((fConst468 * fRec92[2]) + (fConst467 * fRec92[1]))));
			fRec91[0] = ((fConst469 * (((fConst477 * fRec92[0]) + (fConst478 * fRec92[1])) + (fConst477 * fRec92[2]))) - (fConst466 * ((fConst465 * fRec91[2]) + (fConst464 * fRec91[1]))));
			fRec90[0] = ((fSlow6 * fRec90[1]) + (fSlow7 * fabsf((fConst466 * (((fConst480 * fRec91[0]) + (fConst481 * fRec91[1])) + (fConst480 * fRec91[2]))))));
			fbargraph11 = (fSlow8 + (20 * log10f(fRec90[0])));
			fRec97[0] = (fTemp8 - (fConst490 * ((fConst489 * fRec97[2]) + (fConst488 * fRec97[1]))));
			fRec96[0] = ((fConst490 * (((fConst492 * fRec97[0]) + (fConst493 * fRec97[1])) + (fConst492 * fRec97[2]))) - (fConst487 * ((fConst486 * fRec96[2]) + (fConst485 * fRec96[1]))));
			fRec95[0] = ((fConst487 * (((fConst495 * fRec96[0]) + (fConst496 * fRec96[1])) + (fConst495 * fRec96[2]))) - (fConst484 * ((fConst483 * fRec95[2]) + (fConst482 * fRec95[1]))));
			fRec94[0] = ((fSlow6 * fRec94[1]) + (fSlow7 * fabsf((fConst484 * (((fConst498 * fRec95[0]) + (fConst499 * fRec95[1])) + (fConst498 * fRec95[2]))))));
			fbargraph12 = (fSlow8 + (20 * log10f(fRec94[0])));
			fRec101[0] = (fTemp7 - (fConst508 * ((fConst507 * fRec101[2]) + (fConst506 * fRec101[1]))));
			fRec100[0] = ((fConst508 * (((fConst510 * fRec101[0]) + (fConst511 * fRec101[1])) + (fConst510 * fRec101[2]))) - (fConst505 * ((fConst504 * fRec100[2]) + (fConst503 * fRec100[1]))));
			fRec99[0] = ((fConst505 * (((fConst513 * fRec100[0]) + (fConst514 * fRec100[1])) + (fConst513 * fRec100[2]))) - (fConst502 * ((fConst501 * fRec99[2]) + (fConst500 * fRec99[1]))));
			fRec98[0] = ((fSlow6 * fRec98[1]) + (fSlow7 * fabsf((fConst502 * (((fConst516 * fRec99[0]) + (fConst517 * fRec99[1])) + (fConst516 * fRec99[2]))))));
			fbargraph13 = (fSlow8 + (20 * log10f(fRec98[0])));
			fRec105[0] = (fTemp6 - (fConst526 * ((fConst525 * fRec105[2]) + (fConst524 * fRec105[1]))));
			fRec104[0] = ((fConst526 * (((fConst528 * fRec105[0]) + (fConst529 * fRec105[1])) + (fConst528 * fRec105[2]))) - (fConst523 * ((fConst522 * fRec104[2]) + (fConst521 * fRec104[1]))));
			fRec103[0] = ((fConst523 * (((fConst531 * fRec104[0]) + (fConst532 * fRec104[1])) + (fConst531 * fRec104[2]))) - (fConst520 * ((fConst519 * fRec103[2]) + (fConst518 * fRec103[1]))));
			fRec102[0] = ((fSlow6 * fRec102[1]) + (fSlow7 * fabsf((fConst520 * (((fConst534 * fRec103[0]) + (fConst535 * fRec103[1])) + (fConst534 * fRec103[2]))))));
			fbargraph14 = (fSlow8 + (20 * log10f(fRec102[0])));
			float fTemp20 = fTemp6;
			output0[i] = (FAUSTFLOAT)fTemp20;
			output1[i] = (FAUSTFLOAT)fTemp20;
			// post processing
			fRec102[1] = fRec102[0];
			fRec103[2] = fRec103[1]; fRec103[1] = fRec103[0];
			fRec104[2] = fRec104[1]; fRec104[1] = fRec104[0];
			fRec105[2] = fRec105[1]; fRec105[1] = fRec105[0];
			fRec98[1] = fRec98[0];
			fRec99[2] = fRec99[1]; fRec99[1] = fRec99[0];
			fRec100[2] = fRec100[1]; fRec100[1] = fRec100[0];
			fRec101[2] = fRec101[1]; fRec101[1] = fRec101[0];
			fRec94[1] = fRec94[0];
			fRec95[2] = fRec95[1]; fRec95[1] = fRec95[0];
			fRec96[2] = fRec96[1]; fRec96[1] = fRec96[0];
			fRec97[2] = fRec97[1]; fRec97[1] = fRec97[0];
			fRec90[1] = fRec90[0];
			fRec91[2] = fRec91[1]; fRec91[1] = fRec91[0];
			fRec92[2] = fRec92[1]; fRec92[1] = fRec92[0];
			fRec93[2] = fRec93[1]; fRec93[1] = fRec93[0];
			fRec86[1] = fRec86[0];
			fRec87[2] = fRec87[1]; fRec87[1] = fRec87[0];
			fRec88[2] = fRec88[1]; fRec88[1] = fRec88[0];
			fRec89[2] = fRec89[1]; fRec89[1] = fRec89[0];
			fRec82[1] = fRec82[0];
			fRec83[2] = fRec83[1]; fRec83[1] = fRec83[0];
			fRec84[2] = fRec84[1]; fRec84[1] = fRec84[0];
			fRec85[2] = fRec85[1]; fRec85[1] = fRec85[0];
			fRec78[1] = fRec78[0];
			fRec79[2] = fRec79[1]; fRec79[1] = fRec79[0];
			fRec80[2] = fRec80[1]; fRec80[1] = fRec80[0];
			fRec81[2] = fRec81[1]; fRec81[1] = fRec81[0];
			fRec74[1] = fRec74[0];
			fRec75[2] = fRec75[1]; fRec75[1] = fRec75[0];
			fRec76[2] = fRec76[1]; fRec76[1] = fRec76[0];
			fRec77[2] = fRec77[1]; fRec77[1] = fRec77[0];
			fRec70[1] = fRec70[0];
			fRec71[2] = fRec71[1]; fRec71[1] = fRec71[0];
			fRec72[2] = fRec72[1]; fRec72[1] = fRec72[0];
			fRec73[2] = fRec73[1]; fRec73[1] = fRec73[0];
			fRec66[1] = fRec66[0];
			fRec67[2] = fRec67[1]; fRec67[1] = fRec67[0];
			fRec68[2] = fRec68[1]; fRec68[1] = fRec68[0];
			fRec69[2] = fRec69[1]; fRec69[1] = fRec69[0];
			fRec62[1] = fRec62[0];
			fRec63[2] = fRec63[1]; fRec63[1] = fRec63[0];
			fRec64[2] = fRec64[1]; fRec64[1] = fRec64[0];
			fRec65[2] = fRec65[1]; fRec65[1] = fRec65[0];
			fRec58[1] = fRec58[0];
			fRec59[2] = fRec59[1]; fRec59[1] = fRec59[0];
			fRec60[2] = fRec60[1]; fRec60[1] = fRec60[0];
			fRec61[2] = fRec61[1]; fRec61[1] = fRec61[0];
			fRec54[1] = fRec54[0];
			fRec55[2] = fRec55[1]; fRec55[1] = fRec55[0];
			fRec56[2] = fRec56[1]; fRec56[1] = fRec56[0];
			fRec57[2] = fRec57[1]; fRec57[1] = fRec57[0];
			fRec50[1] = fRec50[0];
			fRec51[2] = fRec51[1]; fRec51[1] = fRec51[0];
			fRec52[2] = fRec52[1]; fRec52[1] = fRec52[0];
			fRec53[2] = fRec53[1]; fRec53[1] = fRec53[0];
			fRec0[1] = fRec0[0];
			fRec1[2] = fRec1[1]; fRec1[1] = fRec1[0];
			fRec2[2] = fRec2[1]; fRec2[1] = fRec2[0];
			fRec3[2] = fRec3[1]; fRec3[1] = fRec3[0];
			fRec4[2] = fRec4[1]; fRec4[1] = fRec4[0];
			fRec5[2] = fRec5[1]; fRec5[1] = fRec5[0];
			fRec6[2] = fRec6[1]; fRec6[1] = fRec6[0];
			fRec7[2] = fRec7[1]; fRec7[1] = fRec7[0];
			fRec8[2] = fRec8[1]; fRec8[1] = fRec8[0];
			fRec9[2] = fRec9[1]; fRec9[1] = fRec9[0];
			fRec10[2] = fRec10[1]; fRec10[1] = fRec10[0];
			fRec11[2] = fRec11[1]; fRec11[1] = fRec11[0];
			fRec12[2] = fRec12[1]; fRec12[1] = fRec12[0];
			fRec13[2] = fRec13[1]; fRec13[1] = fRec13[0];
			fRec14[2] = fRec14[1]; fRec14[1] = fRec14[0];
			fRec15[2] = fRec15[1]; fRec15[1] = fRec15[0];
			fRec16[2] = fRec16[1]; fRec16[1] = fRec16[0];
			fRec17[2] = fRec17[1]; fRec17[1] = fRec17[0];
			fRec18[2] = fRec18[1]; fRec18[1] = fRec18[0];
			fRec19[2] = fRec19[1]; fRec19[1] = fRec19[0];
			fRec20[2] = fRec20[1]; fRec20[1] = fRec20[0];
			fRec21[2] = fRec21[1]; fRec21[1] = fRec21[0];
			fRec22[2] = fRec22[1]; fRec22[1] = fRec22[0];
			fRec23[2] = fRec23[1]; fRec23[1] = fRec23[0];
			fRec24[2] = fRec24[1]; fRec24[1] = fRec24[0];
			fRec25[2] = fRec25[1]; fRec25[1] = fRec25[0];
			fRec26[2] = fRec26[1]; fRec26[1] = fRec26[0];
			fRec27[2] = fRec27[1]; fRec27[1] = fRec27[0];
			fRec28[2] = fRec28[1]; fRec28[1] = fRec28[0];
			fRec29[2] = fRec29[1]; fRec29[1] = fRec29[0];
			fRec30[2] = fRec30[1]; fRec30[1] = fRec30[0];
			fRec31[2] = fRec31[1]; fRec31[1] = fRec31[0];
			fRec32[2] = fRec32[1]; fRec32[1] = fRec32[0];
			fRec33[2] = fRec33[1]; fRec33[1] = fRec33[0];
			fRec34[2] = fRec34[1]; fRec34[1] = fRec34[0];
			fRec35[2] = fRec35[1]; fRec35[1] = fRec35[0];
			fRec36[2] = fRec36[1]; fRec36[1] = fRec36[0];
			fRec37[2] = fRec37[1]; fRec37[1] = fRec37[0];
			fRec38[2] = fRec38[1]; fRec38[1] = fRec38[0];
			fRec39[2] = fRec39[1]; fRec39[1] = fRec39[0];
			fRec40[2] = fRec40[1]; fRec40[1] = fRec40[0];
			fRec41[2] = fRec41[1]; fRec41[1] = fRec41[0];
			fRec42[2] = fRec42[1]; fRec42[1] = fRec42[0];
			fRec43[1] = fRec43[0];
			fVec1[1] = fVec1[0];
			fRec49[1] = fRec49[0];
			fRec47[1] = fRec47[0];
			fRec46[1] = fRec46[0];
			fRec48[1] = fRec48[0];
			fRec45[1] = fRec45[0];
			fRec44[1] = fRec44[0];
			iVec0[1] = iVec0[0];
		}
	}
};


