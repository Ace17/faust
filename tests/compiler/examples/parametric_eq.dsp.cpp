//-----------------------------------------------------
//
// Code generated with Faust 0.9.70 (http://faust.grame.fr)
//-----------------------------------------------------
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif  

typedef long double quad;
/* link with  */
#include <math.h>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline float faustpower(float x)          { return powf(x,N); } 
template <int N> inline double faustpower(double x)        { return pow(x,N); }
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <>   inline int faustpower<0>(int x)            { return 1; }
template <>   inline int faustpower<1>(int x)            { return x; }
#endif

#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	int 	iConst0;
	float 	fConst1;
	float 	fConst2;
	float 	fConst3;
	float 	fConst4;
	float 	fConst5;
	float 	fConst6;
	float 	fConst7;
	float 	fConst8;
	float 	fConst9;
	float 	fConst10;
	float 	fConst11;
	float 	fConst12;
	float 	fConst13;
	float 	fConst14;
	float 	fConst15;
	float 	fConst16;
	float 	fConst17;
	float 	fConst18;
	float 	fConst19;
	float 	fConst20;
	float 	fConst21;
	float 	fConst22;
	float 	fConst23;
	float 	fConst24;
	float 	fConst25;
	float 	fConst26;
	float 	fConst27;
	float 	fConst28;
	float 	fConst29;
	float 	fConst30;
	float 	fConst31;
	float 	fConst32;
	float 	fConst33;
	float 	fConst34;
	float 	fConst35;
	float 	fConst36;
	float 	fConst37;
	float 	fConst38;
	float 	fConst39;
	float 	fConst40;
	float 	fConst41;
	float 	fConst42;
	float 	fConst43;
	float 	fConst44;
	float 	fConst45;
	float 	fConst46;
	float 	fConst47;
	float 	fConst48;
	float 	fConst49;
	float 	fConst50;
	float 	fConst51;
	float 	fConst52;
	float 	fConst53;
	float 	fConst54;
	float 	fConst55;
	float 	fConst56;
	float 	fConst57;
	float 	fConst58;
	float 	fConst59;
	float 	fConst60;
	float 	fConst61;
	float 	fConst62;
	float 	fConst63;
	float 	fConst64;
	float 	fConst65;
	float 	fConst66;
	float 	fConst67;
	float 	fConst68;
	float 	fConst69;
	float 	fConst70;
	float 	fConst71;
	float 	fConst72;
	float 	fConst73;
	float 	fConst74;
	float 	fConst75;
	float 	fConst76;
	float 	fConst77;
	float 	fConst78;
	float 	fConst79;
	float 	fConst80;
	float 	fConst81;
	float 	fConst82;
	float 	fConst83;
	float 	fConst84;
	float 	fConst85;
	float 	fConst86;
	float 	fConst87;
	float 	fConst88;
	float 	fConst89;
	float 	fConst90;
	float 	fConst91;
	float 	fConst92;
	float 	fConst93;
	float 	fConst94;
	float 	fConst95;
	float 	fConst96;
	float 	fConst97;
	float 	fConst98;
	float 	fConst99;
	float 	fConst100;
	float 	fConst101;
	float 	fConst102;
	float 	fConst103;
	float 	fConst104;
	float 	fConst105;
	float 	fConst106;
	float 	fConst107;
	float 	fConst108;
	float 	fConst109;
	float 	fConst110;
	float 	fConst111;
	float 	fConst112;
	float 	fConst113;
	float 	fConst114;
	float 	fConst115;
	float 	fConst116;
	float 	fConst117;
	float 	fConst118;
	float 	fConst119;
	float 	fConst120;
	float 	fConst121;
	float 	fConst122;
	float 	fConst123;
	float 	fConst124;
	float 	fConst125;
	float 	fConst126;
	float 	fConst127;
	float 	fConst128;
	float 	fConst129;
	float 	fConst130;
	float 	fConst131;
	float 	fConst132;
	float 	fConst133;
	float 	fConst134;
	float 	fConst135;
	float 	fConst136;
	float 	fConst137;
	float 	fConst138;
	float 	fConst139;
	float 	fConst140;
	float 	fConst141;
	float 	fConst142;
	float 	fConst143;
	float 	fConst144;
	float 	fConst145;
	float 	fConst146;
	float 	fConst147;
	float 	fConst148;
	float 	fConst149;
	float 	fConst150;
	float 	fConst151;
	float 	fConst152;
	float 	fConst153;
	float 	fConst154;
	float 	fConst155;
	float 	fConst156;
	float 	fConst157;
	float 	fConst158;
	float 	fConst159;
	float 	fConst160;
	float 	fConst161;
	float 	fConst162;
	float 	fConst163;
	float 	fConst164;
	float 	fConst165;
	float 	fConst166;
	float 	fConst167;
	float 	fConst168;
	float 	fConst169;
	float 	fConst170;
	float 	fConst171;
	float 	fConst172;
	float 	fConst173;
	float 	fConst174;
	float 	fConst175;
	float 	fConst176;
	float 	fConst177;
	float 	fConst178;
	float 	fConst179;
	float 	fConst180;
	float 	fConst181;
	float 	fConst182;
	float 	fConst183;
	float 	fConst184;
	float 	fConst185;
	float 	fConst186;
	float 	fConst187;
	float 	fConst188;
	float 	fConst189;
	float 	fConst190;
	float 	fConst191;
	float 	fConst192;
	float 	fConst193;
	float 	fConst194;
	float 	fConst195;
	float 	fConst196;
	float 	fConst197;
	float 	fConst198;
	float 	fConst199;
	float 	fConst200;
	float 	fConst201;
	float 	fConst202;
	float 	fConst203;
	float 	fConst204;
	float 	fConst205;
	float 	fConst206;
	float 	fConst207;
	float 	fConst208;
	float 	fConst209;
	float 	fConst210;
	float 	fConst211;
	float 	fConst212;
	float 	fConst213;
	float 	fConst214;
	float 	fConst215;
	float 	fConst216;
	float 	fConst217;
	float 	fConst218;
	float 	fConst219;
	float 	fConst220;
	float 	fConst221;
	float 	fConst222;
	float 	fConst223;
	float 	fConst224;
	float 	fConst225;
	float 	fConst226;
	float 	fConst227;
	float 	fConst228;
	float 	fConst229;
	float 	fConst230;
	float 	fConst231;
	float 	fConst232;
	float 	fConst233;
	float 	fConst234;
	float 	fConst235;
	float 	fConst236;
	float 	fConst237;
	float 	fConst238;
	float 	fConst239;
	float 	fConst240;
	float 	fConst241;
	float 	fConst242;
	float 	fConst243;
	float 	fConst244;
	float 	fConst245;
	float 	fConst246;
	float 	fConst247;
	FAUSTFLOAT 	fslider0;
	float 	fConst248;
	FAUSTFLOAT 	fslider1;
	float 	fRec60[2];
	float 	fConst249;
	float 	fConst250;
	float 	fConst251;
	float 	fConst252;
	FAUSTFLOAT 	fslider2;
	FAUSTFLOAT 	fslider3;
	float 	fConst253;
	FAUSTFLOAT 	fslider4;
	FAUSTFLOAT 	fslider5;
	FAUSTFLOAT 	fslider6;
	float 	fRec64[2];
	FAUSTFLOAT 	fslider7;
	float 	fConst254;
	float 	fRec65[2];
	float 	fConst255;
	float 	fVec0[2];
	FAUSTFLOAT 	fslider8;
	float 	fRec66[2];
	float 	fVec1[2];
	float 	fRec67[2];
	float 	fVec2[2];
	float 	fVec3[2];
	FAUSTFLOAT 	fslider9;
	float 	fRec68[2];
	float 	fConst256;
	int 	iRec70[2];
	float 	fRec69[4];
	FAUSTFLOAT 	fcheckbox0;
	FAUSTFLOAT 	fcheckbox1;
	float 	fVec4[2];
	float 	fRec63[2];
	float 	fRec62[3];
	FAUSTFLOAT 	fslider10;
	float 	fRec72[2];
	float 	fRec71[3];
	float 	fRec61[3];
	float 	fVec5[2];
	float 	fRec59[2];
	float 	fRec58[3];
	FAUSTFLOAT 	fslider11;
	float 	fRec74[2];
	float 	fRec73[3];
	float 	fRec57[3];
	float 	fConst257;
	float 	fConst258;
	float 	fConst259;
	float 	fRec56[3];
	float 	fConst260;
	float 	fConst261;
	float 	fRec55[3];
	float 	fConst262;
	float 	fConst263;
	float 	fRec54[3];
	float 	fConst264;
	float 	fConst265;
	float 	fConst266;
	float 	fRec53[3];
	float 	fConst267;
	float 	fConst268;
	float 	fRec52[3];
	float 	fConst269;
	float 	fConst270;
	float 	fRec51[3];
	float 	fConst271;
	float 	fConst272;
	float 	fConst273;
	float 	fRec50[3];
	float 	fConst274;
	float 	fConst275;
	float 	fRec49[3];
	float 	fConst276;
	float 	fConst277;
	float 	fRec48[3];
	float 	fConst278;
	float 	fConst279;
	float 	fConst280;
	float 	fRec47[3];
	float 	fConst281;
	float 	fConst282;
	float 	fRec46[3];
	float 	fConst283;
	float 	fConst284;
	float 	fRec45[3];
	float 	fConst285;
	float 	fConst286;
	float 	fConst287;
	float 	fRec44[3];
	float 	fConst288;
	float 	fConst289;
	float 	fRec43[3];
	float 	fConst290;
	float 	fConst291;
	float 	fRec42[3];
	float 	fConst292;
	float 	fConst293;
	float 	fConst294;
	float 	fRec41[3];
	float 	fConst295;
	float 	fConst296;
	float 	fRec40[3];
	float 	fConst297;
	float 	fConst298;
	float 	fRec39[3];
	float 	fConst299;
	float 	fConst300;
	float 	fConst301;
	float 	fRec38[3];
	float 	fConst302;
	float 	fConst303;
	float 	fRec37[3];
	float 	fConst304;
	float 	fConst305;
	float 	fRec36[3];
	float 	fConst306;
	float 	fConst307;
	float 	fConst308;
	float 	fRec35[3];
	float 	fConst309;
	float 	fConst310;
	float 	fRec34[3];
	float 	fConst311;
	float 	fConst312;
	float 	fRec33[3];
	float 	fConst313;
	float 	fConst314;
	float 	fConst315;
	float 	fRec32[3];
	float 	fConst316;
	float 	fConst317;
	float 	fRec31[3];
	float 	fConst318;
	float 	fConst319;
	float 	fRec30[3];
	float 	fConst320;
	float 	fConst321;
	float 	fConst322;
	float 	fRec29[3];
	float 	fConst323;
	float 	fConst324;
	float 	fRec28[3];
	float 	fConst325;
	float 	fConst326;
	float 	fRec27[3];
	float 	fConst327;
	float 	fConst328;
	float 	fConst329;
	float 	fRec26[3];
	float 	fConst330;
	float 	fConst331;
	float 	fRec25[3];
	float 	fConst332;
	float 	fConst333;
	float 	fRec24[3];
	float 	fConst334;
	float 	fConst335;
	float 	fConst336;
	float 	fRec23[3];
	float 	fConst337;
	float 	fConst338;
	float 	fRec22[3];
	float 	fConst339;
	float 	fConst340;
	float 	fRec21[3];
	float 	fConst341;
	float 	fConst342;
	float 	fConst343;
	float 	fRec20[3];
	float 	fConst344;
	float 	fConst345;
	float 	fRec19[3];
	float 	fConst346;
	float 	fConst347;
	float 	fRec18[3];
	float 	fConst348;
	float 	fConst349;
	float 	fConst350;
	float 	fRec17[3];
	float 	fConst351;
	float 	fConst352;
	float 	fRec16[3];
	float 	fConst353;
	float 	fConst354;
	float 	fRec15[3];
	float 	fConst355;
	float 	fConst356;
	float 	fConst357;
	float 	fRec14[3];
	float 	fConst358;
	float 	fConst359;
	float 	fRec13[3];
	float 	fConst360;
	float 	fConst361;
	float 	fRec12[3];
	float 	fConst362;
	float 	fConst363;
	float 	fConst364;
	float 	fRec11[3];
	float 	fConst365;
	float 	fConst366;
	float 	fRec10[3];
	float 	fConst367;
	float 	fConst368;
	float 	fRec9[3];
	float 	fConst369;
	float 	fConst370;
	float 	fConst371;
	float 	fRec8[3];
	float 	fConst372;
	float 	fConst373;
	float 	fRec7[3];
	float 	fConst374;
	float 	fConst375;
	float 	fRec6[3];
	float 	fConst376;
	float 	fConst377;
	float 	fConst378;
	float 	fRec5[3];
	float 	fConst379;
	float 	fConst380;
	float 	fRec4[3];
	float 	fConst381;
	float 	fConst382;
	float 	fRec3[3];
	float 	fConst383;
	float 	fConst384;
	float 	fConst385;
	float 	fRec2[3];
	float 	fConst386;
	float 	fConst387;
	float 	fRec1[3];
	float 	fConst388;
	float 	fConst389;
	FAUSTFLOAT 	fslider12;
	float 	fConst390;
	float 	fRec0[2];
	FAUSTFLOAT 	fslider13;
	FAUSTFLOAT 	fbargraph0;
	float 	fConst391;
	float 	fConst392;
	float 	fConst393;
	float 	fConst394;
	float 	fConst395;
	float 	fConst396;
	float 	fConst397;
	float 	fConst398;
	float 	fConst399;
	float 	fRec78[3];
	float 	fConst400;
	float 	fConst401;
	float 	fConst402;
	float 	fRec77[3];
	float 	fConst403;
	float 	fConst404;
	float 	fConst405;
	float 	fRec76[3];
	float 	fConst406;
	float 	fConst407;
	float 	fConst408;
	float 	fRec75[2];
	FAUSTFLOAT 	fbargraph1;
	float 	fConst409;
	float 	fConst410;
	float 	fConst411;
	float 	fConst412;
	float 	fConst413;
	float 	fConst414;
	float 	fConst415;
	float 	fConst416;
	float 	fConst417;
	float 	fRec82[3];
	float 	fConst418;
	float 	fConst419;
	float 	fConst420;
	float 	fRec81[3];
	float 	fConst421;
	float 	fConst422;
	float 	fConst423;
	float 	fRec80[3];
	float 	fConst424;
	float 	fConst425;
	float 	fConst426;
	float 	fRec79[2];
	FAUSTFLOAT 	fbargraph2;
	float 	fConst427;
	float 	fConst428;
	float 	fConst429;
	float 	fConst430;
	float 	fConst431;
	float 	fConst432;
	float 	fConst433;
	float 	fConst434;
	float 	fConst435;
	float 	fRec86[3];
	float 	fConst436;
	float 	fConst437;
	float 	fConst438;
	float 	fRec85[3];
	float 	fConst439;
	float 	fConst440;
	float 	fConst441;
	float 	fRec84[3];
	float 	fConst442;
	float 	fConst443;
	float 	fConst444;
	float 	fRec83[2];
	FAUSTFLOAT 	fbargraph3;
	float 	fConst445;
	float 	fConst446;
	float 	fConst447;
	float 	fConst448;
	float 	fConst449;
	float 	fConst450;
	float 	fConst451;
	float 	fConst452;
	float 	fConst453;
	float 	fRec90[3];
	float 	fConst454;
	float 	fConst455;
	float 	fConst456;
	float 	fRec89[3];
	float 	fConst457;
	float 	fConst458;
	float 	fConst459;
	float 	fRec88[3];
	float 	fConst460;
	float 	fConst461;
	float 	fConst462;
	float 	fRec87[2];
	FAUSTFLOAT 	fbargraph4;
	float 	fConst463;
	float 	fConst464;
	float 	fConst465;
	float 	fConst466;
	float 	fConst467;
	float 	fConst468;
	float 	fConst469;
	float 	fConst470;
	float 	fConst471;
	float 	fRec94[3];
	float 	fConst472;
	float 	fConst473;
	float 	fConst474;
	float 	fRec93[3];
	float 	fConst475;
	float 	fConst476;
	float 	fConst477;
	float 	fRec92[3];
	float 	fConst478;
	float 	fConst479;
	float 	fConst480;
	float 	fRec91[2];
	FAUSTFLOAT 	fbargraph5;
	float 	fConst481;
	float 	fConst482;
	float 	fConst483;
	float 	fConst484;
	float 	fConst485;
	float 	fConst486;
	float 	fConst487;
	float 	fConst488;
	float 	fConst489;
	float 	fRec98[3];
	float 	fConst490;
	float 	fConst491;
	float 	fConst492;
	float 	fRec97[3];
	float 	fConst493;
	float 	fConst494;
	float 	fConst495;
	float 	fRec96[3];
	float 	fConst496;
	float 	fConst497;
	float 	fConst498;
	float 	fRec95[2];
	FAUSTFLOAT 	fbargraph6;
	float 	fConst499;
	float 	fConst500;
	float 	fConst501;
	float 	fConst502;
	float 	fConst503;
	float 	fConst504;
	float 	fConst505;
	float 	fConst506;
	float 	fConst507;
	float 	fRec102[3];
	float 	fConst508;
	float 	fConst509;
	float 	fConst510;
	float 	fRec101[3];
	float 	fConst511;
	float 	fConst512;
	float 	fConst513;
	float 	fRec100[3];
	float 	fConst514;
	float 	fConst515;
	float 	fConst516;
	float 	fRec99[2];
	FAUSTFLOAT 	fbargraph7;
	float 	fConst517;
	float 	fConst518;
	float 	fConst519;
	float 	fConst520;
	float 	fConst521;
	float 	fConst522;
	float 	fConst523;
	float 	fConst524;
	float 	fConst525;
	float 	fRec106[3];
	float 	fConst526;
	float 	fConst527;
	float 	fConst528;
	float 	fRec105[3];
	float 	fConst529;
	float 	fConst530;
	float 	fConst531;
	float 	fRec104[3];
	float 	fConst532;
	float 	fConst533;
	float 	fConst534;
	float 	fRec103[2];
	FAUSTFLOAT 	fbargraph8;
	float 	fConst535;
	float 	fConst536;
	float 	fConst537;
	float 	fConst538;
	float 	fConst539;
	float 	fConst540;
	float 	fConst541;
	float 	fConst542;
	float 	fConst543;
	float 	fRec110[3];
	float 	fConst544;
	float 	fConst545;
	float 	fConst546;
	float 	fRec109[3];
	float 	fConst547;
	float 	fConst548;
	float 	fConst549;
	float 	fRec108[3];
	float 	fConst550;
	float 	fConst551;
	float 	fConst552;
	float 	fRec107[2];
	FAUSTFLOAT 	fbargraph9;
	float 	fConst553;
	float 	fConst554;
	float 	fConst555;
	float 	fConst556;
	float 	fConst557;
	float 	fConst558;
	float 	fConst559;
	float 	fConst560;
	float 	fConst561;
	float 	fRec114[3];
	float 	fConst562;
	float 	fConst563;
	float 	fConst564;
	float 	fRec113[3];
	float 	fConst565;
	float 	fConst566;
	float 	fConst567;
	float 	fRec112[3];
	float 	fConst568;
	float 	fConst569;
	float 	fConst570;
	float 	fRec111[2];
	FAUSTFLOAT 	fbargraph10;
	float 	fConst571;
	float 	fConst572;
	float 	fConst573;
	float 	fConst574;
	float 	fConst575;
	float 	fConst576;
	float 	fConst577;
	float 	fConst578;
	float 	fConst579;
	float 	fRec118[3];
	float 	fConst580;
	float 	fConst581;
	float 	fConst582;
	float 	fRec117[3];
	float 	fConst583;
	float 	fConst584;
	float 	fConst585;
	float 	fRec116[3];
	float 	fConst586;
	float 	fConst587;
	float 	fConst588;
	float 	fRec115[2];
	FAUSTFLOAT 	fbargraph11;
	float 	fConst589;
	float 	fConst590;
	float 	fConst591;
	float 	fConst592;
	float 	fConst593;
	float 	fConst594;
	float 	fConst595;
	float 	fConst596;
	float 	fConst597;
	float 	fRec122[3];
	float 	fConst598;
	float 	fConst599;
	float 	fConst600;
	float 	fRec121[3];
	float 	fConst601;
	float 	fConst602;
	float 	fConst603;
	float 	fRec120[3];
	float 	fConst604;
	float 	fConst605;
	float 	fConst606;
	float 	fRec119[2];
	FAUSTFLOAT 	fbargraph12;
	float 	fConst607;
	float 	fConst608;
	float 	fConst609;
	float 	fConst610;
	float 	fConst611;
	float 	fConst612;
	float 	fConst613;
	float 	fConst614;
	float 	fConst615;
	float 	fRec126[3];
	float 	fConst616;
	float 	fConst617;
	float 	fConst618;
	float 	fRec125[3];
	float 	fConst619;
	float 	fConst620;
	float 	fConst621;
	float 	fRec124[3];
	float 	fConst622;
	float 	fConst623;
	float 	fConst624;
	float 	fRec123[2];
	FAUSTFLOAT 	fbargraph13;
	float 	fConst625;
	float 	fConst626;
	float 	fConst627;
	float 	fConst628;
	float 	fConst629;
	float 	fConst630;
	float 	fConst631;
	float 	fConst632;
	float 	fConst633;
	float 	fRec130[3];
	float 	fConst634;
	float 	fConst635;
	float 	fConst636;
	float 	fRec129[3];
	float 	fConst637;
	float 	fConst638;
	float 	fConst639;
	float 	fRec128[3];
	float 	fConst640;
	float 	fConst641;
	float 	fConst642;
	float 	fRec127[2];
	FAUSTFLOAT 	fbargraph14;
	float 	fConst643;
	float 	fConst644;
	float 	fConst645;
	float 	fConst646;
	float 	fConst647;
	float 	fConst648;
	float 	fConst649;
	float 	fConst650;
	float 	fConst651;
	float 	fRec134[3];
	float 	fConst652;
	float 	fConst653;
	float 	fConst654;
	float 	fRec133[3];
	float 	fConst655;
	float 	fConst656;
	float 	fConst657;
	float 	fRec132[3];
	float 	fConst658;
	float 	fConst659;
	float 	fConst660;
	float 	fRec131[2];
	FAUSTFLOAT 	fbargraph15;
	float 	fConst661;
	float 	fConst662;
	float 	fConst663;
	float 	fConst664;
	float 	fConst665;
	float 	fConst666;
	float 	fConst667;
	float 	fConst668;
	float 	fConst669;
	float 	fRec138[3];
	float 	fConst670;
	float 	fConst671;
	float 	fConst672;
	float 	fRec137[3];
	float 	fConst673;
	float 	fConst674;
	float 	fConst675;
	float 	fRec136[3];
	float 	fConst676;
	float 	fConst677;
	float 	fConst678;
	float 	fRec135[2];
	FAUSTFLOAT 	fbargraph16;
	float 	fConst679;
	float 	fConst680;
	float 	fConst681;
	float 	fConst682;
	float 	fConst683;
	float 	fConst684;
	float 	fConst685;
	float 	fConst686;
	float 	fConst687;
	float 	fRec142[3];
	float 	fConst688;
	float 	fConst689;
	float 	fConst690;
	float 	fRec141[3];
	float 	fConst691;
	float 	fConst692;
	float 	fConst693;
	float 	fRec140[3];
	float 	fConst694;
	float 	fConst695;
	float 	fConst696;
	float 	fRec139[2];
	FAUSTFLOAT 	fbargraph17;
	float 	fConst697;
	float 	fConst698;
	float 	fConst699;
	float 	fConst700;
	float 	fConst701;
	float 	fConst702;
	float 	fConst703;
	float 	fConst704;
	float 	fConst705;
	float 	fRec146[3];
	float 	fConst706;
	float 	fConst707;
	float 	fConst708;
	float 	fRec145[3];
	float 	fConst709;
	float 	fConst710;
	float 	fConst711;
	float 	fRec144[3];
	float 	fConst712;
	float 	fConst713;
	float 	fConst714;
	float 	fRec143[2];
	FAUSTFLOAT 	fbargraph18;
	float 	fConst715;
	float 	fConst716;
	float 	fConst717;
	float 	fConst718;
	float 	fConst719;
	float 	fConst720;
	float 	fConst721;
	float 	fConst722;
	float 	fConst723;
	float 	fRec150[3];
	float 	fConst724;
	float 	fConst725;
	float 	fConst726;
	float 	fRec149[3];
	float 	fConst727;
	float 	fConst728;
	float 	fConst729;
	float 	fRec148[3];
	float 	fConst730;
	float 	fConst731;
	float 	fConst732;
	float 	fRec147[2];
	FAUSTFLOAT 	fbargraph19;
  public:
	static void metadata(Meta* m) 	{ 
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/version", "1.29");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/version", "1.0");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/version", "1.0");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("oscillator.lib/name", "Faust Oscillator Library");
		m->declare("oscillator.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("oscillator.lib/copyright", "Julius O. Smith III");
		m->declare("oscillator.lib/version", "1.11");
		m->declare("oscillator.lib/license", "STK-4.3");
	}

	virtual int getNumInputs() 	{ return 1; }
	virtual int getNumOutputs() 	{ return 2; }
	static void classInit(int samplingFreq) {
	}
	virtual void instanceInit(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		iConst0 = min(192000, max(1, fSamplingFreq));
		fConst1 = tanf((98.17477042468103f / float(iConst0)));
		fConst2 = faustpower<2>(fConst1);
		fConst3 = (1.0f / fConst2);
		fConst4 = (2 * (1.069358407707312f - fConst3));
		fConst5 = (1.0f / fConst1);
		fConst6 = (1.069358407707312f + ((fConst5 - 0.168404871113589f) / fConst1));
		fConst7 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst5) / fConst1)));
		fConst8 = (2 * (0.689621364484675f - fConst3));
		fConst9 = (0.689621364484675f + ((fConst5 - 0.512478641889141f) / fConst1));
		fConst10 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst5) / fConst1)));
		fConst11 = (2 * (0.24529150870616f - fConst3));
		fConst12 = (0.24529150870616f + ((fConst5 - 0.782413046821645f) / fConst1));
		fConst13 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst5) / fConst1)));
		fConst14 = tanf((138.84009181744895f / float(iConst0)));
		fConst15 = faustpower<2>(fConst14);
		fConst16 = (1.0f / fConst15);
		fConst17 = (2 * (1.069358407707312f - fConst16));
		fConst18 = (1.0f / fConst14);
		fConst19 = (1.069358407707312f + ((fConst18 - 0.168404871113589f) / fConst14));
		fConst20 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst18) / fConst14)));
		fConst21 = (2 * (0.689621364484675f - fConst16));
		fConst22 = (0.689621364484675f + ((fConst18 - 0.512478641889141f) / fConst14));
		fConst23 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst18) / fConst14)));
		fConst24 = (2 * (0.24529150870616f - fConst16));
		fConst25 = (0.24529150870616f + ((fConst18 - 0.782413046821645f) / fConst14));
		fConst26 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst18) / fConst14)));
		fConst27 = tanf((196.34954084936206f / float(iConst0)));
		fConst28 = faustpower<2>(fConst27);
		fConst29 = (1.0f / fConst28);
		fConst30 = (2 * (1.069358407707312f - fConst29));
		fConst31 = (1.0f / fConst27);
		fConst32 = (1.069358407707312f + ((fConst31 - 0.168404871113589f) / fConst27));
		fConst33 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst31) / fConst27)));
		fConst34 = (2 * (0.689621364484675f - fConst29));
		fConst35 = (0.689621364484675f + ((fConst31 - 0.512478641889141f) / fConst27));
		fConst36 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst31) / fConst27)));
		fConst37 = (2 * (0.24529150870616f - fConst29));
		fConst38 = (0.24529150870616f + ((fConst31 - 0.782413046821645f) / fConst27));
		fConst39 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst31) / fConst27)));
		fConst40 = tanf((277.6801836348979f / float(iConst0)));
		fConst41 = faustpower<2>(fConst40);
		fConst42 = (1.0f / fConst41);
		fConst43 = (2 * (1.069358407707312f - fConst42));
		fConst44 = (1.0f / fConst40);
		fConst45 = (1.069358407707312f + ((fConst44 - 0.168404871113589f) / fConst40));
		fConst46 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst44) / fConst40)));
		fConst47 = (2 * (0.689621364484675f - fConst42));
		fConst48 = (0.689621364484675f + ((fConst44 - 0.512478641889141f) / fConst40));
		fConst49 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst44) / fConst40)));
		fConst50 = (2 * (0.24529150870616f - fConst42));
		fConst51 = (0.24529150870616f + ((fConst44 - 0.782413046821645f) / fConst40));
		fConst52 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst44) / fConst40)));
		fConst53 = tanf((392.6990816987241f / float(iConst0)));
		fConst54 = faustpower<2>(fConst53);
		fConst55 = (1.0f / fConst54);
		fConst56 = (2 * (1.069358407707312f - fConst55));
		fConst57 = (1.0f / fConst53);
		fConst58 = (1.069358407707312f + ((fConst57 - 0.168404871113589f) / fConst53));
		fConst59 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst57) / fConst53)));
		fConst60 = (2 * (0.689621364484675f - fConst55));
		fConst61 = (0.689621364484675f + ((fConst57 - 0.512478641889141f) / fConst53));
		fConst62 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst57) / fConst53)));
		fConst63 = (2 * (0.24529150870616f - fConst55));
		fConst64 = (0.24529150870616f + ((fConst57 - 0.782413046821645f) / fConst53));
		fConst65 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst57) / fConst53)));
		fConst66 = tanf((555.3603672697958f / float(iConst0)));
		fConst67 = faustpower<2>(fConst66);
		fConst68 = (1.0f / fConst67);
		fConst69 = (2 * (1.069358407707312f - fConst68));
		fConst70 = (1.0f / fConst66);
		fConst71 = (1.069358407707312f + ((fConst70 - 0.168404871113589f) / fConst66));
		fConst72 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst70) / fConst66)));
		fConst73 = (2 * (0.689621364484675f - fConst68));
		fConst74 = (0.689621364484675f + ((fConst70 - 0.512478641889141f) / fConst66));
		fConst75 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst70) / fConst66)));
		fConst76 = (2 * (0.24529150870616f - fConst68));
		fConst77 = (0.24529150870616f + ((fConst70 - 0.782413046821645f) / fConst66));
		fConst78 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst70) / fConst66)));
		fConst79 = tanf((785.3981633974482f / float(iConst0)));
		fConst80 = faustpower<2>(fConst79);
		fConst81 = (1.0f / fConst80);
		fConst82 = (2 * (1.069358407707312f - fConst81));
		fConst83 = (1.0f / fConst79);
		fConst84 = (1.069358407707312f + ((fConst83 - 0.168404871113589f) / fConst79));
		fConst85 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst83) / fConst79)));
		fConst86 = (2 * (0.689621364484675f - fConst81));
		fConst87 = (0.689621364484675f + ((fConst83 - 0.512478641889141f) / fConst79));
		fConst88 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst83) / fConst79)));
		fConst89 = (2 * (0.24529150870616f - fConst81));
		fConst90 = (0.24529150870616f + ((fConst83 - 0.782413046821645f) / fConst79));
		fConst91 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst83) / fConst79)));
		fConst92 = tanf((1110.7207345395916f / float(iConst0)));
		fConst93 = faustpower<2>(fConst92);
		fConst94 = (1.0f / fConst93);
		fConst95 = (2 * (1.069358407707312f - fConst94));
		fConst96 = (1.0f / fConst92);
		fConst97 = (1.069358407707312f + ((fConst96 - 0.168404871113589f) / fConst92));
		fConst98 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst96) / fConst92)));
		fConst99 = (2 * (0.689621364484675f - fConst94));
		fConst100 = (0.689621364484675f + ((fConst96 - 0.512478641889141f) / fConst92));
		fConst101 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst96) / fConst92)));
		fConst102 = (2 * (0.24529150870616f - fConst94));
		fConst103 = (0.24529150870616f + ((fConst96 - 0.782413046821645f) / fConst92));
		fConst104 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst96) / fConst92)));
		fConst105 = tanf((1570.7963267948965f / float(iConst0)));
		fConst106 = faustpower<2>(fConst105);
		fConst107 = (1.0f / fConst106);
		fConst108 = (2 * (1.069358407707312f - fConst107));
		fConst109 = (1.0f / fConst105);
		fConst110 = (1.069358407707312f + ((fConst109 - 0.168404871113589f) / fConst105));
		fConst111 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst109) / fConst105)));
		fConst112 = (2 * (0.689621364484675f - fConst107));
		fConst113 = (0.689621364484675f + ((fConst109 - 0.512478641889141f) / fConst105));
		fConst114 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst109) / fConst105)));
		fConst115 = (2 * (0.24529150870616f - fConst107));
		fConst116 = (0.24529150870616f + ((fConst109 - 0.782413046821645f) / fConst105));
		fConst117 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst109) / fConst105)));
		fConst118 = tanf((2221.441469079183f / float(iConst0)));
		fConst119 = faustpower<2>(fConst118);
		fConst120 = (1.0f / fConst119);
		fConst121 = (2 * (1.069358407707312f - fConst120));
		fConst122 = (1.0f / fConst118);
		fConst123 = (1.069358407707312f + ((fConst122 - 0.168404871113589f) / fConst118));
		fConst124 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst122) / fConst118)));
		fConst125 = (2 * (0.689621364484675f - fConst120));
		fConst126 = (0.689621364484675f + ((fConst122 - 0.512478641889141f) / fConst118));
		fConst127 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst122) / fConst118)));
		fConst128 = (2 * (0.24529150870616f - fConst120));
		fConst129 = (0.24529150870616f + ((fConst122 - 0.782413046821645f) / fConst118));
		fConst130 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst122) / fConst118)));
		fConst131 = tanf((3141.592653589793f / float(iConst0)));
		fConst132 = faustpower<2>(fConst131);
		fConst133 = (1.0f / fConst132);
		fConst134 = (2 * (1.069358407707312f - fConst133));
		fConst135 = (1.0f / fConst131);
		fConst136 = (1.069358407707312f + ((fConst135 - 0.168404871113589f) / fConst131));
		fConst137 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst135) / fConst131)));
		fConst138 = (2 * (0.689621364484675f - fConst133));
		fConst139 = (0.689621364484675f + ((fConst135 - 0.512478641889141f) / fConst131));
		fConst140 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst135) / fConst131)));
		fConst141 = (2 * (0.24529150870616f - fConst133));
		fConst142 = (0.24529150870616f + ((fConst135 - 0.782413046821645f) / fConst131));
		fConst143 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst135) / fConst131)));
		fConst144 = tanf((4442.882938158366f / float(iConst0)));
		fConst145 = faustpower<2>(fConst144);
		fConst146 = (1.0f / fConst145);
		fConst147 = (2 * (1.069358407707312f - fConst146));
		fConst148 = (1.0f / fConst144);
		fConst149 = (1.069358407707312f + ((fConst148 - 0.168404871113589f) / fConst144));
		fConst150 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst148) / fConst144)));
		fConst151 = (2 * (0.689621364484675f - fConst146));
		fConst152 = (0.689621364484675f + ((fConst148 - 0.512478641889141f) / fConst144));
		fConst153 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst148) / fConst144)));
		fConst154 = (2 * (0.24529150870616f - fConst146));
		fConst155 = (0.24529150870616f + ((fConst148 - 0.782413046821645f) / fConst144));
		fConst156 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst148) / fConst144)));
		fConst157 = tanf((6283.185307179586f / float(iConst0)));
		fConst158 = faustpower<2>(fConst157);
		fConst159 = (1.0f / fConst158);
		fConst160 = (2 * (1.069358407707312f - fConst159));
		fConst161 = (1.0f / fConst157);
		fConst162 = (1.069358407707312f + ((fConst161 - 0.168404871113589f) / fConst157));
		fConst163 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst161) / fConst157)));
		fConst164 = (2 * (0.689621364484675f - fConst159));
		fConst165 = (0.689621364484675f + ((fConst161 - 0.512478641889141f) / fConst157));
		fConst166 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst161) / fConst157)));
		fConst167 = (2 * (0.24529150870616f - fConst159));
		fConst168 = (0.24529150870616f + ((fConst161 - 0.782413046821645f) / fConst157));
		fConst169 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst161) / fConst157)));
		fConst170 = tanf((8885.765876316733f / float(iConst0)));
		fConst171 = faustpower<2>(fConst170);
		fConst172 = (1.0f / fConst171);
		fConst173 = (2 * (1.069358407707312f - fConst172));
		fConst174 = (1.0f / fConst170);
		fConst175 = (1.069358407707312f + ((fConst174 - 0.168404871113589f) / fConst170));
		fConst176 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst174) / fConst170)));
		fConst177 = (2 * (0.689621364484675f - fConst172));
		fConst178 = (0.689621364484675f + ((fConst174 - 0.512478641889141f) / fConst170));
		fConst179 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst174) / fConst170)));
		fConst180 = (2 * (0.24529150870616f - fConst172));
		fConst181 = (0.24529150870616f + ((fConst174 - 0.782413046821645f) / fConst170));
		fConst182 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst174) / fConst170)));
		fConst183 = tanf((12566.370614359172f / float(iConst0)));
		fConst184 = faustpower<2>(fConst183);
		fConst185 = (1.0f / fConst184);
		fConst186 = (2 * (1.069358407707312f - fConst185));
		fConst187 = (1.0f / fConst183);
		fConst188 = (1.069358407707312f + ((fConst187 - 0.168404871113589f) / fConst183));
		fConst189 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst187) / fConst183)));
		fConst190 = (2 * (0.689621364484675f - fConst185));
		fConst191 = (0.689621364484675f + ((fConst187 - 0.512478641889141f) / fConst183));
		fConst192 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst187) / fConst183)));
		fConst193 = (2 * (0.24529150870616f - fConst185));
		fConst194 = (0.24529150870616f + ((fConst187 - 0.782413046821645f) / fConst183));
		fConst195 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst187) / fConst183)));
		fConst196 = tanf((17771.531752633466f / float(iConst0)));
		fConst197 = faustpower<2>(fConst196);
		fConst198 = (1.0f / fConst197);
		fConst199 = (2 * (1.069358407707312f - fConst198));
		fConst200 = (1.0f / fConst196);
		fConst201 = (1.069358407707312f + ((fConst200 - 0.168404871113589f) / fConst196));
		fConst202 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst200) / fConst196)));
		fConst203 = (2 * (0.689621364484675f - fConst198));
		fConst204 = (0.689621364484675f + ((fConst200 - 0.512478641889141f) / fConst196));
		fConst205 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst200) / fConst196)));
		fConst206 = (2 * (0.24529150870616f - fConst198));
		fConst207 = (0.24529150870616f + ((fConst200 - 0.782413046821645f) / fConst196));
		fConst208 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst200) / fConst196)));
		fConst209 = tanf((25132.741228718343f / float(iConst0)));
		fConst210 = faustpower<2>(fConst209);
		fConst211 = (1.0f / fConst210);
		fConst212 = (2 * (1.069358407707312f - fConst211));
		fConst213 = (1.0f / fConst209);
		fConst214 = (1.069358407707312f + ((fConst213 - 0.168404871113589f) / fConst209));
		fConst215 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst213) / fConst209)));
		fConst216 = (2 * (0.689621364484675f - fConst211));
		fConst217 = (0.689621364484675f + ((fConst213 - 0.512478641889141f) / fConst209));
		fConst218 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst213) / fConst209)));
		fConst219 = (2 * (0.24529150870616f - fConst211));
		fConst220 = (0.24529150870616f + ((fConst213 - 0.782413046821645f) / fConst209));
		fConst221 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst213) / fConst209)));
		fConst222 = tanf((35543.06350526693f / float(iConst0)));
		fConst223 = faustpower<2>(fConst222);
		fConst224 = (1.0f / fConst223);
		fConst225 = (2 * (1.069358407707312f - fConst224));
		fConst226 = (1.0f / fConst222);
		fConst227 = (1.069358407707312f + ((fConst226 - 0.168404871113589f) / fConst222));
		fConst228 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst226) / fConst222)));
		fConst229 = (2 * (0.689621364484675f - fConst224));
		fConst230 = (0.689621364484675f + ((fConst226 - 0.512478641889141f) / fConst222));
		fConst231 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst226) / fConst222)));
		fConst232 = (2 * (0.24529150870616f - fConst224));
		fConst233 = (0.24529150870616f + ((fConst226 - 0.782413046821645f) / fConst222));
		fConst234 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst226) / fConst222)));
		fConst235 = tanf((50265.48245743669f / float(iConst0)));
		fConst236 = faustpower<2>(fConst235);
		fConst237 = (1.0f / fConst236);
		fConst238 = (2 * (1.069358407707312f - fConst237));
		fConst239 = (1.0f / fConst235);
		fConst240 = (1.069358407707312f + ((fConst239 - 0.168404871113589f) / fConst235));
		fConst241 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst239) / fConst235)));
		fConst242 = (2 * (0.689621364484675f - fConst237));
		fConst243 = (0.689621364484675f + ((fConst239 - 0.512478641889141f) / fConst235));
		fConst244 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst239) / fConst235)));
		fConst245 = (2 * (0.24529150870616f - fConst237));
		fConst246 = (0.24529150870616f + ((fConst239 - 0.782413046821645f) / fConst235));
		fConst247 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst239) / fConst235)));
		fslider0 = 8e+03f;
		fConst248 = (3.141592653589793f / float(iConst0));
		fslider1 = 49.0f;
		for (int i=0; i<2; i++) fRec60[i] = 0;
		fConst249 = (1382.300767579509f / float(iConst0));
		fConst250 = (1.0f / float(iConst0));
		fConst251 = float(fConst250);
		fConst252 = (2764.601535159018f * fConst251);
		fslider2 = 4e+01f;
		fslider3 = 0.0f;
		fConst253 = (1382.300767579509f * fConst251);
		fslider4 = 2e+02f;
		fslider5 = 0.1f;
		fslider6 = 49.0f;
		for (int i=0; i<2; i++) fRec64[i] = 0;
		fslider7 = 0.1f;
		fConst254 = float(iConst0);
		for (int i=0; i<2; i++) fRec65[i] = 0;
		fConst255 = (2.0f / fConst254);
		for (int i=0; i<2; i++) fVec0[i] = 0;
		fslider8 = -0.1f;
		for (int i=0; i<2; i++) fRec66[i] = 0;
		for (int i=0; i<2; i++) fVec1[i] = 0;
		for (int i=0; i<2; i++) fRec67[i] = 0;
		for (int i=0; i<2; i++) fVec2[i] = 0;
		for (int i=0; i<2; i++) fVec3[i] = 0;
		fslider9 = -2e+01f;
		for (int i=0; i<2; i++) fRec68[i] = 0;
		fConst256 = (0.3333333333333333f * iConst0);
		for (int i=0; i<2; i++) iRec70[i] = 0;
		for (int i=0; i<4; i++) fRec69[i] = 0;
		fcheckbox0 = 0.0;
		fcheckbox1 = 0.0;
		for (int i=0; i<2; i++) fVec4[i] = 0;
		for (int i=0; i<2; i++) fRec63[i] = 0;
		for (int i=0; i<3; i++) fRec62[i] = 0;
		fslider10 = 0.0f;
		for (int i=0; i<2; i++) fRec72[i] = 0;
		for (int i=0; i<3; i++) fRec71[i] = 0;
		for (int i=0; i<3; i++) fRec61[i] = 0;
		for (int i=0; i<2; i++) fVec5[i] = 0;
		for (int i=0; i<2; i++) fRec59[i] = 0;
		for (int i=0; i<3; i++) fRec58[i] = 0;
		fslider11 = 0.0f;
		for (int i=0; i<2; i++) fRec74[i] = 0;
		for (int i=0; i<3; i++) fRec73[i] = 0;
		for (int i=0; i<3; i++) fRec57[i] = 0;
		fConst257 = (9.9999997055e-05f / fConst236);
		fConst258 = (0.000433227200555f + fConst257);
		fConst259 = (2 * (0.000433227200555f - fConst257));
		for (int i=0; i<3; i++) fRec56[i] = 0;
		fConst260 = (7.621731298870603f + fConst237);
		fConst261 = (2 * (7.621731298870603f - fConst237));
		for (int i=0; i<3; i++) fRec55[i] = 0;
		fConst262 = (53.53615295455673f + fConst237);
		fConst263 = (2 * (53.53615295455673f - fConst237));
		for (int i=0; i<3; i++) fRec54[i] = 0;
		fConst264 = (9.9999997055e-05f / fConst223);
		fConst265 = (0.000433227200555f + fConst264);
		fConst266 = (2 * (0.000433227200555f - fConst264));
		for (int i=0; i<3; i++) fRec53[i] = 0;
		fConst267 = (7.621731298870603f + fConst224);
		fConst268 = (2 * (7.621731298870603f - fConst224));
		for (int i=0; i<3; i++) fRec52[i] = 0;
		fConst269 = (53.53615295455673f + fConst224);
		fConst270 = (2 * (53.53615295455673f - fConst224));
		for (int i=0; i<3; i++) fRec51[i] = 0;
		fConst271 = (9.9999997055e-05f / fConst210);
		fConst272 = (0.000433227200555f + fConst271);
		fConst273 = (2 * (0.000433227200555f - fConst271));
		for (int i=0; i<3; i++) fRec50[i] = 0;
		fConst274 = (7.621731298870603f + fConst211);
		fConst275 = (2 * (7.621731298870603f - fConst211));
		for (int i=0; i<3; i++) fRec49[i] = 0;
		fConst276 = (53.53615295455673f + fConst211);
		fConst277 = (2 * (53.53615295455673f - fConst211));
		for (int i=0; i<3; i++) fRec48[i] = 0;
		fConst278 = (9.9999997055e-05f / fConst197);
		fConst279 = (0.000433227200555f + fConst278);
		fConst280 = (2 * (0.000433227200555f - fConst278));
		for (int i=0; i<3; i++) fRec47[i] = 0;
		fConst281 = (7.621731298870603f + fConst198);
		fConst282 = (2 * (7.621731298870603f - fConst198));
		for (int i=0; i<3; i++) fRec46[i] = 0;
		fConst283 = (53.53615295455673f + fConst198);
		fConst284 = (2 * (53.53615295455673f - fConst198));
		for (int i=0; i<3; i++) fRec45[i] = 0;
		fConst285 = (9.9999997055e-05f / fConst184);
		fConst286 = (0.000433227200555f + fConst285);
		fConst287 = (2 * (0.000433227200555f - fConst285));
		for (int i=0; i<3; i++) fRec44[i] = 0;
		fConst288 = (7.621731298870603f + fConst185);
		fConst289 = (2 * (7.621731298870603f - fConst185));
		for (int i=0; i<3; i++) fRec43[i] = 0;
		fConst290 = (53.53615295455673f + fConst185);
		fConst291 = (2 * (53.53615295455673f - fConst185));
		for (int i=0; i<3; i++) fRec42[i] = 0;
		fConst292 = (9.9999997055e-05f / fConst171);
		fConst293 = (0.000433227200555f + fConst292);
		fConst294 = (2 * (0.000433227200555f - fConst292));
		for (int i=0; i<3; i++) fRec41[i] = 0;
		fConst295 = (7.621731298870603f + fConst172);
		fConst296 = (2 * (7.621731298870603f - fConst172));
		for (int i=0; i<3; i++) fRec40[i] = 0;
		fConst297 = (53.53615295455673f + fConst172);
		fConst298 = (2 * (53.53615295455673f - fConst172));
		for (int i=0; i<3; i++) fRec39[i] = 0;
		fConst299 = (9.9999997055e-05f / fConst158);
		fConst300 = (0.000433227200555f + fConst299);
		fConst301 = (2 * (0.000433227200555f - fConst299));
		for (int i=0; i<3; i++) fRec38[i] = 0;
		fConst302 = (7.621731298870603f + fConst159);
		fConst303 = (2 * (7.621731298870603f - fConst159));
		for (int i=0; i<3; i++) fRec37[i] = 0;
		fConst304 = (53.53615295455673f + fConst159);
		fConst305 = (2 * (53.53615295455673f - fConst159));
		for (int i=0; i<3; i++) fRec36[i] = 0;
		fConst306 = (9.9999997055e-05f / fConst145);
		fConst307 = (0.000433227200555f + fConst306);
		fConst308 = (2 * (0.000433227200555f - fConst306));
		for (int i=0; i<3; i++) fRec35[i] = 0;
		fConst309 = (7.621731298870603f + fConst146);
		fConst310 = (2 * (7.621731298870603f - fConst146));
		for (int i=0; i<3; i++) fRec34[i] = 0;
		fConst311 = (53.53615295455673f + fConst146);
		fConst312 = (2 * (53.53615295455673f - fConst146));
		for (int i=0; i<3; i++) fRec33[i] = 0;
		fConst313 = (9.9999997055e-05f / fConst132);
		fConst314 = (0.000433227200555f + fConst313);
		fConst315 = (2 * (0.000433227200555f - fConst313));
		for (int i=0; i<3; i++) fRec32[i] = 0;
		fConst316 = (7.621731298870603f + fConst133);
		fConst317 = (2 * (7.621731298870603f - fConst133));
		for (int i=0; i<3; i++) fRec31[i] = 0;
		fConst318 = (53.53615295455673f + fConst133);
		fConst319 = (2 * (53.53615295455673f - fConst133));
		for (int i=0; i<3; i++) fRec30[i] = 0;
		fConst320 = (9.9999997055e-05f / fConst119);
		fConst321 = (0.000433227200555f + fConst320);
		fConst322 = (2 * (0.000433227200555f - fConst320));
		for (int i=0; i<3; i++) fRec29[i] = 0;
		fConst323 = (7.621731298870603f + fConst120);
		fConst324 = (2 * (7.621731298870603f - fConst120));
		for (int i=0; i<3; i++) fRec28[i] = 0;
		fConst325 = (53.53615295455673f + fConst120);
		fConst326 = (2 * (53.53615295455673f - fConst120));
		for (int i=0; i<3; i++) fRec27[i] = 0;
		fConst327 = (9.9999997055e-05f / fConst106);
		fConst328 = (0.000433227200555f + fConst327);
		fConst329 = (2 * (0.000433227200555f - fConst327));
		for (int i=0; i<3; i++) fRec26[i] = 0;
		fConst330 = (7.621731298870603f + fConst107);
		fConst331 = (2 * (7.621731298870603f - fConst107));
		for (int i=0; i<3; i++) fRec25[i] = 0;
		fConst332 = (53.53615295455673f + fConst107);
		fConst333 = (2 * (53.53615295455673f - fConst107));
		for (int i=0; i<3; i++) fRec24[i] = 0;
		fConst334 = (9.9999997055e-05f / fConst93);
		fConst335 = (0.000433227200555f + fConst334);
		fConst336 = (2 * (0.000433227200555f - fConst334));
		for (int i=0; i<3; i++) fRec23[i] = 0;
		fConst337 = (7.621731298870603f + fConst94);
		fConst338 = (2 * (7.621731298870603f - fConst94));
		for (int i=0; i<3; i++) fRec22[i] = 0;
		fConst339 = (53.53615295455673f + fConst94);
		fConst340 = (2 * (53.53615295455673f - fConst94));
		for (int i=0; i<3; i++) fRec21[i] = 0;
		fConst341 = (9.9999997055e-05f / fConst80);
		fConst342 = (0.000433227200555f + fConst341);
		fConst343 = (2 * (0.000433227200555f - fConst341));
		for (int i=0; i<3; i++) fRec20[i] = 0;
		fConst344 = (7.621731298870603f + fConst81);
		fConst345 = (2 * (7.621731298870603f - fConst81));
		for (int i=0; i<3; i++) fRec19[i] = 0;
		fConst346 = (53.53615295455673f + fConst81);
		fConst347 = (2 * (53.53615295455673f - fConst81));
		for (int i=0; i<3; i++) fRec18[i] = 0;
		fConst348 = (9.9999997055e-05f / fConst67);
		fConst349 = (0.000433227200555f + fConst348);
		fConst350 = (2 * (0.000433227200555f - fConst348));
		for (int i=0; i<3; i++) fRec17[i] = 0;
		fConst351 = (7.621731298870603f + fConst68);
		fConst352 = (2 * (7.621731298870603f - fConst68));
		for (int i=0; i<3; i++) fRec16[i] = 0;
		fConst353 = (53.53615295455673f + fConst68);
		fConst354 = (2 * (53.53615295455673f - fConst68));
		for (int i=0; i<3; i++) fRec15[i] = 0;
		fConst355 = (9.9999997055e-05f / fConst54);
		fConst356 = (0.000433227200555f + fConst355);
		fConst357 = (2 * (0.000433227200555f - fConst355));
		for (int i=0; i<3; i++) fRec14[i] = 0;
		fConst358 = (7.621731298870603f + fConst55);
		fConst359 = (2 * (7.621731298870603f - fConst55));
		for (int i=0; i<3; i++) fRec13[i] = 0;
		fConst360 = (53.53615295455673f + fConst55);
		fConst361 = (2 * (53.53615295455673f - fConst55));
		for (int i=0; i<3; i++) fRec12[i] = 0;
		fConst362 = (9.9999997055e-05f / fConst41);
		fConst363 = (0.000433227200555f + fConst362);
		fConst364 = (2 * (0.000433227200555f - fConst362));
		for (int i=0; i<3; i++) fRec11[i] = 0;
		fConst365 = (7.621731298870603f + fConst42);
		fConst366 = (2 * (7.621731298870603f - fConst42));
		for (int i=0; i<3; i++) fRec10[i] = 0;
		fConst367 = (53.53615295455673f + fConst42);
		fConst368 = (2 * (53.53615295455673f - fConst42));
		for (int i=0; i<3; i++) fRec9[i] = 0;
		fConst369 = (9.9999997055e-05f / fConst28);
		fConst370 = (0.000433227200555f + fConst369);
		fConst371 = (2 * (0.000433227200555f - fConst369));
		for (int i=0; i<3; i++) fRec8[i] = 0;
		fConst372 = (7.621731298870603f + fConst29);
		fConst373 = (2 * (7.621731298870603f - fConst29));
		for (int i=0; i<3; i++) fRec7[i] = 0;
		fConst374 = (53.53615295455673f + fConst29);
		fConst375 = (2 * (53.53615295455673f - fConst29));
		for (int i=0; i<3; i++) fRec6[i] = 0;
		fConst376 = (9.9999997055e-05f / fConst15);
		fConst377 = (0.000433227200555f + fConst376);
		fConst378 = (2 * (0.000433227200555f - fConst376));
		for (int i=0; i<3; i++) fRec5[i] = 0;
		fConst379 = (7.621731298870603f + fConst16);
		fConst380 = (2 * (7.621731298870603f - fConst16));
		for (int i=0; i<3; i++) fRec4[i] = 0;
		fConst381 = (53.53615295455673f + fConst16);
		fConst382 = (2 * (53.53615295455673f - fConst16));
		for (int i=0; i<3; i++) fRec3[i] = 0;
		fConst383 = (9.9999997055e-05f / fConst2);
		fConst384 = (0.000433227200555f + fConst383);
		fConst385 = (2 * (0.000433227200555f - fConst383));
		for (int i=0; i<3; i++) fRec2[i] = 0;
		fConst386 = (7.621731298870603f + fConst3);
		fConst387 = (2 * (7.621731298870603f - fConst3));
		for (int i=0; i<3; i++) fRec1[i] = 0;
		fConst388 = (53.53615295455673f + fConst3);
		fConst389 = (2 * (53.53615295455673f - fConst3));
		fslider12 = 1e+02f;
		fConst390 = (1e+03f / float(iConst0));
		for (int i=0; i<2; i++) fRec0[i] = 0;
		fslider13 = 5e+01f;
		fConst391 = (2 * (0.9351401670315425f - fConst3));
		fConst392 = (0.9351401670315425f + ((fConst5 - 0.157482159302087f) / fConst1));
		fConst393 = (1.0f / (0.9351401670315425f + ((fConst5 + 0.157482159302087f) / fConst1)));
		fConst394 = (2 * (1.450071084655647f - fConst3));
		fConst395 = (1.450071084655647f + ((fConst5 - 0.7431304601070396f) / fConst1));
		fConst396 = (1.0f / (1.450071084655647f + ((fConst5 + 0.7431304601070396f) / fConst1)));
		fConst397 = (2 * (4.076781969643807f - fConst3));
		fConst398 = (4.076781969643807f + ((fConst5 - 3.1897274020965583f) / fConst1));
		fConst399 = (1.0f / (4.076781969643807f + ((fConst5 + 3.1897274020965583f) / fConst1)));
		for (int i=0; i<3; i++) fRec78[i] = 0;
		fConst400 = (0.0017661728399818856f / fConst2);
		fConst401 = (0.00040767818495825777f + fConst400);
		fConst402 = (2 * (0.00040767818495825777f - fConst400));
		for (int i=0; i<3; i++) fRec77[i] = 0;
		fConst403 = (11.052052171507189f / fConst2);
		fConst404 = (1.450071084655647f + fConst403);
		fConst405 = (2 * (1.450071084655647f - fConst403));
		for (int i=0; i<3; i++) fRec76[i] = 0;
		fConst406 = (50.063807016150385f / fConst2);
		fConst407 = (0.9351401670315425f + fConst406);
		fConst408 = (2 * (0.9351401670315425f - fConst406));
		for (int i=0; i<2; i++) fRec75[i] = 0;
		fConst409 = (2 * (0.9351401670315425f - fConst16));
		fConst410 = (0.9351401670315425f + ((fConst18 - 0.157482159302087f) / fConst14));
		fConst411 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst18) / fConst14)));
		fConst412 = (2 * (1.450071084655647f - fConst16));
		fConst413 = (1.450071084655647f + ((fConst18 - 0.7431304601070396f) / fConst14));
		fConst414 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst18) / fConst14)));
		fConst415 = (2 * (4.076781969643807f - fConst16));
		fConst416 = (4.076781969643807f + ((fConst18 - 3.1897274020965583f) / fConst14));
		fConst417 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst18) / fConst14)));
		for (int i=0; i<3; i++) fRec82[i] = 0;
		fConst418 = (0.0017661728399818856f / fConst15);
		fConst419 = (0.00040767818495825777f + fConst418);
		fConst420 = (2 * (0.00040767818495825777f - fConst418));
		for (int i=0; i<3; i++) fRec81[i] = 0;
		fConst421 = (11.052052171507189f / fConst15);
		fConst422 = (1.450071084655647f + fConst421);
		fConst423 = (2 * (1.450071084655647f - fConst421));
		for (int i=0; i<3; i++) fRec80[i] = 0;
		fConst424 = (50.063807016150385f / fConst15);
		fConst425 = (0.9351401670315425f + fConst424);
		fConst426 = (2 * (0.9351401670315425f - fConst424));
		for (int i=0; i<2; i++) fRec79[i] = 0;
		fConst427 = (2 * (0.9351401670315425f - fConst29));
		fConst428 = (0.9351401670315425f + ((fConst31 - 0.157482159302087f) / fConst27));
		fConst429 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst31) / fConst27)));
		fConst430 = (2 * (1.450071084655647f - fConst29));
		fConst431 = (1.450071084655647f + ((fConst31 - 0.7431304601070396f) / fConst27));
		fConst432 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst31) / fConst27)));
		fConst433 = (2 * (4.076781969643807f - fConst29));
		fConst434 = (4.076781969643807f + ((fConst31 - 3.1897274020965583f) / fConst27));
		fConst435 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst31) / fConst27)));
		for (int i=0; i<3; i++) fRec86[i] = 0;
		fConst436 = (0.0017661728399818856f / fConst28);
		fConst437 = (0.00040767818495825777f + fConst436);
		fConst438 = (2 * (0.00040767818495825777f - fConst436));
		for (int i=0; i<3; i++) fRec85[i] = 0;
		fConst439 = (11.052052171507189f / fConst28);
		fConst440 = (1.450071084655647f + fConst439);
		fConst441 = (2 * (1.450071084655647f - fConst439));
		for (int i=0; i<3; i++) fRec84[i] = 0;
		fConst442 = (50.063807016150385f / fConst28);
		fConst443 = (0.9351401670315425f + fConst442);
		fConst444 = (2 * (0.9351401670315425f - fConst442));
		for (int i=0; i<2; i++) fRec83[i] = 0;
		fConst445 = (2 * (0.9351401670315425f - fConst42));
		fConst446 = (0.9351401670315425f + ((fConst44 - 0.157482159302087f) / fConst40));
		fConst447 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst44) / fConst40)));
		fConst448 = (2 * (1.450071084655647f - fConst42));
		fConst449 = (1.450071084655647f + ((fConst44 - 0.7431304601070396f) / fConst40));
		fConst450 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst44) / fConst40)));
		fConst451 = (2 * (4.076781969643807f - fConst42));
		fConst452 = (4.076781969643807f + ((fConst44 - 3.1897274020965583f) / fConst40));
		fConst453 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst44) / fConst40)));
		for (int i=0; i<3; i++) fRec90[i] = 0;
		fConst454 = (0.0017661728399818856f / fConst41);
		fConst455 = (0.00040767818495825777f + fConst454);
		fConst456 = (2 * (0.00040767818495825777f - fConst454));
		for (int i=0; i<3; i++) fRec89[i] = 0;
		fConst457 = (11.052052171507189f / fConst41);
		fConst458 = (1.450071084655647f + fConst457);
		fConst459 = (2 * (1.450071084655647f - fConst457));
		for (int i=0; i<3; i++) fRec88[i] = 0;
		fConst460 = (50.063807016150385f / fConst41);
		fConst461 = (0.9351401670315425f + fConst460);
		fConst462 = (2 * (0.9351401670315425f - fConst460));
		for (int i=0; i<2; i++) fRec87[i] = 0;
		fConst463 = (2 * (0.9351401670315425f - fConst55));
		fConst464 = (0.9351401670315425f + ((fConst57 - 0.157482159302087f) / fConst53));
		fConst465 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst57) / fConst53)));
		fConst466 = (2 * (1.450071084655647f - fConst55));
		fConst467 = (1.450071084655647f + ((fConst57 - 0.7431304601070396f) / fConst53));
		fConst468 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst57) / fConst53)));
		fConst469 = (2 * (4.076781969643807f - fConst55));
		fConst470 = (4.076781969643807f + ((fConst57 - 3.1897274020965583f) / fConst53));
		fConst471 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst57) / fConst53)));
		for (int i=0; i<3; i++) fRec94[i] = 0;
		fConst472 = (0.0017661728399818856f / fConst54);
		fConst473 = (0.00040767818495825777f + fConst472);
		fConst474 = (2 * (0.00040767818495825777f - fConst472));
		for (int i=0; i<3; i++) fRec93[i] = 0;
		fConst475 = (11.052052171507189f / fConst54);
		fConst476 = (1.450071084655647f + fConst475);
		fConst477 = (2 * (1.450071084655647f - fConst475));
		for (int i=0; i<3; i++) fRec92[i] = 0;
		fConst478 = (50.063807016150385f / fConst54);
		fConst479 = (0.9351401670315425f + fConst478);
		fConst480 = (2 * (0.9351401670315425f - fConst478));
		for (int i=0; i<2; i++) fRec91[i] = 0;
		fConst481 = (2 * (0.9351401670315425f - fConst68));
		fConst482 = (0.9351401670315425f + ((fConst70 - 0.157482159302087f) / fConst66));
		fConst483 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst70) / fConst66)));
		fConst484 = (2 * (1.450071084655647f - fConst68));
		fConst485 = (1.450071084655647f + ((fConst70 - 0.7431304601070396f) / fConst66));
		fConst486 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst70) / fConst66)));
		fConst487 = (2 * (4.076781969643807f - fConst68));
		fConst488 = (4.076781969643807f + ((fConst70 - 3.1897274020965583f) / fConst66));
		fConst489 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst70) / fConst66)));
		for (int i=0; i<3; i++) fRec98[i] = 0;
		fConst490 = (0.0017661728399818856f / fConst67);
		fConst491 = (0.00040767818495825777f + fConst490);
		fConst492 = (2 * (0.00040767818495825777f - fConst490));
		for (int i=0; i<3; i++) fRec97[i] = 0;
		fConst493 = (11.052052171507189f / fConst67);
		fConst494 = (1.450071084655647f + fConst493);
		fConst495 = (2 * (1.450071084655647f - fConst493));
		for (int i=0; i<3; i++) fRec96[i] = 0;
		fConst496 = (50.063807016150385f / fConst67);
		fConst497 = (0.9351401670315425f + fConst496);
		fConst498 = (2 * (0.9351401670315425f - fConst496));
		for (int i=0; i<2; i++) fRec95[i] = 0;
		fConst499 = (2 * (0.9351401670315425f - fConst81));
		fConst500 = (0.9351401670315425f + ((fConst83 - 0.157482159302087f) / fConst79));
		fConst501 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst83) / fConst79)));
		fConst502 = (2 * (1.450071084655647f - fConst81));
		fConst503 = (1.450071084655647f + ((fConst83 - 0.7431304601070396f) / fConst79));
		fConst504 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst83) / fConst79)));
		fConst505 = (2 * (4.076781969643807f - fConst81));
		fConst506 = (4.076781969643807f + ((fConst83 - 3.1897274020965583f) / fConst79));
		fConst507 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst83) / fConst79)));
		for (int i=0; i<3; i++) fRec102[i] = 0;
		fConst508 = (0.0017661728399818856f / fConst80);
		fConst509 = (0.00040767818495825777f + fConst508);
		fConst510 = (2 * (0.00040767818495825777f - fConst508));
		for (int i=0; i<3; i++) fRec101[i] = 0;
		fConst511 = (11.052052171507189f / fConst80);
		fConst512 = (1.450071084655647f + fConst511);
		fConst513 = (2 * (1.450071084655647f - fConst511));
		for (int i=0; i<3; i++) fRec100[i] = 0;
		fConst514 = (50.063807016150385f / fConst80);
		fConst515 = (0.9351401670315425f + fConst514);
		fConst516 = (2 * (0.9351401670315425f - fConst514));
		for (int i=0; i<2; i++) fRec99[i] = 0;
		fConst517 = (2 * (0.9351401670315425f - fConst94));
		fConst518 = (0.9351401670315425f + ((fConst96 - 0.157482159302087f) / fConst92));
		fConst519 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst96) / fConst92)));
		fConst520 = (2 * (1.450071084655647f - fConst94));
		fConst521 = (1.450071084655647f + ((fConst96 - 0.7431304601070396f) / fConst92));
		fConst522 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst96) / fConst92)));
		fConst523 = (2 * (4.076781969643807f - fConst94));
		fConst524 = (4.076781969643807f + ((fConst96 - 3.1897274020965583f) / fConst92));
		fConst525 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst96) / fConst92)));
		for (int i=0; i<3; i++) fRec106[i] = 0;
		fConst526 = (0.0017661728399818856f / fConst93);
		fConst527 = (0.00040767818495825777f + fConst526);
		fConst528 = (2 * (0.00040767818495825777f - fConst526));
		for (int i=0; i<3; i++) fRec105[i] = 0;
		fConst529 = (11.052052171507189f / fConst93);
		fConst530 = (1.450071084655647f + fConst529);
		fConst531 = (2 * (1.450071084655647f - fConst529));
		for (int i=0; i<3; i++) fRec104[i] = 0;
		fConst532 = (50.063807016150385f / fConst93);
		fConst533 = (0.9351401670315425f + fConst532);
		fConst534 = (2 * (0.9351401670315425f - fConst532));
		for (int i=0; i<2; i++) fRec103[i] = 0;
		fConst535 = (2 * (0.9351401670315425f - fConst107));
		fConst536 = (0.9351401670315425f + ((fConst109 - 0.157482159302087f) / fConst105));
		fConst537 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst109) / fConst105)));
		fConst538 = (2 * (1.450071084655647f - fConst107));
		fConst539 = (1.450071084655647f + ((fConst109 - 0.7431304601070396f) / fConst105));
		fConst540 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst109) / fConst105)));
		fConst541 = (2 * (4.076781969643807f - fConst107));
		fConst542 = (4.076781969643807f + ((fConst109 - 3.1897274020965583f) / fConst105));
		fConst543 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst109) / fConst105)));
		for (int i=0; i<3; i++) fRec110[i] = 0;
		fConst544 = (0.0017661728399818856f / fConst106);
		fConst545 = (0.00040767818495825777f + fConst544);
		fConst546 = (2 * (0.00040767818495825777f - fConst544));
		for (int i=0; i<3; i++) fRec109[i] = 0;
		fConst547 = (11.052052171507189f / fConst106);
		fConst548 = (1.450071084655647f + fConst547);
		fConst549 = (2 * (1.450071084655647f - fConst547));
		for (int i=0; i<3; i++) fRec108[i] = 0;
		fConst550 = (50.063807016150385f / fConst106);
		fConst551 = (0.9351401670315425f + fConst550);
		fConst552 = (2 * (0.9351401670315425f - fConst550));
		for (int i=0; i<2; i++) fRec107[i] = 0;
		fConst553 = (2 * (0.9351401670315425f - fConst120));
		fConst554 = (0.9351401670315425f + ((fConst122 - 0.157482159302087f) / fConst118));
		fConst555 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst122) / fConst118)));
		fConst556 = (2 * (1.450071084655647f - fConst120));
		fConst557 = (1.450071084655647f + ((fConst122 - 0.7431304601070396f) / fConst118));
		fConst558 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst122) / fConst118)));
		fConst559 = (2 * (4.076781969643807f - fConst120));
		fConst560 = (4.076781969643807f + ((fConst122 - 3.1897274020965583f) / fConst118));
		fConst561 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst122) / fConst118)));
		for (int i=0; i<3; i++) fRec114[i] = 0;
		fConst562 = (0.0017661728399818856f / fConst119);
		fConst563 = (0.00040767818495825777f + fConst562);
		fConst564 = (2 * (0.00040767818495825777f - fConst562));
		for (int i=0; i<3; i++) fRec113[i] = 0;
		fConst565 = (11.052052171507189f / fConst119);
		fConst566 = (1.450071084655647f + fConst565);
		fConst567 = (2 * (1.450071084655647f - fConst565));
		for (int i=0; i<3; i++) fRec112[i] = 0;
		fConst568 = (50.063807016150385f / fConst119);
		fConst569 = (0.9351401670315425f + fConst568);
		fConst570 = (2 * (0.9351401670315425f - fConst568));
		for (int i=0; i<2; i++) fRec111[i] = 0;
		fConst571 = (2 * (0.9351401670315425f - fConst133));
		fConst572 = (0.9351401670315425f + ((fConst135 - 0.157482159302087f) / fConst131));
		fConst573 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst135) / fConst131)));
		fConst574 = (2 * (1.450071084655647f - fConst133));
		fConst575 = (1.450071084655647f + ((fConst135 - 0.7431304601070396f) / fConst131));
		fConst576 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst135) / fConst131)));
		fConst577 = (2 * (4.076781969643807f - fConst133));
		fConst578 = (4.076781969643807f + ((fConst135 - 3.1897274020965583f) / fConst131));
		fConst579 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst135) / fConst131)));
		for (int i=0; i<3; i++) fRec118[i] = 0;
		fConst580 = (0.0017661728399818856f / fConst132);
		fConst581 = (0.00040767818495825777f + fConst580);
		fConst582 = (2 * (0.00040767818495825777f - fConst580));
		for (int i=0; i<3; i++) fRec117[i] = 0;
		fConst583 = (11.052052171507189f / fConst132);
		fConst584 = (1.450071084655647f + fConst583);
		fConst585 = (2 * (1.450071084655647f - fConst583));
		for (int i=0; i<3; i++) fRec116[i] = 0;
		fConst586 = (50.063807016150385f / fConst132);
		fConst587 = (0.9351401670315425f + fConst586);
		fConst588 = (2 * (0.9351401670315425f - fConst586));
		for (int i=0; i<2; i++) fRec115[i] = 0;
		fConst589 = (2 * (0.9351401670315425f - fConst146));
		fConst590 = (0.9351401670315425f + ((fConst148 - 0.157482159302087f) / fConst144));
		fConst591 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst148) / fConst144)));
		fConst592 = (2 * (1.450071084655647f - fConst146));
		fConst593 = (1.450071084655647f + ((fConst148 - 0.7431304601070396f) / fConst144));
		fConst594 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst148) / fConst144)));
		fConst595 = (2 * (4.076781969643807f - fConst146));
		fConst596 = (4.076781969643807f + ((fConst148 - 3.1897274020965583f) / fConst144));
		fConst597 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst148) / fConst144)));
		for (int i=0; i<3; i++) fRec122[i] = 0;
		fConst598 = (0.0017661728399818856f / fConst145);
		fConst599 = (0.00040767818495825777f + fConst598);
		fConst600 = (2 * (0.00040767818495825777f - fConst598));
		for (int i=0; i<3; i++) fRec121[i] = 0;
		fConst601 = (11.052052171507189f / fConst145);
		fConst602 = (1.450071084655647f + fConst601);
		fConst603 = (2 * (1.450071084655647f - fConst601));
		for (int i=0; i<3; i++) fRec120[i] = 0;
		fConst604 = (50.063807016150385f / fConst145);
		fConst605 = (0.9351401670315425f + fConst604);
		fConst606 = (2 * (0.9351401670315425f - fConst604));
		for (int i=0; i<2; i++) fRec119[i] = 0;
		fConst607 = (2 * (0.9351401670315425f - fConst159));
		fConst608 = (0.9351401670315425f + ((fConst161 - 0.157482159302087f) / fConst157));
		fConst609 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst161) / fConst157)));
		fConst610 = (2 * (1.450071084655647f - fConst159));
		fConst611 = (1.450071084655647f + ((fConst161 - 0.7431304601070396f) / fConst157));
		fConst612 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst161) / fConst157)));
		fConst613 = (2 * (4.076781969643807f - fConst159));
		fConst614 = (4.076781969643807f + ((fConst161 - 3.1897274020965583f) / fConst157));
		fConst615 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst161) / fConst157)));
		for (int i=0; i<3; i++) fRec126[i] = 0;
		fConst616 = (0.0017661728399818856f / fConst158);
		fConst617 = (0.00040767818495825777f + fConst616);
		fConst618 = (2 * (0.00040767818495825777f - fConst616));
		for (int i=0; i<3; i++) fRec125[i] = 0;
		fConst619 = (11.052052171507189f / fConst158);
		fConst620 = (1.450071084655647f + fConst619);
		fConst621 = (2 * (1.450071084655647f - fConst619));
		for (int i=0; i<3; i++) fRec124[i] = 0;
		fConst622 = (50.063807016150385f / fConst158);
		fConst623 = (0.9351401670315425f + fConst622);
		fConst624 = (2 * (0.9351401670315425f - fConst622));
		for (int i=0; i<2; i++) fRec123[i] = 0;
		fConst625 = (2 * (0.9351401670315425f - fConst172));
		fConst626 = (0.9351401670315425f + ((fConst174 - 0.157482159302087f) / fConst170));
		fConst627 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst174) / fConst170)));
		fConst628 = (2 * (1.450071084655647f - fConst172));
		fConst629 = (1.450071084655647f + ((fConst174 - 0.7431304601070396f) / fConst170));
		fConst630 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst174) / fConst170)));
		fConst631 = (2 * (4.076781969643807f - fConst172));
		fConst632 = (4.076781969643807f + ((fConst174 - 3.1897274020965583f) / fConst170));
		fConst633 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst174) / fConst170)));
		for (int i=0; i<3; i++) fRec130[i] = 0;
		fConst634 = (0.0017661728399818856f / fConst171);
		fConst635 = (0.00040767818495825777f + fConst634);
		fConst636 = (2 * (0.00040767818495825777f - fConst634));
		for (int i=0; i<3; i++) fRec129[i] = 0;
		fConst637 = (11.052052171507189f / fConst171);
		fConst638 = (1.450071084655647f + fConst637);
		fConst639 = (2 * (1.450071084655647f - fConst637));
		for (int i=0; i<3; i++) fRec128[i] = 0;
		fConst640 = (50.063807016150385f / fConst171);
		fConst641 = (0.9351401670315425f + fConst640);
		fConst642 = (2 * (0.9351401670315425f - fConst640));
		for (int i=0; i<2; i++) fRec127[i] = 0;
		fConst643 = (2 * (0.9351401670315425f - fConst185));
		fConst644 = (0.9351401670315425f + ((fConst187 - 0.157482159302087f) / fConst183));
		fConst645 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst187) / fConst183)));
		fConst646 = (2 * (1.450071084655647f - fConst185));
		fConst647 = (1.450071084655647f + ((fConst187 - 0.7431304601070396f) / fConst183));
		fConst648 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst187) / fConst183)));
		fConst649 = (2 * (4.076781969643807f - fConst185));
		fConst650 = (4.076781969643807f + ((fConst187 - 3.1897274020965583f) / fConst183));
		fConst651 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst187) / fConst183)));
		for (int i=0; i<3; i++) fRec134[i] = 0;
		fConst652 = (0.0017661728399818856f / fConst184);
		fConst653 = (0.00040767818495825777f + fConst652);
		fConst654 = (2 * (0.00040767818495825777f - fConst652));
		for (int i=0; i<3; i++) fRec133[i] = 0;
		fConst655 = (11.052052171507189f / fConst184);
		fConst656 = (1.450071084655647f + fConst655);
		fConst657 = (2 * (1.450071084655647f - fConst655));
		for (int i=0; i<3; i++) fRec132[i] = 0;
		fConst658 = (50.063807016150385f / fConst184);
		fConst659 = (0.9351401670315425f + fConst658);
		fConst660 = (2 * (0.9351401670315425f - fConst658));
		for (int i=0; i<2; i++) fRec131[i] = 0;
		fConst661 = (2 * (0.9351401670315425f - fConst198));
		fConst662 = (0.9351401670315425f + ((fConst200 - 0.157482159302087f) / fConst196));
		fConst663 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst200) / fConst196)));
		fConst664 = (2 * (1.450071084655647f - fConst198));
		fConst665 = (1.450071084655647f + ((fConst200 - 0.7431304601070396f) / fConst196));
		fConst666 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst200) / fConst196)));
		fConst667 = (2 * (4.076781969643807f - fConst198));
		fConst668 = (4.076781969643807f + ((fConst200 - 3.1897274020965583f) / fConst196));
		fConst669 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst200) / fConst196)));
		for (int i=0; i<3; i++) fRec138[i] = 0;
		fConst670 = (0.0017661728399818856f / fConst197);
		fConst671 = (0.00040767818495825777f + fConst670);
		fConst672 = (2 * (0.00040767818495825777f - fConst670));
		for (int i=0; i<3; i++) fRec137[i] = 0;
		fConst673 = (11.052052171507189f / fConst197);
		fConst674 = (1.450071084655647f + fConst673);
		fConst675 = (2 * (1.450071084655647f - fConst673));
		for (int i=0; i<3; i++) fRec136[i] = 0;
		fConst676 = (50.063807016150385f / fConst197);
		fConst677 = (0.9351401670315425f + fConst676);
		fConst678 = (2 * (0.9351401670315425f - fConst676));
		for (int i=0; i<2; i++) fRec135[i] = 0;
		fConst679 = (2 * (0.9351401670315425f - fConst211));
		fConst680 = (0.9351401670315425f + ((fConst213 - 0.157482159302087f) / fConst209));
		fConst681 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst213) / fConst209)));
		fConst682 = (2 * (1.450071084655647f - fConst211));
		fConst683 = (1.450071084655647f + ((fConst213 - 0.7431304601070396f) / fConst209));
		fConst684 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst213) / fConst209)));
		fConst685 = (2 * (4.076781969643807f - fConst211));
		fConst686 = (4.076781969643807f + ((fConst213 - 3.1897274020965583f) / fConst209));
		fConst687 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst213) / fConst209)));
		for (int i=0; i<3; i++) fRec142[i] = 0;
		fConst688 = (0.0017661728399818856f / fConst210);
		fConst689 = (0.00040767818495825777f + fConst688);
		fConst690 = (2 * (0.00040767818495825777f - fConst688));
		for (int i=0; i<3; i++) fRec141[i] = 0;
		fConst691 = (11.052052171507189f / fConst210);
		fConst692 = (1.450071084655647f + fConst691);
		fConst693 = (2 * (1.450071084655647f - fConst691));
		for (int i=0; i<3; i++) fRec140[i] = 0;
		fConst694 = (50.063807016150385f / fConst210);
		fConst695 = (0.9351401670315425f + fConst694);
		fConst696 = (2 * (0.9351401670315425f - fConst694));
		for (int i=0; i<2; i++) fRec139[i] = 0;
		fConst697 = (2 * (0.9351401670315425f - fConst224));
		fConst698 = (0.9351401670315425f + ((fConst226 - 0.157482159302087f) / fConst222));
		fConst699 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst226) / fConst222)));
		fConst700 = (2 * (1.450071084655647f - fConst224));
		fConst701 = (1.450071084655647f + ((fConst226 - 0.7431304601070396f) / fConst222));
		fConst702 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst226) / fConst222)));
		fConst703 = (2 * (4.076781969643807f - fConst224));
		fConst704 = (4.076781969643807f + ((fConst226 - 3.1897274020965583f) / fConst222));
		fConst705 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst226) / fConst222)));
		for (int i=0; i<3; i++) fRec146[i] = 0;
		fConst706 = (0.0017661728399818856f / fConst223);
		fConst707 = (0.00040767818495825777f + fConst706);
		fConst708 = (2 * (0.00040767818495825777f - fConst706));
		for (int i=0; i<3; i++) fRec145[i] = 0;
		fConst709 = (11.052052171507189f / fConst223);
		fConst710 = (1.450071084655647f + fConst709);
		fConst711 = (2 * (1.450071084655647f - fConst709));
		for (int i=0; i<3; i++) fRec144[i] = 0;
		fConst712 = (50.063807016150385f / fConst223);
		fConst713 = (0.9351401670315425f + fConst712);
		fConst714 = (2 * (0.9351401670315425f - fConst712));
		for (int i=0; i<2; i++) fRec143[i] = 0;
		fConst715 = (2 * (0.9351401670315425f - fConst237));
		fConst716 = (0.9351401670315425f + ((fConst239 - 0.157482159302087f) / fConst235));
		fConst717 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst239) / fConst235)));
		fConst718 = (2 * (1.450071084655647f - fConst237));
		fConst719 = (1.450071084655647f + ((fConst239 - 0.7431304601070396f) / fConst235));
		fConst720 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst239) / fConst235)));
		fConst721 = (2 * (4.076781969643807f - fConst237));
		fConst722 = (4.076781969643807f + ((fConst239 - 3.1897274020965583f) / fConst235));
		fConst723 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst239) / fConst235)));
		for (int i=0; i<3; i++) fRec150[i] = 0;
		fConst724 = (0.0017661728399818856f / fConst236);
		fConst725 = (0.00040767818495825777f + fConst724);
		fConst726 = (2 * (0.00040767818495825777f - fConst724));
		for (int i=0; i<3; i++) fRec149[i] = 0;
		fConst727 = (11.052052171507189f / fConst236);
		fConst728 = (1.450071084655647f + fConst727);
		fConst729 = (2 * (1.450071084655647f - fConst727));
		for (int i=0; i<3; i++) fRec148[i] = 0;
		fConst730 = (50.063807016150385f / fConst236);
		fConst731 = (0.9351401670315425f + fConst730);
		fConst732 = (2 * (0.9351401670315425f - fConst730));
		for (int i=0; i<2; i++) fRec147[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void buildUserInterface(UI* interface) {
		interface->openVerticalBox("0x00");
		interface->declare(0, "1", "");
		interface->openVerticalBox("0x00");
		interface->declare(0, "0", "");
		interface->declare(0, "tooltip", "See Faust's oscillator.lib for documentation and references");
		interface->openVerticalBox("SAWTOOTH OSCILLATOR");
		interface->declare(0, "1", "");
		interface->openHorizontalBox("0x00");
		interface->declare(&fslider9, "1", "");
		interface->declare(&fslider9, "style", "knob");
		interface->declare(&fslider9, "tooltip", "Sawtooth waveform amplitude");
		interface->declare(&fslider9, "unit", "dB");
		interface->addVerticalSlider("Amplitude", &fslider9, -2e+01f, -1.2e+02f, 1e+01f, 0.1f);
		interface->declare(&fslider6, "2", "");
		interface->declare(&fslider6, "style", "knob");
		interface->declare(&fslider6, "tooltip", "Sawtooth frequency as a Piano Key (PK) number (A440 = key 49)");
		interface->declare(&fslider6, "unit", "PK");
		interface->addVerticalSlider("Frequency", &fslider6, 49.0f, 1.0f, 88.0f, 0.01f);
		interface->declare(&fslider8, "3", "");
		interface->declare(&fslider8, "style", "knob");
		interface->declare(&fslider8, "tooltip", "Percentange frequency-shift up or down for second oscillator");
		interface->declare(&fslider8, "unit", "%%");
		interface->addVerticalSlider("Detuning 1", &fslider8, -0.1f, -1e+01f, 1e+01f, 0.01f);
		interface->declare(&fslider7, "4", "");
		interface->declare(&fslider7, "style", "knob");
		interface->declare(&fslider7, "tooltip", "Percentange frequency-shift up or down for third detuned oscillator");
		interface->declare(&fslider7, "unit", "%%");
		interface->addVerticalSlider("Detuning 2", &fslider7, 0.1f, -1e+01f, 1e+01f, 0.01f);
		interface->declare(&fslider5, "5", "");
		interface->declare(&fslider5, "scale", "log");
		interface->declare(&fslider5, "style", "knob");
		interface->declare(&fslider5, "tooltip", "Portamento (frequency-glide) time-constant in seconds");
		interface->declare(&fslider5, "unit", "sec");
		interface->addVerticalSlider("Portamento", &fslider5, 0.1f, 0.001f, 1e+01f, 0.001f);
		interface->declare(0, "6", "");
		interface->openVerticalBox("Alternate Signals");
		interface->declare(&fcheckbox0, "0", "");
		interface->declare(&fcheckbox0, "tooltip", "Pink Noise (or 1/f noise) is Constant-Q Noise, meaning that it has the same total power in every octave");
		interface->addCheckButton("Pink Noise Instead (uses only Amplitude control on the left)", &fcheckbox0);
		interface->declare(&fcheckbox1, "1", "");
		interface->addCheckButton("External Input Instead (overrides Sawtooth/Noise selection above)", &fcheckbox1);
		interface->closeBox();
		interface->closeBox();
		interface->closeBox();
		interface->closeBox();
		interface->declare(0, "2", "");
		interface->openVerticalBox("0x00");
		interface->declare(0, "0", "");
		interface->declare(0, "tooltip", "See Faust's filter.lib for info and pointers");
		interface->openHorizontalBox("PARAMETRIC EQ SECTIONS");
		interface->declare(0, "1", "");
		interface->openVerticalBox("Low Shelf");
		interface->declare(&fslider10, "0", "");
		interface->declare(&fslider10, "style", "knob");
		interface->declare(&fslider10, "tooltip", "Amount of low-frequency boost or cut in decibels");
		interface->declare(&fslider10, "unit", "dB");
		interface->addHorizontalSlider("Low Boost|Cut", &fslider10, 0.0f, -4e+01f, 4e+01f, 0.1f);
		interface->declare(&fslider4, "1", "");
		interface->declare(&fslider4, "scale", "log");
		interface->declare(&fslider4, "style", "knob");
		interface->declare(&fslider4, "tooltip", "Transition-frequency from boost (cut) to unity gain");
		interface->declare(&fslider4, "unit", "Hz");
		interface->addHorizontalSlider("Transition Frequency", &fslider4, 2e+02f, 1.0f, 5e+03f, 1.0f);
		interface->closeBox();
		interface->declare(0, "2", "");
		interface->declare(0, "tooltip", "Parametric Equalizer sections from filter.lib");
		interface->openVerticalBox("Peaking Equalizer");
		interface->declare(&fslider3, "0", "");
		interface->declare(&fslider3, "style", "knob");
		interface->declare(&fslider3, "tooltip", "Amount of local boost or cut in decibels");
		interface->declare(&fslider3, "unit", "dB");
		interface->addHorizontalSlider("Peak Boost|Cut", &fslider3, 0.0f, -4e+01f, 4e+01f, 0.1f);
		interface->declare(&fslider1, "1", "");
		interface->declare(&fslider1, "style", "knob");
		interface->declare(&fslider1, "tooltip", "Peak Frequency in Piano Key (PK) units (A440 = 49PK)");
		interface->declare(&fslider1, "unit", "PK");
		interface->addHorizontalSlider("Peak Frequency", &fslider1, 49.0f, 1.0f, 1e+02f, 1.0f);
		interface->declare(&fslider2, "2", "");
		interface->declare(&fslider2, "scale", "log");
		interface->declare(&fslider2, "style", "knob");
		interface->declare(&fslider2, "tooltip", "Quality factor (Q) of the peak = center-frequency/bandwidth");
		interface->addHorizontalSlider("Peak Q", &fslider2, 4e+01f, 1.0f, 1e+03f, 0.1f);
		interface->closeBox();
		interface->declare(0, "3", "");
		interface->declare(0, "tooltip", "A high shelf provides a boost or cut                            above some frequency");
		interface->openVerticalBox("High Shelf");
		interface->declare(&fslider11, "0", "");
		interface->declare(&fslider11, "style", "knob");
		interface->declare(&fslider11, "tooltip", "Amount of high-frequency boost or cut in decibels");
		interface->declare(&fslider11, "unit", "dB");
		interface->addHorizontalSlider("High Boost|Cut", &fslider11, 0.0f, -4e+01f, 4e+01f, 0.1f);
		interface->declare(&fslider0, "1", "");
		interface->declare(&fslider0, "scale", "log");
		interface->declare(&fslider0, "style", "knob");
		interface->declare(&fslider0, "tooltip", "Transition-frequency from boost (cut) to unity gain");
		interface->declare(&fslider0, "unit", "Hz");
		interface->addHorizontalSlider("Transition Frequency", &fslider0, 8e+03f, 2e+01f, 1e+04f, 1.0f);
		interface->closeBox();
		interface->closeBox();
		interface->closeBox();
		interface->declare(0, "3", "");
		interface->openVerticalBox("0x00");
		interface->declare(0, "0", "");
		interface->declare(0, "tooltip", "See Faust's filter.lib for documentation and references");
		interface->openHorizontalBox("CONSTANT-Q SPECTRUM ANALYZER (6E), 20 bands spanning LP, 9 octaves below 16000 Hz, HP");
		interface->declare(&fbargraph0, "0", "");
		interface->declare(&fbargraph0, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph0, "unit", "dB");
		interface->addVerticalBargraph("0x4a41270", &fbargraph0, -5e+01f, 1e+01f);
		interface->declare(&fbargraph1, "1", "");
		interface->declare(&fbargraph1, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph1, "unit", "dB");
		interface->addVerticalBargraph("0x4a4ab30", &fbargraph1, -5e+01f, 1e+01f);
		interface->declare(&fbargraph2, "2", "");
		interface->declare(&fbargraph2, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph2, "unit", "dB");
		interface->addVerticalBargraph("0x4a53ce0", &fbargraph2, -5e+01f, 1e+01f);
		interface->declare(&fbargraph3, "3", "");
		interface->declare(&fbargraph3, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph3, "unit", "dB");
		interface->addVerticalBargraph("0x4a5d170", &fbargraph3, -5e+01f, 1e+01f);
		interface->declare(&fbargraph4, "4", "");
		interface->declare(&fbargraph4, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph4, "unit", "dB");
		interface->addVerticalBargraph("0x4a66090", &fbargraph4, -5e+01f, 1e+01f);
		interface->declare(&fbargraph5, "5", "");
		interface->declare(&fbargraph5, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph5, "unit", "dB");
		interface->addVerticalBargraph("0x4a6f3c0", &fbargraph5, -5e+01f, 1e+01f);
		interface->declare(&fbargraph6, "6", "");
		interface->declare(&fbargraph6, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph6, "unit", "dB");
		interface->addVerticalBargraph("0x4a78a50", &fbargraph6, -5e+01f, 1e+01f);
		interface->declare(&fbargraph7, "7", "");
		interface->declare(&fbargraph7, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph7, "unit", "dB");
		interface->addVerticalBargraph("0x4a81f30", &fbargraph7, -5e+01f, 1e+01f);
		interface->declare(&fbargraph8, "8", "");
		interface->declare(&fbargraph8, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph8, "unit", "dB");
		interface->addVerticalBargraph("0x4a8b2a0", &fbargraph8, -5e+01f, 1e+01f);
		interface->declare(&fbargraph9, "9", "");
		interface->declare(&fbargraph9, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph9, "unit", "dB");
		interface->addVerticalBargraph("0x4a949f0", &fbargraph9, -5e+01f, 1e+01f);
		interface->declare(&fbargraph10, "10", "");
		interface->declare(&fbargraph10, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph10, "unit", "dB");
		interface->addVerticalBargraph("0x4a9e390", &fbargraph10, -5e+01f, 1e+01f);
		interface->declare(&fbargraph11, "11", "");
		interface->declare(&fbargraph11, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph11, "unit", "dB");
		interface->addVerticalBargraph("0x4aa78b0", &fbargraph11, -5e+01f, 1e+01f);
		interface->declare(&fbargraph12, "12", "");
		interface->declare(&fbargraph12, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph12, "unit", "dB");
		interface->addVerticalBargraph("0x4ab11e0", &fbargraph12, -5e+01f, 1e+01f);
		interface->declare(&fbargraph13, "13", "");
		interface->declare(&fbargraph13, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph13, "unit", "dB");
		interface->addVerticalBargraph("0x4abad90", &fbargraph13, -5e+01f, 1e+01f);
		interface->declare(&fbargraph14, "14", "");
		interface->declare(&fbargraph14, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph14, "unit", "dB");
		interface->addVerticalBargraph("0x4ac4710", &fbargraph14, -5e+01f, 1e+01f);
		interface->declare(&fbargraph15, "15", "");
		interface->declare(&fbargraph15, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph15, "unit", "dB");
		interface->addVerticalBargraph("0x4acdf70", &fbargraph15, -5e+01f, 1e+01f);
		interface->declare(&fbargraph16, "16", "");
		interface->declare(&fbargraph16, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph16, "unit", "dB");
		interface->addVerticalBargraph("0x4ad7d60", &fbargraph16, -5e+01f, 1e+01f);
		interface->declare(&fbargraph17, "17", "");
		interface->declare(&fbargraph17, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph17, "unit", "dB");
		interface->addVerticalBargraph("0x4ae1870", &fbargraph17, -5e+01f, 1e+01f);
		interface->declare(&fbargraph18, "18", "");
		interface->declare(&fbargraph18, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph18, "unit", "dB");
		interface->addVerticalBargraph("0x4aeb210", &fbargraph18, -5e+01f, 1e+01f);
		interface->declare(&fbargraph19, "19", "");
		interface->declare(&fbargraph19, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph19, "unit", "dB");
		interface->addVerticalBargraph("0x4af4fa0", &fbargraph19, -5e+01f, 1e+01f);
		interface->closeBox();
		interface->declare(0, "1", "");
		interface->openHorizontalBox("SPECTRUM ANALYZER CONTROLS");
		interface->declare(&fslider12, "0", "");
		interface->declare(&fslider12, "scale", "log");
		interface->declare(&fslider12, "tooltip", "band-level averaging time in milliseconds");
		interface->declare(&fslider12, "unit", "ms");
		interface->addHorizontalSlider("Level Averaging Time", &fslider12, 1e+02f, 1.0f, 1e+04f, 1.0f);
		interface->declare(&fslider13, "1", "");
		interface->declare(&fslider13, "tooltip", "Level offset in decibels");
		interface->declare(&fslider13, "unit", "dB");
		interface->addHorizontalSlider("Level dB Offset", &fslider13, 5e+01f, 0.0f, 1e+02f, 1.0f);
		interface->closeBox();
		interface->closeBox();
		interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0 = tanf((fConst248 * float(fslider0)));
		float 	fSlow1 = (1.0f / faustpower<2>(fSlow0));
		float 	fSlow2 = (2 * (1 - fSlow1));
		float 	fSlow3 = (1.0f / fSlow0);
		float 	fSlow4 = (1 + ((fSlow3 - 1.0000000000000004f) / fSlow0));
		float 	fSlow5 = (1.0f / (1 + ((1.0000000000000004f + fSlow3) / fSlow0)));
		float 	fSlow6 = (0.0010000000000000009f * float(fslider1));
		float 	fSlow7 = float(fslider2);
		float 	fSlow8 = float(fslider3);
		float 	fSlow9 = (fConst253 * (powf(10,(0.05f * fabsf(fSlow8))) / fSlow7));
		float 	fSlow10 = (fConst253 / fSlow7);
		int 	iSlow11 = int((fSlow8 > 0));
		float 	fSlow12 = tanf((fConst248 * float(fslider4)));
		float 	fSlow13 = (1.0f / faustpower<2>(fSlow12));
		float 	fSlow14 = (2 * (1 - fSlow13));
		float 	fSlow15 = (1.0f / fSlow12);
		float 	fSlow16 = (1 + ((fSlow15 - 1.0000000000000004f) / fSlow12));
		float 	fSlow17 = (1.0f / (1 + ((1.0000000000000004f + fSlow15) / fSlow12)));
		float 	fSlow18 = expf((0 - (fConst250 / float(fslider5))));
		float 	fSlow19 = (4.4e+02f * (powf(2.0f,(0.08333333333333333f * (float(fslider6) - 49.0f))) * (1.0f - fSlow18)));
		float 	fSlow20 = (1 + (0.01f * float(fslider7)));
		float 	fSlow21 = (fConst254 / fSlow20);
		float 	fSlow22 = (fConst255 * fSlow20);
		float 	fSlow23 = (1.0f / fSlow20);
		float 	fSlow24 = (1 + (0.01f * float(fslider8)));
		float 	fSlow25 = (fConst254 / fSlow24);
		float 	fSlow26 = (fConst255 * fSlow24);
		float 	fSlow27 = (1.0f / fSlow24);
		float 	fSlow28 = (0.0010000000000000009f * powf(10,(0.05f * float(fslider9))));
		int 	iSlow29 = int(float(fcheckbox0));
		int 	iSlow30 = int(float(fcheckbox1));
		float 	fSlow31 = (1 + fSlow15);
		float 	fSlow32 = (1.0f / fSlow31);
		float 	fSlow33 = (0 - ((1 - fSlow15) / fSlow31));
		float 	fSlow34 = powf(10,(0.05f * float(fslider10)));
		float 	fSlow35 = (0 - fSlow15);
		float 	fSlow36 = (2 * (0 - fSlow13));
		float 	fSlow37 = (0 - fSlow3);
		float 	fSlow38 = (1 + fSlow3);
		float 	fSlow39 = (1.0f / fSlow38);
		float 	fSlow40 = (0 - ((1 - fSlow3) / fSlow38));
		float 	fSlow41 = (2 * (0 - fSlow1));
		float 	fSlow42 = powf(10,(0.05f * float(fslider11)));
		float 	fSlow43 = expf((0 - (fConst390 / float(fslider12))));
		float 	fSlow44 = (1.0f - fSlow43);
		float 	fSlow45 = float(fslider13);
		FAUSTFLOAT* input0 = input[0];
		FAUSTFLOAT* output0 = output[0];
		FAUSTFLOAT* output1 = output[1];
		for (int i=0; i<count; i++) {
			fRec60[0] = ((0.999f * fRec60[1]) + fSlow6);
			float fTemp0 = powf(2.0f,(0.08333333333333333f * (fRec60[0] - 49.0f)));
			float fTemp1 = tanf((fConst249 * fTemp0));
			float fTemp2 = (fTemp0 / sinf((fConst252 * fTemp0)));
			float fTemp3 = (fSlow9 * fTemp2);
			float fTemp4 = (fSlow10 * fTemp2);
			float fTemp5 = ((iSlow11)?fTemp4:fTemp3);
			float fTemp6 = (1.0f / fTemp1);
			float fTemp7 = (1 + ((fTemp6 + fTemp5) / fTemp1));
			float fTemp8 = ((iSlow11)?fTemp3:fTemp4);
			float fTemp9 = (2 * (fRec61[1] * (1 - (1.0f / faustpower<2>(fTemp1)))));
			fRec64[0] = ((fSlow18 * fRec64[1]) + fSlow19);
			fRec65[0] = fmodf((1.0f + fRec65[1]),(fSlow21 / fRec64[0]));
			float fTemp10 = faustpower<2>(((fSlow22 * (fRec64[0] * fRec65[0])) - 1.0f));
			fVec0[0] = fTemp10;
			fRec66[0] = fmodf((1.0f + fRec66[1]),(fSlow25 / fRec64[0]));
			float fTemp11 = faustpower<2>(((fSlow26 * (fRec64[0] * fRec66[0])) - 1.0f));
			fVec1[0] = fTemp11;
			fRec67[0] = fmodf((1.0f + fRec67[1]),(fConst254 / fRec64[0]));
			float fTemp12 = faustpower<2>(((fConst255 * (fRec64[0] * fRec67[0])) - 1.0f));
			fVec2[0] = fTemp12;
			fVec3[0] = 0.25f;
			fRec68[0] = ((0.999f * fRec68[1]) + fSlow28);
			iRec70[0] = (12345 + (1103515245 * iRec70[1]));
			fRec69[0] = (((0.5221894f * fRec69[3]) + ((4.656612875245797e-10f * iRec70[0]) + (2.494956002f * fRec69[1]))) - (2.017265875f * fRec69[2]));
			float fTemp13 = (fRec68[0] * ((iSlow30)?(float)input0[i]:((iSlow29)?(((0.049922035f * fRec69[0]) + (0.050612699f * fRec69[2])) - ((0.095993537f * fRec69[1]) + (0.004408786f * fRec69[3]))):(fConst256 * (((fRec68[0] * fVec3[1]) * (((fVec2[0] - fVec2[1]) + (fSlow27 * (fVec1[0] - fVec1[1]))) + (fSlow23 * (fVec0[0] - fVec0[1])))) / fRec64[0])))));
			fVec4[0] = fTemp13;
			fRec63[0] = ((fSlow33 * fRec63[1]) + (fSlow32 * (fVec4[0] + fVec4[1])));
			fRec62[0] = (fRec63[0] - (fSlow17 * ((fSlow16 * fRec62[2]) + (fSlow14 * fRec62[1]))));
			fRec72[0] = ((fSlow33 * fRec72[1]) + (fSlow32 * ((fSlow15 * fVec4[0]) + (fSlow35 * fVec4[1]))));
			fRec71[0] = (fRec72[0] - (fSlow17 * ((fSlow16 * fRec71[2]) + (fSlow14 * fRec71[1]))));
			fRec61[0] = ((fSlow17 * ((((fSlow13 * fRec71[0]) + (fSlow36 * fRec71[1])) + (fSlow13 * fRec71[2])) + (fSlow34 * (fRec62[2] + (fRec62[0] + (2 * fRec62[1])))))) - (((fRec61[2] * (1 + ((fTemp6 - fTemp5) / fTemp1))) + fTemp9) / fTemp7));
			float fTemp14 = (((fTemp9 + (fRec61[0] * (1 + ((fTemp6 + fTemp8) / fTemp1)))) + (fRec61[2] * (1 + ((fTemp6 - fTemp8) / fTemp1)))) / fTemp7);
			fVec5[0] = fTemp14;
			fRec59[0] = ((fSlow40 * fRec59[1]) + (fSlow39 * ((fSlow3 * fVec5[0]) + (fSlow37 * fVec5[1]))));
			fRec58[0] = (fRec59[0] - (fSlow5 * ((fSlow4 * fRec58[2]) + (fSlow2 * fRec58[1]))));
			fRec74[0] = ((fSlow40 * fRec74[1]) + (fSlow39 * (fVec5[0] + fVec5[1])));
			fRec73[0] = (fRec74[0] - (fSlow5 * ((fSlow4 * fRec73[2]) + (fSlow2 * fRec73[1]))));
			float fTemp15 = (fSlow5 * ((fRec73[2] + (fRec73[0] + (2 * fRec73[1]))) + (fSlow42 * (((fSlow1 * fRec58[0]) + (fSlow41 * fRec58[1])) + (fSlow1 * fRec58[2])))));
			fRec57[0] = (fTemp15 - (fConst247 * ((fConst246 * fRec57[2]) + (fConst245 * fRec57[1]))));
			fRec56[0] = ((fConst247 * (((fConst259 * fRec57[1]) + (fConst258 * fRec57[0])) + (fConst258 * fRec57[2]))) - (fConst244 * ((fConst243 * fRec56[2]) + (fConst242 * fRec56[1]))));
			fRec55[0] = ((fConst244 * (((fConst260 * fRec56[0]) + (fConst261 * fRec56[1])) + (fConst260 * fRec56[2]))) - (fConst241 * ((fConst240 * fRec55[2]) + (fConst238 * fRec55[1]))));
			float fTemp16 = (fConst241 * (((fConst262 * fRec55[0]) + (fConst263 * fRec55[1])) + (fConst262 * fRec55[2])));
			fRec54[0] = (fTemp16 - (fConst234 * ((fConst233 * fRec54[2]) + (fConst232 * fRec54[1]))));
			fRec53[0] = ((fConst234 * (((fConst265 * fRec54[0]) + (fConst266 * fRec54[1])) + (fConst265 * fRec54[2]))) - (fConst231 * ((fConst230 * fRec53[2]) + (fConst229 * fRec53[1]))));
			fRec52[0] = ((fConst231 * (((fConst267 * fRec53[0]) + (fConst268 * fRec53[1])) + (fConst267 * fRec53[2]))) - (fConst228 * ((fConst227 * fRec52[2]) + (fConst225 * fRec52[1]))));
			float fTemp17 = (fConst228 * (((fConst269 * fRec52[0]) + (fConst270 * fRec52[1])) + (fConst269 * fRec52[2])));
			fRec51[0] = (fTemp17 - (fConst221 * ((fConst220 * fRec51[2]) + (fConst219 * fRec51[1]))));
			fRec50[0] = ((fConst221 * (((fConst272 * fRec51[0]) + (fConst273 * fRec51[1])) + (fConst272 * fRec51[2]))) - (fConst218 * ((fConst217 * fRec50[2]) + (fConst216 * fRec50[1]))));
			fRec49[0] = ((fConst218 * (((fConst274 * fRec50[0]) + (fConst275 * fRec50[1])) + (fConst274 * fRec50[2]))) - (fConst215 * ((fConst214 * fRec49[2]) + (fConst212 * fRec49[1]))));
			float fTemp18 = (fConst215 * (((fConst276 * fRec49[0]) + (fConst277 * fRec49[1])) + (fConst276 * fRec49[2])));
			fRec48[0] = (fTemp18 - (fConst208 * ((fConst207 * fRec48[2]) + (fConst206 * fRec48[1]))));
			fRec47[0] = ((fConst208 * (((fConst279 * fRec48[0]) + (fConst280 * fRec48[1])) + (fConst279 * fRec48[2]))) - (fConst205 * ((fConst204 * fRec47[2]) + (fConst203 * fRec47[1]))));
			fRec46[0] = ((fConst205 * (((fConst281 * fRec47[0]) + (fConst282 * fRec47[1])) + (fConst281 * fRec47[2]))) - (fConst202 * ((fConst201 * fRec46[2]) + (fConst199 * fRec46[1]))));
			float fTemp19 = (fConst202 * (((fConst283 * fRec46[0]) + (fConst284 * fRec46[1])) + (fConst283 * fRec46[2])));
			fRec45[0] = (fTemp19 - (fConst195 * ((fConst194 * fRec45[2]) + (fConst193 * fRec45[1]))));
			fRec44[0] = ((fConst195 * (((fConst286 * fRec45[0]) + (fConst287 * fRec45[1])) + (fConst286 * fRec45[2]))) - (fConst192 * ((fConst191 * fRec44[2]) + (fConst190 * fRec44[1]))));
			fRec43[0] = ((fConst192 * (((fConst288 * fRec44[0]) + (fConst289 * fRec44[1])) + (fConst288 * fRec44[2]))) - (fConst189 * ((fConst188 * fRec43[2]) + (fConst186 * fRec43[1]))));
			float fTemp20 = (fConst189 * (((fConst290 * fRec43[0]) + (fConst291 * fRec43[1])) + (fConst290 * fRec43[2])));
			fRec42[0] = (fTemp20 - (fConst182 * ((fConst181 * fRec42[2]) + (fConst180 * fRec42[1]))));
			fRec41[0] = ((fConst182 * (((fConst293 * fRec42[0]) + (fConst294 * fRec42[1])) + (fConst293 * fRec42[2]))) - (fConst179 * ((fConst178 * fRec41[2]) + (fConst177 * fRec41[1]))));
			fRec40[0] = ((fConst179 * (((fConst295 * fRec41[0]) + (fConst296 * fRec41[1])) + (fConst295 * fRec41[2]))) - (fConst176 * ((fConst175 * fRec40[2]) + (fConst173 * fRec40[1]))));
			float fTemp21 = (fConst176 * (((fConst297 * fRec40[0]) + (fConst298 * fRec40[1])) + (fConst297 * fRec40[2])));
			fRec39[0] = (fTemp21 - (fConst169 * ((fConst168 * fRec39[2]) + (fConst167 * fRec39[1]))));
			fRec38[0] = ((fConst169 * (((fConst300 * fRec39[0]) + (fConst301 * fRec39[1])) + (fConst300 * fRec39[2]))) - (fConst166 * ((fConst165 * fRec38[2]) + (fConst164 * fRec38[1]))));
			fRec37[0] = ((fConst166 * (((fConst302 * fRec38[0]) + (fConst303 * fRec38[1])) + (fConst302 * fRec38[2]))) - (fConst163 * ((fConst162 * fRec37[2]) + (fConst160 * fRec37[1]))));
			float fTemp22 = (fConst163 * (((fConst304 * fRec37[0]) + (fConst305 * fRec37[1])) + (fConst304 * fRec37[2])));
			fRec36[0] = (fTemp22 - (fConst156 * ((fConst155 * fRec36[2]) + (fConst154 * fRec36[1]))));
			fRec35[0] = ((fConst156 * (((fConst307 * fRec36[0]) + (fConst308 * fRec36[1])) + (fConst307 * fRec36[2]))) - (fConst153 * ((fConst152 * fRec35[2]) + (fConst151 * fRec35[1]))));
			fRec34[0] = ((fConst153 * (((fConst309 * fRec35[0]) + (fConst310 * fRec35[1])) + (fConst309 * fRec35[2]))) - (fConst150 * ((fConst149 * fRec34[2]) + (fConst147 * fRec34[1]))));
			float fTemp23 = (fConst150 * (((fConst311 * fRec34[0]) + (fConst312 * fRec34[1])) + (fConst311 * fRec34[2])));
			fRec33[0] = (fTemp23 - (fConst143 * ((fConst142 * fRec33[2]) + (fConst141 * fRec33[1]))));
			fRec32[0] = ((fConst143 * (((fConst314 * fRec33[0]) + (fConst315 * fRec33[1])) + (fConst314 * fRec33[2]))) - (fConst140 * ((fConst139 * fRec32[2]) + (fConst138 * fRec32[1]))));
			fRec31[0] = ((fConst140 * (((fConst316 * fRec32[0]) + (fConst317 * fRec32[1])) + (fConst316 * fRec32[2]))) - (fConst137 * ((fConst136 * fRec31[2]) + (fConst134 * fRec31[1]))));
			float fTemp24 = (fConst137 * (((fConst318 * fRec31[0]) + (fConst319 * fRec31[1])) + (fConst318 * fRec31[2])));
			fRec30[0] = (fTemp24 - (fConst130 * ((fConst129 * fRec30[2]) + (fConst128 * fRec30[1]))));
			fRec29[0] = ((fConst130 * (((fConst321 * fRec30[0]) + (fConst322 * fRec30[1])) + (fConst321 * fRec30[2]))) - (fConst127 * ((fConst126 * fRec29[2]) + (fConst125 * fRec29[1]))));
			fRec28[0] = ((fConst127 * (((fConst323 * fRec29[0]) + (fConst324 * fRec29[1])) + (fConst323 * fRec29[2]))) - (fConst124 * ((fConst123 * fRec28[2]) + (fConst121 * fRec28[1]))));
			float fTemp25 = (fConst124 * (((fConst325 * fRec28[0]) + (fConst326 * fRec28[1])) + (fConst325 * fRec28[2])));
			fRec27[0] = (fTemp25 - (fConst117 * ((fConst116 * fRec27[2]) + (fConst115 * fRec27[1]))));
			fRec26[0] = ((fConst117 * (((fConst328 * fRec27[0]) + (fConst329 * fRec27[1])) + (fConst328 * fRec27[2]))) - (fConst114 * ((fConst113 * fRec26[2]) + (fConst112 * fRec26[1]))));
			fRec25[0] = ((fConst114 * (((fConst330 * fRec26[0]) + (fConst331 * fRec26[1])) + (fConst330 * fRec26[2]))) - (fConst111 * ((fConst110 * fRec25[2]) + (fConst108 * fRec25[1]))));
			float fTemp26 = (fConst111 * (((fConst332 * fRec25[0]) + (fConst333 * fRec25[1])) + (fConst332 * fRec25[2])));
			fRec24[0] = (fTemp26 - (fConst104 * ((fConst103 * fRec24[2]) + (fConst102 * fRec24[1]))));
			fRec23[0] = ((fConst104 * (((fConst335 * fRec24[0]) + (fConst336 * fRec24[1])) + (fConst335 * fRec24[2]))) - (fConst101 * ((fConst100 * fRec23[2]) + (fConst99 * fRec23[1]))));
			fRec22[0] = ((fConst101 * (((fConst337 * fRec23[0]) + (fConst338 * fRec23[1])) + (fConst337 * fRec23[2]))) - (fConst98 * ((fConst97 * fRec22[2]) + (fConst95 * fRec22[1]))));
			float fTemp27 = (fConst98 * (((fConst339 * fRec22[0]) + (fConst340 * fRec22[1])) + (fConst339 * fRec22[2])));
			fRec21[0] = (fTemp27 - (fConst91 * ((fConst90 * fRec21[2]) + (fConst89 * fRec21[1]))));
			fRec20[0] = ((fConst91 * (((fConst342 * fRec21[0]) + (fConst343 * fRec21[1])) + (fConst342 * fRec21[2]))) - (fConst88 * ((fConst87 * fRec20[2]) + (fConst86 * fRec20[1]))));
			fRec19[0] = ((fConst88 * (((fConst344 * fRec20[0]) + (fConst345 * fRec20[1])) + (fConst344 * fRec20[2]))) - (fConst85 * ((fConst84 * fRec19[2]) + (fConst82 * fRec19[1]))));
			float fTemp28 = (fConst85 * (((fConst346 * fRec19[0]) + (fConst347 * fRec19[1])) + (fConst346 * fRec19[2])));
			fRec18[0] = (fTemp28 - (fConst78 * ((fConst77 * fRec18[2]) + (fConst76 * fRec18[1]))));
			fRec17[0] = ((fConst78 * (((fConst349 * fRec18[0]) + (fConst350 * fRec18[1])) + (fConst349 * fRec18[2]))) - (fConst75 * ((fConst74 * fRec17[2]) + (fConst73 * fRec17[1]))));
			fRec16[0] = ((fConst75 * (((fConst351 * fRec17[0]) + (fConst352 * fRec17[1])) + (fConst351 * fRec17[2]))) - (fConst72 * ((fConst71 * fRec16[2]) + (fConst69 * fRec16[1]))));
			float fTemp29 = (fConst72 * (((fConst353 * fRec16[0]) + (fConst354 * fRec16[1])) + (fConst353 * fRec16[2])));
			fRec15[0] = (fTemp29 - (fConst65 * ((fConst64 * fRec15[2]) + (fConst63 * fRec15[1]))));
			fRec14[0] = ((fConst65 * (((fConst356 * fRec15[0]) + (fConst357 * fRec15[1])) + (fConst356 * fRec15[2]))) - (fConst62 * ((fConst61 * fRec14[2]) + (fConst60 * fRec14[1]))));
			fRec13[0] = ((fConst62 * (((fConst358 * fRec14[0]) + (fConst359 * fRec14[1])) + (fConst358 * fRec14[2]))) - (fConst59 * ((fConst58 * fRec13[2]) + (fConst56 * fRec13[1]))));
			float fTemp30 = (fConst59 * (((fConst360 * fRec13[0]) + (fConst361 * fRec13[1])) + (fConst360 * fRec13[2])));
			fRec12[0] = (fTemp30 - (fConst52 * ((fConst51 * fRec12[2]) + (fConst50 * fRec12[1]))));
			fRec11[0] = ((fConst52 * (((fConst363 * fRec12[0]) + (fConst364 * fRec12[1])) + (fConst363 * fRec12[2]))) - (fConst49 * ((fConst48 * fRec11[2]) + (fConst47 * fRec11[1]))));
			fRec10[0] = ((fConst49 * (((fConst365 * fRec11[0]) + (fConst366 * fRec11[1])) + (fConst365 * fRec11[2]))) - (fConst46 * ((fConst45 * fRec10[2]) + (fConst43 * fRec10[1]))));
			float fTemp31 = (fConst46 * (((fConst367 * fRec10[0]) + (fConst368 * fRec10[1])) + (fConst367 * fRec10[2])));
			fRec9[0] = (fTemp31 - (fConst39 * ((fConst38 * fRec9[2]) + (fConst37 * fRec9[1]))));
			fRec8[0] = ((fConst39 * (((fConst370 * fRec9[0]) + (fConst371 * fRec9[1])) + (fConst370 * fRec9[2]))) - (fConst36 * ((fConst35 * fRec8[2]) + (fConst34 * fRec8[1]))));
			fRec7[0] = ((fConst36 * (((fConst372 * fRec8[0]) + (fConst373 * fRec8[1])) + (fConst372 * fRec8[2]))) - (fConst33 * ((fConst32 * fRec7[2]) + (fConst30 * fRec7[1]))));
			float fTemp32 = (fConst33 * (((fConst374 * fRec7[0]) + (fConst375 * fRec7[1])) + (fConst374 * fRec7[2])));
			fRec6[0] = (fTemp32 - (fConst26 * ((fConst25 * fRec6[2]) + (fConst24 * fRec6[1]))));
			fRec5[0] = ((fConst26 * (((fConst377 * fRec6[0]) + (fConst378 * fRec6[1])) + (fConst377 * fRec6[2]))) - (fConst23 * ((fConst22 * fRec5[2]) + (fConst21 * fRec5[1]))));
			fRec4[0] = ((fConst23 * (((fConst379 * fRec5[0]) + (fConst380 * fRec5[1])) + (fConst379 * fRec5[2]))) - (fConst20 * ((fConst19 * fRec4[2]) + (fConst17 * fRec4[1]))));
			float fTemp33 = (fConst20 * (((fConst381 * fRec4[0]) + (fConst382 * fRec4[1])) + (fConst381 * fRec4[2])));
			fRec3[0] = (fTemp33 - (fConst13 * ((fConst12 * fRec3[2]) + (fConst11 * fRec3[1]))));
			fRec2[0] = ((fConst13 * (((fConst384 * fRec3[0]) + (fConst385 * fRec3[1])) + (fConst384 * fRec3[2]))) - (fConst10 * ((fConst9 * fRec2[2]) + (fConst8 * fRec2[1]))));
			fRec1[0] = ((fConst10 * (((fConst386 * fRec2[0]) + (fConst387 * fRec2[1])) + (fConst386 * fRec2[2]))) - (fConst7 * ((fConst6 * fRec1[2]) + (fConst4 * fRec1[1]))));
			fRec0[0] = ((fSlow43 * fRec0[1]) + (fSlow44 * fabsf((fConst7 * (((fConst388 * fRec1[0]) + (fConst389 * fRec1[1])) + (fConst388 * fRec1[2]))))));
			fbargraph0 = (fSlow45 + (20 * log10f(fRec0[0])));
			fRec78[0] = (fTemp33 - (fConst399 * ((fConst398 * fRec78[2]) + (fConst397 * fRec78[1]))));
			fRec77[0] = ((fConst399 * (((fConst401 * fRec78[0]) + (fConst402 * fRec78[1])) + (fConst401 * fRec78[2]))) - (fConst396 * ((fConst395 * fRec77[2]) + (fConst394 * fRec77[1]))));
			fRec76[0] = ((fConst396 * (((fConst404 * fRec77[0]) + (fConst405 * fRec77[1])) + (fConst404 * fRec77[2]))) - (fConst393 * ((fConst392 * fRec76[2]) + (fConst391 * fRec76[1]))));
			fRec75[0] = ((fSlow43 * fRec75[1]) + (fSlow44 * fabsf((fConst393 * (((fConst407 * fRec76[0]) + (fConst408 * fRec76[1])) + (fConst407 * fRec76[2]))))));
			fbargraph1 = (fSlow45 + (20 * log10f(fRec75[0])));
			fRec82[0] = (fTemp32 - (fConst417 * ((fConst416 * fRec82[2]) + (fConst415 * fRec82[1]))));
			fRec81[0] = ((fConst417 * (((fConst419 * fRec82[0]) + (fConst420 * fRec82[1])) + (fConst419 * fRec82[2]))) - (fConst414 * ((fConst413 * fRec81[2]) + (fConst412 * fRec81[1]))));
			fRec80[0] = ((fConst414 * (((fConst422 * fRec81[0]) + (fConst423 * fRec81[1])) + (fConst422 * fRec81[2]))) - (fConst411 * ((fConst410 * fRec80[2]) + (fConst409 * fRec80[1]))));
			fRec79[0] = ((fSlow43 * fRec79[1]) + (fSlow44 * fabsf((fConst411 * (((fConst425 * fRec80[0]) + (fConst426 * fRec80[1])) + (fConst425 * fRec80[2]))))));
			fbargraph2 = (fSlow45 + (20 * log10f(fRec79[0])));
			fRec86[0] = (fTemp31 - (fConst435 * ((fConst434 * fRec86[2]) + (fConst433 * fRec86[1]))));
			fRec85[0] = ((fConst435 * (((fConst437 * fRec86[0]) + (fConst438 * fRec86[1])) + (fConst437 * fRec86[2]))) - (fConst432 * ((fConst431 * fRec85[2]) + (fConst430 * fRec85[1]))));
			fRec84[0] = ((fConst432 * (((fConst440 * fRec85[0]) + (fConst441 * fRec85[1])) + (fConst440 * fRec85[2]))) - (fConst429 * ((fConst428 * fRec84[2]) + (fConst427 * fRec84[1]))));
			fRec83[0] = ((fSlow43 * fRec83[1]) + (fSlow44 * fabsf((fConst429 * (((fConst443 * fRec84[0]) + (fConst444 * fRec84[1])) + (fConst443 * fRec84[2]))))));
			fbargraph3 = (fSlow45 + (20 * log10f(fRec83[0])));
			fRec90[0] = (fTemp30 - (fConst453 * ((fConst452 * fRec90[2]) + (fConst451 * fRec90[1]))));
			fRec89[0] = ((fConst453 * (((fConst455 * fRec90[0]) + (fConst456 * fRec90[1])) + (fConst455 * fRec90[2]))) - (fConst450 * ((fConst449 * fRec89[2]) + (fConst448 * fRec89[1]))));
			fRec88[0] = ((fConst450 * (((fConst458 * fRec89[0]) + (fConst459 * fRec89[1])) + (fConst458 * fRec89[2]))) - (fConst447 * ((fConst446 * fRec88[2]) + (fConst445 * fRec88[1]))));
			fRec87[0] = ((fSlow43 * fRec87[1]) + (fSlow44 * fabsf((fConst447 * (((fConst461 * fRec88[0]) + (fConst462 * fRec88[1])) + (fConst461 * fRec88[2]))))));
			fbargraph4 = (fSlow45 + (20 * log10f(fRec87[0])));
			fRec94[0] = (fTemp29 - (fConst471 * ((fConst470 * fRec94[2]) + (fConst469 * fRec94[1]))));
			fRec93[0] = ((fConst471 * (((fConst473 * fRec94[0]) + (fConst474 * fRec94[1])) + (fConst473 * fRec94[2]))) - (fConst468 * ((fConst467 * fRec93[2]) + (fConst466 * fRec93[1]))));
			fRec92[0] = ((fConst468 * (((fConst476 * fRec93[0]) + (fConst477 * fRec93[1])) + (fConst476 * fRec93[2]))) - (fConst465 * ((fConst464 * fRec92[2]) + (fConst463 * fRec92[1]))));
			fRec91[0] = ((fSlow43 * fRec91[1]) + (fSlow44 * fabsf((fConst465 * (((fConst479 * fRec92[0]) + (fConst480 * fRec92[1])) + (fConst479 * fRec92[2]))))));
			fbargraph5 = (fSlow45 + (20 * log10f(fRec91[0])));
			fRec98[0] = (fTemp28 - (fConst489 * ((fConst488 * fRec98[2]) + (fConst487 * fRec98[1]))));
			fRec97[0] = ((fConst489 * (((fConst491 * fRec98[0]) + (fConst492 * fRec98[1])) + (fConst491 * fRec98[2]))) - (fConst486 * ((fConst485 * fRec97[2]) + (fConst484 * fRec97[1]))));
			fRec96[0] = ((fConst486 * (((fConst494 * fRec97[0]) + (fConst495 * fRec97[1])) + (fConst494 * fRec97[2]))) - (fConst483 * ((fConst482 * fRec96[2]) + (fConst481 * fRec96[1]))));
			fRec95[0] = ((fSlow43 * fRec95[1]) + (fSlow44 * fabsf((fConst483 * (((fConst497 * fRec96[0]) + (fConst498 * fRec96[1])) + (fConst497 * fRec96[2]))))));
			fbargraph6 = (fSlow45 + (20 * log10f(fRec95[0])));
			fRec102[0] = (fTemp27 - (fConst507 * ((fConst506 * fRec102[2]) + (fConst505 * fRec102[1]))));
			fRec101[0] = ((fConst507 * (((fConst509 * fRec102[0]) + (fConst510 * fRec102[1])) + (fConst509 * fRec102[2]))) - (fConst504 * ((fConst503 * fRec101[2]) + (fConst502 * fRec101[1]))));
			fRec100[0] = ((fConst504 * (((fConst512 * fRec101[0]) + (fConst513 * fRec101[1])) + (fConst512 * fRec101[2]))) - (fConst501 * ((fConst500 * fRec100[2]) + (fConst499 * fRec100[1]))));
			fRec99[0] = ((fSlow43 * fRec99[1]) + (fSlow44 * fabsf((fConst501 * (((fConst515 * fRec100[0]) + (fConst516 * fRec100[1])) + (fConst515 * fRec100[2]))))));
			fbargraph7 = (fSlow45 + (20 * log10f(fRec99[0])));
			fRec106[0] = (fTemp26 - (fConst525 * ((fConst524 * fRec106[2]) + (fConst523 * fRec106[1]))));
			fRec105[0] = ((fConst525 * (((fConst527 * fRec106[0]) + (fConst528 * fRec106[1])) + (fConst527 * fRec106[2]))) - (fConst522 * ((fConst521 * fRec105[2]) + (fConst520 * fRec105[1]))));
			fRec104[0] = ((fConst522 * (((fConst530 * fRec105[0]) + (fConst531 * fRec105[1])) + (fConst530 * fRec105[2]))) - (fConst519 * ((fConst518 * fRec104[2]) + (fConst517 * fRec104[1]))));
			fRec103[0] = ((fSlow43 * fRec103[1]) + (fSlow44 * fabsf((fConst519 * (((fConst533 * fRec104[0]) + (fConst534 * fRec104[1])) + (fConst533 * fRec104[2]))))));
			fbargraph8 = (fSlow45 + (20 * log10f(fRec103[0])));
			fRec110[0] = (fTemp25 - (fConst543 * ((fConst542 * fRec110[2]) + (fConst541 * fRec110[1]))));
			fRec109[0] = ((fConst543 * (((fConst545 * fRec110[0]) + (fConst546 * fRec110[1])) + (fConst545 * fRec110[2]))) - (fConst540 * ((fConst539 * fRec109[2]) + (fConst538 * fRec109[1]))));
			fRec108[0] = ((fConst540 * (((fConst548 * fRec109[0]) + (fConst549 * fRec109[1])) + (fConst548 * fRec109[2]))) - (fConst537 * ((fConst536 * fRec108[2]) + (fConst535 * fRec108[1]))));
			fRec107[0] = ((fSlow43 * fRec107[1]) + (fSlow44 * fabsf((fConst537 * (((fConst551 * fRec108[0]) + (fConst552 * fRec108[1])) + (fConst551 * fRec108[2]))))));
			fbargraph9 = (fSlow45 + (20 * log10f(fRec107[0])));
			fRec114[0] = (fTemp24 - (fConst561 * ((fConst560 * fRec114[2]) + (fConst559 * fRec114[1]))));
			fRec113[0] = ((fConst561 * (((fConst563 * fRec114[0]) + (fConst564 * fRec114[1])) + (fConst563 * fRec114[2]))) - (fConst558 * ((fConst557 * fRec113[2]) + (fConst556 * fRec113[1]))));
			fRec112[0] = ((fConst558 * (((fConst566 * fRec113[0]) + (fConst567 * fRec113[1])) + (fConst566 * fRec113[2]))) - (fConst555 * ((fConst554 * fRec112[2]) + (fConst553 * fRec112[1]))));
			fRec111[0] = ((fSlow43 * fRec111[1]) + (fSlow44 * fabsf((fConst555 * (((fConst569 * fRec112[0]) + (fConst570 * fRec112[1])) + (fConst569 * fRec112[2]))))));
			fbargraph10 = (fSlow45 + (20 * log10f(fRec111[0])));
			fRec118[0] = (fTemp23 - (fConst579 * ((fConst578 * fRec118[2]) + (fConst577 * fRec118[1]))));
			fRec117[0] = ((fConst579 * (((fConst581 * fRec118[0]) + (fConst582 * fRec118[1])) + (fConst581 * fRec118[2]))) - (fConst576 * ((fConst575 * fRec117[2]) + (fConst574 * fRec117[1]))));
			fRec116[0] = ((fConst576 * (((fConst584 * fRec117[0]) + (fConst585 * fRec117[1])) + (fConst584 * fRec117[2]))) - (fConst573 * ((fConst572 * fRec116[2]) + (fConst571 * fRec116[1]))));
			fRec115[0] = ((fSlow43 * fRec115[1]) + (fSlow44 * fabsf((fConst573 * (((fConst587 * fRec116[0]) + (fConst588 * fRec116[1])) + (fConst587 * fRec116[2]))))));
			fbargraph11 = (fSlow45 + (20 * log10f(fRec115[0])));
			fRec122[0] = (fTemp22 - (fConst597 * ((fConst596 * fRec122[2]) + (fConst595 * fRec122[1]))));
			fRec121[0] = ((fConst597 * (((fConst599 * fRec122[0]) + (fConst600 * fRec122[1])) + (fConst599 * fRec122[2]))) - (fConst594 * ((fConst593 * fRec121[2]) + (fConst592 * fRec121[1]))));
			fRec120[0] = ((fConst594 * (((fConst602 * fRec121[0]) + (fConst603 * fRec121[1])) + (fConst602 * fRec121[2]))) - (fConst591 * ((fConst590 * fRec120[2]) + (fConst589 * fRec120[1]))));
			fRec119[0] = ((fSlow43 * fRec119[1]) + (fSlow44 * fabsf((fConst591 * (((fConst605 * fRec120[0]) + (fConst606 * fRec120[1])) + (fConst605 * fRec120[2]))))));
			fbargraph12 = (fSlow45 + (20 * log10f(fRec119[0])));
			fRec126[0] = (fTemp21 - (fConst615 * ((fConst614 * fRec126[2]) + (fConst613 * fRec126[1]))));
			fRec125[0] = ((fConst615 * (((fConst617 * fRec126[0]) + (fConst618 * fRec126[1])) + (fConst617 * fRec126[2]))) - (fConst612 * ((fConst611 * fRec125[2]) + (fConst610 * fRec125[1]))));
			fRec124[0] = ((fConst612 * (((fConst620 * fRec125[0]) + (fConst621 * fRec125[1])) + (fConst620 * fRec125[2]))) - (fConst609 * ((fConst608 * fRec124[2]) + (fConst607 * fRec124[1]))));
			fRec123[0] = ((fSlow43 * fRec123[1]) + (fSlow44 * fabsf((fConst609 * (((fConst623 * fRec124[0]) + (fConst624 * fRec124[1])) + (fConst623 * fRec124[2]))))));
			fbargraph13 = (fSlow45 + (20 * log10f(fRec123[0])));
			fRec130[0] = (fTemp20 - (fConst633 * ((fConst632 * fRec130[2]) + (fConst631 * fRec130[1]))));
			fRec129[0] = ((fConst633 * (((fConst635 * fRec130[0]) + (fConst636 * fRec130[1])) + (fConst635 * fRec130[2]))) - (fConst630 * ((fConst629 * fRec129[2]) + (fConst628 * fRec129[1]))));
			fRec128[0] = ((fConst630 * (((fConst638 * fRec129[0]) + (fConst639 * fRec129[1])) + (fConst638 * fRec129[2]))) - (fConst627 * ((fConst626 * fRec128[2]) + (fConst625 * fRec128[1]))));
			fRec127[0] = ((fSlow43 * fRec127[1]) + (fSlow44 * fabsf((fConst627 * (((fConst641 * fRec128[0]) + (fConst642 * fRec128[1])) + (fConst641 * fRec128[2]))))));
			fbargraph14 = (fSlow45 + (20 * log10f(fRec127[0])));
			fRec134[0] = (fTemp19 - (fConst651 * ((fConst650 * fRec134[2]) + (fConst649 * fRec134[1]))));
			fRec133[0] = ((fConst651 * (((fConst653 * fRec134[0]) + (fConst654 * fRec134[1])) + (fConst653 * fRec134[2]))) - (fConst648 * ((fConst647 * fRec133[2]) + (fConst646 * fRec133[1]))));
			fRec132[0] = ((fConst648 * (((fConst656 * fRec133[0]) + (fConst657 * fRec133[1])) + (fConst656 * fRec133[2]))) - (fConst645 * ((fConst644 * fRec132[2]) + (fConst643 * fRec132[1]))));
			fRec131[0] = ((fSlow43 * fRec131[1]) + (fSlow44 * fabsf((fConst645 * (((fConst659 * fRec132[0]) + (fConst660 * fRec132[1])) + (fConst659 * fRec132[2]))))));
			fbargraph15 = (fSlow45 + (20 * log10f(fRec131[0])));
			fRec138[0] = (fTemp18 - (fConst669 * ((fConst668 * fRec138[2]) + (fConst667 * fRec138[1]))));
			fRec137[0] = ((fConst669 * (((fConst671 * fRec138[0]) + (fConst672 * fRec138[1])) + (fConst671 * fRec138[2]))) - (fConst666 * ((fConst665 * fRec137[2]) + (fConst664 * fRec137[1]))));
			fRec136[0] = ((fConst666 * (((fConst674 * fRec137[0]) + (fConst675 * fRec137[1])) + (fConst674 * fRec137[2]))) - (fConst663 * ((fConst662 * fRec136[2]) + (fConst661 * fRec136[1]))));
			fRec135[0] = ((fSlow43 * fRec135[1]) + (fSlow44 * fabsf((fConst663 * (((fConst677 * fRec136[0]) + (fConst678 * fRec136[1])) + (fConst677 * fRec136[2]))))));
			fbargraph16 = (fSlow45 + (20 * log10f(fRec135[0])));
			fRec142[0] = (fTemp17 - (fConst687 * ((fConst686 * fRec142[2]) + (fConst685 * fRec142[1]))));
			fRec141[0] = ((fConst687 * (((fConst689 * fRec142[0]) + (fConst690 * fRec142[1])) + (fConst689 * fRec142[2]))) - (fConst684 * ((fConst683 * fRec141[2]) + (fConst682 * fRec141[1]))));
			fRec140[0] = ((fConst684 * (((fConst692 * fRec141[0]) + (fConst693 * fRec141[1])) + (fConst692 * fRec141[2]))) - (fConst681 * ((fConst680 * fRec140[2]) + (fConst679 * fRec140[1]))));
			fRec139[0] = ((fSlow43 * fRec139[1]) + (fSlow44 * fabsf((fConst681 * (((fConst695 * fRec140[0]) + (fConst696 * fRec140[1])) + (fConst695 * fRec140[2]))))));
			fbargraph17 = (fSlow45 + (20 * log10f(fRec139[0])));
			fRec146[0] = (fTemp16 - (fConst705 * ((fConst704 * fRec146[2]) + (fConst703 * fRec146[1]))));
			fRec145[0] = ((fConst705 * (((fConst707 * fRec146[0]) + (fConst708 * fRec146[1])) + (fConst707 * fRec146[2]))) - (fConst702 * ((fConst701 * fRec145[2]) + (fConst700 * fRec145[1]))));
			fRec144[0] = ((fConst702 * (((fConst710 * fRec145[0]) + (fConst711 * fRec145[1])) + (fConst710 * fRec145[2]))) - (fConst699 * ((fConst698 * fRec144[2]) + (fConst697 * fRec144[1]))));
			fRec143[0] = ((fSlow43 * fRec143[1]) + (fSlow44 * fabsf((fConst699 * (((fConst713 * fRec144[0]) + (fConst714 * fRec144[1])) + (fConst713 * fRec144[2]))))));
			fbargraph18 = (fSlow45 + (20 * log10f(fRec143[0])));
			fRec150[0] = (fTemp15 - (fConst723 * ((fConst722 * fRec150[2]) + (fConst721 * fRec150[1]))));
			fRec149[0] = ((fConst723 * (((fConst725 * fRec150[0]) + (fConst726 * fRec150[1])) + (fConst725 * fRec150[2]))) - (fConst720 * ((fConst719 * fRec149[2]) + (fConst718 * fRec149[1]))));
			fRec148[0] = ((fConst720 * (((fConst728 * fRec149[0]) + (fConst729 * fRec149[1])) + (fConst728 * fRec149[2]))) - (fConst717 * ((fConst716 * fRec148[2]) + (fConst715 * fRec148[1]))));
			fRec147[0] = ((fSlow43 * fRec147[1]) + (fSlow44 * fabsf((fConst717 * (((fConst731 * fRec148[0]) + (fConst732 * fRec148[1])) + (fConst731 * fRec148[2]))))));
			fbargraph19 = (fSlow45 + (20 * log10f(fRec147[0])));
			float fTemp34 = fTemp15;
			output0[i] = (FAUSTFLOAT)fTemp34;
			output1[i] = (FAUSTFLOAT)fTemp34;
			// post processing
			fRec147[1] = fRec147[0];
			fRec148[2] = fRec148[1]; fRec148[1] = fRec148[0];
			fRec149[2] = fRec149[1]; fRec149[1] = fRec149[0];
			fRec150[2] = fRec150[1]; fRec150[1] = fRec150[0];
			fRec143[1] = fRec143[0];
			fRec144[2] = fRec144[1]; fRec144[1] = fRec144[0];
			fRec145[2] = fRec145[1]; fRec145[1] = fRec145[0];
			fRec146[2] = fRec146[1]; fRec146[1] = fRec146[0];
			fRec139[1] = fRec139[0];
			fRec140[2] = fRec140[1]; fRec140[1] = fRec140[0];
			fRec141[2] = fRec141[1]; fRec141[1] = fRec141[0];
			fRec142[2] = fRec142[1]; fRec142[1] = fRec142[0];
			fRec135[1] = fRec135[0];
			fRec136[2] = fRec136[1]; fRec136[1] = fRec136[0];
			fRec137[2] = fRec137[1]; fRec137[1] = fRec137[0];
			fRec138[2] = fRec138[1]; fRec138[1] = fRec138[0];
			fRec131[1] = fRec131[0];
			fRec132[2] = fRec132[1]; fRec132[1] = fRec132[0];
			fRec133[2] = fRec133[1]; fRec133[1] = fRec133[0];
			fRec134[2] = fRec134[1]; fRec134[1] = fRec134[0];
			fRec127[1] = fRec127[0];
			fRec128[2] = fRec128[1]; fRec128[1] = fRec128[0];
			fRec129[2] = fRec129[1]; fRec129[1] = fRec129[0];
			fRec130[2] = fRec130[1]; fRec130[1] = fRec130[0];
			fRec123[1] = fRec123[0];
			fRec124[2] = fRec124[1]; fRec124[1] = fRec124[0];
			fRec125[2] = fRec125[1]; fRec125[1] = fRec125[0];
			fRec126[2] = fRec126[1]; fRec126[1] = fRec126[0];
			fRec119[1] = fRec119[0];
			fRec120[2] = fRec120[1]; fRec120[1] = fRec120[0];
			fRec121[2] = fRec121[1]; fRec121[1] = fRec121[0];
			fRec122[2] = fRec122[1]; fRec122[1] = fRec122[0];
			fRec115[1] = fRec115[0];
			fRec116[2] = fRec116[1]; fRec116[1] = fRec116[0];
			fRec117[2] = fRec117[1]; fRec117[1] = fRec117[0];
			fRec118[2] = fRec118[1]; fRec118[1] = fRec118[0];
			fRec111[1] = fRec111[0];
			fRec112[2] = fRec112[1]; fRec112[1] = fRec112[0];
			fRec113[2] = fRec113[1]; fRec113[1] = fRec113[0];
			fRec114[2] = fRec114[1]; fRec114[1] = fRec114[0];
			fRec107[1] = fRec107[0];
			fRec108[2] = fRec108[1]; fRec108[1] = fRec108[0];
			fRec109[2] = fRec109[1]; fRec109[1] = fRec109[0];
			fRec110[2] = fRec110[1]; fRec110[1] = fRec110[0];
			fRec103[1] = fRec103[0];
			fRec104[2] = fRec104[1]; fRec104[1] = fRec104[0];
			fRec105[2] = fRec105[1]; fRec105[1] = fRec105[0];
			fRec106[2] = fRec106[1]; fRec106[1] = fRec106[0];
			fRec99[1] = fRec99[0];
			fRec100[2] = fRec100[1]; fRec100[1] = fRec100[0];
			fRec101[2] = fRec101[1]; fRec101[1] = fRec101[0];
			fRec102[2] = fRec102[1]; fRec102[1] = fRec102[0];
			fRec95[1] = fRec95[0];
			fRec96[2] = fRec96[1]; fRec96[1] = fRec96[0];
			fRec97[2] = fRec97[1]; fRec97[1] = fRec97[0];
			fRec98[2] = fRec98[1]; fRec98[1] = fRec98[0];
			fRec91[1] = fRec91[0];
			fRec92[2] = fRec92[1]; fRec92[1] = fRec92[0];
			fRec93[2] = fRec93[1]; fRec93[1] = fRec93[0];
			fRec94[2] = fRec94[1]; fRec94[1] = fRec94[0];
			fRec87[1] = fRec87[0];
			fRec88[2] = fRec88[1]; fRec88[1] = fRec88[0];
			fRec89[2] = fRec89[1]; fRec89[1] = fRec89[0];
			fRec90[2] = fRec90[1]; fRec90[1] = fRec90[0];
			fRec83[1] = fRec83[0];
			fRec84[2] = fRec84[1]; fRec84[1] = fRec84[0];
			fRec85[2] = fRec85[1]; fRec85[1] = fRec85[0];
			fRec86[2] = fRec86[1]; fRec86[1] = fRec86[0];
			fRec79[1] = fRec79[0];
			fRec80[2] = fRec80[1]; fRec80[1] = fRec80[0];
			fRec81[2] = fRec81[1]; fRec81[1] = fRec81[0];
			fRec82[2] = fRec82[1]; fRec82[1] = fRec82[0];
			fRec75[1] = fRec75[0];
			fRec76[2] = fRec76[1]; fRec76[1] = fRec76[0];
			fRec77[2] = fRec77[1]; fRec77[1] = fRec77[0];
			fRec78[2] = fRec78[1]; fRec78[1] = fRec78[0];
			fRec0[1] = fRec0[0];
			fRec1[2] = fRec1[1]; fRec1[1] = fRec1[0];
			fRec2[2] = fRec2[1]; fRec2[1] = fRec2[0];
			fRec3[2] = fRec3[1]; fRec3[1] = fRec3[0];
			fRec4[2] = fRec4[1]; fRec4[1] = fRec4[0];
			fRec5[2] = fRec5[1]; fRec5[1] = fRec5[0];
			fRec6[2] = fRec6[1]; fRec6[1] = fRec6[0];
			fRec7[2] = fRec7[1]; fRec7[1] = fRec7[0];
			fRec8[2] = fRec8[1]; fRec8[1] = fRec8[0];
			fRec9[2] = fRec9[1]; fRec9[1] = fRec9[0];
			fRec10[2] = fRec10[1]; fRec10[1] = fRec10[0];
			fRec11[2] = fRec11[1]; fRec11[1] = fRec11[0];
			fRec12[2] = fRec12[1]; fRec12[1] = fRec12[0];
			fRec13[2] = fRec13[1]; fRec13[1] = fRec13[0];
			fRec14[2] = fRec14[1]; fRec14[1] = fRec14[0];
			fRec15[2] = fRec15[1]; fRec15[1] = fRec15[0];
			fRec16[2] = fRec16[1]; fRec16[1] = fRec16[0];
			fRec17[2] = fRec17[1]; fRec17[1] = fRec17[0];
			fRec18[2] = fRec18[1]; fRec18[1] = fRec18[0];
			fRec19[2] = fRec19[1]; fRec19[1] = fRec19[0];
			fRec20[2] = fRec20[1]; fRec20[1] = fRec20[0];
			fRec21[2] = fRec21[1]; fRec21[1] = fRec21[0];
			fRec22[2] = fRec22[1]; fRec22[1] = fRec22[0];
			fRec23[2] = fRec23[1]; fRec23[1] = fRec23[0];
			fRec24[2] = fRec24[1]; fRec24[1] = fRec24[0];
			fRec25[2] = fRec25[1]; fRec25[1] = fRec25[0];
			fRec26[2] = fRec26[1]; fRec26[1] = fRec26[0];
			fRec27[2] = fRec27[1]; fRec27[1] = fRec27[0];
			fRec28[2] = fRec28[1]; fRec28[1] = fRec28[0];
			fRec29[2] = fRec29[1]; fRec29[1] = fRec29[0];
			fRec30[2] = fRec30[1]; fRec30[1] = fRec30[0];
			fRec31[2] = fRec31[1]; fRec31[1] = fRec31[0];
			fRec32[2] = fRec32[1]; fRec32[1] = fRec32[0];
			fRec33[2] = fRec33[1]; fRec33[1] = fRec33[0];
			fRec34[2] = fRec34[1]; fRec34[1] = fRec34[0];
			fRec35[2] = fRec35[1]; fRec35[1] = fRec35[0];
			fRec36[2] = fRec36[1]; fRec36[1] = fRec36[0];
			fRec37[2] = fRec37[1]; fRec37[1] = fRec37[0];
			fRec38[2] = fRec38[1]; fRec38[1] = fRec38[0];
			fRec39[2] = fRec39[1]; fRec39[1] = fRec39[0];
			fRec40[2] = fRec40[1]; fRec40[1] = fRec40[0];
			fRec41[2] = fRec41[1]; fRec41[1] = fRec41[0];
			fRec42[2] = fRec42[1]; fRec42[1] = fRec42[0];
			fRec43[2] = fRec43[1]; fRec43[1] = fRec43[0];
			fRec44[2] = fRec44[1]; fRec44[1] = fRec44[0];
			fRec45[2] = fRec45[1]; fRec45[1] = fRec45[0];
			fRec46[2] = fRec46[1]; fRec46[1] = fRec46[0];
			fRec47[2] = fRec47[1]; fRec47[1] = fRec47[0];
			fRec48[2] = fRec48[1]; fRec48[1] = fRec48[0];
			fRec49[2] = fRec49[1]; fRec49[1] = fRec49[0];
			fRec50[2] = fRec50[1]; fRec50[1] = fRec50[0];
			fRec51[2] = fRec51[1]; fRec51[1] = fRec51[0];
			fRec52[2] = fRec52[1]; fRec52[1] = fRec52[0];
			fRec53[2] = fRec53[1]; fRec53[1] = fRec53[0];
			fRec54[2] = fRec54[1]; fRec54[1] = fRec54[0];
			fRec55[2] = fRec55[1]; fRec55[1] = fRec55[0];
			fRec56[2] = fRec56[1]; fRec56[1] = fRec56[0];
			fRec57[2] = fRec57[1]; fRec57[1] = fRec57[0];
			fRec73[2] = fRec73[1]; fRec73[1] = fRec73[0];
			fRec74[1] = fRec74[0];
			fRec58[2] = fRec58[1]; fRec58[1] = fRec58[0];
			fRec59[1] = fRec59[0];
			fVec5[1] = fVec5[0];
			fRec61[2] = fRec61[1]; fRec61[1] = fRec61[0];
			fRec71[2] = fRec71[1]; fRec71[1] = fRec71[0];
			fRec72[1] = fRec72[0];
			fRec62[2] = fRec62[1]; fRec62[1] = fRec62[0];
			fRec63[1] = fRec63[0];
			fVec4[1] = fVec4[0];
			for (int i=3; i>0; i--) fRec69[i] = fRec69[i-1];
			iRec70[1] = iRec70[0];
			fRec68[1] = fRec68[0];
			fVec3[1] = fVec3[0];
			fVec2[1] = fVec2[0];
			fRec67[1] = fRec67[0];
			fVec1[1] = fVec1[0];
			fRec66[1] = fRec66[0];
			fVec0[1] = fVec0[0];
			fRec65[1] = fRec65[0];
			fRec64[1] = fRec64[0];
			fRec60[1] = fRec60[0];
		}
	}
};


