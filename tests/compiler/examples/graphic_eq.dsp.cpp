//-----------------------------------------------------
// name: "graphic_eq"
//
// Code generated with Faust 0.9.70 (http://faust.grame.fr)
//-----------------------------------------------------
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif  

typedef long double quad;
/* link with  */
#include <math.h>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline float faustpower(float x)          { return powf(x,N); } 
template <int N> inline double faustpower(double x)        { return pow(x,N); }
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <>   inline int faustpower<0>(int x)            { return 1; }
template <>   inline int faustpower<1>(int x)            { return x; }
#endif

#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	int 	iConst0;
	float 	fConst1;
	float 	fConst2;
	float 	fConst3;
	float 	fConst4;
	float 	fConst5;
	float 	fConst6;
	float 	fConst7;
	float 	fConst8;
	float 	fConst9;
	float 	fConst10;
	float 	fConst11;
	float 	fConst12;
	float 	fConst13;
	float 	fConst14;
	float 	fConst15;
	float 	fConst16;
	float 	fConst17;
	float 	fConst18;
	float 	fConst19;
	float 	fConst20;
	float 	fConst21;
	float 	fConst22;
	float 	fConst23;
	float 	fConst24;
	float 	fConst25;
	float 	fConst26;
	float 	fConst27;
	float 	fConst28;
	float 	fConst29;
	float 	fConst30;
	float 	fConst31;
	float 	fConst32;
	float 	fConst33;
	float 	fConst34;
	float 	fConst35;
	float 	fConst36;
	float 	fConst37;
	float 	fConst38;
	float 	fConst39;
	float 	fConst40;
	float 	fConst41;
	float 	fConst42;
	float 	fConst43;
	float 	fConst44;
	float 	fConst45;
	float 	fConst46;
	float 	fConst47;
	float 	fConst48;
	float 	fConst49;
	float 	fConst50;
	float 	fConst51;
	float 	fConst52;
	float 	fConst53;
	float 	fConst54;
	float 	fConst55;
	float 	fConst56;
	float 	fConst57;
	float 	fConst58;
	float 	fConst59;
	float 	fConst60;
	float 	fConst61;
	float 	fConst62;
	float 	fConst63;
	float 	fConst64;
	float 	fConst65;
	float 	fConst66;
	float 	fConst67;
	float 	fConst68;
	float 	fConst69;
	float 	fConst70;
	float 	fConst71;
	float 	fConst72;
	float 	fConst73;
	float 	fConst74;
	float 	fConst75;
	float 	fConst76;
	float 	fConst77;
	float 	fConst78;
	float 	fConst79;
	float 	fConst80;
	float 	fConst81;
	float 	fConst82;
	float 	fConst83;
	float 	fConst84;
	float 	fConst85;
	float 	fConst86;
	float 	fConst87;
	float 	fConst88;
	float 	fConst89;
	float 	fConst90;
	float 	fConst91;
	float 	fConst92;
	float 	fConst93;
	float 	fConst94;
	float 	fConst95;
	float 	fConst96;
	float 	fConst97;
	float 	fConst98;
	float 	fConst99;
	float 	fConst100;
	float 	fConst101;
	float 	fConst102;
	float 	fConst103;
	float 	fConst104;
	float 	fConst105;
	float 	fConst106;
	float 	fConst107;
	float 	fConst108;
	float 	fConst109;
	float 	fConst110;
	float 	fConst111;
	float 	fConst112;
	float 	fConst113;
	float 	fConst114;
	float 	fConst115;
	float 	fConst116;
	float 	fConst117;
	float 	fConst118;
	float 	fConst119;
	float 	fConst120;
	float 	fConst121;
	float 	fConst122;
	float 	fConst123;
	float 	fConst124;
	float 	fConst125;
	float 	fConst126;
	float 	fConst127;
	float 	fConst128;
	float 	fConst129;
	float 	fConst130;
	float 	fConst131;
	float 	fConst132;
	float 	fConst133;
	float 	fConst134;
	float 	fConst135;
	float 	fConst136;
	float 	fConst137;
	float 	fConst138;
	float 	fConst139;
	float 	fConst140;
	float 	fConst141;
	float 	fConst142;
	float 	fConst143;
	float 	fConst144;
	float 	fConst145;
	float 	fConst146;
	float 	fConst147;
	float 	fConst148;
	float 	fConst149;
	float 	fConst150;
	float 	fConst151;
	float 	fConst152;
	float 	fConst153;
	float 	fConst154;
	float 	fConst155;
	float 	fConst156;
	float 	fConst157;
	float 	fConst158;
	float 	fConst159;
	float 	fConst160;
	float 	fConst161;
	float 	fConst162;
	float 	fConst163;
	float 	fConst164;
	float 	fConst165;
	float 	fConst166;
	float 	fConst167;
	float 	fConst168;
	float 	fConst169;
	float 	fConst170;
	float 	fConst171;
	float 	fConst172;
	float 	fConst173;
	float 	fConst174;
	float 	fConst175;
	float 	fConst176;
	float 	fConst177;
	float 	fConst178;
	float 	fConst179;
	float 	fConst180;
	float 	fConst181;
	float 	fConst182;
	FAUSTFLOAT 	fslider0;
	float 	fRec43[2];
	float 	fConst183;
	float 	fConst184;
	float 	fConst185;
	float 	fConst186;
	float 	fConst187;
	float 	fConst188;
	float 	fConst189;
	float 	fConst190;
	float 	fConst191;
	float 	fConst192;
	float 	fConst193;
	float 	fConst194;
	float 	fConst195;
	float 	fConst196;
	float 	fConst197;
	float 	fConst198;
	float 	fConst199;
	float 	fConst200;
	float 	fConst201;
	float 	fConst202;
	float 	fConst203;
	float 	fConst204;
	float 	fConst205;
	float 	fConst206;
	float 	fConst207;
	float 	fConst208;
	float 	fConst209;
	float 	fConst210;
	float 	fConst211;
	float 	fConst212;
	float 	fConst213;
	float 	fConst214;
	float 	fConst215;
	float 	fConst216;
	float 	fConst217;
	float 	fConst218;
	float 	fConst219;
	float 	fConst220;
	float 	fConst221;
	float 	fConst222;
	float 	fConst223;
	float 	fConst224;
	float 	fConst225;
	float 	fConst226;
	float 	fConst227;
	float 	fConst228;
	float 	fConst229;
	float 	fConst230;
	float 	fConst231;
	float 	fConst232;
	float 	fConst233;
	float 	fConst234;
	float 	fConst235;
	float 	fConst236;
	float 	fConst237;
	float 	fConst238;
	float 	fConst239;
	float 	fConst240;
	float 	fConst241;
	float 	fConst242;
	float 	fConst243;
	float 	fConst244;
	float 	fConst245;
	float 	fConst246;
	float 	fConst247;
	float 	fConst248;
	float 	fConst249;
	float 	fConst250;
	float 	fConst251;
	float 	fConst252;
	float 	fConst253;
	float 	fConst254;
	float 	fConst255;
	float 	fConst256;
	float 	fConst257;
	float 	fConst258;
	float 	fConst259;
	float 	fConst260;
	float 	fConst261;
	float 	fConst262;
	FAUSTFLOAT 	fslider1;
	float 	fConst263;
	FAUSTFLOAT 	fslider2;
	float 	fRec71[2];
	FAUSTFLOAT 	fslider3;
	float 	fConst264;
	float 	fRec72[2];
	float 	fConst265;
	float 	fVec0[2];
	FAUSTFLOAT 	fslider4;
	float 	fRec73[2];
	float 	fVec1[2];
	float 	fRec74[2];
	float 	fVec2[2];
	float 	fVec3[2];
	FAUSTFLOAT 	fslider5;
	float 	fRec75[2];
	float 	fConst266;
	int 	iRec77[2];
	float 	fRec76[4];
	FAUSTFLOAT 	fcheckbox0;
	FAUSTFLOAT 	fcheckbox1;
	FAUSTFLOAT 	fcheckbox2;
	float 	fVec4[2];
	float 	fConst267;
	float 	fConst268;
	float 	fConst269;
	float 	fRec70[2];
	float 	fRec69[3];
	float 	fRec68[3];
	float 	fVec5[2];
	float 	fConst270;
	float 	fConst271;
	float 	fConst272;
	float 	fRec67[2];
	float 	fRec66[3];
	float 	fRec65[3];
	float 	fVec6[2];
	float 	fConst273;
	float 	fConst274;
	float 	fConst275;
	float 	fRec64[2];
	float 	fRec63[3];
	float 	fRec62[3];
	float 	fVec7[2];
	float 	fConst276;
	float 	fConst277;
	float 	fConst278;
	float 	fRec61[2];
	float 	fRec60[3];
	float 	fRec59[3];
	float 	fVec8[2];
	float 	fConst279;
	float 	fConst280;
	float 	fConst281;
	float 	fRec58[2];
	float 	fRec57[3];
	float 	fRec56[3];
	float 	fVec9[2];
	float 	fConst282;
	float 	fConst283;
	float 	fConst284;
	float 	fRec55[2];
	float 	fRec54[3];
	float 	fRec53[3];
	float 	fVec10[2];
	float 	fConst285;
	float 	fConst286;
	float 	fConst287;
	float 	fRec52[2];
	float 	fRec51[3];
	float 	fRec50[3];
	float 	fVec11[2];
	float 	fConst288;
	float 	fConst289;
	float 	fConst290;
	float 	fRec49[2];
	float 	fRec48[3];
	float 	fRec47[3];
	float 	fVec12[2];
	float 	fConst291;
	float 	fConst292;
	float 	fConst293;
	float 	fRec46[2];
	float 	fRec45[3];
	float 	fRec44[3];
	FAUSTFLOAT 	fslider6;
	float 	fRec78[2];
	float 	fConst294;
	float 	fRec81[2];
	float 	fRec80[3];
	float 	fConst295;
	float 	fRec79[3];
	FAUSTFLOAT 	fslider7;
	float 	fRec82[2];
	float 	fConst296;
	float 	fConst297;
	float 	fConst298;
	float 	fRec86[2];
	float 	fRec85[3];
	float 	fConst299;
	float 	fRec84[3];
	float 	fRec83[3];
	FAUSTFLOAT 	fslider8;
	float 	fRec87[2];
	float 	fConst300;
	float 	fConst301;
	float 	fConst302;
	float 	fRec92[2];
	float 	fRec91[3];
	float 	fConst303;
	float 	fRec90[3];
	float 	fRec89[3];
	float 	fRec88[3];
	FAUSTFLOAT 	fslider9;
	float 	fRec93[2];
	float 	fConst304;
	float 	fConst305;
	float 	fConst306;
	float 	fRec99[2];
	float 	fRec98[3];
	float 	fConst307;
	float 	fRec97[3];
	float 	fRec96[3];
	float 	fRec95[3];
	float 	fRec94[3];
	FAUSTFLOAT 	fslider10;
	float 	fRec100[2];
	float 	fConst308;
	float 	fConst309;
	float 	fConst310;
	float 	fRec107[2];
	float 	fRec106[3];
	float 	fConst311;
	float 	fRec105[3];
	float 	fRec104[3];
	float 	fRec103[3];
	float 	fRec102[3];
	float 	fRec101[3];
	FAUSTFLOAT 	fslider11;
	float 	fRec108[2];
	float 	fConst312;
	float 	fConst313;
	float 	fConst314;
	float 	fRec116[2];
	float 	fRec115[3];
	float 	fConst315;
	float 	fRec114[3];
	float 	fRec113[3];
	float 	fRec112[3];
	float 	fRec111[3];
	float 	fRec110[3];
	float 	fRec109[3];
	FAUSTFLOAT 	fslider12;
	float 	fRec117[2];
	float 	fConst316;
	float 	fConst317;
	float 	fConst318;
	float 	fRec126[2];
	float 	fRec125[3];
	float 	fConst319;
	float 	fRec124[3];
	float 	fRec123[3];
	float 	fRec122[3];
	float 	fRec121[3];
	float 	fRec120[3];
	float 	fRec119[3];
	float 	fRec118[3];
	FAUSTFLOAT 	fslider13;
	float 	fRec127[2];
	float 	fConst320;
	float 	fConst321;
	float 	fConst322;
	float 	fRec137[2];
	float 	fRec136[3];
	float 	fConst323;
	float 	fRec135[3];
	float 	fRec134[3];
	float 	fRec133[3];
	float 	fRec132[3];
	float 	fRec131[3];
	float 	fRec130[3];
	float 	fRec129[3];
	float 	fRec128[3];
	FAUSTFLOAT 	fslider14;
	float 	fRec138[2];
	float 	fConst324;
	float 	fConst325;
	float 	fConst326;
	float 	fRec149[2];
	float 	fRec148[3];
	float 	fConst327;
	float 	fRec147[3];
	float 	fRec146[3];
	float 	fRec145[3];
	float 	fRec144[3];
	float 	fRec143[3];
	float 	fRec142[3];
	float 	fRec141[3];
	float 	fRec140[3];
	float 	fRec139[3];
	float 	fRec42[3];
	float 	fConst328;
	float 	fConst329;
	float 	fConst330;
	float 	fRec41[3];
	float 	fConst331;
	float 	fConst332;
	float 	fRec40[3];
	float 	fConst333;
	float 	fConst334;
	float 	fRec39[3];
	float 	fConst335;
	float 	fConst336;
	float 	fConst337;
	float 	fRec38[3];
	float 	fConst338;
	float 	fConst339;
	float 	fRec37[3];
	float 	fConst340;
	float 	fConst341;
	float 	fRec36[3];
	float 	fConst342;
	float 	fConst343;
	float 	fConst344;
	float 	fRec35[3];
	float 	fConst345;
	float 	fConst346;
	float 	fRec34[3];
	float 	fConst347;
	float 	fConst348;
	float 	fRec33[3];
	float 	fConst349;
	float 	fConst350;
	float 	fConst351;
	float 	fRec32[3];
	float 	fConst352;
	float 	fConst353;
	float 	fRec31[3];
	float 	fConst354;
	float 	fConst355;
	float 	fRec30[3];
	float 	fConst356;
	float 	fConst357;
	float 	fConst358;
	float 	fRec29[3];
	float 	fConst359;
	float 	fConst360;
	float 	fRec28[3];
	float 	fConst361;
	float 	fConst362;
	float 	fRec27[3];
	float 	fConst363;
	float 	fConst364;
	float 	fConst365;
	float 	fRec26[3];
	float 	fConst366;
	float 	fConst367;
	float 	fRec25[3];
	float 	fConst368;
	float 	fConst369;
	float 	fRec24[3];
	float 	fConst370;
	float 	fConst371;
	float 	fConst372;
	float 	fRec23[3];
	float 	fConst373;
	float 	fConst374;
	float 	fRec22[3];
	float 	fConst375;
	float 	fConst376;
	float 	fRec21[3];
	float 	fConst377;
	float 	fConst378;
	float 	fConst379;
	float 	fRec20[3];
	float 	fConst380;
	float 	fConst381;
	float 	fRec19[3];
	float 	fConst382;
	float 	fConst383;
	float 	fRec18[3];
	float 	fConst384;
	float 	fConst385;
	float 	fConst386;
	float 	fRec17[3];
	float 	fConst387;
	float 	fConst388;
	float 	fRec16[3];
	float 	fConst389;
	float 	fConst390;
	float 	fRec15[3];
	float 	fConst391;
	float 	fConst392;
	float 	fConst393;
	float 	fRec14[3];
	float 	fConst394;
	float 	fConst395;
	float 	fRec13[3];
	float 	fConst396;
	float 	fConst397;
	float 	fRec12[3];
	float 	fConst398;
	float 	fConst399;
	float 	fConst400;
	float 	fRec11[3];
	float 	fConst401;
	float 	fConst402;
	float 	fRec10[3];
	float 	fConst403;
	float 	fConst404;
	float 	fRec9[3];
	float 	fConst405;
	float 	fConst406;
	float 	fConst407;
	float 	fRec8[3];
	float 	fConst408;
	float 	fConst409;
	float 	fRec7[3];
	float 	fConst410;
	float 	fConst411;
	float 	fRec6[3];
	float 	fConst412;
	float 	fConst413;
	float 	fConst414;
	float 	fRec5[3];
	float 	fConst415;
	float 	fConst416;
	float 	fRec4[3];
	float 	fConst417;
	float 	fConst418;
	float 	fRec3[3];
	float 	fConst419;
	float 	fConst420;
	float 	fConst421;
	float 	fRec2[3];
	float 	fConst422;
	float 	fConst423;
	float 	fRec1[3];
	float 	fConst424;
	float 	fConst425;
	FAUSTFLOAT 	fslider15;
	float 	fConst426;
	float 	fRec0[2];
	FAUSTFLOAT 	fslider16;
	FAUSTFLOAT 	fbargraph0;
	float 	fConst427;
	float 	fConst428;
	float 	fConst429;
	float 	fConst430;
	float 	fConst431;
	float 	fConst432;
	float 	fConst433;
	float 	fConst434;
	float 	fConst435;
	float 	fRec153[3];
	float 	fConst436;
	float 	fConst437;
	float 	fConst438;
	float 	fRec152[3];
	float 	fConst439;
	float 	fConst440;
	float 	fConst441;
	float 	fRec151[3];
	float 	fConst442;
	float 	fConst443;
	float 	fConst444;
	float 	fRec150[2];
	FAUSTFLOAT 	fbargraph1;
	float 	fConst445;
	float 	fConst446;
	float 	fConst447;
	float 	fConst448;
	float 	fConst449;
	float 	fConst450;
	float 	fConst451;
	float 	fConst452;
	float 	fConst453;
	float 	fRec157[3];
	float 	fConst454;
	float 	fConst455;
	float 	fConst456;
	float 	fRec156[3];
	float 	fConst457;
	float 	fConst458;
	float 	fConst459;
	float 	fRec155[3];
	float 	fConst460;
	float 	fConst461;
	float 	fConst462;
	float 	fRec154[2];
	FAUSTFLOAT 	fbargraph2;
	float 	fConst463;
	float 	fConst464;
	float 	fConst465;
	float 	fConst466;
	float 	fConst467;
	float 	fConst468;
	float 	fConst469;
	float 	fConst470;
	float 	fConst471;
	float 	fRec161[3];
	float 	fConst472;
	float 	fConst473;
	float 	fConst474;
	float 	fRec160[3];
	float 	fConst475;
	float 	fConst476;
	float 	fConst477;
	float 	fRec159[3];
	float 	fConst478;
	float 	fConst479;
	float 	fConst480;
	float 	fRec158[2];
	FAUSTFLOAT 	fbargraph3;
	float 	fConst481;
	float 	fConst482;
	float 	fConst483;
	float 	fConst484;
	float 	fConst485;
	float 	fConst486;
	float 	fConst487;
	float 	fConst488;
	float 	fConst489;
	float 	fRec165[3];
	float 	fConst490;
	float 	fConst491;
	float 	fConst492;
	float 	fRec164[3];
	float 	fConst493;
	float 	fConst494;
	float 	fConst495;
	float 	fRec163[3];
	float 	fConst496;
	float 	fConst497;
	float 	fConst498;
	float 	fRec162[2];
	FAUSTFLOAT 	fbargraph4;
	float 	fConst499;
	float 	fConst500;
	float 	fConst501;
	float 	fConst502;
	float 	fConst503;
	float 	fConst504;
	float 	fConst505;
	float 	fConst506;
	float 	fConst507;
	float 	fRec169[3];
	float 	fConst508;
	float 	fConst509;
	float 	fConst510;
	float 	fRec168[3];
	float 	fConst511;
	float 	fConst512;
	float 	fConst513;
	float 	fRec167[3];
	float 	fConst514;
	float 	fConst515;
	float 	fConst516;
	float 	fRec166[2];
	FAUSTFLOAT 	fbargraph5;
	float 	fConst517;
	float 	fConst518;
	float 	fConst519;
	float 	fConst520;
	float 	fConst521;
	float 	fConst522;
	float 	fConst523;
	float 	fConst524;
	float 	fConst525;
	float 	fRec173[3];
	float 	fConst526;
	float 	fConst527;
	float 	fConst528;
	float 	fRec172[3];
	float 	fConst529;
	float 	fConst530;
	float 	fConst531;
	float 	fRec171[3];
	float 	fConst532;
	float 	fConst533;
	float 	fConst534;
	float 	fRec170[2];
	FAUSTFLOAT 	fbargraph6;
	float 	fConst535;
	float 	fConst536;
	float 	fConst537;
	float 	fConst538;
	float 	fConst539;
	float 	fConst540;
	float 	fConst541;
	float 	fConst542;
	float 	fConst543;
	float 	fRec177[3];
	float 	fConst544;
	float 	fConst545;
	float 	fConst546;
	float 	fRec176[3];
	float 	fConst547;
	float 	fConst548;
	float 	fConst549;
	float 	fRec175[3];
	float 	fConst550;
	float 	fConst551;
	float 	fConst552;
	float 	fRec174[2];
	FAUSTFLOAT 	fbargraph7;
	float 	fConst553;
	float 	fConst554;
	float 	fConst555;
	float 	fConst556;
	float 	fConst557;
	float 	fConst558;
	float 	fConst559;
	float 	fConst560;
	float 	fConst561;
	float 	fRec181[3];
	float 	fConst562;
	float 	fConst563;
	float 	fConst564;
	float 	fRec180[3];
	float 	fConst565;
	float 	fConst566;
	float 	fConst567;
	float 	fRec179[3];
	float 	fConst568;
	float 	fConst569;
	float 	fConst570;
	float 	fRec178[2];
	FAUSTFLOAT 	fbargraph8;
	float 	fConst571;
	float 	fConst572;
	float 	fConst573;
	float 	fConst574;
	float 	fConst575;
	float 	fConst576;
	float 	fConst577;
	float 	fConst578;
	float 	fConst579;
	float 	fRec185[3];
	float 	fConst580;
	float 	fConst581;
	float 	fConst582;
	float 	fRec184[3];
	float 	fConst583;
	float 	fConst584;
	float 	fConst585;
	float 	fRec183[3];
	float 	fConst586;
	float 	fConst587;
	float 	fConst588;
	float 	fRec182[2];
	FAUSTFLOAT 	fbargraph9;
	float 	fConst589;
	float 	fConst590;
	float 	fConst591;
	float 	fConst592;
	float 	fConst593;
	float 	fConst594;
	float 	fConst595;
	float 	fConst596;
	float 	fConst597;
	float 	fRec189[3];
	float 	fConst598;
	float 	fConst599;
	float 	fConst600;
	float 	fRec188[3];
	float 	fConst601;
	float 	fConst602;
	float 	fConst603;
	float 	fRec187[3];
	float 	fConst604;
	float 	fConst605;
	float 	fConst606;
	float 	fRec186[2];
	FAUSTFLOAT 	fbargraph10;
	float 	fConst607;
	float 	fConst608;
	float 	fConst609;
	float 	fConst610;
	float 	fConst611;
	float 	fConst612;
	float 	fConst613;
	float 	fConst614;
	float 	fConst615;
	float 	fRec193[3];
	float 	fConst616;
	float 	fConst617;
	float 	fConst618;
	float 	fRec192[3];
	float 	fConst619;
	float 	fConst620;
	float 	fConst621;
	float 	fRec191[3];
	float 	fConst622;
	float 	fConst623;
	float 	fConst624;
	float 	fRec190[2];
	FAUSTFLOAT 	fbargraph11;
	float 	fConst625;
	float 	fConst626;
	float 	fConst627;
	float 	fConst628;
	float 	fConst629;
	float 	fConst630;
	float 	fConst631;
	float 	fConst632;
	float 	fConst633;
	float 	fRec197[3];
	float 	fConst634;
	float 	fConst635;
	float 	fConst636;
	float 	fRec196[3];
	float 	fConst637;
	float 	fConst638;
	float 	fConst639;
	float 	fRec195[3];
	float 	fConst640;
	float 	fConst641;
	float 	fConst642;
	float 	fRec194[2];
	FAUSTFLOAT 	fbargraph12;
	float 	fConst643;
	float 	fConst644;
	float 	fConst645;
	float 	fConst646;
	float 	fConst647;
	float 	fConst648;
	float 	fConst649;
	float 	fConst650;
	float 	fConst651;
	float 	fRec201[3];
	float 	fConst652;
	float 	fConst653;
	float 	fConst654;
	float 	fRec200[3];
	float 	fConst655;
	float 	fConst656;
	float 	fConst657;
	float 	fRec199[3];
	float 	fConst658;
	float 	fConst659;
	float 	fConst660;
	float 	fRec198[2];
	FAUSTFLOAT 	fbargraph13;
	float 	fConst661;
	float 	fConst662;
	float 	fConst663;
	float 	fConst664;
	float 	fConst665;
	float 	fConst666;
	float 	fConst667;
	float 	fConst668;
	float 	fConst669;
	float 	fRec205[3];
	float 	fConst670;
	float 	fConst671;
	float 	fConst672;
	float 	fRec204[3];
	float 	fConst673;
	float 	fConst674;
	float 	fConst675;
	float 	fRec203[3];
	float 	fConst676;
	float 	fConst677;
	float 	fConst678;
	float 	fRec202[2];
	FAUSTFLOAT 	fbargraph14;
  public:
	static void metadata(Meta* m) 	{ 
		m->declare("name", "graphic_eq");
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/version", "1.29");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/version", "1.0");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/version", "1.0");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("effect.lib/name", "Faust Audio Effect Library");
		m->declare("effect.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/copyright", "Julius O. Smith III");
		m->declare("effect.lib/version", "1.33");
		m->declare("effect.lib/license", "STK-4.3");
		m->declare("effect.lib/exciter_name", "Harmonic Exciter");
		m->declare("effect.lib/exciter_author", "Priyanka Shekar (pshekar@ccrma.stanford.edu)");
		m->declare("effect.lib/exciter_copyright", "Copyright (c) 2013 Priyanka Shekar");
		m->declare("effect.lib/exciter_version", "1.0");
		m->declare("effect.lib/exciter_license", "MIT License (MIT)");
		m->declare("oscillator.lib/name", "Faust Oscillator Library");
		m->declare("oscillator.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("oscillator.lib/copyright", "Julius O. Smith III");
		m->declare("oscillator.lib/version", "1.11");
		m->declare("oscillator.lib/license", "STK-4.3");
	}

	virtual int getNumInputs() 	{ return 1; }
	virtual int getNumOutputs() 	{ return 2; }
	static void classInit(int samplingFreq) {
	}
	virtual void instanceInit(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		iConst0 = min(192000, max(1, fSamplingFreq));
		fConst1 = tanf((123.69245982665232f / float(iConst0)));
		fConst2 = faustpower<2>(fConst1);
		fConst3 = (1.0f / fConst2);
		fConst4 = (2 * (1.069358407707312f - fConst3));
		fConst5 = (1.0f / fConst1);
		fConst6 = (1.069358407707312f + ((fConst5 - 0.168404871113589f) / fConst1));
		fConst7 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst5) / fConst1)));
		fConst8 = (2 * (0.689621364484675f - fConst3));
		fConst9 = (0.689621364484675f + ((fConst5 - 0.512478641889141f) / fConst1));
		fConst10 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst5) / fConst1)));
		fConst11 = (2 * (0.24529150870616f - fConst3));
		fConst12 = (0.24529150870616f + ((fConst5 - 0.782413046821645f) / fConst1));
		fConst13 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst5) / fConst1)));
		fConst14 = tanf((196.34954084936206f / float(iConst0)));
		fConst15 = faustpower<2>(fConst14);
		fConst16 = (1.0f / fConst15);
		fConst17 = (2 * (1.069358407707312f - fConst16));
		fConst18 = (1.0f / fConst14);
		fConst19 = (1.069358407707312f + ((fConst18 - 0.168404871113589f) / fConst14));
		fConst20 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst18) / fConst14)));
		fConst21 = (2 * (0.689621364484675f - fConst16));
		fConst22 = (0.689621364484675f + ((fConst18 - 0.512478641889141f) / fConst14));
		fConst23 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst18) / fConst14)));
		fConst24 = (2 * (0.24529150870616f - fConst16));
		fConst25 = (0.24529150870616f + ((fConst18 - 0.782413046821645f) / fConst14));
		fConst26 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst18) / fConst14)));
		fConst27 = tanf((311.68546769775037f / float(iConst0)));
		fConst28 = faustpower<2>(fConst27);
		fConst29 = (1.0f / fConst28);
		fConst30 = (2 * (1.069358407707312f - fConst29));
		fConst31 = (1.0f / fConst27);
		fConst32 = (1.069358407707312f + ((fConst31 - 0.168404871113589f) / fConst27));
		fConst33 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst31) / fConst27)));
		fConst34 = (2 * (0.689621364484675f - fConst29));
		fConst35 = (0.689621364484675f + ((fConst31 - 0.512478641889141f) / fConst27));
		fConst36 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst31) / fConst27)));
		fConst37 = (2 * (0.24529150870616f - fConst29));
		fConst38 = (0.24529150870616f + ((fConst31 - 0.782413046821645f) / fConst27));
		fConst39 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst31) / fConst27)));
		fConst40 = tanf((494.769839306609f / float(iConst0)));
		fConst41 = faustpower<2>(fConst40);
		fConst42 = (1.0f / fConst41);
		fConst43 = (2 * (1.069358407707312f - fConst42));
		fConst44 = (1.0f / fConst40);
		fConst45 = (1.069358407707312f + ((fConst44 - 0.168404871113589f) / fConst40));
		fConst46 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst44) / fConst40)));
		fConst47 = (2 * (0.689621364484675f - fConst42));
		fConst48 = (0.689621364484675f + ((fConst44 - 0.512478641889141f) / fConst40));
		fConst49 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst44) / fConst40)));
		fConst50 = (2 * (0.24529150870616f - fConst42));
		fConst51 = (0.24529150870616f + ((fConst44 - 0.782413046821645f) / fConst40));
		fConst52 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst44) / fConst40)));
		fConst53 = tanf((785.3981633974482f / float(iConst0)));
		fConst54 = faustpower<2>(fConst53);
		fConst55 = (1.0f / fConst54);
		fConst56 = (2 * (1.069358407707312f - fConst55));
		fConst57 = (1.0f / fConst53);
		fConst58 = (1.069358407707312f + ((fConst57 - 0.168404871113589f) / fConst53));
		fConst59 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst57) / fConst53)));
		fConst60 = (2 * (0.689621364484675f - fConst55));
		fConst61 = (0.689621364484675f + ((fConst57 - 0.512478641889141f) / fConst53));
		fConst62 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst57) / fConst53)));
		fConst63 = (2 * (0.24529150870616f - fConst55));
		fConst64 = (0.24529150870616f + ((fConst57 - 0.782413046821645f) / fConst53));
		fConst65 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst57) / fConst53)));
		fConst66 = tanf((1246.7418707910015f / float(iConst0)));
		fConst67 = faustpower<2>(fConst66);
		fConst68 = (1.0f / fConst67);
		fConst69 = (2 * (1.069358407707312f - fConst68));
		fConst70 = (1.0f / fConst66);
		fConst71 = (1.069358407707312f + ((fConst70 - 0.168404871113589f) / fConst66));
		fConst72 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst70) / fConst66)));
		fConst73 = (2 * (0.689621364484675f - fConst68));
		fConst74 = (0.689621364484675f + ((fConst70 - 0.512478641889141f) / fConst66));
		fConst75 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst70) / fConst66)));
		fConst76 = (2 * (0.24529150870616f - fConst68));
		fConst77 = (0.24529150870616f + ((fConst70 - 0.782413046821645f) / fConst66));
		fConst78 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst70) / fConst66)));
		fConst79 = tanf((1979.079357226436f / float(iConst0)));
		fConst80 = faustpower<2>(fConst79);
		fConst81 = (1.0f / fConst80);
		fConst82 = (2 * (1.069358407707312f - fConst81));
		fConst83 = (1.0f / fConst79);
		fConst84 = (1.069358407707312f + ((fConst83 - 0.168404871113589f) / fConst79));
		fConst85 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst83) / fConst79)));
		fConst86 = (2 * (0.689621364484675f - fConst81));
		fConst87 = (0.689621364484675f + ((fConst83 - 0.512478641889141f) / fConst79));
		fConst88 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst83) / fConst79)));
		fConst89 = (2 * (0.24529150870616f - fConst81));
		fConst90 = (0.24529150870616f + ((fConst83 - 0.782413046821645f) / fConst79));
		fConst91 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst83) / fConst79)));
		fConst92 = tanf((3141.592653589793f / float(iConst0)));
		fConst93 = faustpower<2>(fConst92);
		fConst94 = (1.0f / fConst93);
		fConst95 = (2 * (1.069358407707312f - fConst94));
		fConst96 = (1.0f / fConst92);
		fConst97 = (1.069358407707312f + ((fConst96 - 0.168404871113589f) / fConst92));
		fConst98 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst96) / fConst92)));
		fConst99 = (2 * (0.689621364484675f - fConst94));
		fConst100 = (0.689621364484675f + ((fConst96 - 0.512478641889141f) / fConst92));
		fConst101 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst96) / fConst92)));
		fConst102 = (2 * (0.24529150870616f - fConst94));
		fConst103 = (0.24529150870616f + ((fConst96 - 0.782413046821645f) / fConst92));
		fConst104 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst96) / fConst92)));
		fConst105 = tanf((4986.967483164005f / float(iConst0)));
		fConst106 = faustpower<2>(fConst105);
		fConst107 = (1.0f / fConst106);
		fConst108 = (2 * (1.069358407707312f - fConst107));
		fConst109 = (1.0f / fConst105);
		fConst110 = (1.069358407707312f + ((fConst109 - 0.168404871113589f) / fConst105));
		fConst111 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst109) / fConst105)));
		fConst112 = (2 * (0.689621364484675f - fConst107));
		fConst113 = (0.689621364484675f + ((fConst109 - 0.512478641889141f) / fConst105));
		fConst114 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst109) / fConst105)));
		fConst115 = (2 * (0.24529150870616f - fConst107));
		fConst116 = (0.24529150870616f + ((fConst109 - 0.782413046821645f) / fConst105));
		fConst117 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst109) / fConst105)));
		fConst118 = tanf((7916.317428905746f / float(iConst0)));
		fConst119 = faustpower<2>(fConst118);
		fConst120 = (1.0f / fConst119);
		fConst121 = (2 * (1.069358407707312f - fConst120));
		fConst122 = (1.0f / fConst118);
		fConst123 = (1.069358407707312f + ((fConst122 - 0.168404871113589f) / fConst118));
		fConst124 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst122) / fConst118)));
		fConst125 = (2 * (0.689621364484675f - fConst120));
		fConst126 = (0.689621364484675f + ((fConst122 - 0.512478641889141f) / fConst118));
		fConst127 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst122) / fConst118)));
		fConst128 = (2 * (0.24529150870616f - fConst120));
		fConst129 = (0.24529150870616f + ((fConst122 - 0.782413046821645f) / fConst118));
		fConst130 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst122) / fConst118)));
		fConst131 = tanf((12566.370614359172f / float(iConst0)));
		fConst132 = faustpower<2>(fConst131);
		fConst133 = (1.0f / fConst132);
		fConst134 = (2 * (1.069358407707312f - fConst133));
		fConst135 = (1.0f / fConst131);
		fConst136 = (1.069358407707312f + ((fConst135 - 0.168404871113589f) / fConst131));
		fConst137 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst135) / fConst131)));
		fConst138 = (2 * (0.689621364484675f - fConst133));
		fConst139 = (0.689621364484675f + ((fConst135 - 0.512478641889141f) / fConst131));
		fConst140 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst135) / fConst131)));
		fConst141 = (2 * (0.24529150870616f - fConst133));
		fConst142 = (0.24529150870616f + ((fConst135 - 0.782413046821645f) / fConst131));
		fConst143 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst135) / fConst131)));
		fConst144 = tanf((19947.869932656024f / float(iConst0)));
		fConst145 = faustpower<2>(fConst144);
		fConst146 = (1.0f / fConst145);
		fConst147 = (2 * (1.069358407707312f - fConst146));
		fConst148 = (1.0f / fConst144);
		fConst149 = (1.069358407707312f + ((fConst148 - 0.168404871113589f) / fConst144));
		fConst150 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst148) / fConst144)));
		fConst151 = (2 * (0.689621364484675f - fConst146));
		fConst152 = (0.689621364484675f + ((fConst148 - 0.512478641889141f) / fConst144));
		fConst153 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst148) / fConst144)));
		fConst154 = (2 * (0.24529150870616f - fConst146));
		fConst155 = (0.24529150870616f + ((fConst148 - 0.782413046821645f) / fConst144));
		fConst156 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst148) / fConst144)));
		fConst157 = tanf((31665.269715622984f / float(iConst0)));
		fConst158 = faustpower<2>(fConst157);
		fConst159 = (1.0f / fConst158);
		fConst160 = (2 * (1.069358407707312f - fConst159));
		fConst161 = (1.0f / fConst157);
		fConst162 = (1.069358407707312f + ((fConst161 - 0.168404871113589f) / fConst157));
		fConst163 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst161) / fConst157)));
		fConst164 = (2 * (0.689621364484675f - fConst159));
		fConst165 = (0.689621364484675f + ((fConst161 - 0.512478641889141f) / fConst157));
		fConst166 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst161) / fConst157)));
		fConst167 = (2 * (0.24529150870616f - fConst159));
		fConst168 = (0.24529150870616f + ((fConst161 - 0.782413046821645f) / fConst157));
		fConst169 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst161) / fConst157)));
		fConst170 = tanf((50265.48245743669f / float(iConst0)));
		fConst171 = faustpower<2>(fConst170);
		fConst172 = (1.0f / fConst171);
		fConst173 = (2 * (1.069358407707312f - fConst172));
		fConst174 = (1.0f / fConst170);
		fConst175 = (1.069358407707312f + ((fConst174 - 0.168404871113589f) / fConst170));
		fConst176 = (1.0f / (1.069358407707312f + ((0.168404871113589f + fConst174) / fConst170)));
		fConst177 = (2 * (0.689621364484675f - fConst172));
		fConst178 = (0.689621364484675f + ((fConst174 - 0.512478641889141f) / fConst170));
		fConst179 = (1.0f / (0.689621364484675f + ((0.512478641889141f + fConst174) / fConst170)));
		fConst180 = (2 * (0.24529150870616f - fConst172));
		fConst181 = (0.24529150870616f + ((fConst174 - 0.782413046821645f) / fConst170));
		fConst182 = (1.0f / (0.24529150870616f + ((0.782413046821645f + fConst174) / fConst170)));
		fslider0 = -1e+01f;
		for (int i=0; i<2; i++) fRec43[i] = 0;
		fConst183 = tanf((122.7184630308513f / float(iConst0)));
		fConst184 = (1.0f / faustpower<2>(fConst183));
		fConst185 = (2 * (1 - fConst184));
		fConst186 = (1.0f / fConst183);
		fConst187 = (1 + ((fConst186 - 0.6180339887498947f) / fConst183));
		fConst188 = (1.0f / (1 + ((fConst186 + 0.6180339887498947f) / fConst183)));
		fConst189 = (1 + ((fConst186 - 1.6180339887498947f) / fConst183));
		fConst190 = (1.0f / (1 + ((fConst186 + 1.6180339887498947f) / fConst183)));
		fConst191 = tanf((245.4369260617026f / float(iConst0)));
		fConst192 = (1.0f / faustpower<2>(fConst191));
		fConst193 = (2 * (1 - fConst192));
		fConst194 = (1.0f / fConst191);
		fConst195 = (1 + ((fConst194 - 0.6180339887498947f) / fConst191));
		fConst196 = (1 + ((fConst194 + 0.6180339887498947f) / fConst191));
		fConst197 = (1.0f / fConst196);
		fConst198 = (1 + ((fConst194 - 1.6180339887498947f) / fConst191));
		fConst199 = (1.0f / (1 + ((fConst194 + 1.6180339887498947f) / fConst191)));
		fConst200 = tanf((490.8738521234052f / float(iConst0)));
		fConst201 = (1.0f / faustpower<2>(fConst200));
		fConst202 = (2 * (1 - fConst201));
		fConst203 = (1.0f / fConst200);
		fConst204 = (1 + ((fConst203 - 0.6180339887498947f) / fConst200));
		fConst205 = (1 + ((fConst203 + 0.6180339887498947f) / fConst200));
		fConst206 = (1.0f / fConst205);
		fConst207 = (1 + ((fConst203 - 1.6180339887498947f) / fConst200));
		fConst208 = (1.0f / (1 + ((fConst203 + 1.6180339887498947f) / fConst200)));
		fConst209 = tanf((981.7477042468104f / float(iConst0)));
		fConst210 = (1.0f / faustpower<2>(fConst209));
		fConst211 = (2 * (1 - fConst210));
		fConst212 = (1.0f / fConst209);
		fConst213 = (1 + ((fConst212 - 0.6180339887498947f) / fConst209));
		fConst214 = (1 + ((fConst212 + 0.6180339887498947f) / fConst209));
		fConst215 = (1.0f / fConst214);
		fConst216 = (1 + ((fConst212 - 1.6180339887498947f) / fConst209));
		fConst217 = (1.0f / (1 + ((fConst212 + 1.6180339887498947f) / fConst209)));
		fConst218 = tanf((1963.4954084936207f / float(iConst0)));
		fConst219 = (1.0f / faustpower<2>(fConst218));
		fConst220 = (2 * (1 - fConst219));
		fConst221 = (1.0f / fConst218);
		fConst222 = (1 + ((fConst221 - 0.6180339887498947f) / fConst218));
		fConst223 = (1 + ((fConst221 + 0.6180339887498947f) / fConst218));
		fConst224 = (1.0f / fConst223);
		fConst225 = (1 + ((fConst221 - 1.6180339887498947f) / fConst218));
		fConst226 = (1.0f / (1 + ((fConst221 + 1.6180339887498947f) / fConst218)));
		fConst227 = tanf((3926.9908169872415f / float(iConst0)));
		fConst228 = (1.0f / faustpower<2>(fConst227));
		fConst229 = (2 * (1 - fConst228));
		fConst230 = (1.0f / fConst227);
		fConst231 = (1 + ((fConst230 - 0.6180339887498947f) / fConst227));
		fConst232 = (1 + ((fConst230 + 0.6180339887498947f) / fConst227));
		fConst233 = (1.0f / fConst232);
		fConst234 = (1 + ((fConst230 - 1.6180339887498947f) / fConst227));
		fConst235 = (1.0f / (1 + ((fConst230 + 1.6180339887498947f) / fConst227)));
		fConst236 = tanf((7853.981633974483f / float(iConst0)));
		fConst237 = (1.0f / faustpower<2>(fConst236));
		fConst238 = (2 * (1 - fConst237));
		fConst239 = (1.0f / fConst236);
		fConst240 = (1 + ((fConst239 - 0.6180339887498947f) / fConst236));
		fConst241 = (1 + ((fConst239 + 0.6180339887498947f) / fConst236));
		fConst242 = (1.0f / fConst241);
		fConst243 = (1 + ((fConst239 - 1.6180339887498947f) / fConst236));
		fConst244 = (1.0f / (1 + ((fConst239 + 1.6180339887498947f) / fConst236)));
		fConst245 = tanf((15707.963267948966f / float(iConst0)));
		fConst246 = (1.0f / faustpower<2>(fConst245));
		fConst247 = (2 * (1 - fConst246));
		fConst248 = (1.0f / fConst245);
		fConst249 = (1 + ((fConst248 - 0.6180339887498947f) / fConst245));
		fConst250 = (1 + ((fConst248 + 0.6180339887498947f) / fConst245));
		fConst251 = (1.0f / fConst250);
		fConst252 = (1 + ((fConst248 - 1.6180339887498947f) / fConst245));
		fConst253 = (1.0f / (1 + ((fConst248 + 1.6180339887498947f) / fConst245)));
		fConst254 = tanf((31415.926535897932f / float(iConst0)));
		fConst255 = (1.0f / faustpower<2>(fConst254));
		fConst256 = (2 * (1 - fConst255));
		fConst257 = (1.0f / fConst254);
		fConst258 = (1 + ((fConst257 - 0.6180339887498947f) / fConst254));
		fConst259 = (1 + ((0.6180339887498947f + fConst257) / fConst254));
		fConst260 = (1.0f / fConst259);
		fConst261 = (1 + ((fConst257 - 1.6180339887498947f) / fConst254));
		fConst262 = (1.0f / (1 + ((1.6180339887498947f + fConst257) / fConst254)));
		fslider1 = 0.1f;
		fConst263 = (1.0f / float(iConst0));
		fslider2 = 49.0f;
		for (int i=0; i<2; i++) fRec71[i] = 0;
		fslider3 = 0.1f;
		fConst264 = float(iConst0);
		for (int i=0; i<2; i++) fRec72[i] = 0;
		fConst265 = (2.0f / fConst264);
		for (int i=0; i<2; i++) fVec0[i] = 0;
		fslider4 = -0.1f;
		for (int i=0; i<2; i++) fRec73[i] = 0;
		for (int i=0; i<2; i++) fVec1[i] = 0;
		for (int i=0; i<2; i++) fRec74[i] = 0;
		for (int i=0; i<2; i++) fVec2[i] = 0;
		for (int i=0; i<2; i++) fVec3[i] = 0;
		fslider5 = -2e+01f;
		for (int i=0; i<2; i++) fRec75[i] = 0;
		fConst266 = (0.3333333333333333f * iConst0);
		for (int i=0; i<2; i++) iRec77[i] = 0;
		for (int i=0; i<4; i++) fRec76[i] = 0;
		fcheckbox0 = 0.0;
		fcheckbox1 = 0.0;
		fcheckbox2 = 0.0;
		for (int i=0; i<2; i++) fVec4[i] = 0;
		fConst267 = (1 + fConst257);
		fConst268 = (1.0f / fConst267);
		fConst269 = (0 - ((1 - fConst257) / fConst267));
		for (int i=0; i<2; i++) fRec70[i] = 0;
		for (int i=0; i<3; i++) fRec69[i] = 0;
		for (int i=0; i<3; i++) fRec68[i] = 0;
		for (int i=0; i<2; i++) fVec5[i] = 0;
		fConst270 = (1 + fConst248);
		fConst271 = (1.0f / (fConst270 * fConst259));
		fConst272 = (0 - ((1 - fConst248) / fConst270));
		for (int i=0; i<2; i++) fRec67[i] = 0;
		for (int i=0; i<3; i++) fRec66[i] = 0;
		for (int i=0; i<3; i++) fRec65[i] = 0;
		for (int i=0; i<2; i++) fVec6[i] = 0;
		fConst273 = (1 + fConst239);
		fConst274 = (1.0f / (fConst273 * fConst250));
		fConst275 = (0 - ((1 - fConst239) / fConst273));
		for (int i=0; i<2; i++) fRec64[i] = 0;
		for (int i=0; i<3; i++) fRec63[i] = 0;
		for (int i=0; i<3; i++) fRec62[i] = 0;
		for (int i=0; i<2; i++) fVec7[i] = 0;
		fConst276 = (1 + fConst230);
		fConst277 = (1.0f / (fConst276 * fConst241));
		fConst278 = (0 - ((1 - fConst230) / fConst276));
		for (int i=0; i<2; i++) fRec61[i] = 0;
		for (int i=0; i<3; i++) fRec60[i] = 0;
		for (int i=0; i<3; i++) fRec59[i] = 0;
		for (int i=0; i<2; i++) fVec8[i] = 0;
		fConst279 = (1 + fConst221);
		fConst280 = (1.0f / (fConst279 * fConst232));
		fConst281 = (0 - ((1 - fConst221) / fConst279));
		for (int i=0; i<2; i++) fRec58[i] = 0;
		for (int i=0; i<3; i++) fRec57[i] = 0;
		for (int i=0; i<3; i++) fRec56[i] = 0;
		for (int i=0; i<2; i++) fVec9[i] = 0;
		fConst282 = (1 + fConst212);
		fConst283 = (1.0f / (fConst282 * fConst223));
		fConst284 = (0 - ((1 - fConst212) / fConst282));
		for (int i=0; i<2; i++) fRec55[i] = 0;
		for (int i=0; i<3; i++) fRec54[i] = 0;
		for (int i=0; i<3; i++) fRec53[i] = 0;
		for (int i=0; i<2; i++) fVec10[i] = 0;
		fConst285 = (1 + fConst203);
		fConst286 = (1.0f / (fConst285 * fConst214));
		fConst287 = (0 - ((1 - fConst203) / fConst285));
		for (int i=0; i<2; i++) fRec52[i] = 0;
		for (int i=0; i<3; i++) fRec51[i] = 0;
		for (int i=0; i<3; i++) fRec50[i] = 0;
		for (int i=0; i<2; i++) fVec11[i] = 0;
		fConst288 = (1 + fConst194);
		fConst289 = (1.0f / (fConst288 * fConst205));
		fConst290 = (0 - ((1 - fConst194) / fConst288));
		for (int i=0; i<2; i++) fRec49[i] = 0;
		for (int i=0; i<3; i++) fRec48[i] = 0;
		for (int i=0; i<3; i++) fRec47[i] = 0;
		for (int i=0; i<2; i++) fVec12[i] = 0;
		fConst291 = (1 + fConst186);
		fConst292 = (1.0f / (fConst291 * fConst196));
		fConst293 = (0 - ((1 - fConst186) / fConst291));
		for (int i=0; i<2; i++) fRec46[i] = 0;
		for (int i=0; i<3; i++) fRec45[i] = 0;
		for (int i=0; i<3; i++) fRec44[i] = 0;
		fslider6 = -1e+01f;
		for (int i=0; i<2; i++) fRec78[i] = 0;
		fConst294 = (0 - fConst186);
		for (int i=0; i<2; i++) fRec81[i] = 0;
		for (int i=0; i<3; i++) fRec80[i] = 0;
		fConst295 = (2 * (0 - fConst184));
		for (int i=0; i<3; i++) fRec79[i] = 0;
		fslider7 = -1e+01f;
		for (int i=0; i<2; i++) fRec82[i] = 0;
		fConst296 = (1 + ((fConst186 - 1.618033988749895f) / fConst183));
		fConst297 = (1.0f / (1 + ((1.618033988749895f + fConst186) / fConst183)));
		fConst298 = (0 - fConst194);
		for (int i=0; i<2; i++) fRec86[i] = 0;
		for (int i=0; i<3; i++) fRec85[i] = 0;
		fConst299 = (2 * (0 - fConst192));
		for (int i=0; i<3; i++) fRec84[i] = 0;
		for (int i=0; i<3; i++) fRec83[i] = 0;
		fslider8 = -1e+01f;
		for (int i=0; i<2; i++) fRec87[i] = 0;
		fConst300 = (1 + ((fConst194 - 1.618033988749895f) / fConst191));
		fConst301 = (1.0f / (1 + ((1.618033988749895f + fConst194) / fConst191)));
		fConst302 = (0 - fConst203);
		for (int i=0; i<2; i++) fRec92[i] = 0;
		for (int i=0; i<3; i++) fRec91[i] = 0;
		fConst303 = (2 * (0 - fConst201));
		for (int i=0; i<3; i++) fRec90[i] = 0;
		for (int i=0; i<3; i++) fRec89[i] = 0;
		for (int i=0; i<3; i++) fRec88[i] = 0;
		fslider9 = -1e+01f;
		for (int i=0; i<2; i++) fRec93[i] = 0;
		fConst304 = (1 + ((fConst203 - 1.618033988749895f) / fConst200));
		fConst305 = (1.0f / (1 + ((1.618033988749895f + fConst203) / fConst200)));
		fConst306 = (0 - fConst212);
		for (int i=0; i<2; i++) fRec99[i] = 0;
		for (int i=0; i<3; i++) fRec98[i] = 0;
		fConst307 = (2 * (0 - fConst210));
		for (int i=0; i<3; i++) fRec97[i] = 0;
		for (int i=0; i<3; i++) fRec96[i] = 0;
		for (int i=0; i<3; i++) fRec95[i] = 0;
		for (int i=0; i<3; i++) fRec94[i] = 0;
		fslider10 = -1e+01f;
		for (int i=0; i<2; i++) fRec100[i] = 0;
		fConst308 = (1 + ((fConst212 - 1.618033988749895f) / fConst209));
		fConst309 = (1.0f / (1 + ((1.618033988749895f + fConst212) / fConst209)));
		fConst310 = (0 - fConst221);
		for (int i=0; i<2; i++) fRec107[i] = 0;
		for (int i=0; i<3; i++) fRec106[i] = 0;
		fConst311 = (2 * (0 - fConst219));
		for (int i=0; i<3; i++) fRec105[i] = 0;
		for (int i=0; i<3; i++) fRec104[i] = 0;
		for (int i=0; i<3; i++) fRec103[i] = 0;
		for (int i=0; i<3; i++) fRec102[i] = 0;
		for (int i=0; i<3; i++) fRec101[i] = 0;
		fslider11 = -1e+01f;
		for (int i=0; i<2; i++) fRec108[i] = 0;
		fConst312 = (1 + ((fConst221 - 1.618033988749895f) / fConst218));
		fConst313 = (1.0f / (1 + ((1.618033988749895f + fConst221) / fConst218)));
		fConst314 = (0 - fConst230);
		for (int i=0; i<2; i++) fRec116[i] = 0;
		for (int i=0; i<3; i++) fRec115[i] = 0;
		fConst315 = (2 * (0 - fConst228));
		for (int i=0; i<3; i++) fRec114[i] = 0;
		for (int i=0; i<3; i++) fRec113[i] = 0;
		for (int i=0; i<3; i++) fRec112[i] = 0;
		for (int i=0; i<3; i++) fRec111[i] = 0;
		for (int i=0; i<3; i++) fRec110[i] = 0;
		for (int i=0; i<3; i++) fRec109[i] = 0;
		fslider12 = -1e+01f;
		for (int i=0; i<2; i++) fRec117[i] = 0;
		fConst316 = (1 + ((fConst230 - 1.618033988749895f) / fConst227));
		fConst317 = (1.0f / (1 + ((1.618033988749895f + fConst230) / fConst227)));
		fConst318 = (0 - fConst239);
		for (int i=0; i<2; i++) fRec126[i] = 0;
		for (int i=0; i<3; i++) fRec125[i] = 0;
		fConst319 = (2 * (0 - fConst237));
		for (int i=0; i<3; i++) fRec124[i] = 0;
		for (int i=0; i<3; i++) fRec123[i] = 0;
		for (int i=0; i<3; i++) fRec122[i] = 0;
		for (int i=0; i<3; i++) fRec121[i] = 0;
		for (int i=0; i<3; i++) fRec120[i] = 0;
		for (int i=0; i<3; i++) fRec119[i] = 0;
		for (int i=0; i<3; i++) fRec118[i] = 0;
		fslider13 = -1e+01f;
		for (int i=0; i<2; i++) fRec127[i] = 0;
		fConst320 = (1 + ((fConst239 - 1.618033988749895f) / fConst236));
		fConst321 = (1.0f / (1 + ((1.618033988749895f + fConst239) / fConst236)));
		fConst322 = (0 - fConst248);
		for (int i=0; i<2; i++) fRec137[i] = 0;
		for (int i=0; i<3; i++) fRec136[i] = 0;
		fConst323 = (2 * (0 - fConst246));
		for (int i=0; i<3; i++) fRec135[i] = 0;
		for (int i=0; i<3; i++) fRec134[i] = 0;
		for (int i=0; i<3; i++) fRec133[i] = 0;
		for (int i=0; i<3; i++) fRec132[i] = 0;
		for (int i=0; i<3; i++) fRec131[i] = 0;
		for (int i=0; i<3; i++) fRec130[i] = 0;
		for (int i=0; i<3; i++) fRec129[i] = 0;
		for (int i=0; i<3; i++) fRec128[i] = 0;
		fslider14 = -1e+01f;
		for (int i=0; i<2; i++) fRec138[i] = 0;
		fConst324 = (1 + ((fConst248 - 1.618033988749895f) / fConst245));
		fConst325 = (1.0f / (1 + ((1.618033988749895f + fConst248) / fConst245)));
		fConst326 = (0 - fConst257);
		for (int i=0; i<2; i++) fRec149[i] = 0;
		for (int i=0; i<3; i++) fRec148[i] = 0;
		fConst327 = (2 * (0 - fConst255));
		for (int i=0; i<3; i++) fRec147[i] = 0;
		for (int i=0; i<3; i++) fRec146[i] = 0;
		for (int i=0; i<3; i++) fRec145[i] = 0;
		for (int i=0; i<3; i++) fRec144[i] = 0;
		for (int i=0; i<3; i++) fRec143[i] = 0;
		for (int i=0; i<3; i++) fRec142[i] = 0;
		for (int i=0; i<3; i++) fRec141[i] = 0;
		for (int i=0; i<3; i++) fRec140[i] = 0;
		for (int i=0; i<3; i++) fRec139[i] = 0;
		for (int i=0; i<3; i++) fRec42[i] = 0;
		fConst328 = (9.9999997055e-05f / fConst171);
		fConst329 = (0.000433227200555f + fConst328);
		fConst330 = (2 * (0.000433227200555f - fConst328));
		for (int i=0; i<3; i++) fRec41[i] = 0;
		fConst331 = (7.621731298870603f + fConst172);
		fConst332 = (2 * (7.621731298870603f - fConst172));
		for (int i=0; i<3; i++) fRec40[i] = 0;
		fConst333 = (53.53615295455673f + fConst172);
		fConst334 = (2 * (53.53615295455673f - fConst172));
		for (int i=0; i<3; i++) fRec39[i] = 0;
		fConst335 = (9.9999997055e-05f / fConst158);
		fConst336 = (0.000433227200555f + fConst335);
		fConst337 = (2 * (0.000433227200555f - fConst335));
		for (int i=0; i<3; i++) fRec38[i] = 0;
		fConst338 = (7.621731298870603f + fConst159);
		fConst339 = (2 * (7.621731298870603f - fConst159));
		for (int i=0; i<3; i++) fRec37[i] = 0;
		fConst340 = (53.53615295455673f + fConst159);
		fConst341 = (2 * (53.53615295455673f - fConst159));
		for (int i=0; i<3; i++) fRec36[i] = 0;
		fConst342 = (9.9999997055e-05f / fConst145);
		fConst343 = (0.000433227200555f + fConst342);
		fConst344 = (2 * (0.000433227200555f - fConst342));
		for (int i=0; i<3; i++) fRec35[i] = 0;
		fConst345 = (7.621731298870603f + fConst146);
		fConst346 = (2 * (7.621731298870603f - fConst146));
		for (int i=0; i<3; i++) fRec34[i] = 0;
		fConst347 = (53.53615295455673f + fConst146);
		fConst348 = (2 * (53.53615295455673f - fConst146));
		for (int i=0; i<3; i++) fRec33[i] = 0;
		fConst349 = (9.9999997055e-05f / fConst132);
		fConst350 = (0.000433227200555f + fConst349);
		fConst351 = (2 * (0.000433227200555f - fConst349));
		for (int i=0; i<3; i++) fRec32[i] = 0;
		fConst352 = (7.621731298870603f + fConst133);
		fConst353 = (2 * (7.621731298870603f - fConst133));
		for (int i=0; i<3; i++) fRec31[i] = 0;
		fConst354 = (53.53615295455673f + fConst133);
		fConst355 = (2 * (53.53615295455673f - fConst133));
		for (int i=0; i<3; i++) fRec30[i] = 0;
		fConst356 = (9.9999997055e-05f / fConst119);
		fConst357 = (0.000433227200555f + fConst356);
		fConst358 = (2 * (0.000433227200555f - fConst356));
		for (int i=0; i<3; i++) fRec29[i] = 0;
		fConst359 = (7.621731298870603f + fConst120);
		fConst360 = (2 * (7.621731298870603f - fConst120));
		for (int i=0; i<3; i++) fRec28[i] = 0;
		fConst361 = (53.53615295455673f + fConst120);
		fConst362 = (2 * (53.53615295455673f - fConst120));
		for (int i=0; i<3; i++) fRec27[i] = 0;
		fConst363 = (9.9999997055e-05f / fConst106);
		fConst364 = (0.000433227200555f + fConst363);
		fConst365 = (2 * (0.000433227200555f - fConst363));
		for (int i=0; i<3; i++) fRec26[i] = 0;
		fConst366 = (7.621731298870603f + fConst107);
		fConst367 = (2 * (7.621731298870603f - fConst107));
		for (int i=0; i<3; i++) fRec25[i] = 0;
		fConst368 = (53.53615295455673f + fConst107);
		fConst369 = (2 * (53.53615295455673f - fConst107));
		for (int i=0; i<3; i++) fRec24[i] = 0;
		fConst370 = (9.9999997055e-05f / fConst93);
		fConst371 = (0.000433227200555f + fConst370);
		fConst372 = (2 * (0.000433227200555f - fConst370));
		for (int i=0; i<3; i++) fRec23[i] = 0;
		fConst373 = (7.621731298870603f + fConst94);
		fConst374 = (2 * (7.621731298870603f - fConst94));
		for (int i=0; i<3; i++) fRec22[i] = 0;
		fConst375 = (53.53615295455673f + fConst94);
		fConst376 = (2 * (53.53615295455673f - fConst94));
		for (int i=0; i<3; i++) fRec21[i] = 0;
		fConst377 = (9.9999997055e-05f / fConst80);
		fConst378 = (0.000433227200555f + fConst377);
		fConst379 = (2 * (0.000433227200555f - fConst377));
		for (int i=0; i<3; i++) fRec20[i] = 0;
		fConst380 = (7.621731298870603f + fConst81);
		fConst381 = (2 * (7.621731298870603f - fConst81));
		for (int i=0; i<3; i++) fRec19[i] = 0;
		fConst382 = (53.53615295455673f + fConst81);
		fConst383 = (2 * (53.53615295455673f - fConst81));
		for (int i=0; i<3; i++) fRec18[i] = 0;
		fConst384 = (9.9999997055e-05f / fConst67);
		fConst385 = (0.000433227200555f + fConst384);
		fConst386 = (2 * (0.000433227200555f - fConst384));
		for (int i=0; i<3; i++) fRec17[i] = 0;
		fConst387 = (7.621731298870603f + fConst68);
		fConst388 = (2 * (7.621731298870603f - fConst68));
		for (int i=0; i<3; i++) fRec16[i] = 0;
		fConst389 = (53.53615295455673f + fConst68);
		fConst390 = (2 * (53.53615295455673f - fConst68));
		for (int i=0; i<3; i++) fRec15[i] = 0;
		fConst391 = (9.9999997055e-05f / fConst54);
		fConst392 = (0.000433227200555f + fConst391);
		fConst393 = (2 * (0.000433227200555f - fConst391));
		for (int i=0; i<3; i++) fRec14[i] = 0;
		fConst394 = (7.621731298870603f + fConst55);
		fConst395 = (2 * (7.621731298870603f - fConst55));
		for (int i=0; i<3; i++) fRec13[i] = 0;
		fConst396 = (53.53615295455673f + fConst55);
		fConst397 = (2 * (53.53615295455673f - fConst55));
		for (int i=0; i<3; i++) fRec12[i] = 0;
		fConst398 = (9.9999997055e-05f / fConst41);
		fConst399 = (0.000433227200555f + fConst398);
		fConst400 = (2 * (0.000433227200555f - fConst398));
		for (int i=0; i<3; i++) fRec11[i] = 0;
		fConst401 = (7.621731298870603f + fConst42);
		fConst402 = (2 * (7.621731298870603f - fConst42));
		for (int i=0; i<3; i++) fRec10[i] = 0;
		fConst403 = (53.53615295455673f + fConst42);
		fConst404 = (2 * (53.53615295455673f - fConst42));
		for (int i=0; i<3; i++) fRec9[i] = 0;
		fConst405 = (9.9999997055e-05f / fConst28);
		fConst406 = (0.000433227200555f + fConst405);
		fConst407 = (2 * (0.000433227200555f - fConst405));
		for (int i=0; i<3; i++) fRec8[i] = 0;
		fConst408 = (7.621731298870603f + fConst29);
		fConst409 = (2 * (7.621731298870603f - fConst29));
		for (int i=0; i<3; i++) fRec7[i] = 0;
		fConst410 = (53.53615295455673f + fConst29);
		fConst411 = (2 * (53.53615295455673f - fConst29));
		for (int i=0; i<3; i++) fRec6[i] = 0;
		fConst412 = (9.9999997055e-05f / fConst15);
		fConst413 = (0.000433227200555f + fConst412);
		fConst414 = (2 * (0.000433227200555f - fConst412));
		for (int i=0; i<3; i++) fRec5[i] = 0;
		fConst415 = (7.621731298870603f + fConst16);
		fConst416 = (2 * (7.621731298870603f - fConst16));
		for (int i=0; i<3; i++) fRec4[i] = 0;
		fConst417 = (53.53615295455673f + fConst16);
		fConst418 = (2 * (53.53615295455673f - fConst16));
		for (int i=0; i<3; i++) fRec3[i] = 0;
		fConst419 = (9.9999997055e-05f / fConst2);
		fConst420 = (0.000433227200555f + fConst419);
		fConst421 = (2 * (0.000433227200555f - fConst419));
		for (int i=0; i<3; i++) fRec2[i] = 0;
		fConst422 = (7.621731298870603f + fConst3);
		fConst423 = (2 * (7.621731298870603f - fConst3));
		for (int i=0; i<3; i++) fRec1[i] = 0;
		fConst424 = (53.53615295455673f + fConst3);
		fConst425 = (2 * (53.53615295455673f - fConst3));
		fslider15 = 1e+02f;
		fConst426 = (1e+03f / float(iConst0));
		for (int i=0; i<2; i++) fRec0[i] = 0;
		fslider16 = 5e+01f;
		fConst427 = (2 * (0.9351401670315425f - fConst3));
		fConst428 = (0.9351401670315425f + ((fConst5 - 0.157482159302087f) / fConst1));
		fConst429 = (1.0f / (0.9351401670315425f + ((fConst5 + 0.157482159302087f) / fConst1)));
		fConst430 = (2 * (1.450071084655647f - fConst3));
		fConst431 = (1.450071084655647f + ((fConst5 - 0.7431304601070396f) / fConst1));
		fConst432 = (1.0f / (1.450071084655647f + ((fConst5 + 0.7431304601070396f) / fConst1)));
		fConst433 = (2 * (4.076781969643807f - fConst3));
		fConst434 = (4.076781969643807f + ((fConst5 - 3.1897274020965583f) / fConst1));
		fConst435 = (1.0f / (4.076781969643807f + ((fConst5 + 3.1897274020965583f) / fConst1)));
		for (int i=0; i<3; i++) fRec153[i] = 0;
		fConst436 = (0.0017661728399818856f / fConst2);
		fConst437 = (0.00040767818495825777f + fConst436);
		fConst438 = (2 * (0.00040767818495825777f - fConst436));
		for (int i=0; i<3; i++) fRec152[i] = 0;
		fConst439 = (11.052052171507189f / fConst2);
		fConst440 = (1.450071084655647f + fConst439);
		fConst441 = (2 * (1.450071084655647f - fConst439));
		for (int i=0; i<3; i++) fRec151[i] = 0;
		fConst442 = (50.063807016150385f / fConst2);
		fConst443 = (0.9351401670315425f + fConst442);
		fConst444 = (2 * (0.9351401670315425f - fConst442));
		for (int i=0; i<2; i++) fRec150[i] = 0;
		fConst445 = (2 * (0.9351401670315425f - fConst16));
		fConst446 = (0.9351401670315425f + ((fConst18 - 0.157482159302087f) / fConst14));
		fConst447 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst18) / fConst14)));
		fConst448 = (2 * (1.450071084655647f - fConst16));
		fConst449 = (1.450071084655647f + ((fConst18 - 0.7431304601070396f) / fConst14));
		fConst450 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst18) / fConst14)));
		fConst451 = (2 * (4.076781969643807f - fConst16));
		fConst452 = (4.076781969643807f + ((fConst18 - 3.1897274020965583f) / fConst14));
		fConst453 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst18) / fConst14)));
		for (int i=0; i<3; i++) fRec157[i] = 0;
		fConst454 = (0.0017661728399818856f / fConst15);
		fConst455 = (0.00040767818495825777f + fConst454);
		fConst456 = (2 * (0.00040767818495825777f - fConst454));
		for (int i=0; i<3; i++) fRec156[i] = 0;
		fConst457 = (11.052052171507189f / fConst15);
		fConst458 = (1.450071084655647f + fConst457);
		fConst459 = (2 * (1.450071084655647f - fConst457));
		for (int i=0; i<3; i++) fRec155[i] = 0;
		fConst460 = (50.063807016150385f / fConst15);
		fConst461 = (0.9351401670315425f + fConst460);
		fConst462 = (2 * (0.9351401670315425f - fConst460));
		for (int i=0; i<2; i++) fRec154[i] = 0;
		fConst463 = (2 * (0.9351401670315425f - fConst29));
		fConst464 = (0.9351401670315425f + ((fConst31 - 0.157482159302087f) / fConst27));
		fConst465 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst31) / fConst27)));
		fConst466 = (2 * (1.450071084655647f - fConst29));
		fConst467 = (1.450071084655647f + ((fConst31 - 0.7431304601070396f) / fConst27));
		fConst468 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst31) / fConst27)));
		fConst469 = (2 * (4.076781969643807f - fConst29));
		fConst470 = (4.076781969643807f + ((fConst31 - 3.1897274020965583f) / fConst27));
		fConst471 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst31) / fConst27)));
		for (int i=0; i<3; i++) fRec161[i] = 0;
		fConst472 = (0.0017661728399818856f / fConst28);
		fConst473 = (0.00040767818495825777f + fConst472);
		fConst474 = (2 * (0.00040767818495825777f - fConst472));
		for (int i=0; i<3; i++) fRec160[i] = 0;
		fConst475 = (11.052052171507189f / fConst28);
		fConst476 = (1.450071084655647f + fConst475);
		fConst477 = (2 * (1.450071084655647f - fConst475));
		for (int i=0; i<3; i++) fRec159[i] = 0;
		fConst478 = (50.063807016150385f / fConst28);
		fConst479 = (0.9351401670315425f + fConst478);
		fConst480 = (2 * (0.9351401670315425f - fConst478));
		for (int i=0; i<2; i++) fRec158[i] = 0;
		fConst481 = (2 * (0.9351401670315425f - fConst42));
		fConst482 = (0.9351401670315425f + ((fConst44 - 0.157482159302087f) / fConst40));
		fConst483 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst44) / fConst40)));
		fConst484 = (2 * (1.450071084655647f - fConst42));
		fConst485 = (1.450071084655647f + ((fConst44 - 0.7431304601070396f) / fConst40));
		fConst486 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst44) / fConst40)));
		fConst487 = (2 * (4.076781969643807f - fConst42));
		fConst488 = (4.076781969643807f + ((fConst44 - 3.1897274020965583f) / fConst40));
		fConst489 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst44) / fConst40)));
		for (int i=0; i<3; i++) fRec165[i] = 0;
		fConst490 = (0.0017661728399818856f / fConst41);
		fConst491 = (0.00040767818495825777f + fConst490);
		fConst492 = (2 * (0.00040767818495825777f - fConst490));
		for (int i=0; i<3; i++) fRec164[i] = 0;
		fConst493 = (11.052052171507189f / fConst41);
		fConst494 = (1.450071084655647f + fConst493);
		fConst495 = (2 * (1.450071084655647f - fConst493));
		for (int i=0; i<3; i++) fRec163[i] = 0;
		fConst496 = (50.063807016150385f / fConst41);
		fConst497 = (0.9351401670315425f + fConst496);
		fConst498 = (2 * (0.9351401670315425f - fConst496));
		for (int i=0; i<2; i++) fRec162[i] = 0;
		fConst499 = (2 * (0.9351401670315425f - fConst55));
		fConst500 = (0.9351401670315425f + ((fConst57 - 0.157482159302087f) / fConst53));
		fConst501 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst57) / fConst53)));
		fConst502 = (2 * (1.450071084655647f - fConst55));
		fConst503 = (1.450071084655647f + ((fConst57 - 0.7431304601070396f) / fConst53));
		fConst504 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst57) / fConst53)));
		fConst505 = (2 * (4.076781969643807f - fConst55));
		fConst506 = (4.076781969643807f + ((fConst57 - 3.1897274020965583f) / fConst53));
		fConst507 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst57) / fConst53)));
		for (int i=0; i<3; i++) fRec169[i] = 0;
		fConst508 = (0.0017661728399818856f / fConst54);
		fConst509 = (0.00040767818495825777f + fConst508);
		fConst510 = (2 * (0.00040767818495825777f - fConst508));
		for (int i=0; i<3; i++) fRec168[i] = 0;
		fConst511 = (11.052052171507189f / fConst54);
		fConst512 = (1.450071084655647f + fConst511);
		fConst513 = (2 * (1.450071084655647f - fConst511));
		for (int i=0; i<3; i++) fRec167[i] = 0;
		fConst514 = (50.063807016150385f / fConst54);
		fConst515 = (0.9351401670315425f + fConst514);
		fConst516 = (2 * (0.9351401670315425f - fConst514));
		for (int i=0; i<2; i++) fRec166[i] = 0;
		fConst517 = (2 * (0.9351401670315425f - fConst68));
		fConst518 = (0.9351401670315425f + ((fConst70 - 0.157482159302087f) / fConst66));
		fConst519 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst70) / fConst66)));
		fConst520 = (2 * (1.450071084655647f - fConst68));
		fConst521 = (1.450071084655647f + ((fConst70 - 0.7431304601070396f) / fConst66));
		fConst522 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst70) / fConst66)));
		fConst523 = (2 * (4.076781969643807f - fConst68));
		fConst524 = (4.076781969643807f + ((fConst70 - 3.1897274020965583f) / fConst66));
		fConst525 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst70) / fConst66)));
		for (int i=0; i<3; i++) fRec173[i] = 0;
		fConst526 = (0.0017661728399818856f / fConst67);
		fConst527 = (0.00040767818495825777f + fConst526);
		fConst528 = (2 * (0.00040767818495825777f - fConst526));
		for (int i=0; i<3; i++) fRec172[i] = 0;
		fConst529 = (11.052052171507189f / fConst67);
		fConst530 = (1.450071084655647f + fConst529);
		fConst531 = (2 * (1.450071084655647f - fConst529));
		for (int i=0; i<3; i++) fRec171[i] = 0;
		fConst532 = (50.063807016150385f / fConst67);
		fConst533 = (0.9351401670315425f + fConst532);
		fConst534 = (2 * (0.9351401670315425f - fConst532));
		for (int i=0; i<2; i++) fRec170[i] = 0;
		fConst535 = (2 * (0.9351401670315425f - fConst81));
		fConst536 = (0.9351401670315425f + ((fConst83 - 0.157482159302087f) / fConst79));
		fConst537 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst83) / fConst79)));
		fConst538 = (2 * (1.450071084655647f - fConst81));
		fConst539 = (1.450071084655647f + ((fConst83 - 0.7431304601070396f) / fConst79));
		fConst540 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst83) / fConst79)));
		fConst541 = (2 * (4.076781969643807f - fConst81));
		fConst542 = (4.076781969643807f + ((fConst83 - 3.1897274020965583f) / fConst79));
		fConst543 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst83) / fConst79)));
		for (int i=0; i<3; i++) fRec177[i] = 0;
		fConst544 = (0.0017661728399818856f / fConst80);
		fConst545 = (0.00040767818495825777f + fConst544);
		fConst546 = (2 * (0.00040767818495825777f - fConst544));
		for (int i=0; i<3; i++) fRec176[i] = 0;
		fConst547 = (11.052052171507189f / fConst80);
		fConst548 = (1.450071084655647f + fConst547);
		fConst549 = (2 * (1.450071084655647f - fConst547));
		for (int i=0; i<3; i++) fRec175[i] = 0;
		fConst550 = (50.063807016150385f / fConst80);
		fConst551 = (0.9351401670315425f + fConst550);
		fConst552 = (2 * (0.9351401670315425f - fConst550));
		for (int i=0; i<2; i++) fRec174[i] = 0;
		fConst553 = (2 * (0.9351401670315425f - fConst94));
		fConst554 = (0.9351401670315425f + ((fConst96 - 0.157482159302087f) / fConst92));
		fConst555 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst96) / fConst92)));
		fConst556 = (2 * (1.450071084655647f - fConst94));
		fConst557 = (1.450071084655647f + ((fConst96 - 0.7431304601070396f) / fConst92));
		fConst558 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst96) / fConst92)));
		fConst559 = (2 * (4.076781969643807f - fConst94));
		fConst560 = (4.076781969643807f + ((fConst96 - 3.1897274020965583f) / fConst92));
		fConst561 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst96) / fConst92)));
		for (int i=0; i<3; i++) fRec181[i] = 0;
		fConst562 = (0.0017661728399818856f / fConst93);
		fConst563 = (0.00040767818495825777f + fConst562);
		fConst564 = (2 * (0.00040767818495825777f - fConst562));
		for (int i=0; i<3; i++) fRec180[i] = 0;
		fConst565 = (11.052052171507189f / fConst93);
		fConst566 = (1.450071084655647f + fConst565);
		fConst567 = (2 * (1.450071084655647f - fConst565));
		for (int i=0; i<3; i++) fRec179[i] = 0;
		fConst568 = (50.063807016150385f / fConst93);
		fConst569 = (0.9351401670315425f + fConst568);
		fConst570 = (2 * (0.9351401670315425f - fConst568));
		for (int i=0; i<2; i++) fRec178[i] = 0;
		fConst571 = (2 * (0.9351401670315425f - fConst107));
		fConst572 = (0.9351401670315425f + ((fConst109 - 0.157482159302087f) / fConst105));
		fConst573 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst109) / fConst105)));
		fConst574 = (2 * (1.450071084655647f - fConst107));
		fConst575 = (1.450071084655647f + ((fConst109 - 0.7431304601070396f) / fConst105));
		fConst576 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst109) / fConst105)));
		fConst577 = (2 * (4.076781969643807f - fConst107));
		fConst578 = (4.076781969643807f + ((fConst109 - 3.1897274020965583f) / fConst105));
		fConst579 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst109) / fConst105)));
		for (int i=0; i<3; i++) fRec185[i] = 0;
		fConst580 = (0.0017661728399818856f / fConst106);
		fConst581 = (0.00040767818495825777f + fConst580);
		fConst582 = (2 * (0.00040767818495825777f - fConst580));
		for (int i=0; i<3; i++) fRec184[i] = 0;
		fConst583 = (11.052052171507189f / fConst106);
		fConst584 = (1.450071084655647f + fConst583);
		fConst585 = (2 * (1.450071084655647f - fConst583));
		for (int i=0; i<3; i++) fRec183[i] = 0;
		fConst586 = (50.063807016150385f / fConst106);
		fConst587 = (0.9351401670315425f + fConst586);
		fConst588 = (2 * (0.9351401670315425f - fConst586));
		for (int i=0; i<2; i++) fRec182[i] = 0;
		fConst589 = (2 * (0.9351401670315425f - fConst120));
		fConst590 = (0.9351401670315425f + ((fConst122 - 0.157482159302087f) / fConst118));
		fConst591 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst122) / fConst118)));
		fConst592 = (2 * (1.450071084655647f - fConst120));
		fConst593 = (1.450071084655647f + ((fConst122 - 0.7431304601070396f) / fConst118));
		fConst594 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst122) / fConst118)));
		fConst595 = (2 * (4.076781969643807f - fConst120));
		fConst596 = (4.076781969643807f + ((fConst122 - 3.1897274020965583f) / fConst118));
		fConst597 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst122) / fConst118)));
		for (int i=0; i<3; i++) fRec189[i] = 0;
		fConst598 = (0.0017661728399818856f / fConst119);
		fConst599 = (0.00040767818495825777f + fConst598);
		fConst600 = (2 * (0.00040767818495825777f - fConst598));
		for (int i=0; i<3; i++) fRec188[i] = 0;
		fConst601 = (11.052052171507189f / fConst119);
		fConst602 = (1.450071084655647f + fConst601);
		fConst603 = (2 * (1.450071084655647f - fConst601));
		for (int i=0; i<3; i++) fRec187[i] = 0;
		fConst604 = (50.063807016150385f / fConst119);
		fConst605 = (0.9351401670315425f + fConst604);
		fConst606 = (2 * (0.9351401670315425f - fConst604));
		for (int i=0; i<2; i++) fRec186[i] = 0;
		fConst607 = (2 * (0.9351401670315425f - fConst133));
		fConst608 = (0.9351401670315425f + ((fConst135 - 0.157482159302087f) / fConst131));
		fConst609 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst135) / fConst131)));
		fConst610 = (2 * (1.450071084655647f - fConst133));
		fConst611 = (1.450071084655647f + ((fConst135 - 0.7431304601070396f) / fConst131));
		fConst612 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst135) / fConst131)));
		fConst613 = (2 * (4.076781969643807f - fConst133));
		fConst614 = (4.076781969643807f + ((fConst135 - 3.1897274020965583f) / fConst131));
		fConst615 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst135) / fConst131)));
		for (int i=0; i<3; i++) fRec193[i] = 0;
		fConst616 = (0.0017661728399818856f / fConst132);
		fConst617 = (0.00040767818495825777f + fConst616);
		fConst618 = (2 * (0.00040767818495825777f - fConst616));
		for (int i=0; i<3; i++) fRec192[i] = 0;
		fConst619 = (11.052052171507189f / fConst132);
		fConst620 = (1.450071084655647f + fConst619);
		fConst621 = (2 * (1.450071084655647f - fConst619));
		for (int i=0; i<3; i++) fRec191[i] = 0;
		fConst622 = (50.063807016150385f / fConst132);
		fConst623 = (0.9351401670315425f + fConst622);
		fConst624 = (2 * (0.9351401670315425f - fConst622));
		for (int i=0; i<2; i++) fRec190[i] = 0;
		fConst625 = (2 * (0.9351401670315425f - fConst146));
		fConst626 = (0.9351401670315425f + ((fConst148 - 0.157482159302087f) / fConst144));
		fConst627 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst148) / fConst144)));
		fConst628 = (2 * (1.450071084655647f - fConst146));
		fConst629 = (1.450071084655647f + ((fConst148 - 0.7431304601070396f) / fConst144));
		fConst630 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst148) / fConst144)));
		fConst631 = (2 * (4.076781969643807f - fConst146));
		fConst632 = (4.076781969643807f + ((fConst148 - 3.1897274020965583f) / fConst144));
		fConst633 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst148) / fConst144)));
		for (int i=0; i<3; i++) fRec197[i] = 0;
		fConst634 = (0.0017661728399818856f / fConst145);
		fConst635 = (0.00040767818495825777f + fConst634);
		fConst636 = (2 * (0.00040767818495825777f - fConst634));
		for (int i=0; i<3; i++) fRec196[i] = 0;
		fConst637 = (11.052052171507189f / fConst145);
		fConst638 = (1.450071084655647f + fConst637);
		fConst639 = (2 * (1.450071084655647f - fConst637));
		for (int i=0; i<3; i++) fRec195[i] = 0;
		fConst640 = (50.063807016150385f / fConst145);
		fConst641 = (0.9351401670315425f + fConst640);
		fConst642 = (2 * (0.9351401670315425f - fConst640));
		for (int i=0; i<2; i++) fRec194[i] = 0;
		fConst643 = (2 * (0.9351401670315425f - fConst159));
		fConst644 = (0.9351401670315425f + ((fConst161 - 0.157482159302087f) / fConst157));
		fConst645 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst161) / fConst157)));
		fConst646 = (2 * (1.450071084655647f - fConst159));
		fConst647 = (1.450071084655647f + ((fConst161 - 0.7431304601070396f) / fConst157));
		fConst648 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst161) / fConst157)));
		fConst649 = (2 * (4.076781969643807f - fConst159));
		fConst650 = (4.076781969643807f + ((fConst161 - 3.1897274020965583f) / fConst157));
		fConst651 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst161) / fConst157)));
		for (int i=0; i<3; i++) fRec201[i] = 0;
		fConst652 = (0.0017661728399818856f / fConst158);
		fConst653 = (0.00040767818495825777f + fConst652);
		fConst654 = (2 * (0.00040767818495825777f - fConst652));
		for (int i=0; i<3; i++) fRec200[i] = 0;
		fConst655 = (11.052052171507189f / fConst158);
		fConst656 = (1.450071084655647f + fConst655);
		fConst657 = (2 * (1.450071084655647f - fConst655));
		for (int i=0; i<3; i++) fRec199[i] = 0;
		fConst658 = (50.063807016150385f / fConst158);
		fConst659 = (0.9351401670315425f + fConst658);
		fConst660 = (2 * (0.9351401670315425f - fConst658));
		for (int i=0; i<2; i++) fRec198[i] = 0;
		fConst661 = (2 * (0.9351401670315425f - fConst172));
		fConst662 = (0.9351401670315425f + ((fConst174 - 0.157482159302087f) / fConst170));
		fConst663 = (1.0f / (0.9351401670315425f + ((0.157482159302087f + fConst174) / fConst170)));
		fConst664 = (2 * (1.450071084655647f - fConst172));
		fConst665 = (1.450071084655647f + ((fConst174 - 0.7431304601070396f) / fConst170));
		fConst666 = (1.0f / (1.450071084655647f + ((0.7431304601070396f + fConst174) / fConst170)));
		fConst667 = (2 * (4.076781969643807f - fConst172));
		fConst668 = (4.076781969643807f + ((fConst174 - 3.1897274020965583f) / fConst170));
		fConst669 = (1.0f / (4.076781969643807f + ((3.1897274020965583f + fConst174) / fConst170)));
		for (int i=0; i<3; i++) fRec205[i] = 0;
		fConst670 = (0.0017661728399818856f / fConst171);
		fConst671 = (0.00040767818495825777f + fConst670);
		fConst672 = (2 * (0.00040767818495825777f - fConst670));
		for (int i=0; i<3; i++) fRec204[i] = 0;
		fConst673 = (11.052052171507189f / fConst171);
		fConst674 = (1.450071084655647f + fConst673);
		fConst675 = (2 * (1.450071084655647f - fConst673));
		for (int i=0; i<3; i++) fRec203[i] = 0;
		fConst676 = (50.063807016150385f / fConst171);
		fConst677 = (0.9351401670315425f + fConst676);
		fConst678 = (2 * (0.9351401670315425f - fConst676));
		for (int i=0; i<2; i++) fRec202[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void buildUserInterface(UI* interface) {
		interface->openVerticalBox("0x00");
		interface->declare(0, "1", "");
		interface->openVerticalBox("0x00");
		interface->declare(0, "0", "");
		interface->declare(0, "tooltip", "See Faust's oscillator.lib for documentation and references");
		interface->openVerticalBox("SAWTOOTH OSCILLATOR");
		interface->declare(0, "1", "");
		interface->openHorizontalBox("0x00");
		interface->declare(&fslider5, "1", "");
		interface->declare(&fslider5, "style", "knob");
		interface->declare(&fslider5, "tooltip", "Sawtooth waveform amplitude");
		interface->declare(&fslider5, "unit", "dB");
		interface->addVerticalSlider("Amplitude", &fslider5, -2e+01f, -1.2e+02f, 1e+01f, 0.1f);
		interface->declare(&fslider2, "2", "");
		interface->declare(&fslider2, "style", "knob");
		interface->declare(&fslider2, "tooltip", "Sawtooth frequency as a Piano Key (PK) number (A440 = key 49)");
		interface->declare(&fslider2, "unit", "PK");
		interface->addVerticalSlider("Frequency", &fslider2, 49.0f, 1.0f, 88.0f, 0.01f);
		interface->declare(&fslider4, "3", "");
		interface->declare(&fslider4, "style", "knob");
		interface->declare(&fslider4, "tooltip", "Percentange frequency-shift up or down for second oscillator");
		interface->declare(&fslider4, "unit", "%%");
		interface->addVerticalSlider("Detuning 1", &fslider4, -0.1f, -1e+01f, 1e+01f, 0.01f);
		interface->declare(&fslider3, "4", "");
		interface->declare(&fslider3, "style", "knob");
		interface->declare(&fslider3, "tooltip", "Percentange frequency-shift up or down for third detuned oscillator");
		interface->declare(&fslider3, "unit", "%%");
		interface->addVerticalSlider("Detuning 2", &fslider3, 0.1f, -1e+01f, 1e+01f, 0.01f);
		interface->declare(&fslider1, "5", "");
		interface->declare(&fslider1, "scale", "log");
		interface->declare(&fslider1, "style", "knob");
		interface->declare(&fslider1, "tooltip", "Portamento (frequency-glide) time-constant in seconds");
		interface->declare(&fslider1, "unit", "sec");
		interface->addVerticalSlider("Portamento", &fslider1, 0.1f, 0.001f, 1e+01f, 0.001f);
		interface->declare(0, "6", "");
		interface->openVerticalBox("Alternate Signals");
		interface->declare(&fcheckbox0, "0", "");
		interface->declare(&fcheckbox0, "tooltip", "Pink Noise (or 1/f noise) is Constant-Q Noise, meaning that it has the same total power in every octave");
		interface->addCheckButton("Pink Noise Instead (uses only Amplitude control on the left)", &fcheckbox0);
		interface->declare(&fcheckbox1, "1", "");
		interface->addCheckButton("External Input Instead (overrides Sawtooth/Noise selection above)", &fcheckbox1);
		interface->closeBox();
		interface->closeBox();
		interface->closeBox();
		interface->closeBox();
		interface->declare(0, "2", "");
		interface->openVerticalBox("0x00");
		interface->declare(0, "tooltip", "See Faust's filter.lib for documentation and references");
		interface->openVerticalBox("CONSTANT-Q FILTER BANK (Butterworth dyadic tree)");
		interface->declare(0, "0", "");
		interface->openHorizontalBox("0x00");
		interface->declare(&fcheckbox2, "0", "");
		interface->declare(&fcheckbox2, "tooltip", "When this is checked, the filter-bank has no effect");
		interface->addCheckButton("Bypass", &fcheckbox2);
		interface->closeBox();
		interface->declare(0, "1", "");
		interface->openHorizontalBox("0x00");
		interface->declare(&fslider0, "1", "");
		interface->declare(&fslider0, "tooltip", "Bandpass filter gain in dB");
		interface->declare(&fslider0, "unit", "dB");
		interface->addVerticalSlider("0x00", &fslider0, -1e+01f, -7e+01f, 1e+01f, 0.1f);
		interface->declare(&fslider6, "2", "");
		interface->declare(&fslider6, "tooltip", "Bandpass filter gain in dB");
		interface->declare(&fslider6, "unit", "dB");
		interface->addVerticalSlider("0x00", &fslider6, -1e+01f, -7e+01f, 1e+01f, 0.1f);
		interface->declare(&fslider7, "3", "");
		interface->declare(&fslider7, "tooltip", "Bandpass filter gain in dB");
		interface->declare(&fslider7, "unit", "dB");
		interface->addVerticalSlider("0x00", &fslider7, -1e+01f, -7e+01f, 1e+01f, 0.1f);
		interface->declare(&fslider8, "4", "");
		interface->declare(&fslider8, "tooltip", "Bandpass filter gain in dB");
		interface->declare(&fslider8, "unit", "dB");
		interface->addVerticalSlider("0x00", &fslider8, -1e+01f, -7e+01f, 1e+01f, 0.1f);
		interface->declare(&fslider9, "5", "");
		interface->declare(&fslider9, "tooltip", "Bandpass filter gain in dB");
		interface->declare(&fslider9, "unit", "dB");
		interface->addVerticalSlider("0x00", &fslider9, -1e+01f, -7e+01f, 1e+01f, 0.1f);
		interface->declare(&fslider10, "6", "");
		interface->declare(&fslider10, "tooltip", "Bandpass filter gain in dB");
		interface->declare(&fslider10, "unit", "dB");
		interface->addVerticalSlider("0x00", &fslider10, -1e+01f, -7e+01f, 1e+01f, 0.1f);
		interface->declare(&fslider11, "7", "");
		interface->declare(&fslider11, "tooltip", "Bandpass filter gain in dB");
		interface->declare(&fslider11, "unit", "dB");
		interface->addVerticalSlider("0x00", &fslider11, -1e+01f, -7e+01f, 1e+01f, 0.1f);
		interface->declare(&fslider12, "8", "");
		interface->declare(&fslider12, "tooltip", "Bandpass filter gain in dB");
		interface->declare(&fslider12, "unit", "dB");
		interface->addVerticalSlider("0x00", &fslider12, -1e+01f, -7e+01f, 1e+01f, 0.1f);
		interface->declare(&fslider13, "9", "");
		interface->declare(&fslider13, "tooltip", "Bandpass filter gain in dB");
		interface->declare(&fslider13, "unit", "dB");
		interface->addVerticalSlider("0x00", &fslider13, -1e+01f, -7e+01f, 1e+01f, 0.1f);
		interface->declare(&fslider14, "10", "");
		interface->declare(&fslider14, "tooltip", "Bandpass filter gain in dB");
		interface->declare(&fslider14, "unit", "dB");
		interface->addVerticalSlider("0x00", &fslider14, -1e+01f, -7e+01f, 1e+01f, 0.1f);
		interface->closeBox();
		interface->closeBox();
		interface->closeBox();
		interface->declare(0, "3", "");
		interface->openVerticalBox("0x00");
		interface->declare(0, "0", "");
		interface->declare(0, "tooltip", "See Faust's filter.lib for documentation and references");
		interface->openHorizontalBox("CONSTANT-Q SPECTRUM ANALYZER (6E), 15 bands spanning LP, 9 octaves below 16000 Hz, HP");
		interface->declare(&fbargraph0, "0", "");
		interface->declare(&fbargraph0, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph0, "unit", "dB");
		interface->addVerticalBargraph("0x600dbc0", &fbargraph0, -5e+01f, 1e+01f);
		interface->declare(&fbargraph1, "1", "");
		interface->declare(&fbargraph1, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph1, "unit", "dB");
		interface->addVerticalBargraph("0x6017980", &fbargraph1, -5e+01f, 1e+01f);
		interface->declare(&fbargraph2, "2", "");
		interface->declare(&fbargraph2, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph2, "unit", "dB");
		interface->addVerticalBargraph("0x6020e80", &fbargraph2, -5e+01f, 1e+01f);
		interface->declare(&fbargraph3, "3", "");
		interface->declare(&fbargraph3, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph3, "unit", "dB");
		interface->addVerticalBargraph("0x6029e80", &fbargraph3, -5e+01f, 1e+01f);
		interface->declare(&fbargraph4, "4", "");
		interface->declare(&fbargraph4, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph4, "unit", "dB");
		interface->addVerticalBargraph("0x60332c0", &fbargraph4, -5e+01f, 1e+01f);
		interface->declare(&fbargraph5, "5", "");
		interface->declare(&fbargraph5, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph5, "unit", "dB");
		interface->addVerticalBargraph("0x603c960", &fbargraph5, -5e+01f, 1e+01f);
		interface->declare(&fbargraph6, "6", "");
		interface->declare(&fbargraph6, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph6, "unit", "dB");
		interface->addVerticalBargraph("0x6045dd0", &fbargraph6, -5e+01f, 1e+01f);
		interface->declare(&fbargraph7, "7", "");
		interface->declare(&fbargraph7, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph7, "unit", "dB");
		interface->addVerticalBargraph("0x604f0a0", &fbargraph7, -5e+01f, 1e+01f);
		interface->declare(&fbargraph8, "8", "");
		interface->declare(&fbargraph8, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph8, "unit", "dB");
		interface->addVerticalBargraph("0x6058760", &fbargraph8, -5e+01f, 1e+01f);
		interface->declare(&fbargraph9, "9", "");
		interface->declare(&fbargraph9, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph9, "unit", "dB");
		interface->addVerticalBargraph("0x6062060", &fbargraph9, -5e+01f, 1e+01f);
		interface->declare(&fbargraph10, "10", "");
		interface->declare(&fbargraph10, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph10, "unit", "dB");
		interface->addVerticalBargraph("0x606b4e0", &fbargraph10, -5e+01f, 1e+01f);
		interface->declare(&fbargraph11, "11", "");
		interface->declare(&fbargraph11, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph11, "unit", "dB");
		interface->addVerticalBargraph("0x6074d50", &fbargraph11, -5e+01f, 1e+01f);
		interface->declare(&fbargraph12, "12", "");
		interface->declare(&fbargraph12, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph12, "unit", "dB");
		interface->addVerticalBargraph("0x607e840", &fbargraph12, -5e+01f, 1e+01f);
		interface->declare(&fbargraph13, "13", "");
		interface->declare(&fbargraph13, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph13, "unit", "dB");
		interface->addVerticalBargraph("0x6088120", &fbargraph13, -5e+01f, 1e+01f);
		interface->declare(&fbargraph14, "14", "");
		interface->declare(&fbargraph14, "tooltip", "Spectral Band Level in dB");
		interface->declare(&fbargraph14, "unit", "dB");
		interface->addVerticalBargraph("0x6091840", &fbargraph14, -5e+01f, 1e+01f);
		interface->closeBox();
		interface->declare(0, "1", "");
		interface->openHorizontalBox("SPECTRUM ANALYZER CONTROLS");
		interface->declare(&fslider15, "0", "");
		interface->declare(&fslider15, "scale", "log");
		interface->declare(&fslider15, "tooltip", "band-level averaging time in milliseconds");
		interface->declare(&fslider15, "unit", "ms");
		interface->addHorizontalSlider("Level Averaging Time", &fslider15, 1e+02f, 1.0f, 1e+04f, 1.0f);
		interface->declare(&fslider16, "1", "");
		interface->declare(&fslider16, "tooltip", "Level offset in decibels");
		interface->declare(&fslider16, "unit", "dB");
		interface->addHorizontalSlider("Level dB Offset", &fslider16, 5e+01f, 0.0f, 1e+02f, 1.0f);
		interface->closeBox();
		interface->closeBox();
		interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0 = (0.0010000000000000009f * float(fslider0));
		float 	fSlow1 = expf((0 - (fConst263 / float(fslider1))));
		float 	fSlow2 = (4.4e+02f * (powf(2.0f,(0.08333333333333333f * (float(fslider2) - 49.0f))) * (1.0f - fSlow1)));
		float 	fSlow3 = (1 + (0.01f * float(fslider3)));
		float 	fSlow4 = (fConst264 / fSlow3);
		float 	fSlow5 = (fConst265 * fSlow3);
		float 	fSlow6 = (1.0f / fSlow3);
		float 	fSlow7 = (1 + (0.01f * float(fslider4)));
		float 	fSlow8 = (fConst264 / fSlow7);
		float 	fSlow9 = (fConst265 * fSlow7);
		float 	fSlow10 = (1.0f / fSlow7);
		float 	fSlow11 = (0.0010000000000000009f * powf(10,(0.05f * float(fslider5))));
		int 	iSlow12 = int(float(fcheckbox0));
		int 	iSlow13 = int(float(fcheckbox1));
		int 	iSlow14 = int(float(fcheckbox2));
		float 	fSlow15 = (0.0010000000000000009f * float(fslider6));
		float 	fSlow16 = (0.0010000000000000009f * float(fslider7));
		float 	fSlow17 = (0.0010000000000000009f * float(fslider8));
		float 	fSlow18 = (0.0010000000000000009f * float(fslider9));
		float 	fSlow19 = (0.0010000000000000009f * float(fslider10));
		float 	fSlow20 = (0.0010000000000000009f * float(fslider11));
		float 	fSlow21 = (0.0010000000000000009f * float(fslider12));
		float 	fSlow22 = (0.0010000000000000009f * float(fslider13));
		float 	fSlow23 = (0.0010000000000000009f * float(fslider14));
		float 	fSlow24 = expf((0 - (fConst426 / float(fslider15))));
		float 	fSlow25 = (1.0f - fSlow24);
		float 	fSlow26 = float(fslider16);
		FAUSTFLOAT* input0 = input[0];
		FAUSTFLOAT* output0 = output[0];
		FAUSTFLOAT* output1 = output[1];
		for (int i=0; i<count; i++) {
			fRec43[0] = ((0.999f * fRec43[1]) + fSlow0);
			fRec71[0] = ((fSlow1 * fRec71[1]) + fSlow2);
			fRec72[0] = fmodf((1.0f + fRec72[1]),(fSlow4 / fRec71[0]));
			float fTemp0 = faustpower<2>(((fSlow5 * (fRec71[0] * fRec72[0])) - 1.0f));
			fVec0[0] = fTemp0;
			fRec73[0] = fmodf((1.0f + fRec73[1]),(fSlow8 / fRec71[0]));
			float fTemp1 = faustpower<2>(((fSlow9 * (fRec71[0] * fRec73[0])) - 1.0f));
			fVec1[0] = fTemp1;
			fRec74[0] = fmodf((1.0f + fRec74[1]),(fConst264 / fRec71[0]));
			float fTemp2 = faustpower<2>(((fConst265 * (fRec71[0] * fRec74[0])) - 1.0f));
			fVec2[0] = fTemp2;
			fVec3[0] = 0.25f;
			fRec75[0] = ((0.999f * fRec75[1]) + fSlow11);
			iRec77[0] = (12345 + (1103515245 * iRec77[1]));
			fRec76[0] = (((0.5221894f * fRec76[3]) + ((4.656612875245797e-10f * iRec77[0]) + (2.494956002f * fRec76[1]))) - (2.017265875f * fRec76[2]));
			float fTemp3 = (fRec75[0] * ((iSlow13)?(float)input0[i]:((iSlow12)?(((0.049922035f * fRec76[0]) + (0.050612699f * fRec76[2])) - ((0.095993537f * fRec76[1]) + (0.004408786f * fRec76[3]))):(fConst266 * (((fRec75[0] * fVec3[1]) * (((fVec2[0] - fVec2[1]) + (fSlow10 * (fVec1[0] - fVec1[1]))) + (fSlow6 * (fVec0[0] - fVec0[1])))) / fRec71[0])))));
			float fTemp4 = ((iSlow14)?0:fTemp3);
			fVec4[0] = fTemp4;
			fRec70[0] = ((fConst269 * fRec70[1]) + (fConst268 * (fVec4[0] + fVec4[1])));
			fRec69[0] = (fRec70[0] - (fConst262 * ((fConst261 * fRec69[2]) + (fConst256 * fRec69[1]))));
			fRec68[0] = ((fConst262 * (fRec69[2] + (fRec69[0] + (2 * fRec69[1])))) - (fConst260 * ((fConst258 * fRec68[2]) + (fConst256 * fRec68[1]))));
			float fTemp5 = (fRec68[2] + (fRec68[0] + (2 * fRec68[1])));
			fVec5[0] = fTemp5;
			fRec67[0] = ((fConst272 * fRec67[1]) + (fConst271 * (fVec5[0] + fVec5[1])));
			fRec66[0] = (fRec67[0] - (fConst253 * ((fConst252 * fRec66[2]) + (fConst247 * fRec66[1]))));
			fRec65[0] = ((fConst253 * (fRec66[2] + (fRec66[0] + (2 * fRec66[1])))) - (fConst251 * ((fConst249 * fRec65[2]) + (fConst247 * fRec65[1]))));
			float fTemp6 = (fRec65[2] + (fRec65[0] + (2 * fRec65[1])));
			fVec6[0] = fTemp6;
			fRec64[0] = ((fConst275 * fRec64[1]) + (fConst274 * (fVec6[0] + fVec6[1])));
			fRec63[0] = (fRec64[0] - (fConst244 * ((fConst243 * fRec63[2]) + (fConst238 * fRec63[1]))));
			fRec62[0] = ((fConst244 * (fRec63[2] + (fRec63[0] + (2 * fRec63[1])))) - (fConst242 * ((fConst240 * fRec62[2]) + (fConst238 * fRec62[1]))));
			float fTemp7 = (fRec62[2] + (fRec62[0] + (2 * fRec62[1])));
			fVec7[0] = fTemp7;
			fRec61[0] = ((fConst278 * fRec61[1]) + (fConst277 * (fVec7[0] + fVec7[1])));
			fRec60[0] = (fRec61[0] - (fConst235 * ((fConst234 * fRec60[2]) + (fConst229 * fRec60[1]))));
			fRec59[0] = ((fConst235 * (fRec60[2] + (fRec60[0] + (2 * fRec60[1])))) - (fConst233 * ((fConst231 * fRec59[2]) + (fConst229 * fRec59[1]))));
			float fTemp8 = (fRec59[2] + (fRec59[0] + (2 * fRec59[1])));
			fVec8[0] = fTemp8;
			fRec58[0] = ((fConst281 * fRec58[1]) + (fConst280 * (fVec8[0] + fVec8[1])));
			fRec57[0] = (fRec58[0] - (fConst226 * ((fConst225 * fRec57[2]) + (fConst220 * fRec57[1]))));
			fRec56[0] = ((fConst226 * (fRec57[2] + (fRec57[0] + (2 * fRec57[1])))) - (fConst224 * ((fConst222 * fRec56[2]) + (fConst220 * fRec56[1]))));
			float fTemp9 = (fRec56[2] + (fRec56[0] + (2 * fRec56[1])));
			fVec9[0] = fTemp9;
			fRec55[0] = ((fConst284 * fRec55[1]) + (fConst283 * (fVec9[0] + fVec9[1])));
			fRec54[0] = (fRec55[0] - (fConst217 * ((fConst216 * fRec54[2]) + (fConst211 * fRec54[1]))));
			fRec53[0] = ((fConst217 * (fRec54[2] + (fRec54[0] + (2 * fRec54[1])))) - (fConst215 * ((fConst213 * fRec53[2]) + (fConst211 * fRec53[1]))));
			float fTemp10 = (fRec53[2] + (fRec53[0] + (2 * fRec53[1])));
			fVec10[0] = fTemp10;
			fRec52[0] = ((fConst287 * fRec52[1]) + (fConst286 * (fVec10[0] + fVec10[1])));
			fRec51[0] = (fRec52[0] - (fConst208 * ((fConst207 * fRec51[2]) + (fConst202 * fRec51[1]))));
			fRec50[0] = ((fConst208 * (fRec51[2] + (fRec51[0] + (2 * fRec51[1])))) - (fConst206 * ((fConst204 * fRec50[2]) + (fConst202 * fRec50[1]))));
			float fTemp11 = (fRec50[2] + (fRec50[0] + (2 * fRec50[1])));
			fVec11[0] = fTemp11;
			fRec49[0] = ((fConst290 * fRec49[1]) + (fConst289 * (fVec11[0] + fVec11[1])));
			fRec48[0] = (fRec49[0] - (fConst199 * ((fConst198 * fRec48[2]) + (fConst193 * fRec48[1]))));
			fRec47[0] = ((fConst199 * (fRec48[2] + (fRec48[0] + (2 * fRec48[1])))) - (fConst197 * ((fConst195 * fRec47[2]) + (fConst193 * fRec47[1]))));
			float fTemp12 = (fRec47[2] + (fRec47[0] + (2 * fRec47[1])));
			fVec12[0] = fTemp12;
			fRec46[0] = ((fConst293 * fRec46[1]) + (fConst292 * (fVec12[0] + fVec12[1])));
			fRec45[0] = (fRec46[0] - (fConst190 * ((fConst189 * fRec45[2]) + (fConst185 * fRec45[1]))));
			fRec44[0] = ((fConst190 * (fRec45[2] + (fRec45[0] + (2 * fRec45[1])))) - (fConst188 * ((fConst187 * fRec44[2]) + (fConst185 * fRec44[1]))));
			fRec78[0] = ((0.999f * fRec78[1]) + fSlow15);
			fRec81[0] = ((fConst293 * fRec81[1]) + (fConst292 * ((fConst186 * fVec12[0]) + (fConst294 * fVec12[1]))));
			fRec80[0] = (fRec81[0] - (fConst190 * ((fConst189 * fRec80[2]) + (fConst185 * fRec80[1]))));
			fRec79[0] = ((fConst190 * (((fConst184 * fRec80[0]) + (fConst295 * fRec80[1])) + (fConst184 * fRec80[2]))) - (fConst188 * ((fConst187 * fRec79[2]) + (fConst185 * fRec79[1]))));
			fRec82[0] = ((0.999f * fRec82[1]) + fSlow16);
			float fTemp13 = (fConst185 * fRec83[1]);
			fRec86[0] = ((fConst290 * fRec86[1]) + (fConst289 * ((fConst194 * fVec11[0]) + (fConst298 * fVec11[1]))));
			fRec85[0] = (fRec86[0] - (fConst199 * ((fConst198 * fRec85[2]) + (fConst193 * fRec85[1]))));
			fRec84[0] = ((fConst199 * (((fConst192 * fRec85[0]) + (fConst299 * fRec85[1])) + (fConst192 * fRec85[2]))) - (fConst197 * ((fConst195 * fRec84[2]) + (fConst193 * fRec84[1]))));
			fRec83[0] = ((fConst197 * (((fConst192 * fRec84[0]) + (fConst299 * fRec84[1])) + (fConst192 * fRec84[2]))) - (fConst297 * ((fConst296 * fRec83[2]) + fTemp13)));
			fRec87[0] = ((0.999f * fRec87[1]) + fSlow17);
			float fTemp14 = (fConst193 * fRec88[1]);
			float fTemp15 = (fConst185 * fRec89[1]);
			fRec92[0] = ((fConst287 * fRec92[1]) + (fConst286 * ((fConst203 * fVec10[0]) + (fConst302 * fVec10[1]))));
			fRec91[0] = (fRec92[0] - (fConst208 * ((fConst207 * fRec91[2]) + (fConst202 * fRec91[1]))));
			fRec90[0] = ((fConst208 * (((fConst201 * fRec91[0]) + (fConst303 * fRec91[1])) + (fConst201 * fRec91[2]))) - (fConst206 * ((fConst204 * fRec90[2]) + (fConst202 * fRec90[1]))));
			fRec89[0] = ((fConst206 * (((fConst201 * fRec90[0]) + (fConst303 * fRec90[1])) + (fConst201 * fRec90[2]))) - (fConst297 * ((fConst296 * fRec89[2]) + fTemp15)));
			fRec88[0] = ((fRec89[2] + (fConst297 * (fTemp15 + (fConst296 * fRec89[0])))) - (fConst301 * ((fConst300 * fRec88[2]) + fTemp14)));
			fRec93[0] = ((0.999f * fRec93[1]) + fSlow18);
			float fTemp16 = (fConst202 * fRec94[1]);
			float fTemp17 = (fConst193 * fRec95[1]);
			float fTemp18 = (fConst185 * fRec96[1]);
			fRec99[0] = ((fConst284 * fRec99[1]) + (fConst283 * ((fConst212 * fVec9[0]) + (fConst306 * fVec9[1]))));
			fRec98[0] = (fRec99[0] - (fConst217 * ((fConst216 * fRec98[2]) + (fConst211 * fRec98[1]))));
			fRec97[0] = ((fConst217 * (((fConst210 * fRec98[0]) + (fConst307 * fRec98[1])) + (fConst210 * fRec98[2]))) - (fConst215 * ((fConst213 * fRec97[2]) + (fConst211 * fRec97[1]))));
			fRec96[0] = ((fConst215 * (((fConst210 * fRec97[0]) + (fConst307 * fRec97[1])) + (fConst210 * fRec97[2]))) - (fConst297 * ((fConst296 * fRec96[2]) + fTemp18)));
			fRec95[0] = ((fRec96[2] + (fConst297 * (fTemp18 + (fConst296 * fRec96[0])))) - (fConst301 * ((fConst300 * fRec95[2]) + fTemp17)));
			fRec94[0] = ((fRec95[2] + (fConst301 * (fTemp17 + (fConst300 * fRec95[0])))) - (fConst305 * ((fConst304 * fRec94[2]) + fTemp16)));
			fRec100[0] = ((0.999f * fRec100[1]) + fSlow19);
			float fTemp19 = (fConst211 * fRec101[1]);
			float fTemp20 = (fConst202 * fRec102[1]);
			float fTemp21 = (fConst193 * fRec103[1]);
			float fTemp22 = (fConst185 * fRec104[1]);
			fRec107[0] = ((fConst281 * fRec107[1]) + (fConst280 * ((fConst221 * fVec8[0]) + (fConst310 * fVec8[1]))));
			fRec106[0] = (fRec107[0] - (fConst226 * ((fConst225 * fRec106[2]) + (fConst220 * fRec106[1]))));
			fRec105[0] = ((fConst226 * (((fConst219 * fRec106[0]) + (fConst311 * fRec106[1])) + (fConst219 * fRec106[2]))) - (fConst224 * ((fConst222 * fRec105[2]) + (fConst220 * fRec105[1]))));
			fRec104[0] = ((fConst224 * (((fConst219 * fRec105[0]) + (fConst311 * fRec105[1])) + (fConst219 * fRec105[2]))) - (fConst297 * ((fConst296 * fRec104[2]) + fTemp22)));
			fRec103[0] = ((fRec104[2] + (fConst297 * (fTemp22 + (fConst296 * fRec104[0])))) - (fConst301 * ((fConst300 * fRec103[2]) + fTemp21)));
			fRec102[0] = ((fRec103[2] + (fConst301 * (fTemp21 + (fConst300 * fRec103[0])))) - (fConst305 * ((fConst304 * fRec102[2]) + fTemp20)));
			fRec101[0] = ((fRec102[2] + (fConst305 * (fTemp20 + (fConst304 * fRec102[0])))) - (fConst309 * ((fConst308 * fRec101[2]) + fTemp19)));
			fRec108[0] = ((0.999f * fRec108[1]) + fSlow20);
			float fTemp23 = (fConst220 * fRec109[1]);
			float fTemp24 = (fConst211 * fRec110[1]);
			float fTemp25 = (fConst202 * fRec111[1]);
			float fTemp26 = (fConst193 * fRec112[1]);
			float fTemp27 = (fConst185 * fRec113[1]);
			fRec116[0] = ((fConst278 * fRec116[1]) + (fConst277 * ((fConst230 * fVec7[0]) + (fConst314 * fVec7[1]))));
			fRec115[0] = (fRec116[0] - (fConst235 * ((fConst234 * fRec115[2]) + (fConst229 * fRec115[1]))));
			fRec114[0] = ((fConst235 * (((fConst228 * fRec115[0]) + (fConst315 * fRec115[1])) + (fConst228 * fRec115[2]))) - (fConst233 * ((fConst231 * fRec114[2]) + (fConst229 * fRec114[1]))));
			fRec113[0] = ((fConst233 * (((fConst228 * fRec114[0]) + (fConst315 * fRec114[1])) + (fConst228 * fRec114[2]))) - (fConst297 * ((fConst296 * fRec113[2]) + fTemp27)));
			fRec112[0] = ((fRec113[2] + (fConst297 * (fTemp27 + (fConst296 * fRec113[0])))) - (fConst301 * ((fConst300 * fRec112[2]) + fTemp26)));
			fRec111[0] = ((fRec112[2] + (fConst301 * (fTemp26 + (fConst300 * fRec112[0])))) - (fConst305 * ((fConst304 * fRec111[2]) + fTemp25)));
			fRec110[0] = ((fRec111[2] + (fConst305 * (fTemp25 + (fConst304 * fRec111[0])))) - (fConst309 * ((fConst308 * fRec110[2]) + fTemp24)));
			fRec109[0] = ((fRec110[2] + (fConst309 * (fTemp24 + (fConst308 * fRec110[0])))) - (fConst313 * ((fConst312 * fRec109[2]) + fTemp23)));
			fRec117[0] = ((0.999f * fRec117[1]) + fSlow21);
			float fTemp28 = (fConst229 * fRec118[1]);
			float fTemp29 = (fConst220 * fRec119[1]);
			float fTemp30 = (fConst211 * fRec120[1]);
			float fTemp31 = (fConst202 * fRec121[1]);
			float fTemp32 = (fConst193 * fRec122[1]);
			float fTemp33 = (fConst185 * fRec123[1]);
			fRec126[0] = ((fConst275 * fRec126[1]) + (fConst274 * ((fConst239 * fVec6[0]) + (fConst318 * fVec6[1]))));
			fRec125[0] = (fRec126[0] - (fConst244 * ((fConst243 * fRec125[2]) + (fConst238 * fRec125[1]))));
			fRec124[0] = ((fConst244 * (((fConst237 * fRec125[0]) + (fConst319 * fRec125[1])) + (fConst237 * fRec125[2]))) - (fConst242 * ((fConst240 * fRec124[2]) + (fConst238 * fRec124[1]))));
			fRec123[0] = ((fConst242 * (((fConst237 * fRec124[0]) + (fConst319 * fRec124[1])) + (fConst237 * fRec124[2]))) - (fConst297 * ((fConst296 * fRec123[2]) + fTemp33)));
			fRec122[0] = ((fRec123[2] + (fConst297 * (fTemp33 + (fConst296 * fRec123[0])))) - (fConst301 * ((fConst300 * fRec122[2]) + fTemp32)));
			fRec121[0] = ((fRec122[2] + (fConst301 * (fTemp32 + (fConst300 * fRec122[0])))) - (fConst305 * ((fConst304 * fRec121[2]) + fTemp31)));
			fRec120[0] = ((fRec121[2] + (fConst305 * (fTemp31 + (fConst304 * fRec121[0])))) - (fConst309 * ((fConst308 * fRec120[2]) + fTemp30)));
			fRec119[0] = ((fRec120[2] + (fConst309 * (fTemp30 + (fConst308 * fRec120[0])))) - (fConst313 * ((fConst312 * fRec119[2]) + fTemp29)));
			fRec118[0] = ((fRec119[2] + (fConst313 * (fTemp29 + (fConst312 * fRec119[0])))) - (fConst317 * ((fConst316 * fRec118[2]) + fTemp28)));
			fRec127[0] = ((0.999f * fRec127[1]) + fSlow22);
			float fTemp34 = (fConst238 * fRec128[1]);
			float fTemp35 = (fConst229 * fRec129[1]);
			float fTemp36 = (fConst220 * fRec130[1]);
			float fTemp37 = (fConst211 * fRec131[1]);
			float fTemp38 = (fConst202 * fRec132[1]);
			float fTemp39 = (fConst193 * fRec133[1]);
			float fTemp40 = (fConst185 * fRec134[1]);
			fRec137[0] = ((fConst272 * fRec137[1]) + (fConst271 * ((fConst248 * fVec5[0]) + (fConst322 * fVec5[1]))));
			fRec136[0] = (fRec137[0] - (fConst253 * ((fConst252 * fRec136[2]) + (fConst247 * fRec136[1]))));
			fRec135[0] = ((fConst253 * (((fConst246 * fRec136[0]) + (fConst323 * fRec136[1])) + (fConst246 * fRec136[2]))) - (fConst251 * ((fConst249 * fRec135[2]) + (fConst247 * fRec135[1]))));
			fRec134[0] = ((fConst251 * (((fConst246 * fRec135[0]) + (fConst323 * fRec135[1])) + (fConst246 * fRec135[2]))) - (fConst297 * ((fConst296 * fRec134[2]) + fTemp40)));
			fRec133[0] = ((fRec134[2] + (fConst297 * (fTemp40 + (fConst296 * fRec134[0])))) - (fConst301 * ((fConst300 * fRec133[2]) + fTemp39)));
			fRec132[0] = ((fRec133[2] + (fConst301 * (fTemp39 + (fConst300 * fRec133[0])))) - (fConst305 * ((fConst304 * fRec132[2]) + fTemp38)));
			fRec131[0] = ((fRec132[2] + (fConst305 * (fTemp38 + (fConst304 * fRec132[0])))) - (fConst309 * ((fConst308 * fRec131[2]) + fTemp37)));
			fRec130[0] = ((fRec131[2] + (fConst309 * (fTemp37 + (fConst308 * fRec131[0])))) - (fConst313 * ((fConst312 * fRec130[2]) + fTemp36)));
			fRec129[0] = ((fRec130[2] + (fConst313 * (fTemp36 + (fConst312 * fRec130[0])))) - (fConst317 * ((fConst316 * fRec129[2]) + fTemp35)));
			fRec128[0] = ((fRec129[2] + (fConst317 * (fTemp35 + (fConst316 * fRec129[0])))) - (fConst321 * ((fConst320 * fRec128[2]) + fTemp34)));
			fRec138[0] = ((0.999f * fRec138[1]) + fSlow23);
			float fTemp41 = (fConst247 * fRec139[1]);
			float fTemp42 = (fConst238 * fRec140[1]);
			float fTemp43 = (fConst229 * fRec141[1]);
			float fTemp44 = (fConst220 * fRec142[1]);
			float fTemp45 = (fConst211 * fRec143[1]);
			float fTemp46 = (fConst202 * fRec144[1]);
			float fTemp47 = (fConst193 * fRec145[1]);
			float fTemp48 = (fConst185 * fRec146[1]);
			fRec149[0] = ((fConst269 * fRec149[1]) + (fConst268 * ((fConst257 * fVec4[0]) + (fConst326 * fVec4[1]))));
			fRec148[0] = (fRec149[0] - (fConst262 * ((fConst261 * fRec148[2]) + (fConst256 * fRec148[1]))));
			fRec147[0] = ((fConst262 * (((fConst255 * fRec148[0]) + (fConst327 * fRec148[1])) + (fConst255 * fRec148[2]))) - (fConst260 * ((fConst258 * fRec147[2]) + (fConst256 * fRec147[1]))));
			fRec146[0] = ((fConst260 * (((fConst255 * fRec147[0]) + (fConst327 * fRec147[1])) + (fConst255 * fRec147[2]))) - (fConst297 * ((fConst296 * fRec146[2]) + fTemp48)));
			fRec145[0] = ((fRec146[2] + (fConst297 * (fTemp48 + (fConst296 * fRec146[0])))) - (fConst301 * ((fConst300 * fRec145[2]) + fTemp47)));
			fRec144[0] = ((fRec145[2] + (fConst301 * (fTemp47 + (fConst300 * fRec145[0])))) - (fConst305 * ((fConst304 * fRec144[2]) + fTemp46)));
			fRec143[0] = ((fRec144[2] + (fConst305 * (fTemp46 + (fConst304 * fRec144[0])))) - (fConst309 * ((fConst308 * fRec143[2]) + fTemp45)));
			fRec142[0] = ((fRec143[2] + (fConst309 * (fTemp45 + (fConst308 * fRec143[0])))) - (fConst313 * ((fConst312 * fRec142[2]) + fTemp44)));
			fRec141[0] = ((fRec142[2] + (fConst313 * (fTemp44 + (fConst312 * fRec142[0])))) - (fConst317 * ((fConst316 * fRec141[2]) + fTemp43)));
			fRec140[0] = ((fRec141[2] + (fConst317 * (fTemp43 + (fConst316 * fRec141[0])))) - (fConst321 * ((fConst320 * fRec140[2]) + fTemp42)));
			fRec139[0] = ((fRec140[2] + (fConst321 * (fTemp42 + (fConst320 * fRec140[0])))) - (fConst325 * ((fConst324 * fRec139[2]) + fTemp41)));
			float fTemp49 = ((iSlow14)?fTemp3:((((((((((fRec139[2] + (fConst325 * (fTemp41 + (fConst324 * fRec139[0])))) * powf(10,(0.05f * fRec138[0]))) + ((fRec128[2] + (fConst321 * (fTemp34 + (fConst320 * fRec128[0])))) * powf(10,(0.05f * fRec127[0])))) + ((fRec118[2] + (fConst317 * (fTemp28 + (fConst316 * fRec118[0])))) * powf(10,(0.05f * fRec117[0])))) + ((fRec109[2] + (fConst313 * (fTemp23 + (fConst312 * fRec109[0])))) * powf(10,(0.05f * fRec108[0])))) + ((fRec101[2] + (fConst309 * (fTemp19 + (fConst308 * fRec101[0])))) * powf(10,(0.05f * fRec100[0])))) + ((fRec94[2] + (fConst305 * (fTemp16 + (fConst304 * fRec94[0])))) * powf(10,(0.05f * fRec93[0])))) + ((fRec88[2] + (fConst301 * (fTemp14 + (fConst300 * fRec88[0])))) * powf(10,(0.05f * fRec87[0])))) + ((fRec83[2] + (fConst297 * (fTemp13 + (fConst296 * fRec83[0])))) * powf(10,(0.05f * fRec82[0])))) + (fConst188 * (((((fConst184 * fRec79[0]) + (fConst295 * fRec79[1])) + (fConst184 * fRec79[2])) * powf(10,(0.05f * fRec78[0]))) + ((fRec44[2] + (fRec44[0] + (2 * fRec44[1]))) * powf(10,(0.05f * fRec43[0])))))));
			fRec42[0] = (fTemp49 - (fConst182 * ((fConst181 * fRec42[2]) + (fConst180 * fRec42[1]))));
			fRec41[0] = ((fConst182 * (((fConst329 * fRec42[0]) + (fConst330 * fRec42[1])) + (fConst329 * fRec42[2]))) - (fConst179 * ((fConst178 * fRec41[2]) + (fConst177 * fRec41[1]))));
			fRec40[0] = ((fConst179 * (((fConst331 * fRec41[0]) + (fConst332 * fRec41[1])) + (fConst331 * fRec41[2]))) - (fConst176 * ((fConst175 * fRec40[2]) + (fConst173 * fRec40[1]))));
			float fTemp50 = (fConst176 * (((fConst333 * fRec40[0]) + (fConst334 * fRec40[1])) + (fConst333 * fRec40[2])));
			fRec39[0] = (fTemp50 - (fConst169 * ((fConst168 * fRec39[2]) + (fConst167 * fRec39[1]))));
			fRec38[0] = ((fConst169 * (((fConst336 * fRec39[0]) + (fConst337 * fRec39[1])) + (fConst336 * fRec39[2]))) - (fConst166 * ((fConst165 * fRec38[2]) + (fConst164 * fRec38[1]))));
			fRec37[0] = ((fConst166 * (((fConst338 * fRec38[0]) + (fConst339 * fRec38[1])) + (fConst338 * fRec38[2]))) - (fConst163 * ((fConst162 * fRec37[2]) + (fConst160 * fRec37[1]))));
			float fTemp51 = (fConst163 * (((fConst340 * fRec37[0]) + (fConst341 * fRec37[1])) + (fConst340 * fRec37[2])));
			fRec36[0] = (fTemp51 - (fConst156 * ((fConst155 * fRec36[2]) + (fConst154 * fRec36[1]))));
			fRec35[0] = ((fConst156 * (((fConst343 * fRec36[0]) + (fConst344 * fRec36[1])) + (fConst343 * fRec36[2]))) - (fConst153 * ((fConst152 * fRec35[2]) + (fConst151 * fRec35[1]))));
			fRec34[0] = ((fConst153 * (((fConst345 * fRec35[0]) + (fConst346 * fRec35[1])) + (fConst345 * fRec35[2]))) - (fConst150 * ((fConst149 * fRec34[2]) + (fConst147 * fRec34[1]))));
			float fTemp52 = (fConst150 * (((fConst347 * fRec34[0]) + (fConst348 * fRec34[1])) + (fConst347 * fRec34[2])));
			fRec33[0] = (fTemp52 - (fConst143 * ((fConst142 * fRec33[2]) + (fConst141 * fRec33[1]))));
			fRec32[0] = ((fConst143 * (((fConst350 * fRec33[0]) + (fConst351 * fRec33[1])) + (fConst350 * fRec33[2]))) - (fConst140 * ((fConst139 * fRec32[2]) + (fConst138 * fRec32[1]))));
			fRec31[0] = ((fConst140 * (((fConst352 * fRec32[0]) + (fConst353 * fRec32[1])) + (fConst352 * fRec32[2]))) - (fConst137 * ((fConst136 * fRec31[2]) + (fConst134 * fRec31[1]))));
			float fTemp53 = (fConst137 * (((fConst354 * fRec31[0]) + (fConst355 * fRec31[1])) + (fConst354 * fRec31[2])));
			fRec30[0] = (fTemp53 - (fConst130 * ((fConst129 * fRec30[2]) + (fConst128 * fRec30[1]))));
			fRec29[0] = ((fConst130 * (((fConst357 * fRec30[0]) + (fConst358 * fRec30[1])) + (fConst357 * fRec30[2]))) - (fConst127 * ((fConst126 * fRec29[2]) + (fConst125 * fRec29[1]))));
			fRec28[0] = ((fConst127 * (((fConst359 * fRec29[0]) + (fConst360 * fRec29[1])) + (fConst359 * fRec29[2]))) - (fConst124 * ((fConst123 * fRec28[2]) + (fConst121 * fRec28[1]))));
			float fTemp54 = (fConst124 * (((fConst361 * fRec28[0]) + (fConst362 * fRec28[1])) + (fConst361 * fRec28[2])));
			fRec27[0] = (fTemp54 - (fConst117 * ((fConst116 * fRec27[2]) + (fConst115 * fRec27[1]))));
			fRec26[0] = ((fConst117 * (((fConst364 * fRec27[0]) + (fConst365 * fRec27[1])) + (fConst364 * fRec27[2]))) - (fConst114 * ((fConst113 * fRec26[2]) + (fConst112 * fRec26[1]))));
			fRec25[0] = ((fConst114 * (((fConst366 * fRec26[0]) + (fConst367 * fRec26[1])) + (fConst366 * fRec26[2]))) - (fConst111 * ((fConst110 * fRec25[2]) + (fConst108 * fRec25[1]))));
			float fTemp55 = (fConst111 * (((fConst368 * fRec25[0]) + (fConst369 * fRec25[1])) + (fConst368 * fRec25[2])));
			fRec24[0] = (fTemp55 - (fConst104 * ((fConst103 * fRec24[2]) + (fConst102 * fRec24[1]))));
			fRec23[0] = ((fConst104 * (((fConst371 * fRec24[0]) + (fConst372 * fRec24[1])) + (fConst371 * fRec24[2]))) - (fConst101 * ((fConst100 * fRec23[2]) + (fConst99 * fRec23[1]))));
			fRec22[0] = ((fConst101 * (((fConst373 * fRec23[0]) + (fConst374 * fRec23[1])) + (fConst373 * fRec23[2]))) - (fConst98 * ((fConst97 * fRec22[2]) + (fConst95 * fRec22[1]))));
			float fTemp56 = (fConst98 * (((fConst375 * fRec22[0]) + (fConst376 * fRec22[1])) + (fConst375 * fRec22[2])));
			fRec21[0] = (fTemp56 - (fConst91 * ((fConst90 * fRec21[2]) + (fConst89 * fRec21[1]))));
			fRec20[0] = ((fConst91 * (((fConst378 * fRec21[0]) + (fConst379 * fRec21[1])) + (fConst378 * fRec21[2]))) - (fConst88 * ((fConst87 * fRec20[2]) + (fConst86 * fRec20[1]))));
			fRec19[0] = ((fConst88 * (((fConst380 * fRec20[0]) + (fConst381 * fRec20[1])) + (fConst380 * fRec20[2]))) - (fConst85 * ((fConst84 * fRec19[2]) + (fConst82 * fRec19[1]))));
			float fTemp57 = (fConst85 * (((fConst382 * fRec19[0]) + (fConst383 * fRec19[1])) + (fConst382 * fRec19[2])));
			fRec18[0] = (fTemp57 - (fConst78 * ((fConst77 * fRec18[2]) + (fConst76 * fRec18[1]))));
			fRec17[0] = ((fConst78 * (((fConst385 * fRec18[0]) + (fConst386 * fRec18[1])) + (fConst385 * fRec18[2]))) - (fConst75 * ((fConst74 * fRec17[2]) + (fConst73 * fRec17[1]))));
			fRec16[0] = ((fConst75 * (((fConst387 * fRec17[0]) + (fConst388 * fRec17[1])) + (fConst387 * fRec17[2]))) - (fConst72 * ((fConst71 * fRec16[2]) + (fConst69 * fRec16[1]))));
			float fTemp58 = (fConst72 * (((fConst389 * fRec16[0]) + (fConst390 * fRec16[1])) + (fConst389 * fRec16[2])));
			fRec15[0] = (fTemp58 - (fConst65 * ((fConst64 * fRec15[2]) + (fConst63 * fRec15[1]))));
			fRec14[0] = ((fConst65 * (((fConst392 * fRec15[0]) + (fConst393 * fRec15[1])) + (fConst392 * fRec15[2]))) - (fConst62 * ((fConst61 * fRec14[2]) + (fConst60 * fRec14[1]))));
			fRec13[0] = ((fConst62 * (((fConst394 * fRec14[0]) + (fConst395 * fRec14[1])) + (fConst394 * fRec14[2]))) - (fConst59 * ((fConst58 * fRec13[2]) + (fConst56 * fRec13[1]))));
			float fTemp59 = (fConst59 * (((fConst396 * fRec13[0]) + (fConst397 * fRec13[1])) + (fConst396 * fRec13[2])));
			fRec12[0] = (fTemp59 - (fConst52 * ((fConst51 * fRec12[2]) + (fConst50 * fRec12[1]))));
			fRec11[0] = ((fConst52 * (((fConst399 * fRec12[0]) + (fConst400 * fRec12[1])) + (fConst399 * fRec12[2]))) - (fConst49 * ((fConst48 * fRec11[2]) + (fConst47 * fRec11[1]))));
			fRec10[0] = ((fConst49 * (((fConst401 * fRec11[0]) + (fConst402 * fRec11[1])) + (fConst401 * fRec11[2]))) - (fConst46 * ((fConst45 * fRec10[2]) + (fConst43 * fRec10[1]))));
			float fTemp60 = (fConst46 * (((fConst403 * fRec10[0]) + (fConst404 * fRec10[1])) + (fConst403 * fRec10[2])));
			fRec9[0] = (fTemp60 - (fConst39 * ((fConst38 * fRec9[2]) + (fConst37 * fRec9[1]))));
			fRec8[0] = ((fConst39 * (((fConst406 * fRec9[0]) + (fConst407 * fRec9[1])) + (fConst406 * fRec9[2]))) - (fConst36 * ((fConst35 * fRec8[2]) + (fConst34 * fRec8[1]))));
			fRec7[0] = ((fConst36 * (((fConst408 * fRec8[0]) + (fConst409 * fRec8[1])) + (fConst408 * fRec8[2]))) - (fConst33 * ((fConst32 * fRec7[2]) + (fConst30 * fRec7[1]))));
			float fTemp61 = (fConst33 * (((fConst410 * fRec7[0]) + (fConst411 * fRec7[1])) + (fConst410 * fRec7[2])));
			fRec6[0] = (fTemp61 - (fConst26 * ((fConst25 * fRec6[2]) + (fConst24 * fRec6[1]))));
			fRec5[0] = ((fConst26 * (((fConst413 * fRec6[0]) + (fConst414 * fRec6[1])) + (fConst413 * fRec6[2]))) - (fConst23 * ((fConst22 * fRec5[2]) + (fConst21 * fRec5[1]))));
			fRec4[0] = ((fConst23 * (((fConst415 * fRec5[0]) + (fConst416 * fRec5[1])) + (fConst415 * fRec5[2]))) - (fConst20 * ((fConst19 * fRec4[2]) + (fConst17 * fRec4[1]))));
			float fTemp62 = (fConst20 * (((fConst417 * fRec4[0]) + (fConst418 * fRec4[1])) + (fConst417 * fRec4[2])));
			fRec3[0] = (fTemp62 - (fConst13 * ((fConst12 * fRec3[2]) + (fConst11 * fRec3[1]))));
			fRec2[0] = ((fConst13 * (((fConst420 * fRec3[0]) + (fConst421 * fRec3[1])) + (fConst420 * fRec3[2]))) - (fConst10 * ((fConst9 * fRec2[2]) + (fConst8 * fRec2[1]))));
			fRec1[0] = ((fConst10 * (((fConst422 * fRec2[0]) + (fConst423 * fRec2[1])) + (fConst422 * fRec2[2]))) - (fConst7 * ((fConst6 * fRec1[2]) + (fConst4 * fRec1[1]))));
			fRec0[0] = ((fSlow24 * fRec0[1]) + (fSlow25 * fabsf((fConst7 * (((fConst424 * fRec1[0]) + (fConst425 * fRec1[1])) + (fConst424 * fRec1[2]))))));
			fbargraph0 = (fSlow26 + (20 * log10f(fRec0[0])));
			fRec153[0] = (fTemp62 - (fConst435 * ((fConst434 * fRec153[2]) + (fConst433 * fRec153[1]))));
			fRec152[0] = ((fConst435 * (((fConst437 * fRec153[0]) + (fConst438 * fRec153[1])) + (fConst437 * fRec153[2]))) - (fConst432 * ((fConst431 * fRec152[2]) + (fConst430 * fRec152[1]))));
			fRec151[0] = ((fConst432 * (((fConst440 * fRec152[0]) + (fConst441 * fRec152[1])) + (fConst440 * fRec152[2]))) - (fConst429 * ((fConst428 * fRec151[2]) + (fConst427 * fRec151[1]))));
			fRec150[0] = ((fSlow24 * fRec150[1]) + (fSlow25 * fabsf((fConst429 * (((fConst443 * fRec151[0]) + (fConst444 * fRec151[1])) + (fConst443 * fRec151[2]))))));
			fbargraph1 = (fSlow26 + (20 * log10f(fRec150[0])));
			fRec157[0] = (fTemp61 - (fConst453 * ((fConst452 * fRec157[2]) + (fConst451 * fRec157[1]))));
			fRec156[0] = ((fConst453 * (((fConst455 * fRec157[0]) + (fConst456 * fRec157[1])) + (fConst455 * fRec157[2]))) - (fConst450 * ((fConst449 * fRec156[2]) + (fConst448 * fRec156[1]))));
			fRec155[0] = ((fConst450 * (((fConst458 * fRec156[0]) + (fConst459 * fRec156[1])) + (fConst458 * fRec156[2]))) - (fConst447 * ((fConst446 * fRec155[2]) + (fConst445 * fRec155[1]))));
			fRec154[0] = ((fSlow24 * fRec154[1]) + (fSlow25 * fabsf((fConst447 * (((fConst461 * fRec155[0]) + (fConst462 * fRec155[1])) + (fConst461 * fRec155[2]))))));
			fbargraph2 = (fSlow26 + (20 * log10f(fRec154[0])));
			fRec161[0] = (fTemp60 - (fConst471 * ((fConst470 * fRec161[2]) + (fConst469 * fRec161[1]))));
			fRec160[0] = ((fConst471 * (((fConst473 * fRec161[0]) + (fConst474 * fRec161[1])) + (fConst473 * fRec161[2]))) - (fConst468 * ((fConst467 * fRec160[2]) + (fConst466 * fRec160[1]))));
			fRec159[0] = ((fConst468 * (((fConst476 * fRec160[0]) + (fConst477 * fRec160[1])) + (fConst476 * fRec160[2]))) - (fConst465 * ((fConst464 * fRec159[2]) + (fConst463 * fRec159[1]))));
			fRec158[0] = ((fSlow24 * fRec158[1]) + (fSlow25 * fabsf((fConst465 * (((fConst479 * fRec159[0]) + (fConst480 * fRec159[1])) + (fConst479 * fRec159[2]))))));
			fbargraph3 = (fSlow26 + (20 * log10f(fRec158[0])));
			fRec165[0] = (fTemp59 - (fConst489 * ((fConst488 * fRec165[2]) + (fConst487 * fRec165[1]))));
			fRec164[0] = ((fConst489 * (((fConst491 * fRec165[0]) + (fConst492 * fRec165[1])) + (fConst491 * fRec165[2]))) - (fConst486 * ((fConst485 * fRec164[2]) + (fConst484 * fRec164[1]))));
			fRec163[0] = ((fConst486 * (((fConst494 * fRec164[0]) + (fConst495 * fRec164[1])) + (fConst494 * fRec164[2]))) - (fConst483 * ((fConst482 * fRec163[2]) + (fConst481 * fRec163[1]))));
			fRec162[0] = ((fSlow24 * fRec162[1]) + (fSlow25 * fabsf((fConst483 * (((fConst497 * fRec163[0]) + (fConst498 * fRec163[1])) + (fConst497 * fRec163[2]))))));
			fbargraph4 = (fSlow26 + (20 * log10f(fRec162[0])));
			fRec169[0] = (fTemp58 - (fConst507 * ((fConst506 * fRec169[2]) + (fConst505 * fRec169[1]))));
			fRec168[0] = ((fConst507 * (((fConst509 * fRec169[0]) + (fConst510 * fRec169[1])) + (fConst509 * fRec169[2]))) - (fConst504 * ((fConst503 * fRec168[2]) + (fConst502 * fRec168[1]))));
			fRec167[0] = ((fConst504 * (((fConst512 * fRec168[0]) + (fConst513 * fRec168[1])) + (fConst512 * fRec168[2]))) - (fConst501 * ((fConst500 * fRec167[2]) + (fConst499 * fRec167[1]))));
			fRec166[0] = ((fSlow24 * fRec166[1]) + (fSlow25 * fabsf((fConst501 * (((fConst515 * fRec167[0]) + (fConst516 * fRec167[1])) + (fConst515 * fRec167[2]))))));
			fbargraph5 = (fSlow26 + (20 * log10f(fRec166[0])));
			fRec173[0] = (fTemp57 - (fConst525 * ((fConst524 * fRec173[2]) + (fConst523 * fRec173[1]))));
			fRec172[0] = ((fConst525 * (((fConst527 * fRec173[0]) + (fConst528 * fRec173[1])) + (fConst527 * fRec173[2]))) - (fConst522 * ((fConst521 * fRec172[2]) + (fConst520 * fRec172[1]))));
			fRec171[0] = ((fConst522 * (((fConst530 * fRec172[0]) + (fConst531 * fRec172[1])) + (fConst530 * fRec172[2]))) - (fConst519 * ((fConst518 * fRec171[2]) + (fConst517 * fRec171[1]))));
			fRec170[0] = ((fSlow24 * fRec170[1]) + (fSlow25 * fabsf((fConst519 * (((fConst533 * fRec171[0]) + (fConst534 * fRec171[1])) + (fConst533 * fRec171[2]))))));
			fbargraph6 = (fSlow26 + (20 * log10f(fRec170[0])));
			fRec177[0] = (fTemp56 - (fConst543 * ((fConst542 * fRec177[2]) + (fConst541 * fRec177[1]))));
			fRec176[0] = ((fConst543 * (((fConst545 * fRec177[0]) + (fConst546 * fRec177[1])) + (fConst545 * fRec177[2]))) - (fConst540 * ((fConst539 * fRec176[2]) + (fConst538 * fRec176[1]))));
			fRec175[0] = ((fConst540 * (((fConst548 * fRec176[0]) + (fConst549 * fRec176[1])) + (fConst548 * fRec176[2]))) - (fConst537 * ((fConst536 * fRec175[2]) + (fConst535 * fRec175[1]))));
			fRec174[0] = ((fSlow24 * fRec174[1]) + (fSlow25 * fabsf((fConst537 * (((fConst551 * fRec175[0]) + (fConst552 * fRec175[1])) + (fConst551 * fRec175[2]))))));
			fbargraph7 = (fSlow26 + (20 * log10f(fRec174[0])));
			fRec181[0] = (fTemp55 - (fConst561 * ((fConst560 * fRec181[2]) + (fConst559 * fRec181[1]))));
			fRec180[0] = ((fConst561 * (((fConst563 * fRec181[0]) + (fConst564 * fRec181[1])) + (fConst563 * fRec181[2]))) - (fConst558 * ((fConst557 * fRec180[2]) + (fConst556 * fRec180[1]))));
			fRec179[0] = ((fConst558 * (((fConst566 * fRec180[0]) + (fConst567 * fRec180[1])) + (fConst566 * fRec180[2]))) - (fConst555 * ((fConst554 * fRec179[2]) + (fConst553 * fRec179[1]))));
			fRec178[0] = ((fSlow24 * fRec178[1]) + (fSlow25 * fabsf((fConst555 * (((fConst569 * fRec179[0]) + (fConst570 * fRec179[1])) + (fConst569 * fRec179[2]))))));
			fbargraph8 = (fSlow26 + (20 * log10f(fRec178[0])));
			fRec185[0] = (fTemp54 - (fConst579 * ((fConst578 * fRec185[2]) + (fConst577 * fRec185[1]))));
			fRec184[0] = ((fConst579 * (((fConst581 * fRec185[0]) + (fConst582 * fRec185[1])) + (fConst581 * fRec185[2]))) - (fConst576 * ((fConst575 * fRec184[2]) + (fConst574 * fRec184[1]))));
			fRec183[0] = ((fConst576 * (((fConst584 * fRec184[0]) + (fConst585 * fRec184[1])) + (fConst584 * fRec184[2]))) - (fConst573 * ((fConst572 * fRec183[2]) + (fConst571 * fRec183[1]))));
			fRec182[0] = ((fSlow24 * fRec182[1]) + (fSlow25 * fabsf((fConst573 * (((fConst587 * fRec183[0]) + (fConst588 * fRec183[1])) + (fConst587 * fRec183[2]))))));
			fbargraph9 = (fSlow26 + (20 * log10f(fRec182[0])));
			fRec189[0] = (fTemp53 - (fConst597 * ((fConst596 * fRec189[2]) + (fConst595 * fRec189[1]))));
			fRec188[0] = ((fConst597 * (((fConst599 * fRec189[0]) + (fConst600 * fRec189[1])) + (fConst599 * fRec189[2]))) - (fConst594 * ((fConst593 * fRec188[2]) + (fConst592 * fRec188[1]))));
			fRec187[0] = ((fConst594 * (((fConst602 * fRec188[0]) + (fConst603 * fRec188[1])) + (fConst602 * fRec188[2]))) - (fConst591 * ((fConst590 * fRec187[2]) + (fConst589 * fRec187[1]))));
			fRec186[0] = ((fSlow24 * fRec186[1]) + (fSlow25 * fabsf((fConst591 * (((fConst605 * fRec187[0]) + (fConst606 * fRec187[1])) + (fConst605 * fRec187[2]))))));
			fbargraph10 = (fSlow26 + (20 * log10f(fRec186[0])));
			fRec193[0] = (fTemp52 - (fConst615 * ((fConst614 * fRec193[2]) + (fConst613 * fRec193[1]))));
			fRec192[0] = ((fConst615 * (((fConst617 * fRec193[0]) + (fConst618 * fRec193[1])) + (fConst617 * fRec193[2]))) - (fConst612 * ((fConst611 * fRec192[2]) + (fConst610 * fRec192[1]))));
			fRec191[0] = ((fConst612 * (((fConst620 * fRec192[0]) + (fConst621 * fRec192[1])) + (fConst620 * fRec192[2]))) - (fConst609 * ((fConst608 * fRec191[2]) + (fConst607 * fRec191[1]))));
			fRec190[0] = ((fSlow24 * fRec190[1]) + (fSlow25 * fabsf((fConst609 * (((fConst623 * fRec191[0]) + (fConst624 * fRec191[1])) + (fConst623 * fRec191[2]))))));
			fbargraph11 = (fSlow26 + (20 * log10f(fRec190[0])));
			fRec197[0] = (fTemp51 - (fConst633 * ((fConst632 * fRec197[2]) + (fConst631 * fRec197[1]))));
			fRec196[0] = ((fConst633 * (((fConst635 * fRec197[0]) + (fConst636 * fRec197[1])) + (fConst635 * fRec197[2]))) - (fConst630 * ((fConst629 * fRec196[2]) + (fConst628 * fRec196[1]))));
			fRec195[0] = ((fConst630 * (((fConst638 * fRec196[0]) + (fConst639 * fRec196[1])) + (fConst638 * fRec196[2]))) - (fConst627 * ((fConst626 * fRec195[2]) + (fConst625 * fRec195[1]))));
			fRec194[0] = ((fSlow24 * fRec194[1]) + (fSlow25 * fabsf((fConst627 * (((fConst641 * fRec195[0]) + (fConst642 * fRec195[1])) + (fConst641 * fRec195[2]))))));
			fbargraph12 = (fSlow26 + (20 * log10f(fRec194[0])));
			fRec201[0] = (fTemp50 - (fConst651 * ((fConst650 * fRec201[2]) + (fConst649 * fRec201[1]))));
			fRec200[0] = ((fConst651 * (((fConst653 * fRec201[0]) + (fConst654 * fRec201[1])) + (fConst653 * fRec201[2]))) - (fConst648 * ((fConst647 * fRec200[2]) + (fConst646 * fRec200[1]))));
			fRec199[0] = ((fConst648 * (((fConst656 * fRec200[0]) + (fConst657 * fRec200[1])) + (fConst656 * fRec200[2]))) - (fConst645 * ((fConst644 * fRec199[2]) + (fConst643 * fRec199[1]))));
			fRec198[0] = ((fSlow24 * fRec198[1]) + (fSlow25 * fabsf((fConst645 * (((fConst659 * fRec199[0]) + (fConst660 * fRec199[1])) + (fConst659 * fRec199[2]))))));
			fbargraph13 = (fSlow26 + (20 * log10f(fRec198[0])));
			fRec205[0] = (fTemp49 - (fConst669 * ((fConst668 * fRec205[2]) + (fConst667 * fRec205[1]))));
			fRec204[0] = ((fConst669 * (((fConst671 * fRec205[0]) + (fConst672 * fRec205[1])) + (fConst671 * fRec205[2]))) - (fConst666 * ((fConst665 * fRec204[2]) + (fConst664 * fRec204[1]))));
			fRec203[0] = ((fConst666 * (((fConst674 * fRec204[0]) + (fConst675 * fRec204[1])) + (fConst674 * fRec204[2]))) - (fConst663 * ((fConst662 * fRec203[2]) + (fConst661 * fRec203[1]))));
			fRec202[0] = ((fSlow24 * fRec202[1]) + (fSlow25 * fabsf((fConst663 * (((fConst677 * fRec203[0]) + (fConst678 * fRec203[1])) + (fConst677 * fRec203[2]))))));
			fbargraph14 = (fSlow26 + (20 * log10f(fRec202[0])));
			float fTemp63 = fTemp49;
			output0[i] = (FAUSTFLOAT)fTemp63;
			output1[i] = (FAUSTFLOAT)fTemp63;
			// post processing
			fRec202[1] = fRec202[0];
			fRec203[2] = fRec203[1]; fRec203[1] = fRec203[0];
			fRec204[2] = fRec204[1]; fRec204[1] = fRec204[0];
			fRec205[2] = fRec205[1]; fRec205[1] = fRec205[0];
			fRec198[1] = fRec198[0];
			fRec199[2] = fRec199[1]; fRec199[1] = fRec199[0];
			fRec200[2] = fRec200[1]; fRec200[1] = fRec200[0];
			fRec201[2] = fRec201[1]; fRec201[1] = fRec201[0];
			fRec194[1] = fRec194[0];
			fRec195[2] = fRec195[1]; fRec195[1] = fRec195[0];
			fRec196[2] = fRec196[1]; fRec196[1] = fRec196[0];
			fRec197[2] = fRec197[1]; fRec197[1] = fRec197[0];
			fRec190[1] = fRec190[0];
			fRec191[2] = fRec191[1]; fRec191[1] = fRec191[0];
			fRec192[2] = fRec192[1]; fRec192[1] = fRec192[0];
			fRec193[2] = fRec193[1]; fRec193[1] = fRec193[0];
			fRec186[1] = fRec186[0];
			fRec187[2] = fRec187[1]; fRec187[1] = fRec187[0];
			fRec188[2] = fRec188[1]; fRec188[1] = fRec188[0];
			fRec189[2] = fRec189[1]; fRec189[1] = fRec189[0];
			fRec182[1] = fRec182[0];
			fRec183[2] = fRec183[1]; fRec183[1] = fRec183[0];
			fRec184[2] = fRec184[1]; fRec184[1] = fRec184[0];
			fRec185[2] = fRec185[1]; fRec185[1] = fRec185[0];
			fRec178[1] = fRec178[0];
			fRec179[2] = fRec179[1]; fRec179[1] = fRec179[0];
			fRec180[2] = fRec180[1]; fRec180[1] = fRec180[0];
			fRec181[2] = fRec181[1]; fRec181[1] = fRec181[0];
			fRec174[1] = fRec174[0];
			fRec175[2] = fRec175[1]; fRec175[1] = fRec175[0];
			fRec176[2] = fRec176[1]; fRec176[1] = fRec176[0];
			fRec177[2] = fRec177[1]; fRec177[1] = fRec177[0];
			fRec170[1] = fRec170[0];
			fRec171[2] = fRec171[1]; fRec171[1] = fRec171[0];
			fRec172[2] = fRec172[1]; fRec172[1] = fRec172[0];
			fRec173[2] = fRec173[1]; fRec173[1] = fRec173[0];
			fRec166[1] = fRec166[0];
			fRec167[2] = fRec167[1]; fRec167[1] = fRec167[0];
			fRec168[2] = fRec168[1]; fRec168[1] = fRec168[0];
			fRec169[2] = fRec169[1]; fRec169[1] = fRec169[0];
			fRec162[1] = fRec162[0];
			fRec163[2] = fRec163[1]; fRec163[1] = fRec163[0];
			fRec164[2] = fRec164[1]; fRec164[1] = fRec164[0];
			fRec165[2] = fRec165[1]; fRec165[1] = fRec165[0];
			fRec158[1] = fRec158[0];
			fRec159[2] = fRec159[1]; fRec159[1] = fRec159[0];
			fRec160[2] = fRec160[1]; fRec160[1] = fRec160[0];
			fRec161[2] = fRec161[1]; fRec161[1] = fRec161[0];
			fRec154[1] = fRec154[0];
			fRec155[2] = fRec155[1]; fRec155[1] = fRec155[0];
			fRec156[2] = fRec156[1]; fRec156[1] = fRec156[0];
			fRec157[2] = fRec157[1]; fRec157[1] = fRec157[0];
			fRec150[1] = fRec150[0];
			fRec151[2] = fRec151[1]; fRec151[1] = fRec151[0];
			fRec152[2] = fRec152[1]; fRec152[1] = fRec152[0];
			fRec153[2] = fRec153[1]; fRec153[1] = fRec153[0];
			fRec0[1] = fRec0[0];
			fRec1[2] = fRec1[1]; fRec1[1] = fRec1[0];
			fRec2[2] = fRec2[1]; fRec2[1] = fRec2[0];
			fRec3[2] = fRec3[1]; fRec3[1] = fRec3[0];
			fRec4[2] = fRec4[1]; fRec4[1] = fRec4[0];
			fRec5[2] = fRec5[1]; fRec5[1] = fRec5[0];
			fRec6[2] = fRec6[1]; fRec6[1] = fRec6[0];
			fRec7[2] = fRec7[1]; fRec7[1] = fRec7[0];
			fRec8[2] = fRec8[1]; fRec8[1] = fRec8[0];
			fRec9[2] = fRec9[1]; fRec9[1] = fRec9[0];
			fRec10[2] = fRec10[1]; fRec10[1] = fRec10[0];
			fRec11[2] = fRec11[1]; fRec11[1] = fRec11[0];
			fRec12[2] = fRec12[1]; fRec12[1] = fRec12[0];
			fRec13[2] = fRec13[1]; fRec13[1] = fRec13[0];
			fRec14[2] = fRec14[1]; fRec14[1] = fRec14[0];
			fRec15[2] = fRec15[1]; fRec15[1] = fRec15[0];
			fRec16[2] = fRec16[1]; fRec16[1] = fRec16[0];
			fRec17[2] = fRec17[1]; fRec17[1] = fRec17[0];
			fRec18[2] = fRec18[1]; fRec18[1] = fRec18[0];
			fRec19[2] = fRec19[1]; fRec19[1] = fRec19[0];
			fRec20[2] = fRec20[1]; fRec20[1] = fRec20[0];
			fRec21[2] = fRec21[1]; fRec21[1] = fRec21[0];
			fRec22[2] = fRec22[1]; fRec22[1] = fRec22[0];
			fRec23[2] = fRec23[1]; fRec23[1] = fRec23[0];
			fRec24[2] = fRec24[1]; fRec24[1] = fRec24[0];
			fRec25[2] = fRec25[1]; fRec25[1] = fRec25[0];
			fRec26[2] = fRec26[1]; fRec26[1] = fRec26[0];
			fRec27[2] = fRec27[1]; fRec27[1] = fRec27[0];
			fRec28[2] = fRec28[1]; fRec28[1] = fRec28[0];
			fRec29[2] = fRec29[1]; fRec29[1] = fRec29[0];
			fRec30[2] = fRec30[1]; fRec30[1] = fRec30[0];
			fRec31[2] = fRec31[1]; fRec31[1] = fRec31[0];
			fRec32[2] = fRec32[1]; fRec32[1] = fRec32[0];
			fRec33[2] = fRec33[1]; fRec33[1] = fRec33[0];
			fRec34[2] = fRec34[1]; fRec34[1] = fRec34[0];
			fRec35[2] = fRec35[1]; fRec35[1] = fRec35[0];
			fRec36[2] = fRec36[1]; fRec36[1] = fRec36[0];
			fRec37[2] = fRec37[1]; fRec37[1] = fRec37[0];
			fRec38[2] = fRec38[1]; fRec38[1] = fRec38[0];
			fRec39[2] = fRec39[1]; fRec39[1] = fRec39[0];
			fRec40[2] = fRec40[1]; fRec40[1] = fRec40[0];
			fRec41[2] = fRec41[1]; fRec41[1] = fRec41[0];
			fRec42[2] = fRec42[1]; fRec42[1] = fRec42[0];
			fRec139[2] = fRec139[1]; fRec139[1] = fRec139[0];
			fRec140[2] = fRec140[1]; fRec140[1] = fRec140[0];
			fRec141[2] = fRec141[1]; fRec141[1] = fRec141[0];
			fRec142[2] = fRec142[1]; fRec142[1] = fRec142[0];
			fRec143[2] = fRec143[1]; fRec143[1] = fRec143[0];
			fRec144[2] = fRec144[1]; fRec144[1] = fRec144[0];
			fRec145[2] = fRec145[1]; fRec145[1] = fRec145[0];
			fRec146[2] = fRec146[1]; fRec146[1] = fRec146[0];
			fRec147[2] = fRec147[1]; fRec147[1] = fRec147[0];
			fRec148[2] = fRec148[1]; fRec148[1] = fRec148[0];
			fRec149[1] = fRec149[0];
			fRec138[1] = fRec138[0];
			fRec128[2] = fRec128[1]; fRec128[1] = fRec128[0];
			fRec129[2] = fRec129[1]; fRec129[1] = fRec129[0];
			fRec130[2] = fRec130[1]; fRec130[1] = fRec130[0];
			fRec131[2] = fRec131[1]; fRec131[1] = fRec131[0];
			fRec132[2] = fRec132[1]; fRec132[1] = fRec132[0];
			fRec133[2] = fRec133[1]; fRec133[1] = fRec133[0];
			fRec134[2] = fRec134[1]; fRec134[1] = fRec134[0];
			fRec135[2] = fRec135[1]; fRec135[1] = fRec135[0];
			fRec136[2] = fRec136[1]; fRec136[1] = fRec136[0];
			fRec137[1] = fRec137[0];
			fRec127[1] = fRec127[0];
			fRec118[2] = fRec118[1]; fRec118[1] = fRec118[0];
			fRec119[2] = fRec119[1]; fRec119[1] = fRec119[0];
			fRec120[2] = fRec120[1]; fRec120[1] = fRec120[0];
			fRec121[2] = fRec121[1]; fRec121[1] = fRec121[0];
			fRec122[2] = fRec122[1]; fRec122[1] = fRec122[0];
			fRec123[2] = fRec123[1]; fRec123[1] = fRec123[0];
			fRec124[2] = fRec124[1]; fRec124[1] = fRec124[0];
			fRec125[2] = fRec125[1]; fRec125[1] = fRec125[0];
			fRec126[1] = fRec126[0];
			fRec117[1] = fRec117[0];
			fRec109[2] = fRec109[1]; fRec109[1] = fRec109[0];
			fRec110[2] = fRec110[1]; fRec110[1] = fRec110[0];
			fRec111[2] = fRec111[1]; fRec111[1] = fRec111[0];
			fRec112[2] = fRec112[1]; fRec112[1] = fRec112[0];
			fRec113[2] = fRec113[1]; fRec113[1] = fRec113[0];
			fRec114[2] = fRec114[1]; fRec114[1] = fRec114[0];
			fRec115[2] = fRec115[1]; fRec115[1] = fRec115[0];
			fRec116[1] = fRec116[0];
			fRec108[1] = fRec108[0];
			fRec101[2] = fRec101[1]; fRec101[1] = fRec101[0];
			fRec102[2] = fRec102[1]; fRec102[1] = fRec102[0];
			fRec103[2] = fRec103[1]; fRec103[1] = fRec103[0];
			fRec104[2] = fRec104[1]; fRec104[1] = fRec104[0];
			fRec105[2] = fRec105[1]; fRec105[1] = fRec105[0];
			fRec106[2] = fRec106[1]; fRec106[1] = fRec106[0];
			fRec107[1] = fRec107[0];
			fRec100[1] = fRec100[0];
			fRec94[2] = fRec94[1]; fRec94[1] = fRec94[0];
			fRec95[2] = fRec95[1]; fRec95[1] = fRec95[0];
			fRec96[2] = fRec96[1]; fRec96[1] = fRec96[0];
			fRec97[2] = fRec97[1]; fRec97[1] = fRec97[0];
			fRec98[2] = fRec98[1]; fRec98[1] = fRec98[0];
			fRec99[1] = fRec99[0];
			fRec93[1] = fRec93[0];
			fRec88[2] = fRec88[1]; fRec88[1] = fRec88[0];
			fRec89[2] = fRec89[1]; fRec89[1] = fRec89[0];
			fRec90[2] = fRec90[1]; fRec90[1] = fRec90[0];
			fRec91[2] = fRec91[1]; fRec91[1] = fRec91[0];
			fRec92[1] = fRec92[0];
			fRec87[1] = fRec87[0];
			fRec83[2] = fRec83[1]; fRec83[1] = fRec83[0];
			fRec84[2] = fRec84[1]; fRec84[1] = fRec84[0];
			fRec85[2] = fRec85[1]; fRec85[1] = fRec85[0];
			fRec86[1] = fRec86[0];
			fRec82[1] = fRec82[0];
			fRec79[2] = fRec79[1]; fRec79[1] = fRec79[0];
			fRec80[2] = fRec80[1]; fRec80[1] = fRec80[0];
			fRec81[1] = fRec81[0];
			fRec78[1] = fRec78[0];
			fRec44[2] = fRec44[1]; fRec44[1] = fRec44[0];
			fRec45[2] = fRec45[1]; fRec45[1] = fRec45[0];
			fRec46[1] = fRec46[0];
			fVec12[1] = fVec12[0];
			fRec47[2] = fRec47[1]; fRec47[1] = fRec47[0];
			fRec48[2] = fRec48[1]; fRec48[1] = fRec48[0];
			fRec49[1] = fRec49[0];
			fVec11[1] = fVec11[0];
			fRec50[2] = fRec50[1]; fRec50[1] = fRec50[0];
			fRec51[2] = fRec51[1]; fRec51[1] = fRec51[0];
			fRec52[1] = fRec52[0];
			fVec10[1] = fVec10[0];
			fRec53[2] = fRec53[1]; fRec53[1] = fRec53[0];
			fRec54[2] = fRec54[1]; fRec54[1] = fRec54[0];
			fRec55[1] = fRec55[0];
			fVec9[1] = fVec9[0];
			fRec56[2] = fRec56[1]; fRec56[1] = fRec56[0];
			fRec57[2] = fRec57[1]; fRec57[1] = fRec57[0];
			fRec58[1] = fRec58[0];
			fVec8[1] = fVec8[0];
			fRec59[2] = fRec59[1]; fRec59[1] = fRec59[0];
			fRec60[2] = fRec60[1]; fRec60[1] = fRec60[0];
			fRec61[1] = fRec61[0];
			fVec7[1] = fVec7[0];
			fRec62[2] = fRec62[1]; fRec62[1] = fRec62[0];
			fRec63[2] = fRec63[1]; fRec63[1] = fRec63[0];
			fRec64[1] = fRec64[0];
			fVec6[1] = fVec6[0];
			fRec65[2] = fRec65[1]; fRec65[1] = fRec65[0];
			fRec66[2] = fRec66[1]; fRec66[1] = fRec66[0];
			fRec67[1] = fRec67[0];
			fVec5[1] = fVec5[0];
			fRec68[2] = fRec68[1]; fRec68[1] = fRec68[0];
			fRec69[2] = fRec69[1]; fRec69[1] = fRec69[0];
			fRec70[1] = fRec70[0];
			fVec4[1] = fVec4[0];
			for (int i=3; i>0; i--) fRec76[i] = fRec76[i-1];
			iRec77[1] = iRec77[0];
			fRec75[1] = fRec75[0];
			fVec3[1] = fVec3[0];
			fVec2[1] = fVec2[0];
			fRec74[1] = fRec74[0];
			fVec1[1] = fVec1[0];
			fRec73[1] = fRec73[0];
			fVec0[1] = fVec0[0];
			fRec72[1] = fRec72[0];
			fRec71[1] = fRec71[0];
			fRec43[1] = fRec43[0];
		}
	}
};


