#!/bin/bash

OSCDEFS=""
#####################################################################
#                                                                   #
#               Compiles Faust programs to alsa-gtk                 #
#               (c) Grame, 2009-2011                                #
#                                                                   #
#####################################################################

. faustpath

# base directory for tools

BASE_DIR="/opt/rpicrosstool"

#-------------------------------------------------------------------
# Default compilation flags for gcc and icc :
#

#CXXFLAGS="-Wall -g -D_debug_ -D_DEBUG_"
CXXFLAGS="-O3 -march=armv6zk -mcpu=arm1176jzf-s -mtune=arm1176jzf-s -mfpu=vfp -mfloat-abi=hard -ffast-math -ftree-vectorize"
#-------------------------------------------------------------------
# Kernel Sources Dir

LINUX_KERNEL_INSTALL_DIR="$BASE_DIR/x-tools/arm-unknown-linux-gnueabi/arm-unknown-linux-gnueabi"



#-------------------------------------------------------------------
# Analyze command arguments :
# faust options                 -> OPTIONS
# if -omp : -openmp or -fopenmp -> OPENMP
# existing *.dsp files          -> FILES
#

# Toolchain cross-compilation for Raspberry Pi

CXX=$BASE_DIR"/x-tools/arm-unknown-linux-gnueabi/bin/arm-unknown-linux-gnueabi-c++"


# Librairies and includes directories for Rapsberry Pi


LD_LIBRARY_PATHS="-L$LINUX_KERNEL_INSTALL_DIR/lib/ -lasound -ljacknet"
INCLUDES_DIR="-I$LINUX_KERNEL_INSTALL_DIR/include/"


#-------------------------------------------------------------------
# Analyze command arguments :
# faust options                 -> OPTIONS
# existing *.dsp files          -> FILES
#

for p in $@; do
    if [ $p = "-osc" ]; then
	 OSCDEFS="-DOSCCTRL -L$FAUSTLIB -lOSCFaust -loscpack"
    elif [ $p = "-httpd" ]; then
	 HTTPDEFS="-DHTTPCTRL -L$FAUSTLIB -lHTTPDFaust -lmicrohttpd"
    elif [ ${p:0:1} = "-" ]; then
	    OPTIONS="$OPTIONS $p"
	elif [[ -e "$p" ]]; then
	    FILES="$FILES $p"
	else
	    OPTIONS="$OPTIONS $p"
	fi
done

#-------------------------------------------------------------------
# create, update, and remove the necessary links and cache for use by the 
# run-time linker, ld.so to  the  most  recent  shared libraries  found
# in the directories specified on the command line
#

sudo ldconfig

#-------------------------------------------------------------------
# compile the *.dsp files
#
for f in $FILES; do
    faust -a netjack-console.cpp $OPTIONS $f -o $f.cpp
    $CXX $CXXFLAGS $OMP "$f.cpp" $LD_LIBRARY_PATHS $INCLUDES_DIR $PROCARCH $OSCDEFS $HTTPDEFS -o "${f%.dsp}" 
    rm $f.cpp

    # collect binary file name for FaustGIDE
    BINARIES="$BINARIES${f%.dsp}$EXT;"
done

echo $BINARIES

